/****** TABLE: [t_edfi].[AcademicHonorCategoryType] ******/

CREATE TABLE [t_edfi].[AcademicHonorCategoryType]
(
    [tid_AcademicHonorCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_AcademicHonorCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_AcademicHonorCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AcademicHonorCategoryType] ADD CONSTRAINT [AcademicHonorCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AcademicHonorCategoryType] ADD CONSTRAINT [AcademicHonorCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AcademicHonorCategoryType] ADD CONSTRAINT [AcademicHonorCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A designation of the type of academic distinctions earned by or awarded to the student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AcademicHonorCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicHonorCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AcademicHonorCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicHonorCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AcademicHonorCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicHonorCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AcademicSubjectDescriptor] ******/

CREATE TABLE [t_edfi].[AcademicSubjectDescriptor]
(
    [tid_AcademicSubjectDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AcademicSubjectDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AcademicSubjectDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AcademicSubjectDescriptor] ADD CONSTRAINT [AcademicSubjectDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AcademicSubjectDescriptor] ADD CONSTRAINT [AcademicSubjectDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AcademicSubjectDescriptor] ADD CONSTRAINT [AcademicSubjectDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAcademicSubjectDescriptor_Id ON [t_edfi].[AcademicSubjectDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AcademicSubjectDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AcademicSubjectDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AcademicSubjectDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AcademicSubjectDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AcademicSubjectDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AcademicSubjectDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AcademicSubjectDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AcademicSubjectDescriptor])
REFERENCES [t_edfi].[AcademicSubjectDescriptor] ([tid_AcademicSubjectDescriptor]);
ALTER TABLE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AcademicSubjectDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AcademicSubjectType] ******/

CREATE TABLE [t_edfi].[AcademicSubjectType]
(
	[tid_AcademicSubjectType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AcademicSubjectType] PRIMARY KEY NONCLUSTERED
(
	[tid_AcademicSubjectType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AcademicSubjectType] ADD CONSTRAINT [AcademicSubjectType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AcademicSubjectType] ADD CONSTRAINT [AcademicSubjectType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AcademicSubjectType] ADD CONSTRAINT [AcademicSubjectType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AcademicSubject type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AcademicSubject type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicSubjectType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AcademicWeek] ******/

CREATE TABLE [t_edfi].[AcademicWeek]
(
    [tid_AcademicWeek] [INT] IDENTITY(1,1) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[WeekIdentifier] [NVARCHAR](80) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EndDate] [DATE] NOT NULL,
	[TotalInstructionalDays] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AcademicWeek] PRIMARY KEY NONCLUSTERED
(
    [tid_AcademicWeek] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AcademicWeek] ADD CONSTRAINT [AcademicWeek_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AcademicWeek] ADD CONSTRAINT [AcademicWeek_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AcademicWeek] ADD CONSTRAINT [AcademicWeek_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the academic weeks for a school year, optionally captured to support analyses.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AcademicWeek';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school label for the week.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'WeekIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The start date for the academic week.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the academic week.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total instructional days during the academic week.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'TotalInstructionalDays';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAcademicWeek_Id ON [t_edfi].[AcademicWeek]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AcademicWeekSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AcademicWeekSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AcademicWeek] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AcademicWeekSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AcademicWeek], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AcademicWeekSnapshotRecord] ADD CONSTRAINT [FK_AcademicWeekSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AcademicWeekSnapshotRecord] CHECK CONSTRAINT [FK_AcademicWeekSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AcademicWeekSnapshotRecord] ADD CONSTRAINT [FK_AcademicWeekSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AcademicWeek])
REFERENCES [t_edfi].[AcademicWeek] ([tid_AcademicWeek]);
ALTER TABLE [t_edfi].[AcademicWeekSnapshotRecord] CHECK CONSTRAINT [FK_AcademicWeekSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[AccommodationDescriptor] ******/

CREATE TABLE [t_edfi].[AccommodationDescriptor]
(
    [tid_AccommodationDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AccommodationType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccommodationDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AccommodationDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccommodationDescriptor] ADD CONSTRAINT [AccommodationDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AccommodationDescriptor] ADD CONSTRAINT [AccommodationDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AccommodationDescriptor] ADD CONSTRAINT [AccommodationDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines variations used in how an assessment is presented or taken.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AccommodationDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationDescriptor', @level2type=N'COLUMN', @level2name=N'AccommodationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAccommodationDescriptor_Id ON [t_edfi].[AccommodationDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AccommodationDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AccommodationDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AccommodationDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccommodationDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AccommodationDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccommodationDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AccommodationDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AccommodationDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AccommodationDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AccommodationDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AccommodationDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AccommodationDescriptor])
REFERENCES [t_edfi].[AccommodationDescriptor] ([tid_AccommodationDescriptor]);
ALTER TABLE [t_edfi].[AccommodationDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AccommodationDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AccommodationType] ******/

CREATE TABLE [t_edfi].[AccommodationType]
(
	[tid_AccommodationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AccommodationType] PRIMARY KEY NONCLUSTERED
(
	[tid_AccommodationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccommodationType] ADD CONSTRAINT [AccommodationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AccommodationType] ADD CONSTRAINT [AccommodationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AccommodationType] ADD CONSTRAINT [AccommodationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The variations used in how an assessment is presented or taken.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AccommodationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Accommodation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Accommodation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccommodationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Account] ******/

CREATE TABLE [t_edfi].[Account]
(
    [tid_Account] [INT] IDENTITY(1,1) NOT NULL,
	[AccountNumber] [NVARCHAR](50) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FiscalYear] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Account] PRIMARY KEY NONCLUSTERED
(
    [tid_Account] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Account] ADD CONSTRAINT [Account_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Account] ADD CONSTRAINT [Account_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Account] ADD CONSTRAINT [Account_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents a funding source combined with its purpose and type of transaction. It provides a formal record of the debits and credits relating to the specific account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Account';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Account', @level2type=N'COLUMN', @level2name=N'AccountNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Account', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Account', @level2type=N'COLUMN', @level2name=N'FiscalYear';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAccount_Id ON [t_edfi].[Account]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AccountSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AccountSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Account] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccountSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Account], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccountSnapshotRecord] ADD CONSTRAINT [FK_AccountSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AccountSnapshotRecord] CHECK CONSTRAINT [FK_AccountSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AccountSnapshotRecord] ADD CONSTRAINT [FK_AccountSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Account])
REFERENCES [t_edfi].[Account] ([tid_Account]);
ALTER TABLE [t_edfi].[AccountSnapshotRecord] CHECK CONSTRAINT [FK_AccountSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AccountCode] ******/

CREATE TABLE [t_edfi].[AccountCode]
(
	[tid_AccountCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Account] [INT] NOT NULL,
	[AccountCodeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AccountCodeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccountCode] PRIMARY KEY NONCLUSTERED
(
	[tid_AccountCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccountCode] ADD CONSTRAINT [AccountCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AccountCode] ADD CONSTRAINT [FK_AccountCode_ParentTable] FOREIGN KEY ([tid_Account])
REFERENCES [t_edfi].[Account] ([tid_Account]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AccountCode] CHECK CONSTRAINT [FK_AccountCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AccountCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCode', @level2type=N'COLUMN', @level2name=N'AccountCodeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCode', @level2type=N'COLUMN', @level2name=N'AccountCodeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[AccountExtension] ******/

CREATE TABLE [t_extension].[AccountExtension]
(
	[tid_AccountExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Account] [INT] NOT NULL,
	[ActualPurchaseOrderCarryForwardCurrentYear] [MONEY] NULL,
	[ActualCurrentYear] [MONEY] NULL,
	[CarryForwardCurrentYear] [MONEY] NULL,
	[CarryForwardTransferCurrentYear] [MONEY] NULL,
	[EncumbPurchaseOrderCarryForwardCurrentYear] [MONEY] NULL,
	[EncumbranceCurrentYear] [MONEY] NULL,
	[LongDescription] [NVARCHAR](30) NULL,
	[RequisitionCurrentYear] [MONEY] NULL,
	[RevisedCurrentYear] [MONEY] NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccountExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_AccountExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AccountExtension] ADD CONSTRAINT [FK_AccountExtension_ParentTable] FOREIGN KEY ([tid_Account])
REFERENCES [t_edfi].[Account] ([tid_Account]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AccountExtension] CHECK CONSTRAINT [FK_AccountExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AccountExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Actual purchase order carry-forward current year.  Actual expenses paid on carry forward PO in current year', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'ActualPurchaseOrderCarryForwardCurrentYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'CurrentYear and Carry Forward expenses in Current Year', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'ActualCurrentYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Amount of Carry Forward PO''s carried into current year', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'CarryForwardCurrentYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Carry forward transfers done in the current year', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'CarryForwardTransferCurrentYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Amount of carry forward PO''s currently encumbered in current year', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'EncumbPurchaseOrderCarryForwardCurrentYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current year encumbrance.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'EncumbranceCurrentYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Long description of the account', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'LongDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current year RQ''s', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'RequisitionCurrentYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current year revised budget', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AccountExtension', @level2type=N'COLUMN', @level2name=N'RevisedCurrentYear';
GO
/****** TABLE: [t_edfi].[AccountabilityRating] ******/

CREATE TABLE [t_edfi].[AccountabilityRating]
(
    [tid_AccountabilityRating] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[RatingTitle] [NVARCHAR](60) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[Rating] [NVARCHAR](35) NOT NULL,
	[RatingDate] [DATE] NULL,
	[RatingOrganization] [NVARCHAR](35) NULL,
	[RatingProgram] [NVARCHAR](30) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccountabilityRating] PRIMARY KEY NONCLUSTERED
(
    [tid_AccountabilityRating] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccountabilityRating] ADD CONSTRAINT [AccountabilityRating_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AccountabilityRating] ADD CONSTRAINT [AccountabilityRating_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AccountabilityRating] ADD CONSTRAINT [AccountabilityRating_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An accountability rating for a school or district.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the rating (e.g., School Rating, Safety Score).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the AccountabilityRating is assessed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An accountability rating level, designation, or assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'Rating';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the rating was awarded.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization that assessed the rating.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingOrganization';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The program associated with the AccountabilityRating (e.g., NCLB, AEIS).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingProgram';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAccountabilityRating_Id ON [t_edfi].[AccountabilityRating]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AccountabilityRatingSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AccountabilityRatingSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AccountabilityRating] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccountabilityRatingSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AccountabilityRating], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccountabilityRatingSnapshotRecord] ADD CONSTRAINT [FK_AccountabilityRatingSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AccountabilityRatingSnapshotRecord] CHECK CONSTRAINT [FK_AccountabilityRatingSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AccountabilityRatingSnapshotRecord] ADD CONSTRAINT [FK_AccountabilityRatingSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AccountabilityRating])
REFERENCES [t_edfi].[AccountabilityRating] ([tid_AccountabilityRating]);
ALTER TABLE [t_edfi].[AccountabilityRatingSnapshotRecord] CHECK CONSTRAINT [FK_AccountabilityRatingSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[AccountCodeDescriptor] ******/

CREATE TABLE [t_edfi].[AccountCodeDescriptor]
(
    [tid_AccountCodeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AccountCodeCategory] [NVARCHAR](20) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccountCodeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AccountCodeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccountCodeDescriptor] ADD CONSTRAINT [AccountCodeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AccountCodeDescriptor] ADD CONSTRAINT [AccountCodeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AccountCodeDescriptor] ADD CONSTRAINT [AccountCodeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AccountCodeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the account code (e.g., fund, function, object).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'AccountCodeCategory';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the account code is valid.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the account code is valid.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAccountCodeDescriptor_Id ON [t_edfi].[AccountCodeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AccountCodeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AccountCodeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AccountCodeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AccountCodeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AccountCodeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AccountCodeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AccountCodeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AccountCodeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AccountCodeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AccountCodeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AccountCodeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AccountCodeDescriptor])
REFERENCES [t_edfi].[AccountCodeDescriptor] ([tid_AccountCodeDescriptor]);
ALTER TABLE [t_edfi].[AccountCodeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AccountCodeDescriptorSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[AchievementCategoryDescriptor] ******/

CREATE TABLE [t_edfi].[AchievementCategoryDescriptor]
(
    [tid_AchievementCategoryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AchievementCategoryType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AchievementCategoryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AchievementCategoryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AchievementCategoryDescriptor] ADD CONSTRAINT [AchievementCategoryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AchievementCategoryDescriptor] ADD CONSTRAINT [AchievementCategoryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AchievementCategoryDescriptor] ADD CONSTRAINT [AchievementCategoryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the category of achievement attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAchievementCategoryDescriptor_Id ON [t_edfi].[AchievementCategoryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AchievementCategoryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AchievementCategoryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AchievementCategoryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AchievementCategoryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AchievementCategoryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AchievementCategoryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AchievementCategoryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AchievementCategoryDescriptor])
REFERENCES [t_edfi].[AchievementCategoryDescriptor] ([tid_AchievementCategoryDescriptor]);
ALTER TABLE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AchievementCategoryDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AchievementCategoryType] ******/

CREATE TABLE [t_edfi].[AchievementCategoryType]
(
	[tid_AchievementCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AchievementCategoryType] PRIMARY KEY NONCLUSTERED
(
	[tid_AchievementCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AchievementCategoryType] ADD CONSTRAINT [AchievementCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AchievementCategoryType] ADD CONSTRAINT [AchievementCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AchievementCategoryType] ADD CONSTRAINT [AchievementCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of achievement attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AchievementCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AchievementCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AchievementCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Actual] ******/

CREATE TABLE [t_edfi].[Actual]
(
    [tid_Actual] [INT] IDENTITY(1,1) NOT NULL,
	[AccountNumber] [NVARCHAR](50) NOT NULL,
	[AsOfDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FiscalYear] [INT] NOT NULL,
	[AmountToDate] [MONEY] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Actual] PRIMARY KEY NONCLUSTERED
(
    [tid_Actual] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Actual] ADD CONSTRAINT [Actual_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Actual] ADD CONSTRAINT [Actual_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Actual] ADD CONSTRAINT [Actual_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the sum of the financial transactions to date relating to a specific account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Actual';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'AccountNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported actual element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'AsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'FiscalYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current balance for the account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'AmountToDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TActual_Id ON [t_edfi].[Actual]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ActualSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ActualSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Actual] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ActualSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Actual], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ActualSnapshotRecord] ADD CONSTRAINT [FK_ActualSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ActualSnapshotRecord] CHECK CONSTRAINT [FK_ActualSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ActualSnapshotRecord] ADD CONSTRAINT [FK_ActualSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Actual])
REFERENCES [t_edfi].[Actual] ([tid_Actual]);
ALTER TABLE [t_edfi].[ActualSnapshotRecord] CHECK CONSTRAINT [FK_ActualSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[AdditionalCreditType] ******/

CREATE TABLE [t_edfi].[AdditionalCreditType]
(
    [tid_AdditionalCreditType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_AdditionalCreditType] PRIMARY KEY NONCLUSTERED
(
    [tid_AdditionalCreditType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AdditionalCreditType] ADD CONSTRAINT [AdditionalCreditType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AdditionalCreditType] ADD CONSTRAINT [AdditionalCreditType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AdditionalCreditType] ADD CONSTRAINT [AdditionalCreditType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of additional credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AdditionalCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdditionalCreditType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AdditionalCredit type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdditionalCreditType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AdditionalCredit type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdditionalCreditType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AddressType] ******/

CREATE TABLE [t_edfi].[AddressType]
(
    [tid_AddressType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_AddressType] PRIMARY KEY NONCLUSTERED
(
    [tid_AddressType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AddressType] ADD CONSTRAINT [AddressType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AddressType] ADD CONSTRAINT [AddressType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AddressType] ADD CONSTRAINT [AddressType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AddressType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Address type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AddressType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Address type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AddressType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AdministrationEnvironmentType] ******/

CREATE TABLE [t_edfi].[AdministrationEnvironmentType]
(
    [tid_AdministrationEnvironmentType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_AdministrationEnvironmentType] PRIMARY KEY NONCLUSTERED
(
    [tid_AdministrationEnvironmentType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AdministrationEnvironmentType] ADD CONSTRAINT [AdministrationEnvironmentType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AdministrationEnvironmentType] ADD CONSTRAINT [AdministrationEnvironmentType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AdministrationEnvironmentType] ADD CONSTRAINT [AdministrationEnvironmentType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The environment in which the test was administered. For example:
    Electronic
    Classroom
    Testing Center
    ...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AdministrationEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrationEnvironmentType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AdministrationEnvironment type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrationEnvironmentType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AdministrationEnvironment type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrationEnvironmentType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AdministrativeFundingControlDescriptor] ******/

CREATE TABLE [t_edfi].[AdministrativeFundingControlDescriptor]
(
    [tid_AdministrativeFundingControlDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AdministrativeFundingControlType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AdministrativeFundingControlDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AdministrativeFundingControlDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AdministrativeFundingControlDescriptor] ADD CONSTRAINT [AdministrativeFundingControlDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AdministrativeFundingControlDescriptor] ADD CONSTRAINT [AdministrativeFundingControlDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AdministrativeFundingControlDescriptor] ADD CONSTRAINT [AdministrativeFundingControlDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the type of education institution as classified by its funding source (e.g., public or private).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAdministrativeFundingControlDescriptor_Id ON [t_edfi].[AdministrativeFundingControlDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AdministrativeFundingControlDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AdministrativeFundingControlDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AdministrativeFundingControlDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AdministrativeFundingControlDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AdministrativeFundingControlDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AdministrativeFundingControlDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AdministrativeFundingControlDescriptor])
REFERENCES [t_edfi].[AdministrativeFundingControlDescriptor] ([tid_AdministrativeFundingControlDescriptor]);
ALTER TABLE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AdministrativeFundingControlDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AdministrativeFundingControlType] ******/

CREATE TABLE [t_edfi].[AdministrativeFundingControlType]
(
	[tid_AdministrativeFundingControlType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AdministrativeFundingControlType] PRIMARY KEY NONCLUSTERED
(
	[tid_AdministrativeFundingControlType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AdministrativeFundingControlType] ADD CONSTRAINT [AdministrativeFundingControlType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AdministrativeFundingControlType] ADD CONSTRAINT [AdministrativeFundingControlType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AdministrativeFundingControlType] ADD CONSTRAINT [AdministrativeFundingControlType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education institution as classified by its funding source.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AdministrativeFundingControl type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AdministrativeFundingControl type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AdministrativeFundingControlType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Assessment] ******/

CREATE TABLE [t_edfi].[Assessment]
(
    [tid_Assessment] [INT] IDENTITY(1,1) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NOT NULL,
	[Version] [INT] NOT NULL,
	[AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[LowestAssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AssessmentForm] [NVARCHAR](60) NULL,
	[RevisionDate] [DATE] NULL,
	[MaxRawScore] [INT] NULL,
	[Nomenclature] [NVARCHAR](35) NULL,
	[AssessmentPeriodDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AssessmentFamilyTitle] [NVARCHAR](60) NULL,
	[Namespace] [NVARCHAR](255) NULL,
	[AssessmentPeriodDescriptorNamespace] [NVARCHAR](255) NULL,
	[LowestAssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Assessment] PRIMARY KEY NONCLUSTERED
(
    [tid_Assessment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Assessment] ADD CONSTRAINT [Assessment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Assessment] ADD CONSTRAINT [Assessment_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Assessment] ADD CONSTRAINT [Assessment_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a tool, instrument, process, or exhibition composed of a systematic sampling of behavior for measuring a student''s competence, knowledge,skills, or behavior. An assessment can be used to measure differences inindividuals or groups and changes in performance from one occasion to the next.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Assessment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'LowestAssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentForm';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year that the conceptual design for the assessment was most recently revised substantially.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'RevisionDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'MaxRawScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'Nomenclature';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentPeriodDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'LowestAssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAssessment_Id ON [t_edfi].[Assessment]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AssessmentSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AssessmentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Assessment], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentSnapshotRecord] ADD CONSTRAINT [FK_AssessmentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AssessmentSnapshotRecord] ADD CONSTRAINT [FK_AssessmentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]);
ALTER TABLE [t_edfi].[AssessmentSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AssessmentIdentificationCode] ******/

CREATE TABLE [t_edfi].[AssessmentIdentificationCode]
(
	[tid_AssessmentIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[AssessmentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
	[AssessmentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentIdentificationCode] ADD CONSTRAINT [AssessmentIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentIdentificationCode] ADD CONSTRAINT [FK_AssessmentIdentificationCode_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentIdentificationCode] CHECK CONSTRAINT [FK_AssessmentIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the assessment identification code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[AssessmentScore] ******/

CREATE TABLE [t_edfi].[AssessmentScore]
(
	[tid_AssessmentScore] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[MinimumScore] [NVARCHAR](35) NULL,
	[MaximumScore] [NVARCHAR](35) NULL,
	[ResultDatatypeType] [NVARCHAR](450) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentScore] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentScore] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentScore] ADD CONSTRAINT [AssessmentScore_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentScore] ADD CONSTRAINT [FK_AssessmentScore_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentScore] CHECK CONSTRAINT [FK_AssessmentScore_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Definition of the scores to be expected from this assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'MinimumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'MaximumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
GO

/****** TABLE: [t_edfi].[AssessmentPerformanceLevel] ******/

CREATE TABLE [t_edfi].[AssessmentPerformanceLevel]
(
	[tid_AssessmentPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[MinimumScore] [NVARCHAR](35) NULL,
	[MaximumScore] [NVARCHAR](35) NULL,
	[ResultDatatypeType] [NVARCHAR](450) NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentPerformanceLevel] ADD CONSTRAINT [AssessmentPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentPerformanceLevel] ADD CONSTRAINT [FK_AssessmentPerformanceLevel_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentPerformanceLevel] CHECK CONSTRAINT [FK_AssessmentPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Definition of the performance levels and the associated cut scores. Three styles are supported:
        1. Specification of performance level by minimum and maximum score
        2. Specification of performance level by cut score, using only minimum score
        3. Specification of performance level without any mapping to scores.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score required to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MinimumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MaximumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[AssessmentContentStandard] ******/

CREATE TABLE [t_edfi].[AssessmentContentStandard]
(
	[tid_AssessmentContentStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[Title] [NVARCHAR](75) NOT NULL,
	[Version] [NVARCHAR](50) NULL,
	[URI] [NVARCHAR](255) NULL,
	[PublicationDate] [DATE] NULL,
	[PublicationYear] [SMALLINT] NULL,
	[PublicationStatusType] [NVARCHAR](450) NULL,
	[MandatingEducationOrganizationId] [INT] NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentContentStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentContentStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentContentStandard] ADD CONSTRAINT [AssessmentContentStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentContentStandard] ADD CONSTRAINT [FK_AssessmentContentStandard_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentContentStandard] CHECK CONSTRAINT [FK_AssessmentContentStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'Title';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'URI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[AssessmentContentStandardAuthor] ******/

CREATE TABLE [t_edfi].[AssessmentContentStandardAuthor]
(
	[tid_AssessmentContentStandardAuthor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AssessmentContentStandard] [INT] NOT NULL,
	[Author] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentContentStandardAuthor] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentContentStandardAuthor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentContentStandardAuthor] ADD CONSTRAINT [AssessmentContentStandardAuthor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentContentStandardAuthor] ADD CONSTRAINT [FK_AssessmentContentStandardAuthor_ParentTable] FOREIGN KEY ([tid_AssessmentContentStandard])
REFERENCES [t_edfi].[AssessmentContentStandard] ([tid_AssessmentContentStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentContentStandardAuthor] CHECK CONSTRAINT [FK_AssessmentContentStandardAuthor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandardAuthor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author';
GO

/****** TABLE: [t_edfi].[AssessmentLanguage] ******/

CREATE TABLE [t_edfi].[AssessmentLanguage]
(
	[tid_AssessmentLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentLanguage] ADD CONSTRAINT [AssessmentLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentLanguage] ADD CONSTRAINT [FK_AssessmentLanguage_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentLanguage] CHECK CONSTRAINT [FK_AssessmentLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the assessment is designed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[AssessmentSection] ******/

CREATE TABLE [t_edfi].[AssessmentSection]
(
	[tid_AssessmentSection] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentSection] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentSection] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentSection] ADD CONSTRAINT [AssessmentSection_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentSection] ADD CONSTRAINT [FK_AssessmentSection_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentSection] CHECK CONSTRAINT [FK_AssessmentSection_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Section(s) to which the Assessment is associated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[AssessmentProgram] ******/

CREATE TABLE [t_edfi].[AssessmentProgram]
(
	[tid_AssessmentProgram] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentProgram] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentProgram] ADD CONSTRAINT [AssessmentProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentProgram] ADD CONSTRAINT [FK_AssessmentProgram_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentProgram] CHECK CONSTRAINT [FK_AssessmentProgram_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The programs associated with the Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'ProgramType';
GO

/****** TABLE: [t_extension].[AssessmentExtension] ******/

CREATE TABLE [t_extension].[AssessmentExtension]
(
	[tid_AssessmentExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Assessment] [INT] NOT NULL,
	[ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AssessmentExtension] ADD CONSTRAINT [FK_AssessmentExtension_ParentTable] FOREIGN KEY ([tid_Assessment])
REFERENCES [t_edfi].[Assessment] ([tid_Assessment]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AssessmentExtension] CHECK CONSTRAINT [FK_AssessmentExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AssessmentExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AssessmentExtension', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AssessmentExtension', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[AssessmentCategoryDescriptor] ******/

CREATE TABLE [t_edfi].[AssessmentCategoryDescriptor]
(
    [tid_AssessmentCategoryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentCategoryType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentCategoryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentCategoryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentCategoryDescriptor] ADD CONSTRAINT [AssessmentCategoryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentCategoryDescriptor] ADD CONSTRAINT [AssessmentCategoryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentCategoryDescriptor] ADD CONSTRAINT [AssessmentCategoryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the category of an assessment based on format and content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAssessmentCategoryDescriptor_Id ON [t_edfi].[AssessmentCategoryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AssessmentCategoryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentCategoryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AssessmentCategoryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AssessmentCategoryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentCategoryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AssessmentCategoryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AssessmentCategoryDescriptor])
REFERENCES [t_edfi].[AssessmentCategoryDescriptor] ([tid_AssessmentCategoryDescriptor]);
ALTER TABLE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentCategoryDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AssessmentCategoryType] ******/

CREATE TABLE [t_edfi].[AssessmentCategoryType]
(
	[tid_AssessmentCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AssessmentCategoryType] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentCategoryType] ADD CONSTRAINT [AssessmentCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentCategoryType] ADD CONSTRAINT [AssessmentCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentCategoryType] ADD CONSTRAINT [AssessmentCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of an assessment based on format and content. For example:
        Achievement test
        Advanced placement test
        Alternate assessment/grade-level standards
        Attitudinal test
        Cognitive and perceptual skills test
        ...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AssessmentFamily] ******/

CREATE TABLE [t_edfi].[AssessmentFamily]
(
    [tid_AssessmentFamily] [INT] IDENTITY(1,1) NOT NULL,
	[AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL,
	[AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[LowestAssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[Version] [INT] NULL,
	[RevisionDate] [DATE] NULL,
	[Nomenclature] [NVARCHAR](35) NULL,
	[ParentAssessmentFamilyTitle] [NVARCHAR](60) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[LowestAssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentFamily] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentFamily] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentFamily] ADD CONSTRAINT [AssessmentFamily_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentFamily] ADD CONSTRAINT [AssessmentFamily_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentFamily] ADD CONSTRAINT [AssessmentFamily_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a logical grouping or association of assessments that share a common purpose, heritage or content standard. There may be hierarchiesof assessment families, characteristics (e.g., Academic Subject) specified for assessment families, by convention, are inherited by the Assessments associated with the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'LowestAssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year that the conceptual design for the AssessmentFamily was most recently revised substantially.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'RevisionDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for this level of AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'Nomenclature';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'ParentAssessmentFamilyTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the Assessments in this AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'LowestAssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAssessmentFamily_Id ON [t_edfi].[AssessmentFamily]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AssessmentFamilySnapshotRecord] ******/

CREATE TABLE [t_edfi].[AssessmentFamilySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AssessmentFamily] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentFamilySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AssessmentFamily], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentFamilySnapshotRecord] ADD CONSTRAINT [FK_AssessmentFamilySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentFamilySnapshotRecord] CHECK CONSTRAINT [FK_AssessmentFamilySnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AssessmentFamilySnapshotRecord] ADD CONSTRAINT [FK_AssessmentFamilySnapshotRecord_ParentTable] FOREIGN KEY ([tid_AssessmentFamily])
REFERENCES [t_edfi].[AssessmentFamily] ([tid_AssessmentFamily]);
ALTER TABLE [t_edfi].[AssessmentFamilySnapshotRecord] CHECK CONSTRAINT [FK_AssessmentFamilySnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AssessmentFamilyIdentificationCode] ******/

CREATE TABLE [t_edfi].[AssessmentFamilyIdentificationCode]
(
	[tid_AssessmentFamilyIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AssessmentFamily] [INT] NOT NULL,
	[AssessmentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
	[AssessmentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentFamilyIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentFamilyIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentFamilyIdentificationCode] ADD CONSTRAINT [AssessmentFamilyIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentFamilyIdentificationCode] ADD CONSTRAINT [FK_AssessmentFamilyIdentificationCode_ParentTable] FOREIGN KEY ([tid_AssessmentFamily])
REFERENCES [t_edfi].[AssessmentFamily] ([tid_AssessmentFamily]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentFamilyIdentificationCode] CHECK CONSTRAINT [FK_AssessmentFamilyIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment family by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the assessment identification code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[AssessmentFamilyContentStandard] ******/

CREATE TABLE [t_edfi].[AssessmentFamilyContentStandard]
(
	[tid_AssessmentFamilyContentStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AssessmentFamily] [INT] NOT NULL,
	[Title] [NVARCHAR](75) NOT NULL,
	[Version] [NVARCHAR](50) NULL,
	[URI] [NVARCHAR](255) NULL,
	[PublicationDate] [DATE] NULL,
	[PublicationYear] [SMALLINT] NULL,
	[PublicationStatusType] [NVARCHAR](450) NULL,
	[MandatingEducationOrganizationId] [INT] NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentFamilyContentStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentFamilyContentStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentFamilyContentStandard] ADD CONSTRAINT [AssessmentFamilyContentStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentFamilyContentStandard] ADD CONSTRAINT [FK_AssessmentFamilyContentStandard_ParentTable] FOREIGN KEY ([tid_AssessmentFamily])
REFERENCES [t_edfi].[AssessmentFamily] ([tid_AssessmentFamily]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentFamilyContentStandard] CHECK CONSTRAINT [FK_AssessmentFamilyContentStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'Title';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'URI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[AssessmentFamilyContentStandardAuthor] ******/

CREATE TABLE [t_edfi].[AssessmentFamilyContentStandardAuthor]
(
	[tid_AssessmentFamilyContentStandardAuthor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AssessmentFamilyContentStandard] [INT] NOT NULL,
	[Author] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentFamilyContentStandardAuthor] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentFamilyContentStandardAuthor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentFamilyContentStandardAuthor] ADD CONSTRAINT [AssessmentFamilyContentStandardAuthor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentFamilyContentStandardAuthor] ADD CONSTRAINT [FK_AssessmentFamilyContentStandardAuthor_ParentTable] FOREIGN KEY ([tid_AssessmentFamilyContentStandard])
REFERENCES [t_edfi].[AssessmentFamilyContentStandard] ([tid_AssessmentFamilyContentStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentFamilyContentStandardAuthor] CHECK CONSTRAINT [FK_AssessmentFamilyContentStandardAuthor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandardAuthor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author';
GO

/****** TABLE: [t_edfi].[AssessmentFamilyLanguage] ******/

CREATE TABLE [t_edfi].[AssessmentFamilyLanguage]
(
	[tid_AssessmentFamilyLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AssessmentFamily] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentFamilyLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentFamilyLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentFamilyLanguage] ADD CONSTRAINT [AssessmentFamilyLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentFamilyLanguage] ADD CONSTRAINT [FK_AssessmentFamilyLanguage_ParentTable] FOREIGN KEY ([tid_AssessmentFamily])
REFERENCES [t_edfi].[AssessmentFamily] ([tid_AssessmentFamily]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentFamilyLanguage] CHECK CONSTRAINT [FK_AssessmentFamilyLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the AssessmentFamily is designed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[AssessmentFamilyAssessmentPeriod] ******/

CREATE TABLE [t_edfi].[AssessmentFamilyAssessmentPeriod]
(
	[tid_AssessmentFamilyAssessmentPeriod] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AssessmentFamily] [INT] NOT NULL,
	[AssessmentPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentFamilyAssessmentPeriod] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentFamilyAssessmentPeriod] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentFamilyAssessmentPeriod] ADD CONSTRAINT [AssessmentFamilyAssessmentPeriod_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentFamilyAssessmentPeriod] ADD CONSTRAINT [FK_AssessmentFamilyAssessmentPeriod_ParentTable] FOREIGN KEY ([tid_AssessmentFamily])
REFERENCES [t_edfi].[AssessmentFamily] ([tid_AssessmentFamily]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentFamilyAssessmentPeriod] CHECK CONSTRAINT [FK_AssessmentFamilyAssessmentPeriod_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The periods or windows defined in which an assessment is supposed to be administered.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyAssessmentPeriod';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyAssessmentPeriod', @level2type=N'COLUMN', @level2name=N'AssessmentPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentFamilyAssessmentPeriod', @level2type=N'COLUMN', @level2name=N'AssessmentPeriodDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[AssessmentIdentificationSystemDescriptor] ******/

CREATE TABLE [t_edfi].[AssessmentIdentificationSystemDescriptor]
(
    [tid_AssessmentIdentificationSystemDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentIdentificationSystemType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentIdentificationSystemDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentIdentificationSystemDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentIdentificationSystemDescriptor] ADD CONSTRAINT [AssessmentIdentificationSystemDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentIdentificationSystemDescriptor] ADD CONSTRAINT [AssessmentIdentificationSystemDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentIdentificationSystemDescriptor] ADD CONSTRAINT [AssessmentIdentificationSystemDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds a coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAssessmentIdentificationSystemDescriptor_Id ON [t_edfi].[AssessmentIdentificationSystemDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AssessmentIdentificationSystemDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentIdentificationSystemDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AssessmentIdentificationSystemDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AssessmentIdentificationSystemDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentIdentificationSystemDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AssessmentIdentificationSystemDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AssessmentIdentificationSystemDescriptor])
REFERENCES [t_edfi].[AssessmentIdentificationSystemDescriptor] ([tid_AssessmentIdentificationSystemDescriptor]);
ALTER TABLE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentIdentificationSystemDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AssessmentIdentificationSystemType] ******/

CREATE TABLE [t_edfi].[AssessmentIdentificationSystemType]
(
	[tid_AssessmentIdentificationSystemType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AssessmentIdentificationSystemType] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentIdentificationSystemType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentIdentificationSystemType] ADD CONSTRAINT [AssessmentIdentificationSystemType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentIdentificationSystemType] ADD CONSTRAINT [AssessmentIdentificationSystemType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentIdentificationSystemType] ADD CONSTRAINT [AssessmentIdentificationSystemType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AssessmentItem] ******/

CREATE TABLE [t_edfi].[AssessmentItem]
(
    [tid_AssessmentItem] [INT] IDENTITY(1,1) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[Version] [INT] NOT NULL,
	[AssessmentItemCategoryType] [NVARCHAR](450) NULL,
	[MaxRawScore] [INT] NULL,
	[CorrectResponse] [NVARCHAR](20) NULL,
	[ExpectedTimeAssessed] [NVARCHAR](30) NULL,
	[Nomenclature] [NVARCHAR](35) NULL,
	[AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentItem] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentItem] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentItem] ADD CONSTRAINT [AssessmentItem_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentItem] ADD CONSTRAINT [AssessmentItem_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentItem] ADD CONSTRAINT [AssessmentItem_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents one of many single measures that make up an assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentItemCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'MaxRawScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The correct response for the AssessmentItem.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'CorrectResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The duration of time allotted for the AssessmentItem.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'ExpectedTimeAssessed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for AssessmentItem.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'Nomenclature';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAssessmentItem_Id ON [t_edfi].[AssessmentItem]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AssessmentItemSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AssessmentItemSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AssessmentItem] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentItemSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AssessmentItem], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentItemSnapshotRecord] ADD CONSTRAINT [FK_AssessmentItemSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentItemSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentItemSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AssessmentItemSnapshotRecord] ADD CONSTRAINT [FK_AssessmentItemSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AssessmentItem])
REFERENCES [t_edfi].[AssessmentItem] ([tid_AssessmentItem]);
ALTER TABLE [t_edfi].[AssessmentItemSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentItemSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AssessmentItemLearningStandard] ******/

CREATE TABLE [t_edfi].[AssessmentItemLearningStandard]
(
	[tid_AssessmentItemLearningStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AssessmentItem] [INT] NOT NULL,
	[LearningStandardId] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentItemLearningStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_AssessmentItemLearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentItemLearningStandard] ADD CONSTRAINT [AssessmentItemLearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentItemLearningStandard] ADD CONSTRAINT [FK_AssessmentItemLearningStandard_ParentTable] FOREIGN KEY ([tid_AssessmentItem])
REFERENCES [t_edfi].[AssessmentItem] ([tid_AssessmentItem]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentItemLearningStandard] CHECK CONSTRAINT [FK_AssessmentItemLearningStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard tested by this item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItemLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
GO
/****** TABLE: [t_edfi].[AssessmentItemCategoryType] ******/

CREATE TABLE [t_edfi].[AssessmentItemCategoryType]
(
    [tid_AssessmentItemCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_AssessmentItemCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentItemCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentItemCategoryType] ADD CONSTRAINT [AssessmentItemCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentItemCategoryType] ADD CONSTRAINT [AssessmentItemCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentItemCategoryType] ADD CONSTRAINT [AssessmentItemCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Category or type of the assessment item (e.g., Multiple Choice, Analytic, Prose).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItemCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentItemCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItemCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentItemCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItemCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AssessmentItemResultType] ******/

CREATE TABLE [t_edfi].[AssessmentItemResultType]
(
    [tid_AssessmentItemResultType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_AssessmentItemResultType] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentItemResultType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentItemResultType] ADD CONSTRAINT [AssessmentItemResultType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentItemResultType] ADD CONSTRAINT [AssessmentItemResultType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentItemResultType] ADD CONSTRAINT [AssessmentItemResultType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The analyzed result of a student''s response to an assessment item.. For example:
    Correct
    Incorrect
    Met standard
    ...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItemResultType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentItemResult type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItemResultType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentItemResult type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentItemResultType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AssessmentPeriodDescriptor] ******/

CREATE TABLE [t_edfi].[AssessmentPeriodDescriptor]
(
    [tid_AssessmentPeriodDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentPeriodDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentPeriodDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentPeriodDescriptor] ADD CONSTRAINT [AssessmentPeriodDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentPeriodDescriptor] ADD CONSTRAINT [AssessmentPeriodDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentPeriodDescriptor] ADD CONSTRAINT [AssessmentPeriodDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the period of time window in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentPeriodDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the assessment is to be administered.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the assessment is to be administered.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAssessmentPeriodDescriptor_Id ON [t_edfi].[AssessmentPeriodDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AssessmentPeriodDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AssessmentPeriodDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AssessmentPeriodDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AssessmentPeriodDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentPeriodDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AssessmentPeriodDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AssessmentPeriodDescriptor])
REFERENCES [t_edfi].[AssessmentPeriodDescriptor] ([tid_AssessmentPeriodDescriptor]);
ALTER TABLE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AssessmentPeriodDescriptorSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[AssessmentReportingMethodType] ******/

CREATE TABLE [t_edfi].[AssessmentReportingMethodType]
(
    [tid_AssessmentReportingMethodType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_AssessmentReportingMethodType] PRIMARY KEY NONCLUSTERED
(
    [tid_AssessmentReportingMethodType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AssessmentReportingMethodType] ADD CONSTRAINT [AssessmentReportingMethodType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AssessmentReportingMethodType] ADD CONSTRAINT [AssessmentReportingMethodType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AssessmentReportingMethodType] ADD CONSTRAINT [AssessmentReportingMethodType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or a numerical grade. In some cases, more than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentReportingMethodType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentReportingMethod type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentReportingMethodType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentReportingMethod type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AssessmentReportingMethodType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[AttendanceEventCategoryDescriptor] ******/

CREATE TABLE [t_edfi].[AttendanceEventCategoryDescriptor]
(
    [tid_AttendanceEventCategoryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AttendanceEventCategoryType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AttendanceEventCategoryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AttendanceEventCategoryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AttendanceEventCategoryDescriptor] ADD CONSTRAINT [AttendanceEventCategoryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AttendanceEventCategoryDescriptor] ADD CONSTRAINT [AttendanceEventCategoryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AttendanceEventCategoryDescriptor] ADD CONSTRAINT [AttendanceEventCategoryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the category of the attendance event (e.g., tardy). The map to known enumeration values is required.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAttendanceEventCategoryDescriptor_Id ON [t_edfi].[AttendanceEventCategoryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AttendanceEventCategoryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AttendanceEventCategoryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AttendanceEventCategoryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AttendanceEventCategoryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AttendanceEventCategoryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AttendanceEventCategoryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AttendanceEventCategoryDescriptor])
REFERENCES [t_edfi].[AttendanceEventCategoryDescriptor] ([tid_AttendanceEventCategoryDescriptor]);
ALTER TABLE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AttendanceEventCategoryDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[AttendanceEventCategoryType] ******/

CREATE TABLE [t_edfi].[AttendanceEventCategoryType]
(
	[tid_AttendanceEventCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AttendanceEventCategoryType] PRIMARY KEY NONCLUSTERED
(
	[tid_AttendanceEventCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[AttendanceEventCategoryType] ADD CONSTRAINT [AttendanceEventCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[AttendanceEventCategoryType] ADD CONSTRAINT [AttendanceEventCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[AttendanceEventCategoryType] ADD CONSTRAINT [AttendanceEventCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code categorizing the attendance event (e.g., excused absence, unexcused absence).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AttendanceEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AttendanceEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'AttendanceEventCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[BehaviorDescriptor] ******/

CREATE TABLE [t_edfi].[BehaviorDescriptor]
(
    [tid_BehaviorDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[BehaviorType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BehaviorDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_BehaviorDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[BehaviorDescriptor] ADD CONSTRAINT [BehaviorDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[BehaviorDescriptor] ADD CONSTRAINT [BehaviorDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[BehaviorDescriptor] ADD CONSTRAINT [BehaviorDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the categories of behavior describing a discipline incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'BehaviorDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorDescriptor', @level2type=N'COLUMN', @level2name=N'BehaviorType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TBehaviorDescriptor_Id ON [t_edfi].[BehaviorDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[BehaviorDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[BehaviorDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_BehaviorDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BehaviorDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_BehaviorDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[BehaviorDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BehaviorDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[BehaviorDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BehaviorDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[BehaviorDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BehaviorDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_BehaviorDescriptor])
REFERENCES [t_edfi].[BehaviorDescriptor] ([tid_BehaviorDescriptor]);
ALTER TABLE [t_edfi].[BehaviorDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BehaviorDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[BehaviorType] ******/

CREATE TABLE [t_edfi].[BehaviorType]
(
	[tid_BehaviorType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_BehaviorType] PRIMARY KEY NONCLUSTERED
(
	[tid_BehaviorType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[BehaviorType] ADD CONSTRAINT [BehaviorType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[BehaviorType] ADD CONSTRAINT [BehaviorType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[BehaviorType] ADD CONSTRAINT [BehaviorType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumeration items defining the categories of behavior coded for use in describing an incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'BehaviorType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Behavior type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Behavior type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BehaviorType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[BellSchedule] ******/

CREATE TABLE [t_edfi].[BellSchedule]
(
    [tid_BellSchedule] [INT] IDENTITY(1,1) NOT NULL,
	[BellScheduleName] [NVARCHAR](60) NOT NULL,
	[Date] [DATE] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BellSchedule] PRIMARY KEY NONCLUSTERED
(
    [tid_BellSchedule] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[BellSchedule] ADD CONSTRAINT [BellSchedule_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[BellSchedule] ADD CONSTRAINT [BellSchedule_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[BellSchedule] ADD CONSTRAINT [BellSchedule_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the schedule of class period meeting times.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'BellSchedule';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name or title of the BellSchedule.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'BellScheduleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'Date';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TBellSchedule_Id ON [t_edfi].[BellSchedule]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[BellScheduleSnapshotRecord] ******/

CREATE TABLE [t_edfi].[BellScheduleSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_BellSchedule] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BellScheduleSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_BellSchedule], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[BellScheduleSnapshotRecord] ADD CONSTRAINT [FK_BellScheduleSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[BellScheduleSnapshotRecord] CHECK CONSTRAINT [FK_BellScheduleSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[BellScheduleSnapshotRecord] ADD CONSTRAINT [FK_BellScheduleSnapshotRecord_ParentTable] FOREIGN KEY ([tid_BellSchedule])
REFERENCES [t_edfi].[BellSchedule] ([tid_BellSchedule]);
ALTER TABLE [t_edfi].[BellScheduleSnapshotRecord] CHECK CONSTRAINT [FK_BellScheduleSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[BellScheduleMeetingTime] ******/

CREATE TABLE [t_edfi].[BellScheduleMeetingTime]
(
	[tid_BellScheduleMeetingTime] [INT] IDENTITY(1,1) NOT NULL,
    [tid_BellSchedule] [INT] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[StartTime] [TIME](7) NOT NULL,
	[AlternateDayName] [NVARCHAR](20) NULL,
	[EndTime] [TIME](7) NOT NULL,
	[OfficialAttendancePeriod] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BellScheduleMeetingTime] PRIMARY KEY NONCLUSTERED
(
	[tid_BellScheduleMeetingTime] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[BellScheduleMeetingTime] ADD CONSTRAINT [BellScheduleMeetingTime_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[BellScheduleMeetingTime] ADD CONSTRAINT [FK_BellScheduleMeetingTime_ParentTable] FOREIGN KEY ([tid_BellSchedule])
REFERENCES [t_edfi].[BellSchedule] ([tid_BellSchedule]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[BellScheduleMeetingTime] CHECK CONSTRAINT [FK_BellScheduleMeetingTime_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The times at which this BellSchedule is intended to meet.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class begins.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'StartTime';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An alternate name for the day (e.g., Red, Blue).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'AlternateDayName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class ends.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'EndTime';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether this meeting time is used for official daily attendance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'OfficialAttendancePeriod';
GO
/****** TABLE: [t_edfi].[Budget] ******/

CREATE TABLE [t_edfi].[Budget]
(
    [tid_Budget] [INT] IDENTITY(1,1) NOT NULL,
	[AccountNumber] [NVARCHAR](50) NOT NULL,
	[AsOfDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FiscalYear] [INT] NOT NULL,
	[Amount] [MONEY] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Budget] PRIMARY KEY NONCLUSTERED
(
    [tid_Budget] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Budget] ADD CONSTRAINT [Budget_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Budget] ADD CONSTRAINT [Budget_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Budget] ADD CONSTRAINT [Budget_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the amount of monies allocated to be spent or received by an education organization as related to a specific account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Budget';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'AccountNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported budget element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'AsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'FiscalYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Amount budgeted for the account for this fiscal year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'Amount';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TBudget_Id ON [t_edfi].[Budget]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[BudgetSnapshotRecord] ******/

CREATE TABLE [t_edfi].[BudgetSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Budget] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BudgetSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Budget], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[BudgetSnapshotRecord] ADD CONSTRAINT [FK_BudgetSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[BudgetSnapshotRecord] CHECK CONSTRAINT [FK_BudgetSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[BudgetSnapshotRecord] ADD CONSTRAINT [FK_BudgetSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Budget])
REFERENCES [t_edfi].[Budget] ([tid_Budget]);
ALTER TABLE [t_edfi].[BudgetSnapshotRecord] CHECK CONSTRAINT [FK_BudgetSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[CalendarDate] ******/

CREATE TABLE [t_edfi].[CalendarDate]
(
    [tid_CalendarDate] [INT] IDENTITY(1,1) NOT NULL,
	[Date] [DATE] NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CalendarDate] PRIMARY KEY NONCLUSTERED
(
    [tid_CalendarDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CalendarDate] ADD CONSTRAINT [CalendarDate_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CalendarDate] ADD CONSTRAINT [CalendarDate_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CalendarDate] ADD CONSTRAINT [CalendarDate_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a day in the school calendar.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CalendarDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarDate', @level2type=N'COLUMN', @level2name=N'Date';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarDate', @level2type=N'COLUMN', @level2name=N'SchoolId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCalendarDate_Id ON [t_edfi].[CalendarDate]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CalendarDateSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CalendarDateSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CalendarDate] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CalendarDateSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CalendarDate], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CalendarDateSnapshotRecord] ADD CONSTRAINT [FK_CalendarDateSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CalendarDateSnapshotRecord] CHECK CONSTRAINT [FK_CalendarDateSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CalendarDateSnapshotRecord] ADD CONSTRAINT [FK_CalendarDateSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CalendarDate])
REFERENCES [t_edfi].[CalendarDate] ([tid_CalendarDate]);
ALTER TABLE [t_edfi].[CalendarDateSnapshotRecord] CHECK CONSTRAINT [FK_CalendarDateSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CalendarDateCalendarEvent] ******/

CREATE TABLE [t_edfi].[CalendarDateCalendarEvent]
(
	[tid_CalendarDateCalendarEvent] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CalendarDate] [INT] NOT NULL,
	[CalendarEventDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[EventDuration] [DECIMAL](3, 2) NOT NULL,
	[CalendarEventDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CalendarDateCalendarEvent] PRIMARY KEY NONCLUSTERED
(
	[tid_CalendarDateCalendarEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CalendarDateCalendarEvent] ADD CONSTRAINT [CalendarDateCalendarEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CalendarDateCalendarEvent] ADD CONSTRAINT [FK_CalendarDateCalendarEvent_ParentTable] FOREIGN KEY ([tid_CalendarDate])
REFERENCES [t_edfi].[CalendarDate] ([tid_CalendarDate]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CalendarDateCalendarEvent] CHECK CONSTRAINT [FK_CalendarDateCalendarEvent_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Additional description of the date such as date classification and duration of the event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CalendarDateCalendarEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarDateCalendarEvent', @level2type=N'COLUMN', @level2name=N'CalendarEventDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarDateCalendarEvent', @level2type=N'COLUMN', @level2name=N'EventDuration';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarDateCalendarEvent', @level2type=N'COLUMN', @level2name=N'CalendarEventDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[CalendarEventDescriptor] ******/

CREATE TABLE [t_edfi].[CalendarEventDescriptor]
(
    [tid_CalendarEventDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[CalendarEventType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CalendarEventDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_CalendarEventDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CalendarEventDescriptor] ADD CONSTRAINT [CalendarEventDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CalendarEventDescriptor] ADD CONSTRAINT [CalendarEventDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CalendarEventDescriptor] ADD CONSTRAINT [CalendarEventDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the types of scheduled or unscheduled event for the day (e.g., Instructional day, Teacher only day, Holiday, Make-up day, Weather day, Student late arrival/early dismissal day).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CalendarEventDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN', @level2name=N'CalendarEventType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCalendarEventDescriptor_Id ON [t_edfi].[CalendarEventDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CalendarEventDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CalendarEventDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CalendarEventDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CalendarEventDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CalendarEventDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CalendarEventDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CalendarEventDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CalendarEventDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CalendarEventDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CalendarEventDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CalendarEventDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CalendarEventDescriptor])
REFERENCES [t_edfi].[CalendarEventDescriptor] ([tid_CalendarEventDescriptor]);
ALTER TABLE [t_edfi].[CalendarEventDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CalendarEventDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CalendarEventType] ******/

CREATE TABLE [t_edfi].[CalendarEventType]
(
	[tid_CalendarEventType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_CalendarEventType] PRIMARY KEY NONCLUSTERED
(
	[tid_CalendarEventType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CalendarEventType] ADD CONSTRAINT [CalendarEventType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CalendarEventType] ADD CONSTRAINT [CalendarEventType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CalendarEventType] ADD CONSTRAINT [CalendarEventType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of scheduled or unscheduled event for the day. For example:
        Instructional day
        Teacher only day
        Holiday
        Make-up day
        Weather day
        Student late arrival/early dismissal
        ...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CalendarEventType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CalendarEvent type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CalendarEvent type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CalendarEventType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CareerPathwayType] ******/

CREATE TABLE [t_edfi].[CareerPathwayType]
(
    [tid_CareerPathwayType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CareerPathwayType] PRIMARY KEY NONCLUSTERED
(
    [tid_CareerPathwayType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CareerPathwayType] ADD CONSTRAINT [CareerPathwayType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CareerPathwayType] ADD CONSTRAINT [CareerPathwayType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CareerPathwayType] ADD CONSTRAINT [CareerPathwayType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The career cluster or pathway representing the career path of the Vocational/Career Tech concentrator.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CareerPathwayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CareerPathwayType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CareerPathway type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CareerPathwayType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CareerPathway type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CareerPathwayType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CharterApprovalAgencyType] ******/

CREATE TABLE [t_edfi].[CharterApprovalAgencyType]
(
    [tid_CharterApprovalAgencyType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CharterApprovalAgencyType] PRIMARY KEY NONCLUSTERED
(
    [tid_CharterApprovalAgencyType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CharterApprovalAgencyType] ADD CONSTRAINT [CharterApprovalAgencyType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CharterApprovalAgencyType] ADD CONSTRAINT [CharterApprovalAgencyType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CharterApprovalAgencyType] ADD CONSTRAINT [CharterApprovalAgencyType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of agency that approved the establishment or continuation of a charter school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CharterApprovalAgencyType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CharterApprovalAgencyType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CharterApprovalAgency type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CharterApprovalAgencyType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CharterApprovalAgency type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CharterApprovalAgencyType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CharterStatusType] ******/

CREATE TABLE [t_edfi].[CharterStatusType]
(
    [tid_CharterStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CharterStatusType] PRIMARY KEY NONCLUSTERED
(
    [tid_CharterStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CharterStatusType] ADD CONSTRAINT [CharterStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CharterStatusType] ADD CONSTRAINT [CharterStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CharterStatusType] ADD CONSTRAINT [CharterStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of charter school. For example: School Charter, Open Enrollment Charter.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CharterStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CharterStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CharterStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CharterStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CharterStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CharterStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CitizenshipStatusType] ******/

CREATE TABLE [t_edfi].[CitizenshipStatusType]
(
    [tid_CitizenshipStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CitizenshipStatusType] PRIMARY KEY NONCLUSTERED
(
    [tid_CitizenshipStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CitizenshipStatusType] ADD CONSTRAINT [CitizenshipStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CitizenshipStatusType] ADD CONSTRAINT [CitizenshipStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CitizenshipStatusType] ADD CONSTRAINT [CitizenshipStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether or not the person is a U.S. citizen.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CitizenshipStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CitizenshipStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CitizenshipStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CitizenshipStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CitizenshipStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CitizenshipStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ClassPeriod] ******/

CREATE TABLE [t_edfi].[ClassPeriod]
(
    [tid_ClassPeriod] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ClassPeriod] PRIMARY KEY NONCLUSTERED
(
    [tid_ClassPeriod] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ClassPeriod] ADD CONSTRAINT [ClassPeriod_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ClassPeriod] ADD CONSTRAINT [ClassPeriod_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ClassPeriod] ADD CONSTRAINT [ClassPeriod_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the designation of a regularly scheduled series of class meetings at designated times and days of the week.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ClassPeriod';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassPeriod', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassPeriod', @level2type=N'COLUMN', @level2name=N'SchoolId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TClassPeriod_Id ON [t_edfi].[ClassPeriod]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ClassPeriodSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ClassPeriodSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ClassPeriod] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ClassPeriodSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ClassPeriod], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ClassPeriodSnapshotRecord] ADD CONSTRAINT [FK_ClassPeriodSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ClassPeriodSnapshotRecord] CHECK CONSTRAINT [FK_ClassPeriodSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ClassPeriodSnapshotRecord] ADD CONSTRAINT [FK_ClassPeriodSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ClassPeriod])
REFERENCES [t_edfi].[ClassPeriod] ([tid_ClassPeriod]);
ALTER TABLE [t_edfi].[ClassPeriodSnapshotRecord] CHECK CONSTRAINT [FK_ClassPeriodSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[ClassroomPositionDescriptor] ******/

CREATE TABLE [t_edfi].[ClassroomPositionDescriptor]
(
    [tid_ClassroomPositionDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ClassroomPositionType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ClassroomPositionDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ClassroomPositionDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ClassroomPositionDescriptor] ADD CONSTRAINT [ClassroomPositionDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ClassroomPositionDescriptor] ADD CONSTRAINT [ClassroomPositionDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ClassroomPositionDescriptor] ADD CONSTRAINT [ClassroomPositionDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of position the staff member holds in a specific class/section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN', @level2name=N'ClassroomPositionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TClassroomPositionDescriptor_Id ON [t_edfi].[ClassroomPositionDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ClassroomPositionDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ClassroomPositionDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ClassroomPositionDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ClassroomPositionDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ClassroomPositionDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ClassroomPositionDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ClassroomPositionDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ClassroomPositionDescriptor])
REFERENCES [t_edfi].[ClassroomPositionDescriptor] ([tid_ClassroomPositionDescriptor]);
ALTER TABLE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ClassroomPositionDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ClassroomPositionType] ******/

CREATE TABLE [t_edfi].[ClassroomPositionType]
(
	[tid_ClassroomPositionType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ClassroomPositionType] PRIMARY KEY NONCLUSTERED
(
	[tid_ClassroomPositionType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ClassroomPositionType] ADD CONSTRAINT [ClassroomPositionType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ClassroomPositionType] ADD CONSTRAINT [ClassroomPositionType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ClassroomPositionType] ADD CONSTRAINT [ClassroomPositionType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of position the staff member holds in the specific class/section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ClassroomPosition type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ClassroomPosition type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ClassroomPositionType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Cohort] ******/

CREATE TABLE [t_edfi].[Cohort]
(
    [tid_Cohort] [INT] IDENTITY(1,1) NOT NULL,
	[CohortIdentifier] [NVARCHAR](20) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[CohortDescription] [NVARCHAR](1024) NULL,
	[CohortType] [NVARCHAR](450) NOT NULL,
	[CohortScopeType] [NVARCHAR](450) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Cohort] PRIMARY KEY NONCLUSTERED
(
    [tid_Cohort] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Cohort] ADD CONSTRAINT [Cohort_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Cohort] ADD CONSTRAINT [Cohort_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Cohort] ADD CONSTRAINT [Cohort_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents any type of list of designated students for tracking, analysis, or intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Cohort';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the Cohort and its purpose.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortScopeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCohort_Id ON [t_edfi].[Cohort]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CohortSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CohortSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Cohort] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CohortSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Cohort], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CohortSnapshotRecord] ADD CONSTRAINT [FK_CohortSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CohortSnapshotRecord] CHECK CONSTRAINT [FK_CohortSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CohortSnapshotRecord] ADD CONSTRAINT [FK_CohortSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Cohort])
REFERENCES [t_edfi].[Cohort] ([tid_Cohort]);
ALTER TABLE [t_edfi].[CohortSnapshotRecord] CHECK CONSTRAINT [FK_CohortSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CohortProgram] ******/

CREATE TABLE [t_edfi].[CohortProgram]
(
	[tid_CohortProgram] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Cohort] [INT] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CohortProgram] PRIMARY KEY NONCLUSTERED
(
	[tid_CohortProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CohortProgram] ADD CONSTRAINT [CohortProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CohortProgram] ADD CONSTRAINT [FK_CohortProgram_ParentTable] FOREIGN KEY ([tid_Cohort])
REFERENCES [t_edfi].[Cohort] ([tid_Cohort]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CohortProgram] CHECK CONSTRAINT [FK_CohortProgram_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The (optional) program associated with this Cohort (e.g., special education).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CohortProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'ProgramType';
GO
/****** TABLE: [t_edfi].[CohortScopeType] ******/

CREATE TABLE [t_edfi].[CohortScopeType]
(
    [tid_CohortScopeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CohortScopeType] PRIMARY KEY NONCLUSTERED
(
    [tid_CohortScopeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CohortScopeType] ADD CONSTRAINT [CohortScopeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CohortScopeType] ADD CONSTRAINT [CohortScopeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CohortScopeType] ADD CONSTRAINT [CohortScopeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The scope of cohort (e.g., school, district, classroom).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CohortScopeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortScopeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CohortScope type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortScopeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CohortScope type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortScopeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CohortType] ******/

CREATE TABLE [t_edfi].[CohortType]
(
    [tid_CohortType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CohortType] PRIMARY KEY NONCLUSTERED
(
    [tid_CohortType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CohortType] ADD CONSTRAINT [CohortType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CohortType] ADD CONSTRAINT [CohortType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CohortType] ADD CONSTRAINT [CohortType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the cohort (e.g., academic intervention, classroom breakout).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CohortType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Cohort type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Cohort type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CohortYearType] ******/

CREATE TABLE [t_edfi].[CohortYearType]
(
    [tid_CohortYearType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CohortYearType] PRIMARY KEY NONCLUSTERED
(
    [tid_CohortYearType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CohortYearType] ADD CONSTRAINT [CohortYearType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CohortYearType] ADD CONSTRAINT [CohortYearType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CohortYearType] ADD CONSTRAINT [CohortYearType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items for the set of cohort years.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CohortYearType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortYearType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CohortYear type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortYearType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CohortYear type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CohortYearType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CompetencyLevelDescriptor] ******/

CREATE TABLE [t_edfi].[CompetencyLevelDescriptor]
(
    [tid_CompetencyLevelDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceBaseConversionType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CompetencyLevelDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_CompetencyLevelDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CompetencyLevelDescriptor] ADD CONSTRAINT [CompetencyLevelDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CompetencyLevelDescriptor] ADD CONSTRAINT [CompetencyLevelDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CompetencyLevelDescriptor] ADD CONSTRAINT [CompetencyLevelDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines various levels for assessed competencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CompetencyLevelDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN', @level2name=N'PerformanceBaseConversionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCompetencyLevelDescriptor_Id ON [t_edfi].[CompetencyLevelDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CompetencyLevelDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CompetencyLevelDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CompetencyLevelDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CompetencyLevelDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CompetencyLevelDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CompetencyLevelDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CompetencyLevelDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CompetencyLevelDescriptor])
REFERENCES [t_edfi].[CompetencyLevelDescriptor] ([tid_CompetencyLevelDescriptor]);
ALTER TABLE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CompetencyLevelDescriptorSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[CompetencyObjective] ******/

CREATE TABLE [t_edfi].[CompetencyObjective]
(
    [tid_CompetencyObjective] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[CompetencyObjectiveId] [NVARCHAR](60) NULL,
	[Description] [NVARCHAR](1024) NULL,
	[SuccessCriteria] [NVARCHAR](150) NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CompetencyObjective] PRIMARY KEY NONCLUSTERED
(
    [tid_CompetencyObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CompetencyObjective] ADD CONSTRAINT [CompetencyObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CompetencyObjective] ADD CONSTRAINT [CompetencyObjective_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CompetencyObjective] ADD CONSTRAINT [CompetencyObjective_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity holds additional competencies for student achievement that are not associated with specific learning objectives (e.g., paying attention in class).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Identifier for the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'CompetencyObjectiveId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the student competency objective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'SuccessCriteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCompetencyObjective_Id ON [t_edfi].[CompetencyObjective]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CompetencyObjectiveSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CompetencyObjectiveSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CompetencyObjective] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CompetencyObjectiveSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CompetencyObjective], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CompetencyObjectiveSnapshotRecord] ADD CONSTRAINT [FK_CompetencyObjectiveSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CompetencyObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_CompetencyObjectiveSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CompetencyObjectiveSnapshotRecord] ADD CONSTRAINT [FK_CompetencyObjectiveSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CompetencyObjective])
REFERENCES [t_edfi].[CompetencyObjective] ([tid_CompetencyObjective]);
ALTER TABLE [t_edfi].[CompetencyObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_CompetencyObjectiveSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[ContentClassType] ******/

CREATE TABLE [t_edfi].[ContentClassType]
(
    [tid_ContentClassType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ContentClassType] PRIMARY KEY NONCLUSTERED
(
    [tid_ContentClassType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ContentClassType] ADD CONSTRAINT [ContentClassType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ContentClassType] ADD CONSTRAINT [ContentClassType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ContentClassType] ADD CONSTRAINT [ContentClassType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predominate type or kind characterizing the learning resource.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ContentClassType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContentClassType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ContentClass type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContentClassType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ContentClass type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContentClassType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ContinuationOfServicesReasonDescriptor] ******/

CREATE TABLE [t_edfi].[ContinuationOfServicesReasonDescriptor]
(
    [tid_ContinuationOfServicesReasonDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ContinuationOfServicesReasonType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ContinuationOfServicesReasonDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ContinuationOfServicesReasonDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ContinuationOfServicesReasonDescriptor] ADD CONSTRAINT [ContinuationOfServicesReasonDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ContinuationOfServicesReasonDescriptor] ADD CONSTRAINT [ContinuationOfServicesReasonDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ContinuationOfServicesReasonDescriptor] ADD CONSTRAINT [ContinuationOfServicesReasonDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This descriptor holds the reasons prescribed in the statute. The mapping of descriptor values to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN', @level2name=N'ContinuationOfServicesReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TContinuationOfServicesReasonDescriptor_Id ON [t_edfi].[ContinuationOfServicesReasonDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ContinuationOfServicesReasonDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ContinuationOfServicesReasonDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ContinuationOfServicesReasonDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ContinuationOfServicesReasonDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ContinuationOfServicesReasonDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ContinuationOfServicesReasonDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ContinuationOfServicesReasonDescriptor])
REFERENCES [t_edfi].[ContinuationOfServicesReasonDescriptor] ([tid_ContinuationOfServicesReasonDescriptor]);
ALTER TABLE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ContinuationOfServicesReasonDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ContinuationOfServicesReasonType] ******/

CREATE TABLE [t_edfi].[ContinuationOfServicesReasonType]
(
	[tid_ContinuationOfServicesReasonType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ContinuationOfServicesReasonType] PRIMARY KEY NONCLUSTERED
(
	[tid_ContinuationOfServicesReasonType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ContinuationOfServicesReasonType] ADD CONSTRAINT [ContinuationOfServicesReasonType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ContinuationOfServicesReasonType] ADD CONSTRAINT [ContinuationOfServicesReasonType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ContinuationOfServicesReasonType] ADD CONSTRAINT [ContinuationOfServicesReasonType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This type holds the reasons prescribed in the statute.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ContinuationOfServicesReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ContinuationOfServicesReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContinuationOfServicesReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ContractedStaff] ******/

CREATE TABLE [t_edfi].[ContractedStaff]
(
    [tid_ContractedStaff] [INT] IDENTITY(1,1) NOT NULL,
	[AccountNumber] [NVARCHAR](50) NOT NULL,
	[AsOfDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FiscalYear] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[AmountToDate] [MONEY] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ContractedStaff] PRIMARY KEY NONCLUSTERED
(
    [tid_ContractedStaff] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ContractedStaff] ADD CONSTRAINT [ContractedStaff_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ContractedStaff] ADD CONSTRAINT [ContractedStaff_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ContractedStaff] ADD CONSTRAINT [ContractedStaff_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the sum of the financial transactions to date for contracted staff. ContractedStaff includes "contractors" or "consultants" who perform services for an agreed upon fee, or an employee of a management service contracted to work on site.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'AccountNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported contracted staff element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'AsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'FiscalYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current balance (amount paid to contractor) for account for the fiscal year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'AmountToDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TContractedStaff_Id ON [t_edfi].[ContractedStaff]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ContractedStaffSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ContractedStaffSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ContractedStaff] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ContractedStaffSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ContractedStaff], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ContractedStaffSnapshotRecord] ADD CONSTRAINT [FK_ContractedStaffSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ContractedStaffSnapshotRecord] CHECK CONSTRAINT [FK_ContractedStaffSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ContractedStaffSnapshotRecord] ADD CONSTRAINT [FK_ContractedStaffSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ContractedStaff])
REFERENCES [t_edfi].[ContractedStaff] ([tid_ContractedStaff]);
ALTER TABLE [t_edfi].[ContractedStaffSnapshotRecord] CHECK CONSTRAINT [FK_ContractedStaffSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[CostRateType] ******/

CREATE TABLE [t_edfi].[CostRateType]
(
    [tid_CostRateType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CostRateType] PRIMARY KEY NONCLUSTERED
(
    [tid_CostRateType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CostRateType] ADD CONSTRAINT [CostRateType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CostRateType] ADD CONSTRAINT [CostRateType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CostRateType] ADD CONSTRAINT [CostRateType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The rate by which a cost applies (e.g. $1 per student).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CostRateType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CostRateType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CostRate type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CostRateType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CostRate type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CostRateType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CountryDescriptor] ******/

CREATE TABLE [t_edfi].[CountryDescriptor]
(
    [tid_CountryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CountryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_CountryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CountryDescriptor] ADD CONSTRAINT [CountryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CountryDescriptor] ADD CONSTRAINT [CountryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CountryDescriptor] ADD CONSTRAINT [CountryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the name and code of the country.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CountryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CountryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CountryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CountryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CountryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CountryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CountryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCountryDescriptor_Id ON [t_edfi].[CountryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CountryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CountryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CountryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CountryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CountryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CountryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CountryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CountryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CountryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CountryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CountryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CountryDescriptor])
REFERENCES [t_edfi].[CountryDescriptor] ([tid_CountryDescriptor]);
ALTER TABLE [t_edfi].[CountryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CountryDescriptorSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[Course] ******/

CREATE TABLE [t_edfi].[Course]
(
    [tid_Course] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[CourseTitle] [NVARCHAR](60) NOT NULL,
	[NumberOfParts] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[CourseDescription] [NVARCHAR](1024) NULL,
	[TimeRequiredForCompletion] [INT] NULL,
	[DateCourseAdopted] [DATE] NULL,
	[HighSchoolCourseRequirement] [BIT] NULL,
	[CourseGPAApplicabilityType] [NVARCHAR](450) NULL,
	[CourseDefinedByType] [NVARCHAR](450) NULL,
	[MinimumAvailableCredits] [DECIMAL](9, 2) NULL,
	[MinimumAvailableCreditType] [NVARCHAR](450) NULL,
	[MinimumAvailableCreditConversion] [DECIMAL](9, 2) NULL,
	[MaximumAvailableCredits] [DECIMAL](9, 2) NULL,
	[MaximumAvailableCreditType] [NVARCHAR](450) NULL,
	[MaximumAvailableCreditConversion] [DECIMAL](9, 2) NULL,
	[CareerPathwayType] [NVARCHAR](450) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Course] PRIMARY KEY NONCLUSTERED
(
    [tid_Course] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Course] ADD CONSTRAINT [Course_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Course] ADD CONSTRAINT [Course_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Course] ADD CONSTRAINT [Course_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Course';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of parts identified for a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'NumberOfParts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'TimeRequiredForCompletion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the course was adopted by the education agency.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'DateCourseAdopted';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that this course may satisfy high school graduation requirements in the course''s subject area.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'HighSchoolCourseRequirement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseGPAApplicabilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseDefinedByType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MinimumAvailableCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MinimumAvailableCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MinimumAvailableCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MaximumAvailableCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MaximumAvailableCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MaximumAvailableCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CareerPathwayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Course', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourse_Id ON [t_edfi].[Course]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CourseSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CourseSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Course] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Course], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseSnapshotRecord] ADD CONSTRAINT [FK_CourseSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseSnapshotRecord] CHECK CONSTRAINT [FK_CourseSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CourseSnapshotRecord] ADD CONSTRAINT [FK_CourseSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Course])
REFERENCES [t_edfi].[Course] ([tid_Course]);
ALTER TABLE [t_edfi].[CourseSnapshotRecord] CHECK CONSTRAINT [FK_CourseSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CourseIdentificationCode] ******/

CREATE TABLE [t_edfi].[CourseIdentificationCode]
(
	[tid_CourseIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Course] [INT] NOT NULL,
	[CourseIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
	[CourseIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseIdentificationCode] ADD CONSTRAINT [CourseIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseIdentificationCode] ADD CONSTRAINT [FK_CourseIdentificationCode_ParentTable] FOREIGN KEY ([tid_Course])
REFERENCES [t_edfi].[Course] ([tid_Course]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseIdentificationCode] CHECK CONSTRAINT [FK_CourseIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a "/". For example, consider the following SCED code-    subject = 20 Math    course = 272 Geometry    level = G General    credits = 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the staff Identification Code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[CourseLevelCharacteristic] ******/

CREATE TABLE [t_edfi].[CourseLevelCharacteristic]
(
	[tid_CourseLevelCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Course] [INT] NOT NULL,
	[CourseLevelCharacteristicType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseLevelCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseLevelCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseLevelCharacteristic] ADD CONSTRAINT [CourseLevelCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseLevelCharacteristic] ADD CONSTRAINT [FK_CourseLevelCharacteristic_ParentTable] FOREIGN KEY ([tid_Course])
REFERENCES [t_edfi].[Course] ([tid_Course]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseLevelCharacteristic] CHECK CONSTRAINT [FK_CourseLevelCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLevelCharacteristic', @level2type=N'COLUMN', @level2name=N'CourseLevelCharacteristicType';
GO

/****** TABLE: [t_edfi].[CourseOfferedGradeLevel] ******/

CREATE TABLE [t_edfi].[CourseOfferedGradeLevel]
(
	[tid_CourseOfferedGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Course] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseOfferedGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseOfferedGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseOfferedGradeLevel] ADD CONSTRAINT [CourseOfferedGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseOfferedGradeLevel] ADD CONSTRAINT [FK_CourseOfferedGradeLevel_ParentTable] FOREIGN KEY ([tid_Course])
REFERENCES [t_edfi].[Course] ([tid_Course]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseOfferedGradeLevel] CHECK CONSTRAINT [FK_CourseOfferedGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels in which the course is offered.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseOfferedGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOfferedGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOfferedGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[CourseCompetencyLevel] ******/

CREATE TABLE [t_edfi].[CourseCompetencyLevel]
(
	[tid_CourseCompetencyLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Course] [INT] NOT NULL,
	[CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseCompetencyLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseCompetencyLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseCompetencyLevel] ADD CONSTRAINT [CourseCompetencyLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseCompetencyLevel] ADD CONSTRAINT [FK_CourseCompetencyLevel_ParentTable] FOREIGN KEY ([tid_Course])
REFERENCES [t_edfi].[Course] ([tid_Course]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseCompetencyLevel] CHECK CONSTRAINT [FK_CourseCompetencyLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The competency levels defined to rate the student for the course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseCompetencyLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseCompetencyLevel', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseCompetencyLevel', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[CourseLearningStandard] ******/

CREATE TABLE [t_edfi].[CourseLearningStandard]
(
	[tid_CourseLearningStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Course] [INT] NOT NULL,
	[LearningStandardId] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseLearningStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseLearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseLearningStandard] ADD CONSTRAINT [CourseLearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseLearningStandard] ADD CONSTRAINT [FK_CourseLearningStandard_ParentTable] FOREIGN KEY ([tid_Course])
REFERENCES [t_edfi].[Course] ([tid_Course]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseLearningStandard] CHECK CONSTRAINT [FK_CourseLearningStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Learning Standard(s) to be taught by the course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseLearningStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
GO

/****** TABLE: [t_edfi].[CourseLearningObjective] ******/

CREATE TABLE [t_edfi].[CourseLearningObjective]
(
	[tid_CourseLearningObjective] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Course] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseLearningObjective] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseLearningObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseLearningObjective] ADD CONSTRAINT [CourseLearningObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseLearningObjective] ADD CONSTRAINT [FK_CourseLearningObjective_ParentTable] FOREIGN KEY ([tid_Course])
REFERENCES [t_edfi].[Course] ([tid_Course]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseLearningObjective] CHECK CONSTRAINT [FK_CourseLearningObjective_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Learning Objectives to be mastered in the course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseLearningObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[CourseAttemptResultType] ******/

CREATE TABLE [t_edfi].[CourseAttemptResultType]
(
    [tid_CourseAttemptResultType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CourseAttemptResultType] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseAttemptResultType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseAttemptResultType] ADD CONSTRAINT [CourseAttemptResultType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseAttemptResultType] ADD CONSTRAINT [CourseAttemptResultType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseAttemptResultType] ADD CONSTRAINT [CourseAttemptResultType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The result from the student''s attempt to take the course, for example:
    Pass
    Fail
    Incomplete
    Withdrawn', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseAttemptResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseAttemptResultType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseAttemptResult type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseAttemptResultType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseAttemptResult type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseAttemptResultType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CourseDefinedByType] ******/

CREATE TABLE [t_edfi].[CourseDefinedByType]
(
    [tid_CourseDefinedByType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CourseDefinedByType] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseDefinedByType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseDefinedByType] ADD CONSTRAINT [CourseDefinedByType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseDefinedByType] ADD CONSTRAINT [CourseDefinedByType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseDefinedByType] ADD CONSTRAINT [CourseDefinedByType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies whether the course was defined by the state education agency, local education agency, school, or national organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseDefinedByType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseDefinedByType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseDefinedBy type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseDefinedByType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseDefinedBy type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseDefinedByType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CourseGPAApplicabilityType] ******/

CREATE TABLE [t_edfi].[CourseGPAApplicabilityType]
(
    [tid_CourseGPAApplicabilityType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CourseGPAApplicabilityType] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseGPAApplicabilityType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseGPAApplicabilityType] ADD CONSTRAINT [CourseGPAApplicabilityType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseGPAApplicabilityType] ADD CONSTRAINT [CourseGPAApplicabilityType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseGPAApplicabilityType] ADD CONSTRAINT [CourseGPAApplicabilityType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether or not this course being described is included in the computation of the student''s Grade Point Average, and if so, if it is weighted differently than regular courses.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseGPAApplicabilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseGPAApplicabilityType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseGPAApplicability type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseGPAApplicabilityType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseGPAApplicability type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseGPAApplicabilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CourseIdentificationSystemDescriptor] ******/

CREATE TABLE [t_edfi].[CourseIdentificationSystemDescriptor]
(
    [tid_CourseIdentificationSystemDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[CourseIdentificationSystemType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseIdentificationSystemDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseIdentificationSystemDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseIdentificationSystemDescriptor] ADD CONSTRAINT [CourseIdentificationSystemDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseIdentificationSystemDescriptor] ADD CONSTRAINT [CourseIdentificationSystemDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseIdentificationSystemDescriptor] ADD CONSTRAINT [CourseIdentificationSystemDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines a standard code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseIdentificationSystemDescriptor_Id ON [t_edfi].[CourseIdentificationSystemDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseIdentificationSystemDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseIdentificationSystemDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseIdentificationSystemDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CourseIdentificationSystemDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CourseIdentificationSystemDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CourseIdentificationSystemDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseIdentificationSystemDescriptor])
REFERENCES [t_edfi].[CourseIdentificationSystemDescriptor] ([tid_CourseIdentificationSystemDescriptor]);
ALTER TABLE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CourseIdentificationSystemDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CourseIdentificationSystemType] ******/

CREATE TABLE [t_edfi].[CourseIdentificationSystemType]
(
	[tid_CourseIdentificationSystemType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_CourseIdentificationSystemType] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseIdentificationSystemType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseIdentificationSystemType] ADD CONSTRAINT [CourseIdentificationSystemType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseIdentificationSystemType] ADD CONSTRAINT [CourseIdentificationSystemType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseIdentificationSystemType] ADD CONSTRAINT [CourseIdentificationSystemType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. In addition to identifying courses using the appropriate state codes, cross referencing courses with one of the national course codes is encouraged.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CourseLevelCharacteristicType] ******/

CREATE TABLE [t_edfi].[CourseLevelCharacteristicType]
(
    [tid_CourseLevelCharacteristicType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CourseLevelCharacteristicType] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseLevelCharacteristicType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseLevelCharacteristicType] ADD CONSTRAINT [CourseLevelCharacteristicType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseLevelCharacteristicType] ADD CONSTRAINT [CourseLevelCharacteristicType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseLevelCharacteristicType] ADD CONSTRAINT [CourseLevelCharacteristicType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The item for indication of the nature and difficulty of instruction: Remedial, Basic, Honors, Ap, IB, Dual Credit, CTE. etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLevelCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseLevelCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLevelCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseLevelCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseLevelCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CourseOffering] ******/

CREATE TABLE [t_edfi].[CourseOffering]
(
    [tid_CourseOffering] [INT] IDENTITY(1,1) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LocalCourseTitle] [NVARCHAR](60) NULL,
	[InstructionalTimePlanned] [INT] NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseOffering] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseOffering] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseOffering] ADD CONSTRAINT [CourseOffering_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseOffering] ADD CONSTRAINT [CourseOffering_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseOffering] ADD CONSTRAINT [CourseOffering_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an entry in the course catalog of available courses offered by the school during a session.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseOffering';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'LocalCourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'InstructionalTimePlanned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseOffering_Id ON [t_edfi].[CourseOffering]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CourseOfferingSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CourseOfferingSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseOffering] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseOfferingSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseOffering], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseOfferingSnapshotRecord] ADD CONSTRAINT [FK_CourseOfferingSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseOfferingSnapshotRecord] CHECK CONSTRAINT [FK_CourseOfferingSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CourseOfferingSnapshotRecord] ADD CONSTRAINT [FK_CourseOfferingSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseOffering])
REFERENCES [t_edfi].[CourseOffering] ([tid_CourseOffering]);
ALTER TABLE [t_edfi].[CourseOfferingSnapshotRecord] CHECK CONSTRAINT [FK_CourseOfferingSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CourseOfferingCurriculumUsed] ******/

CREATE TABLE [t_edfi].[CourseOfferingCurriculumUsed]
(
	[tid_CourseOfferingCurriculumUsed] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseOffering] [INT] NOT NULL,
	[CurriculumUsedType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseOfferingCurriculumUsed] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseOfferingCurriculumUsed] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseOfferingCurriculumUsed] ADD CONSTRAINT [CourseOfferingCurriculumUsed_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseOfferingCurriculumUsed] ADD CONSTRAINT [FK_CourseOfferingCurriculumUsed_ParentTable] FOREIGN KEY ([tid_CourseOffering])
REFERENCES [t_edfi].[CourseOffering] ([tid_CourseOffering]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseOfferingCurriculumUsed] CHECK CONSTRAINT [FK_CourseOfferingCurriculumUsed_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of curriculum used in an early learning classroom or group.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseOfferingCurriculumUsed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseOfferingCurriculumUsed', @level2type=N'COLUMN', @level2name=N'CurriculumUsedType';
GO
/****** TABLE: [t_edfi].[CourseRepeatCodeType] ******/

CREATE TABLE [t_edfi].[CourseRepeatCodeType]
(
    [tid_CourseRepeatCodeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CourseRepeatCodeType] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseRepeatCodeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseRepeatCodeType] ADD CONSTRAINT [CourseRepeatCodeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseRepeatCodeType] ADD CONSTRAINT [CourseRepeatCodeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseRepeatCodeType] ADD CONSTRAINT [CourseRepeatCodeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''s academic grade average.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseRepeatCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseRepeatCodeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseRepeatCode type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseRepeatCodeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseRepeatCode type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseRepeatCodeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CourseTranscript] ******/

CREATE TABLE [t_edfi].[CourseTranscript]
(
    [tid_CourseTranscript] [INT] IDENTITY(1,1) NOT NULL,
	[CourseAttemptResultType] [NVARCHAR](450) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[CourseEducationOrganizationId] [INT] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AttemptedCredits] [DECIMAL](9, 2) NULL,
	[AttemptedCreditType] [NVARCHAR](450) NULL,
	[AttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[EarnedCredits] [DECIMAL](9, 2) NOT NULL,
	[EarnedCreditType] [NVARCHAR](450) NULL,
	[EarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[MethodCreditEarnedType] [NVARCHAR](450) NULL,
	[FinalLetterGradeEarned] [NVARCHAR](20) NULL,
	[FinalNumericGradeEarned] [DECIMAL](9, 2) NULL,
	[CourseRepeatCodeType] [NVARCHAR](450) NULL,
	[SchoolId] [INT] NULL,
	[CourseTitle] [NVARCHAR](60) NULL,
	[AlternativeCourseTitle] [NVARCHAR](60) NULL,
	[AlternativeCourseCode] [NVARCHAR](60) NULL,
	[WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseTranscript] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseTranscript] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseTranscript] ADD CONSTRAINT [CourseTranscript_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseTranscript] ADD CONSTRAINT [CourseTranscript_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CourseTranscript] ADD CONSTRAINT [CourseTranscript_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is the final record of a student''s performance in their courses at the end of a semester or school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseAttemptResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'MethodCreditEarnedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalLetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseRepeatCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseTranscript_Id ON [t_edfi].[CourseTranscript]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CourseTranscriptSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CourseTranscriptSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseTranscript] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseTranscriptSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseTranscript], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_CourseTranscriptSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_CourseTranscriptSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_CourseTranscriptSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseTranscript])
REFERENCES [t_edfi].[CourseTranscript] ([tid_CourseTranscript]);
ALTER TABLE [t_edfi].[CourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_CourseTranscriptSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CourseTranscriptEarnedAdditionalCredits] ******/

CREATE TABLE [t_edfi].[CourseTranscriptEarnedAdditionalCredits]
(
	[tid_CourseTranscriptEarnedAdditionalCredits] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseTranscript] [INT] NOT NULL,
	[AdditionalCreditType] [NVARCHAR](450) NOT NULL,
	[Credits] [DECIMAL](9, 2) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseTranscriptEarnedAdditionalCredits] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseTranscriptEarnedAdditionalCredits] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [CourseTranscriptEarnedAdditionalCredits_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_ParentTable] FOREIGN KEY ([tid_CourseTranscript])
REFERENCES [t_edfi].[CourseTranscript] ([tid_CourseTranscript]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CourseTranscriptEarnedAdditionalCredits] CHECK CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'AdditionalCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'Credits';
GO
/****** TABLE: [t_edfi].[Credential] ******/

CREATE TABLE [t_edfi].[Credential]
(
    [tid_Credential] [INT] IDENTITY(1,1) NOT NULL,
	[CredentialIdentifier] [NVARCHAR](60) NOT NULL,
	[StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[EffectiveDate] [DATE] NULL,
	[ExpirationDate] [DATE] NULL,
	[CredentialFieldDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IssuanceDate] [DATE] NOT NULL,
	[CredentialType] [NVARCHAR](450) NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TeachingCredentialDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TeachingCredentialBasisType] [NVARCHAR](450) NULL,
	[CurrentCredential] [BIT] NULL,
	[TeachingCredentialDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CredentialFieldDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Credential] PRIMARY KEY NONCLUSTERED
(
    [tid_Credential] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Credential] ADD CONSTRAINT [Credential_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Credential] ADD CONSTRAINT [Credential_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Credential] ADD CONSTRAINT [Credential_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The legal document giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Credential';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier or serial number assigned to the credential.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'CredentialIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'StateOfIssueStateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year, month and day on which an active credential held by an individual was issued.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'EffectiveDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an active credential held by an individual will expire.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'ExpirationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an active credential was issued to an individual.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'IssuanceDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'CredentialType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'TeachingCredentialDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'TeachingCredentialBasisType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether this is the credential currently being used for employment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'CurrentCredential';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'TeachingCredentialDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Credential', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCredential_Id ON [t_edfi].[Credential]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CredentialSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CredentialSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Credential] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Credential], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CredentialSnapshotRecord] ADD CONSTRAINT [FK_CredentialSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CredentialSnapshotRecord] CHECK CONSTRAINT [FK_CredentialSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CredentialSnapshotRecord] ADD CONSTRAINT [FK_CredentialSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Credential])
REFERENCES [t_edfi].[Credential] ([tid_Credential]);
ALTER TABLE [t_edfi].[CredentialSnapshotRecord] CHECK CONSTRAINT [FK_CredentialSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[CredentialEndorsement] ******/

CREATE TABLE [t_edfi].[CredentialEndorsement]
(
	[tid_CredentialEndorsement] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Credential] [INT] NOT NULL,
	[CredentialEndorsement] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialEndorsement] PRIMARY KEY NONCLUSTERED
(
	[tid_CredentialEndorsement] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CredentialEndorsement] ADD CONSTRAINT [CredentialEndorsement_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CredentialEndorsement] ADD CONSTRAINT [FK_CredentialEndorsement_ParentTable] FOREIGN KEY ([tid_Credential])
REFERENCES [t_edfi].[Credential] ([tid_Credential]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CredentialEndorsement] CHECK CONSTRAINT [FK_CredentialEndorsement_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Endorsements are attachments to teaching certificates and indicate areas of specialization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CredentialEndorsement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Endorsements are attachments to teaching certificates and indicate areas of specialization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialEndorsement', @level2type=N'COLUMN', @level2name=N'CredentialEndorsement';
GO

/****** TABLE: [t_extension].[CredentialExtension] ******/

CREATE TABLE [t_extension].[CredentialExtension]
(
	[tid_CredentialExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Credential] [INT] NOT NULL,
	[RevocationDate] [DATE] NULL,
	[RevocationReason] [NVARCHAR](40) NULL,
	[SuspensionDate] [DATE] NULL,
	[SuspensionReason] [NVARCHAR](40) NULL,
	[ValueType] [NVARCHAR](450) NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_CredentialExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CredentialExtension] ADD CONSTRAINT [FK_CredentialExtension_ParentTable] FOREIGN KEY ([tid_Credential])
REFERENCES [t_edfi].[Credential] ([tid_Credential]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CredentialExtension] CHECK CONSTRAINT [FK_CredentialExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CredentialExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an active credential held by an individual was revoked.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialExtension', @level2type=N'COLUMN', @level2name=N'RevocationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the revocation of credential.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialExtension', @level2type=N'COLUMN', @level2name=N'RevocationReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an active credential held by an individual was suspended.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialExtension', @level2type=N'COLUMN', @level2name=N'SuspensionDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the suspension of credential.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialExtension', @level2type=N'COLUMN', @level2name=N'SuspensionReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialExtension', @level2type=N'COLUMN', @level2name=N'ValueType';
GO

/****** TABLE: [t_extension].[CredentialBoardCertification] ******/

CREATE TABLE [t_extension].[CredentialBoardCertification]
(
	[tid_CredentialBoardCertification] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Credential] [INT] NOT NULL,
	[BoardCertification] [BIT] NULL,
	[BoardCertificationDate] [DATE] NULL,
	[BoardCertificationTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BoardCertificationTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialBoardCertification] PRIMARY KEY NONCLUSTERED
(
	[tid_CredentialBoardCertification] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CredentialBoardCertification] ADD CONSTRAINT [CredentialBoardCertification_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CredentialBoardCertification] ADD CONSTRAINT [FK_CredentialBoardCertification_ParentTable] FOREIGN KEY ([tid_Credential])
REFERENCES [t_edfi].[Credential] ([tid_Credential]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CredentialBoardCertification] CHECK CONSTRAINT [FK_CredentialBoardCertification_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Board certification information for an individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CredentialBoardCertification';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether an individual is board certified.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialBoardCertification', @level2type=N'COLUMN', @level2name=N'BoardCertification';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which a board certification was awarded.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialBoardCertification', @level2type=N'COLUMN', @level2name=N'BoardCertificationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialBoardCertification', @level2type=N'COLUMN', @level2name=N'BoardCertificationTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialBoardCertification', @level2type=N'COLUMN', @level2name=N'BoardCertificationTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[CredentialCertificationExam] ******/

CREATE TABLE [t_extension].[CredentialCertificationExam]
(
	[tid_CredentialCertificationExam] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Credential] [INT] NOT NULL,
	[CertificationExamTitle] [NVARCHAR](60) NOT NULL,
	[CertificationExamTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[CertificationExamOverallScore] [INT] NOT NULL,
	[CertificationExamTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialCertificationExam] PRIMARY KEY NONCLUSTERED
(
	[tid_CredentialCertificationExam] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CredentialCertificationExam] ADD CONSTRAINT [CredentialCertificationExam_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CredentialCertificationExam] ADD CONSTRAINT [FK_CredentialCertificationExam_ParentTable] FOREIGN KEY ([tid_Credential])
REFERENCES [t_edfi].[Credential] ([tid_Credential]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CredentialCertificationExam] CHECK CONSTRAINT [FK_CredentialCertificationExam_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Certification information for an individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CredentialCertificationExam';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the certification.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialCertificationExam', @level2type=N'COLUMN', @level2name=N'CertificationExamTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialCertificationExam', @level2type=N'COLUMN', @level2name=N'CertificationExamTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The overall score that was received on the certification exam.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialCertificationExam', @level2type=N'COLUMN', @level2name=N'CertificationExamOverallScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialCertificationExam', @level2type=N'COLUMN', @level2name=N'CertificationExamTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[CredentialRecommendation] ******/

CREATE TABLE [t_extension].[CredentialRecommendation]
(
	[tid_CredentialRecommendation] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Credential] [INT] NOT NULL,
	[CredentialFieldDescriptorCodeValue] [NVARCHAR](50) NULL,
	[LevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TeachingCredentialDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TeachingCredentialDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[LevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CredentialFieldDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialRecommendation] PRIMARY KEY NONCLUSTERED
(
	[tid_CredentialRecommendation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CredentialRecommendation] ADD CONSTRAINT [CredentialRecommendation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CredentialRecommendation] ADD CONSTRAINT [FK_CredentialRecommendation_ParentTable] FOREIGN KEY ([tid_Credential])
REFERENCES [t_edfi].[Credential] ([tid_Credential]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CredentialRecommendation] CHECK CONSTRAINT [FK_CredentialRecommendation_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the recommendation for the credential.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CredentialRecommendation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendation', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendation', @level2type=N'COLUMN', @level2name=N'LevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendation', @level2type=N'COLUMN', @level2name=N'TeachingCredentialDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendation', @level2type=N'COLUMN', @level2name=N'TeachingCredentialDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendation', @level2type=N'COLUMN', @level2name=N'LevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendation', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorNamespace';
GO

/****** TABLE: [t_extension].[CredentialRecommendingInstitution] ******/

CREATE TABLE [t_extension].[CredentialRecommendingInstitution]
(
	[tid_CredentialRecommendingInstitution] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Credential] [INT] NOT NULL,
	[RecommendingInstutionName] [NVARCHAR](75) NOT NULL,
	[RecommendingDate] [DATE] NULL,
	[RecommendingInstitutionCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[RecommendingInstitutionStateAbbreviationType] [NVARCHAR](450) NULL,
	[RecommendingInstitutionCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialRecommendingInstitution] PRIMARY KEY NONCLUSTERED
(
	[tid_CredentialRecommendingInstitution] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CredentialRecommendingInstitution] ADD CONSTRAINT [CredentialRecommendingInstitution_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CredentialRecommendingInstitution] ADD CONSTRAINT [FK_CredentialRecommendingInstitution_ParentTable] FOREIGN KEY ([tid_Credential])
REFERENCES [t_edfi].[Credential] ([tid_Credential]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CredentialRecommendingInstitution] CHECK CONSTRAINT [FK_CredentialRecommendingInstitution_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information regarding the institution that is recommending a candidate for certification.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CredentialRecommendingInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The full, legally accepted name of the institution.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendingInstitution', @level2type=N'COLUMN', @level2name=N'RecommendingInstutionName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which a recommendation for a candidate is made.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendingInstitution', @level2type=N'COLUMN', @level2name=N'RecommendingDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendingInstitution', @level2type=N'COLUMN', @level2name=N'RecommendingInstitutionCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendingInstitution', @level2type=N'COLUMN', @level2name=N'RecommendingInstitutionStateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CredentialRecommendingInstitution', @level2type=N'COLUMN', @level2name=N'RecommendingInstitutionCountryDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[CredentialFieldDescriptor] ******/

CREATE TABLE [t_edfi].[CredentialFieldDescriptor]
(
    [tid_CredentialFieldDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialFieldDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_CredentialFieldDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CredentialFieldDescriptor] ADD CONSTRAINT [CredentialFieldDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CredentialFieldDescriptor] ADD CONSTRAINT [CredentialFieldDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CredentialFieldDescriptor] ADD CONSTRAINT [CredentialFieldDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the fields of certification that the state education agency offers to teachers.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CredentialFieldDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCredentialFieldDescriptor_Id ON [t_edfi].[CredentialFieldDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[CredentialFieldDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CredentialFieldDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CredentialFieldDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CredentialFieldDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CredentialFieldDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CredentialFieldDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[CredentialFieldDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CredentialFieldDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[CredentialFieldDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CredentialFieldDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CredentialFieldDescriptor])
REFERENCES [t_edfi].[CredentialFieldDescriptor] ([tid_CredentialFieldDescriptor]);
ALTER TABLE [t_edfi].[CredentialFieldDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CredentialFieldDescriptorSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[CredentialType] ******/

CREATE TABLE [t_edfi].[CredentialType]
(
    [tid_CredentialType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CredentialType] PRIMARY KEY NONCLUSTERED
(
    [tid_CredentialType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CredentialType] ADD CONSTRAINT [CredentialType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CredentialType] ADD CONSTRAINT [CredentialType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CredentialType] ADD CONSTRAINT [CredentialType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the category of credential an individual holds.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CredentialType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Credential type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Credential type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CredentialType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CreditType] ******/

CREATE TABLE [t_edfi].[CreditType]
(
    [tid_CreditType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CreditType] PRIMARY KEY NONCLUSTERED
(
    [tid_CreditType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CreditType] ADD CONSTRAINT [CreditType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CreditType] ADD CONSTRAINT [CreditType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CreditType] ADD CONSTRAINT [CreditType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CreditType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Credit type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CreditType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Credit type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CreditType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[CurriculumUsedType] ******/

CREATE TABLE [t_edfi].[CurriculumUsedType]
(
    [tid_CurriculumUsedType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_CurriculumUsedType] PRIMARY KEY NONCLUSTERED
(
    [tid_CurriculumUsedType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[CurriculumUsedType] ADD CONSTRAINT [CurriculumUsedType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[CurriculumUsedType] ADD CONSTRAINT [CurriculumUsedType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[CurriculumUsedType] ADD CONSTRAINT [CurriculumUsedType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of curriculum used in an early learning classroom or group.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'CurriculumUsedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CurriculumUsedType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CurriculumUsed type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CurriculumUsedType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CurriculumUsed type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'CurriculumUsedType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DeliveryMethodType] ******/

CREATE TABLE [t_edfi].[DeliveryMethodType]
(
    [tid_DeliveryMethodType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_DeliveryMethodType] PRIMARY KEY NONCLUSTERED
(
    [tid_DeliveryMethodType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DeliveryMethodType] ADD CONSTRAINT [DeliveryMethodType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DeliveryMethodType] ADD CONSTRAINT [DeliveryMethodType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DeliveryMethodType] ADD CONSTRAINT [DeliveryMethodType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DeliveryMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DeliveryMethodType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DeliveryMethod type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DeliveryMethodType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DeliveryMethod type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DeliveryMethodType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DiagnosisDescriptor] ******/

CREATE TABLE [t_edfi].[DiagnosisDescriptor]
(
    [tid_DiagnosisDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[DiagnosisType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DiagnosisDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_DiagnosisDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DiagnosisDescriptor] ADD CONSTRAINT [DiagnosisDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DiagnosisDescriptor] ADD CONSTRAINT [DiagnosisDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DiagnosisDescriptor] ADD CONSTRAINT [DiagnosisDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines diagnoses that interventions are intended to target.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DiagnosisDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN', @level2name=N'DiagnosisType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TDiagnosisDescriptor_Id ON [t_edfi].[DiagnosisDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[DiagnosisDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[DiagnosisDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_DiagnosisDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DiagnosisDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_DiagnosisDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DiagnosisDescriptorSnapshotRecord] ADD CONSTRAINT [FK_DiagnosisDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DiagnosisDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_DiagnosisDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[DiagnosisDescriptorSnapshotRecord] ADD CONSTRAINT [FK_DiagnosisDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_DiagnosisDescriptor])
REFERENCES [t_edfi].[DiagnosisDescriptor] ([tid_DiagnosisDescriptor]);
ALTER TABLE [t_edfi].[DiagnosisDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_DiagnosisDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[DiagnosisType] ******/

CREATE TABLE [t_edfi].[DiagnosisType]
(
	[tid_DiagnosisType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_DiagnosisType] PRIMARY KEY NONCLUSTERED
(
	[tid_DiagnosisType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DiagnosisType] ADD CONSTRAINT [DiagnosisType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DiagnosisType] ADD CONSTRAINT [DiagnosisType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DiagnosisType] ADD CONSTRAINT [DiagnosisType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the intervention (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DiagnosisType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Diagnosis type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Diagnosis type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiagnosisType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DiplomaLevelType] ******/

CREATE TABLE [t_edfi].[DiplomaLevelType]
(
    [tid_DiplomaLevelType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_DiplomaLevelType] PRIMARY KEY NONCLUSTERED
(
    [tid_DiplomaLevelType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DiplomaLevelType] ADD CONSTRAINT [DiplomaLevelType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DiplomaLevelType] ADD CONSTRAINT [DiplomaLevelType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DiplomaLevelType] ADD CONSTRAINT [DiplomaLevelType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DiplomaLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiplomaLevelType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DiplomaLevel type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiplomaLevelType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DiplomaLevel type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiplomaLevelType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DiplomaType] ******/

CREATE TABLE [t_edfi].[DiplomaType]
(
    [tid_DiplomaType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_DiplomaType] PRIMARY KEY NONCLUSTERED
(
    [tid_DiplomaType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DiplomaType] ADD CONSTRAINT [DiplomaType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DiplomaType] ADD CONSTRAINT [DiplomaType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DiplomaType] ADD CONSTRAINT [DiplomaType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DiplomaType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiplomaType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Diploma type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiplomaType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Diploma type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DiplomaType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DisabilityCategoryType] ******/

CREATE TABLE [t_edfi].[DisabilityCategoryType]
(
    [tid_DisabilityCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_DisabilityCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_DisabilityCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisabilityCategoryType] ADD CONSTRAINT [DisabilityCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisabilityCategoryType] ADD CONSTRAINT [DisabilityCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisabilityCategoryType] ADD CONSTRAINT [DisabilityCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of disability designation (e.g., IDEA, Section 504).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisabilityCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DisabilityCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DisabilityCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DisabilityDescriptor] ******/

CREATE TABLE [t_edfi].[DisabilityDescriptor]
(
    [tid_DisabilityDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[DisabilityType] [NVARCHAR](450) NULL,
	[DisabilityCategoryType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisabilityDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_DisabilityDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisabilityDescriptor] ADD CONSTRAINT [DisabilityDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisabilityDescriptor] ADD CONSTRAINT [DisabilityDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisabilityDescriptor] ADD CONSTRAINT [DisabilityDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines a student''s impairment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisabilityDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN', @level2name=N'DisabilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN', @level2name=N'DisabilityCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TDisabilityDescriptor_Id ON [t_edfi].[DisabilityDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[DisabilityDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[DisabilityDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_DisabilityDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisabilityDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_DisabilityDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisabilityDescriptorSnapshotRecord] ADD CONSTRAINT [FK_DisabilityDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisabilityDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_DisabilityDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[DisabilityDescriptorSnapshotRecord] ADD CONSTRAINT [FK_DisabilityDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_DisabilityDescriptor])
REFERENCES [t_edfi].[DisabilityDescriptor] ([tid_DisabilityDescriptor]);
ALTER TABLE [t_edfi].[DisabilityDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_DisabilityDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[DisabilityType] ******/

CREATE TABLE [t_edfi].[DisabilityType]
(
	[tid_DisabilityType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_DisabilityType] PRIMARY KEY NONCLUSTERED
(
	[tid_DisabilityType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisabilityType] ADD CONSTRAINT [DisabilityType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisabilityType] ADD CONSTRAINT [DisabilityType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisabilityType] ADD CONSTRAINT [DisabilityType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A disability condition that describes a child''s impairment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisabilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Disability type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Disability type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DisabilityDeterminationSourceType] ******/

CREATE TABLE [t_edfi].[DisabilityDeterminationSourceType]
(
    [tid_DisabilityDeterminationSourceType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_DisabilityDeterminationSourceType] PRIMARY KEY NONCLUSTERED
(
    [tid_DisabilityDeterminationSourceType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisabilityDeterminationSourceType] ADD CONSTRAINT [DisabilityDeterminationSourceType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisabilityDeterminationSourceType] ADD CONSTRAINT [DisabilityDeterminationSourceType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisabilityDeterminationSourceType] ADD CONSTRAINT [DisabilityDeterminationSourceType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The source that provided the disability determination.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisabilityDeterminationSourceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDeterminationSourceType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DisabilityDeterminationSource type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDeterminationSourceType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DisabilityDeterminationSource type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisabilityDeterminationSourceType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DisciplineAction] ******/

CREATE TABLE [t_edfi].[DisciplineAction]
(
    [tid_DisciplineAction] [INT] IDENTITY(1,1) NOT NULL,
	[DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL,
	[DisciplineDate] [DATE] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[DisciplineActionLength] [INT] NULL,
	[ActualDisciplineActionLength] [INT] NULL,
	[DisciplineActionLengthDifferenceReasonType] [NVARCHAR](450) NULL,
	[RelatedToZeroTolerancePolicy] [BIT] NULL,
	[ResponsibilitySchoolId] [INT] NOT NULL,
	[AssignmentSchoolId] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineAction] PRIMARY KEY NONCLUSTERED
(
    [tid_DisciplineAction] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineAction] ADD CONSTRAINT [DisciplineAction_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineAction] ADD CONSTRAINT [DisciplineAction_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisciplineAction] ADD CONSTRAINT [DisciplineAction_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents actions taken by an education organization after a disruptive event that is recorded as a discipline incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned by the education organization to the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineActionIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineActionLength';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the actual length in school days of a student''s disciplinary assignment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'ActualDisciplineActionLength';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineActionLengthDifferenceReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'RelatedToZeroTolerancePolicy';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'ResponsibilitySchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'AssignmentSchoolId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TDisciplineAction_Id ON [t_edfi].[DisciplineAction]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[DisciplineActionSnapshotRecord] ******/

CREATE TABLE [t_edfi].[DisciplineActionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_DisciplineAction] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineActionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_DisciplineAction], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineActionSnapshotRecord] ADD CONSTRAINT [FK_DisciplineActionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineActionSnapshotRecord] CHECK CONSTRAINT [FK_DisciplineActionSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[DisciplineActionSnapshotRecord] ADD CONSTRAINT [FK_DisciplineActionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_DisciplineAction])
REFERENCES [t_edfi].[DisciplineAction] ([tid_DisciplineAction]);
ALTER TABLE [t_edfi].[DisciplineActionSnapshotRecord] CHECK CONSTRAINT [FK_DisciplineActionSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[DisciplineActionDiscipline] ******/

CREATE TABLE [t_edfi].[DisciplineActionDiscipline]
(
	[tid_DisciplineActionDiscipline] [INT] IDENTITY(1,1) NOT NULL,
    [tid_DisciplineAction] [INT] NOT NULL,
	[DisciplineDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DisciplineDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineActionDiscipline] PRIMARY KEY NONCLUSTERED
(
	[tid_DisciplineActionDiscipline] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineActionDiscipline] ADD CONSTRAINT [DisciplineActionDiscipline_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineActionDiscipline] ADD CONSTRAINT [FK_DisciplineActionDiscipline_ParentTable] FOREIGN KEY ([tid_DisciplineAction])
REFERENCES [t_edfi].[DisciplineAction] ([tid_DisciplineAction]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineActionDiscipline] CHECK CONSTRAINT [FK_DisciplineActionDiscipline_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDiscipline';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionDiscipline', @level2type=N'COLUMN', @level2name=N'DisciplineDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionDiscipline', @level2type=N'COLUMN', @level2name=N'DisciplineDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[DisciplineActionDisciplineIncident] ******/

CREATE TABLE [t_edfi].[DisciplineActionDisciplineIncident]
(
	[tid_DisciplineActionDisciplineIncident] [INT] IDENTITY(1,1) NOT NULL,
    [tid_DisciplineAction] [INT] NOT NULL,
	[IncidentIdentifier] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineActionDisciplineIncident] PRIMARY KEY NONCLUSTERED
(
	[tid_DisciplineActionDisciplineIncident] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineActionDisciplineIncident] ADD CONSTRAINT [DisciplineActionDisciplineIncident_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineActionDisciplineIncident] ADD CONSTRAINT [FK_DisciplineActionDisciplineIncident_ParentTable] FOREIGN KEY ([tid_DisciplineAction])
REFERENCES [t_edfi].[DisciplineAction] ([tid_DisciplineAction]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineActionDisciplineIncident] CHECK CONSTRAINT [FK_DisciplineActionDisciplineIncident_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reference to the DisciplineIncident associated with the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDisciplineIncident';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionDisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionDisciplineIncident', @level2type=N'COLUMN', @level2name=N'SchoolId';
GO

/****** TABLE: [t_edfi].[DisciplineActionStaff] ******/

CREATE TABLE [t_edfi].[DisciplineActionStaff]
(
	[tid_DisciplineActionStaff] [INT] IDENTITY(1,1) NOT NULL,
    [tid_DisciplineAction] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineActionStaff] PRIMARY KEY NONCLUSTERED
(
	[tid_DisciplineActionStaff] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineActionStaff] ADD CONSTRAINT [DisciplineActionStaff_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineActionStaff] ADD CONSTRAINT [FK_DisciplineActionStaff_ParentTable] FOREIGN KEY ([tid_DisciplineAction])
REFERENCES [t_edfi].[DisciplineAction] ([tid_DisciplineAction]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineActionStaff] CHECK CONSTRAINT [FK_DisciplineActionStaff_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The staff responsible for enforcing the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionStaff';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionStaff', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
GO
/****** TABLE: [t_edfi].[DisciplineActionLengthDifferenceReasonType] ******/

CREATE TABLE [t_edfi].[DisciplineActionLengthDifferenceReasonType]
(
    [tid_DisciplineActionLengthDifferenceReasonType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_DisciplineActionLengthDifferenceReasonType] PRIMARY KEY NONCLUSTERED
(
    [tid_DisciplineActionLengthDifferenceReasonType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineActionLengthDifferenceReasonType] ADD CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineActionLengthDifferenceReasonType] ADD CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisciplineActionLengthDifferenceReasonType] ADD CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the reason for the difference, if any, between the official and actual lengths of a student''s disciplinary assignment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionLengthDifferenceReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionLengthDifferenceReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DisciplineActionLengthDifferenceReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionLengthDifferenceReasonType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DisciplineActionLengthDifferenceReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineActionLengthDifferenceReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DisciplineDescriptor] ******/

CREATE TABLE [t_edfi].[DisciplineDescriptor]
(
    [tid_DisciplineDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[DisciplineType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_DisciplineDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineDescriptor] ADD CONSTRAINT [DisciplineDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineDescriptor] ADD CONSTRAINT [DisciplineDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisciplineDescriptor] ADD CONSTRAINT [DisciplineDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of action or removal from the classroom used to discipline the student involved as a perpetrator in a discipline incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineDescriptor', @level2type=N'COLUMN', @level2name=N'DisciplineType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TDisciplineDescriptor_Id ON [t_edfi].[DisciplineDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[DisciplineDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[DisciplineDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_DisciplineDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_DisciplineDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineDescriptorSnapshotRecord] ADD CONSTRAINT [FK_DisciplineDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_DisciplineDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[DisciplineDescriptorSnapshotRecord] ADD CONSTRAINT [FK_DisciplineDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_DisciplineDescriptor])
REFERENCES [t_edfi].[DisciplineDescriptor] ([tid_DisciplineDescriptor]);
ALTER TABLE [t_edfi].[DisciplineDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_DisciplineDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[DisciplineType] ******/

CREATE TABLE [t_edfi].[DisciplineType]
(
	[tid_DisciplineType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_DisciplineType] PRIMARY KEY NONCLUSTERED
(
	[tid_DisciplineType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineType] ADD CONSTRAINT [DisciplineType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineType] ADD CONSTRAINT [DisciplineType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisciplineType] ADD CONSTRAINT [DisciplineType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of discipline action.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Discipline type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Discipline type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[DisciplineIncident] ******/

CREATE TABLE [t_edfi].[DisciplineIncident]
(
    [tid_DisciplineIncident] [INT] IDENTITY(1,1) NOT NULL,
	[IncidentIdentifier] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[IncidentDate] [DATE] NOT NULL,
	[IncidentTime] [TIME](7) NULL,
	[IncidentLocationType] [NVARCHAR](450) NULL,
	[IncidentDescription] [NVARCHAR](1024) NULL,
	[ReporterDescriptionDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ReporterName] [NVARCHAR](75) NULL,
	[ReportedToLawEnforcement] [BIT] NULL,
	[CaseNumber] [NVARCHAR](20) NULL,
	[IncidentCost] [MONEY] NULL,
	[StaffUniqueId] [NVARCHAR](32) NULL,
	[ReporterDescriptionDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineIncident] PRIMARY KEY NONCLUSTERED
(
    [tid_DisciplineIncident] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineIncident] ADD CONSTRAINT [DisciplineIncident_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineIncident] ADD CONSTRAINT [DisciplineIncident_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[DisciplineIncident] ADD CONSTRAINT [DisciplineIncident_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents an occurrence of an infraction ranging from a minor heavioral problem that disrupts the orderly functioning of a school or classroom (such as tardiness) to a criminal act that results in the involvement of a law enforcement official (such as robbery). A single event (e.g., a fight) is one incident regardless of how many perpetrators or victims are involved. Discipline incidents are events classified as warranting discipline action.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the DisciplineIncident occurred.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the incident took place.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentTime';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentLocationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for an incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'ReporterDescriptionDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the reporter of the DisciplineIncident by name.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'ReporterName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the incident was reported to law enforcement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'ReportedToLawEnforcement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The case number assigned to the DisciplineIncident by law enforcement or other organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'CaseNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentCost';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'ReporterDescriptionDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TDisciplineIncident_Id ON [t_edfi].[DisciplineIncident]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[DisciplineIncidentSnapshotRecord] ******/

CREATE TABLE [t_edfi].[DisciplineIncidentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_DisciplineIncident] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineIncidentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_DisciplineIncident], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineIncidentSnapshotRecord] ADD CONSTRAINT [FK_DisciplineIncidentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineIncidentSnapshotRecord] CHECK CONSTRAINT [FK_DisciplineIncidentSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[DisciplineIncidentSnapshotRecord] ADD CONSTRAINT [FK_DisciplineIncidentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_DisciplineIncident])
REFERENCES [t_edfi].[DisciplineIncident] ([tid_DisciplineIncident]);
ALTER TABLE [t_edfi].[DisciplineIncidentSnapshotRecord] CHECK CONSTRAINT [FK_DisciplineIncidentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[DisciplineIncidentBehavior] ******/

CREATE TABLE [t_edfi].[DisciplineIncidentBehavior]
(
	[tid_DisciplineIncidentBehavior] [INT] IDENTITY(1,1) NOT NULL,
    [tid_DisciplineIncident] [INT] NOT NULL,
	[BehaviorDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BehaviorDetailedDescription] [NVARCHAR](1024) NULL,
	[BehaviorDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineIncidentBehavior] PRIMARY KEY NONCLUSTERED
(
	[tid_DisciplineIncidentBehavior] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineIncidentBehavior] ADD CONSTRAINT [DisciplineIncidentBehavior_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineIncidentBehavior] ADD CONSTRAINT [FK_DisciplineIncidentBehavior_ParentTable] FOREIGN KEY ([tid_DisciplineIncident])
REFERENCES [t_edfi].[DisciplineIncident] ([tid_DisciplineIncident]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineIncidentBehavior] CHECK CONSTRAINT [FK_DisciplineIncidentBehavior_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes behavior by category and provides a detailed description.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentBehavior';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncidentBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies a more granular level of detail of a behavior involved in the incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncidentBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDetailedDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncidentBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[DisciplineIncidentWeapon] ******/

CREATE TABLE [t_edfi].[DisciplineIncidentWeapon]
(
	[tid_DisciplineIncidentWeapon] [INT] IDENTITY(1,1) NOT NULL,
    [tid_DisciplineIncident] [INT] NOT NULL,
	[WeaponDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[WeaponDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_DisciplineIncidentWeapon] PRIMARY KEY NONCLUSTERED
(
	[tid_DisciplineIncidentWeapon] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[DisciplineIncidentWeapon] ADD CONSTRAINT [DisciplineIncidentWeapon_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[DisciplineIncidentWeapon] ADD CONSTRAINT [FK_DisciplineIncidentWeapon_ParentTable] FOREIGN KEY ([tid_DisciplineIncident])
REFERENCES [t_edfi].[DisciplineIncident] ([tid_DisciplineIncident]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[DisciplineIncidentWeapon] CHECK CONSTRAINT [FK_DisciplineIncidentWeapon_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentWeapon';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncidentWeapon', @level2type=N'COLUMN', @level2name=N'WeaponDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'DisciplineIncidentWeapon', @level2type=N'COLUMN', @level2name=N'WeaponDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[EducationalEnvironmentType] ******/

CREATE TABLE [t_edfi].[EducationalEnvironmentType]
(
    [tid_EducationalEnvironmentType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_EducationalEnvironmentType] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationalEnvironmentType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationalEnvironmentType] ADD CONSTRAINT [EducationalEnvironmentType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationalEnvironmentType] ADD CONSTRAINT [EducationalEnvironmentType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationalEnvironmentType] ADD CONSTRAINT [EducationalEnvironmentType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting in which a child receives education and related services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationalEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationalEnvironmentType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationalEnvironment type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationalEnvironmentType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationalEnvironment type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationalEnvironmentType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EducationContent] ******/

CREATE TABLE [t_edfi].[EducationContent]
(
    [tid_EducationContent] [INT] IDENTITY(1,1) NOT NULL,
	[ContentIdentifier] [NVARCHAR](225) NOT NULL,
	[LearningResourceMetadataURI] [NVARCHAR](255) NULL,
	[ShortDescription] [NVARCHAR](75) NULL,
	[Description] [NVARCHAR](1024) NULL,
	[AdditionalAuthorsIndicator] [BIT] NULL,
	[Publisher] [NVARCHAR](50) NULL,
	[TimeRequired] [NVARCHAR](30) NULL,
	[InteractivityStyleType] [NVARCHAR](450) NULL,
	[ContentClassType] [NVARCHAR](450) NULL,
	[UseRightsURL] [NVARCHAR](255) NULL,
	[PublicationDate] [DATE] NULL,
	[PublicationYear] [SMALLINT] NULL,
	[Version] [NVARCHAR](10) NULL,
	[LearningStandardId] [NVARCHAR](60) NULL,
	[Cost] [MONEY] NULL,
	[CostRateType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContent] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationContent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContent] ADD CONSTRAINT [EducationContent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContent] ADD CONSTRAINT [EducationContent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationContent] ADD CONSTRAINT [EducationContent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents materials for students or teachers that can be used for teaching, learning, research, and more. Education content includes full courses, course materials, modules, intervention descriptions, textbooks, streaming videos, tests, software, and any other tools, materials, or techniques used to support access to knowledge.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A short description or name of the entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An extended written representation of the education content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation "et al".', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'AdditionalAuthorsIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization credited with publishing the resource.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Publisher';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'TimeRequired';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'InteractivityStyleType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'ContentClassType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URL where the owner specifies permissions for using the resource.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'UseRightsURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'PublicationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'PublicationYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An amount that has to be paid or spent to buy or obtain the EducationContent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Cost';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'CostRateType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the EducationContent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Namespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationContent_Id ON [t_edfi].[EducationContent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationContentSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationContentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationContent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentSnapshotRecord] ADD CONSTRAINT [FK_EducationContentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentSnapshotRecord] CHECK CONSTRAINT [FK_EducationContentSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationContentSnapshotRecord] ADD CONSTRAINT [FK_EducationContentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]);
ALTER TABLE [t_edfi].[EducationContentSnapshotRecord] CHECK CONSTRAINT [FK_EducationContentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[EducationContentAuthor] ******/

CREATE TABLE [t_edfi].[EducationContentAuthor]
(
	[tid_EducationContentAuthor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
	[Author] [NVARCHAR](225) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentAuthor] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationContentAuthor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentAuthor] ADD CONSTRAINT [EducationContentAuthor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContentAuthor] ADD CONSTRAINT [FK_EducationContentAuthor_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentAuthor] CHECK CONSTRAINT [FK_EducationContentAuthor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The individual credited with the creation of the resource.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContentAuthor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The individual credited with the creation of the resource.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentAuthor', @level2type=N'COLUMN', @level2name=N'Author';
GO

/****** TABLE: [t_edfi].[EducationContentDerivativeSourceEducationContent] ******/

CREATE TABLE [t_edfi].[EducationContentDerivativeSourceEducationContent]
(
	[tid_EducationContentDerivativeSourceEducationContent] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentDerivativeSourceEducationContent] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationContentDerivativeSourceEducationContent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentDerivativeSourceEducationContent] ADD CONSTRAINT [EducationContentDerivativeSourceEducationContent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContentDerivativeSourceEducationContent] ADD CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentDerivativeSourceEducationContent] CHECK CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceEducationContent';
GO

/****** TABLE: [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] ******/

CREATE TABLE [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI]
(
	[tid_EducationContentDerivativeSourceLearningResourceMetadataURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
	[LearningResourceMetadataURI] [NVARCHAR](225) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentDerivativeSourceLearningResourceMetadataURI] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationContentDerivativeSourceLearningResourceMetadataURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] ADD CONSTRAINT [EducationContentDerivativeSourceLearningResourceMetadataURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] ADD CONSTRAINT [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] CHECK CONSTRAINT [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceLearningResourceMetadataURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentDerivativeSourceLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI';
GO

/****** TABLE: [t_edfi].[EducationContentDerivativeSourceURI] ******/

CREATE TABLE [t_edfi].[EducationContentDerivativeSourceURI]
(
	[tid_EducationContentDerivativeSourceURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
	[URI] [NVARCHAR](225) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentDerivativeSourceURI] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationContentDerivativeSourceURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentDerivativeSourceURI] ADD CONSTRAINT [EducationContentDerivativeSourceURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContentDerivativeSourceURI] ADD CONSTRAINT [FK_EducationContentDerivativeSourceURI_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentDerivativeSourceURI] CHECK CONSTRAINT [FK_EducationContentDerivativeSourceURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentDerivativeSourceURI', @level2type=N'COLUMN', @level2name=N'URI';
GO

/****** TABLE: [t_edfi].[EducationContentAppropriateSex] ******/

CREATE TABLE [t_edfi].[EducationContentAppropriateSex]
(
	[tid_EducationContentAppropriateSex] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentAppropriateSex] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationContentAppropriateSex] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentAppropriateSex] ADD CONSTRAINT [EducationContentAppropriateSex_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContentAppropriateSex] ADD CONSTRAINT [FK_EducationContentAppropriateSex_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentAppropriateSex] CHECK CONSTRAINT [FK_EducationContentAppropriateSex_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for which this education content is applicable. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateSex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexType';
GO

/****** TABLE: [t_edfi].[EducationContentAppropriateGradeLevel] ******/

CREATE TABLE [t_edfi].[EducationContentAppropriateGradeLevel]
(
	[tid_EducationContentAppropriateGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentAppropriateGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationContentAppropriateGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentAppropriateGradeLevel] ADD CONSTRAINT [EducationContentAppropriateGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContentAppropriateGradeLevel] ADD CONSTRAINT [FK_EducationContentAppropriateGradeLevel_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentAppropriateGradeLevel] CHECK CONSTRAINT [FK_EducationContentAppropriateGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for which this education content is applicable-if omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[EducationContentLanguage] ******/

CREATE TABLE [t_edfi].[EducationContentLanguage]
(
	[tid_EducationContentLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationContent] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationContentLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationContentLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationContentLanguage] ADD CONSTRAINT [EducationContentLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationContentLanguage] ADD CONSTRAINT [FK_EducationContentLanguage_ParentTable] FOREIGN KEY ([tid_EducationContent])
REFERENCES [t_edfi].[EducationContent] ([tid_EducationContent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationContentLanguage] CHECK CONSTRAINT [FK_EducationContentLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the Education Content is designed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationContentLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationContentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[EducationOrganization] ******/

CREATE TABLE [t_edfi].[EducationOrganization]
(
    [tid_EducationOrganization] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[StateOrganizationId] [NVARCHAR](60) NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[ShortNameOfInstitution] [NVARCHAR](75) NULL,
	[WebSite] [NVARCHAR](255) NULL,
	[OperationalStatusType] [NVARCHAR](450) NULL,
	[FederalLocaleCodeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[FederalLocaleCodeDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganization] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganization] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganization] ADD CONSTRAINT [EducationOrganization_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganization] ADD CONSTRAINT [EducationOrganization_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganization] ADD CONSTRAINT [EducationOrganization_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents any public or private institution, organization, or agency that provides instructional or support services to students or staff at any level.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education organization by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'StateOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The full, legally accepted name of the institution.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A short name for the institution.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'ShortNameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The public web site address (URL) for the EducationOrganization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'WebSite';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'OperationalStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'FederalLocaleCodeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'FederalLocaleCodeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganization_Id ON [t_edfi].[EducationOrganization]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationOrganizationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationOrganizationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganization] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganization], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationOrganizationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganization])
REFERENCES [t_edfi].[EducationOrganization] ([tid_EducationOrganization]);
ALTER TABLE [t_edfi].[EducationOrganizationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[EducationOrganizationIdentificationCode] ******/

CREATE TABLE [t_edfi].[EducationOrganizationIdentificationCode]
(
	[tid_EducationOrganizationIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganization] [INT] NOT NULL,
	[EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationIdentificationCode] ADD CONSTRAINT [EducationOrganizationIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationCode] ADD CONSTRAINT [FK_EducationOrganizationIdentificationCode_ParentTable] FOREIGN KEY ([tid_EducationOrganization])
REFERENCES [t_edfi].[EducationOrganization] ([tid_EducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationCode] CHECK CONSTRAINT [FK_EducationOrganizationIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[EducationOrganizationCategory] ******/

CREATE TABLE [t_edfi].[EducationOrganizationCategory]
(
	[tid_EducationOrganizationCategory] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganization] [INT] NOT NULL,
	[EducationOrganizationCategoryType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationCategory] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationCategory] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationCategory] ADD CONSTRAINT [EducationOrganizationCategory_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationCategory] ADD CONSTRAINT [FK_EducationOrganizationCategory_ParentTable] FOREIGN KEY ([tid_EducationOrganization])
REFERENCES [t_edfi].[EducationOrganization] ([tid_EducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationCategory] CHECK CONSTRAINT [FK_EducationOrganizationCategory_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategory';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationCategory', @level2type=N'COLUMN', @level2name=N'EducationOrganizationCategoryType';
GO

/****** TABLE: [t_edfi].[EducationOrganizationAddress] ******/

CREATE TABLE [t_edfi].[EducationOrganizationAddress]
(
	[tid_EducationOrganizationAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganization] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationAddress] ADD CONSTRAINT [EducationOrganizationAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationAddress] ADD CONSTRAINT [FK_EducationOrganizationAddress_ParentTable] FOREIGN KEY ([tid_EducationOrganization])
REFERENCES [t_edfi].[EducationOrganization] ([tid_EducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationAddress] CHECK CONSTRAINT [FK_EducationOrganizationAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[EducationOrganizationInternationalAddress] ******/

CREATE TABLE [t_edfi].[EducationOrganizationInternationalAddress]
(
	[tid_EducationOrganizationInternationalAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganization] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[AddressLine1] [NVARCHAR](150) NOT NULL,
	[AddressLine2] [NVARCHAR](150) NULL,
	[AddressLine3] [NVARCHAR](150) NULL,
	[AddressLine4] [NVARCHAR](150) NULL,
	[CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationInternationalAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationInternationalAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationInternationalAddress] ADD CONSTRAINT [EducationOrganizationInternationalAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationInternationalAddress] ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_ParentTable] FOREIGN KEY ([tid_EducationOrganization])
REFERENCES [t_edfi].[EducationOrganization] ([tid_EducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationInternationalAddress] CHECK CONSTRAINT [FK_EducationOrganizationInternationalAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes the international physical location of the education entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[EducationOrganizationInstitutionTelephone] ******/

CREATE TABLE [t_edfi].[EducationOrganizationInstitutionTelephone]
(
	[tid_EducationOrganizationInstitutionTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganization] [INT] NOT NULL,
	[InstitutionTelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationInstitutionTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationInstitutionTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationInstitutionTelephone] ADD CONSTRAINT [EducationOrganizationInstitutionTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationInstitutionTelephone] ADD CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_ParentTable] FOREIGN KEY ([tid_EducationOrganization])
REFERENCES [t_edfi].[EducationOrganization] ([tid_EducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationInstitutionTelephone] CHECK CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the education entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInstitutionTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInstitutionTelephone', @level2type=N'COLUMN', @level2name=N'InstitutionTelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInstitutionTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
GO
/****** TABLE: [t_edfi].[EducationOrganizationCategoryType] ******/

CREATE TABLE [t_edfi].[EducationOrganizationCategoryType]
(
    [tid_EducationOrganizationCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](75) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_EducationOrganizationCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationCategoryType] ADD CONSTRAINT [EducationOrganizationCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationCategoryType] ADD CONSTRAINT [EducationOrganizationCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganizationCategoryType] ADD CONSTRAINT [EducationOrganizationCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationOrganizationCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationOrganizationCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] ******/

CREATE TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptor]
(
    [tid_EducationOrganizationIdentificationSystemDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[EducationOrganizationIdentificationSystemType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationIdentificationSystemDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationIdentificationSystemDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] ADD CONSTRAINT [EducationOrganizationIdentificationSystemDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] ADD CONSTRAINT [EducationOrganizationIdentificationSystemDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] ADD CONSTRAINT [EducationOrganizationIdentificationSystemDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the originating record system and code that is used for record-keeping purposes by education organizations.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationIdentificationSystemDescriptor_Id ON [t_edfi].[EducationOrganizationIdentificationSystemDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationIdentificationSystemDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationIdentificationSystemDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationIdentificationSystemDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationIdentificationSystemDescriptor])
REFERENCES [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] ([tid_EducationOrganizationIdentificationSystemDescriptor]);
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[EducationOrganizationIdentificationSystemType] ******/

CREATE TABLE [t_edfi].[EducationOrganizationIdentificationSystemType]
(
	[tid_EducationOrganizationIdentificationSystemType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_EducationOrganizationIdentificationSystemType] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationIdentificationSystemType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemType] ADD CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemType] ADD CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganizationIdentificationSystemType] ADD CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by education organizations, social services or other agencies to refer to an education organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationOrganizationIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationOrganizationIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] ******/

CREATE TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation]
(
    [tid_EducationOrganizationInterventionPrescriptionAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL,
	[InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationInterventionPrescriptionAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationInterventionPrescriptionAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates interventions made available by an education organization. Often, a district-level education organization purchases a set of intervention prescriptions and makes them available to its schools for use on demand.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInterventionPrescriptionAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The begin date of the period during which the InterventionPrescription is available.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period during which the InterventionPrescription is available.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationInterventionPrescriptionAssociation_Id ON [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationInterventionPrescriptionAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationInterventionPrescriptionAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationInterventionPrescriptionAssociation])
REFERENCES [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] ([tid_EducationOrganizationInterventionPrescriptionAssociation]);
ALTER TABLE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[EducationOrganizationNetwork] ******/

CREATE TABLE [t_edfi].[EducationOrganizationNetwork]
(
    [tid_EducationOrganizationNetwork] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationNetworkId] [INT] NOT NULL,
	[NetworkPurposeType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationNetwork] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationNetwork] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationNetwork] ADD CONSTRAINT [EducationOrganizationNetwork_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationNetwork] ADD CONSTRAINT [EducationOrganizationNetwork_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganizationNetwork] ADD CONSTRAINT [EducationOrganizationNetwork_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is a self-organized membership network of peer-level education organizations intended to provide shared services or collective procurement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetwork';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a network of education organizations.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationNetwork', @level2type=N'COLUMN', @level2name=N'EducationOrganizationNetworkId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationNetwork', @level2type=N'COLUMN', @level2name=N'NetworkPurposeType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationNetwork_Id ON [t_edfi].[EducationOrganizationNetwork]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationOrganizationNetworkSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationNetwork] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationNetworkSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationNetwork], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationNetworkSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationNetworkSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationNetworkSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationNetworkSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationOrganizationNetworkSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationNetworkSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationNetwork])
REFERENCES [t_edfi].[EducationOrganizationNetwork] ([tid_EducationOrganizationNetwork]);
ALTER TABLE [t_edfi].[EducationOrganizationNetworkSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationNetworkSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[EducationOrganizationNetworkAssociation] ******/

CREATE TABLE [t_edfi].[EducationOrganizationNetworkAssociation]
(
    [tid_EducationOrganizationNetworkAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationNetworkId] [INT] NOT NULL,
	[MemberEducationOrganizationId] [INT] NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationNetworkAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationNetworkAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [EducationOrganizationNetworkAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [EducationOrganizationNetworkAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [EducationOrganizationNetworkAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Properties of the association between the EducationOrganization and its network(s).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetworkAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a network of education organizations.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationNetworkId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'MemberEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which the EducationOrganization joined this network.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which the EducationOrganization left this network.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationNetworkAssociation_Id ON [t_edfi].[EducationOrganizationNetworkAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationNetworkAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationNetworkAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationNetworkAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationNetworkAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationNetworkAssociation])
REFERENCES [t_edfi].[EducationOrganizationNetworkAssociation] ([tid_EducationOrganizationNetworkAssociation]);
ALTER TABLE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationNetworkAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[EducationOrganizationPeerAssociation] ******/

CREATE TABLE [t_edfi].[EducationOrganizationPeerAssociation]
(
    [tid_EducationOrganizationPeerAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[PeerEducationOrganizationId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationPeerAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationPeerAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [EducationOrganizationPeerAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [EducationOrganizationPeerAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [EducationOrganizationPeerAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The association from an education organization to its peers.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationPeerAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationPeerAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationOrganizationPeerAssociation', @level2type=N'COLUMN', @level2name=N'PeerEducationOrganizationId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationPeerAssociation_Id ON [t_edfi].[EducationOrganizationPeerAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationPeerAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationPeerAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationPeerAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationPeerAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationPeerAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationPeerAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationPeerAssociation])
REFERENCES [t_edfi].[EducationOrganizationPeerAssociation] ([tid_EducationOrganizationPeerAssociation]);
ALTER TABLE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationPeerAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[EducationPlanType] ******/

CREATE TABLE [t_edfi].[EducationPlanType]
(
    [tid_EducationPlanType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_EducationPlanType] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationPlanType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationPlanType] ADD CONSTRAINT [EducationPlanType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationPlanType] ADD CONSTRAINT [EducationPlanType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationPlanType] ADD CONSTRAINT [EducationPlanType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education plan(s) the student is following, if appropriate. For example:
    Special education
    Vocational.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationPlanType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationPlanType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationPlan type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationPlanType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationPlan type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationPlanType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EducationServiceCenter] ******/

CREATE TABLE [t_edfi].[EducationServiceCenter]
(
    [tid_EducationServiceCenter] [INT] IDENTITY(1,1) NOT NULL,
	[EducationServiceCenterId] [INT] NOT NULL,
	[StateEducationAgencyId] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationServiceCenter] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationServiceCenter] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationServiceCenter] ADD CONSTRAINT [EducationServiceCenter_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EducationServiceCenter] ADD CONSTRAINT [EducationServiceCenter_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EducationServiceCenter] ADD CONSTRAINT [EducationServiceCenter_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a regional, multi-services public agency authorized by state law to develop, manage and provide services, programs, or other support options (e.g., construction, food services, and technology services) to LEAs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EducationServiceCenter';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education service center by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationServiceCenter', @level2type=N'COLUMN', @level2name=N'EducationServiceCenterId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EducationServiceCenter', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationServiceCenter_Id ON [t_edfi].[EducationServiceCenter]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EducationServiceCenterSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EducationServiceCenterSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationServiceCenter] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationServiceCenterSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationServiceCenter], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EducationServiceCenterSnapshotRecord] ADD CONSTRAINT [FK_EducationServiceCenterSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EducationServiceCenterSnapshotRecord] CHECK CONSTRAINT [FK_EducationServiceCenterSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EducationServiceCenterSnapshotRecord] ADD CONSTRAINT [FK_EducationServiceCenterSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationServiceCenter])
REFERENCES [t_edfi].[EducationServiceCenter] ([tid_EducationServiceCenter]);
ALTER TABLE [t_edfi].[EducationServiceCenterSnapshotRecord] CHECK CONSTRAINT [FK_EducationServiceCenterSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[ElectronicMailType] ******/

CREATE TABLE [t_edfi].[ElectronicMailType]
(
    [tid_ElectronicMailType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ElectronicMailType] PRIMARY KEY NONCLUSTERED
(
    [tid_ElectronicMailType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ElectronicMailType] ADD CONSTRAINT [ElectronicMailType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ElectronicMailType] ADD CONSTRAINT [ElectronicMailType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ElectronicMailType] ADD CONSTRAINT [ElectronicMailType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of email listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ElectronicMailType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ElectronicMailType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ElectronicMail type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ElectronicMailType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ElectronicMail type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ElectronicMailType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EmploymentStatusDescriptor] ******/

CREATE TABLE [t_edfi].[EmploymentStatusDescriptor]
(
    [tid_EmploymentStatusDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[EmploymentStatusType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EmploymentStatusDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_EmploymentStatusDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EmploymentStatusDescriptor] ADD CONSTRAINT [EmploymentStatusDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EmploymentStatusDescriptor] ADD CONSTRAINT [EmploymentStatusDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EmploymentStatusDescriptor] ADD CONSTRAINT [EmploymentStatusDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of employment or contract.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN', @level2name=N'EmploymentStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEmploymentStatusDescriptor_Id ON [t_edfi].[EmploymentStatusDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EmploymentStatusDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EmploymentStatusDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EmploymentStatusDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EmploymentStatusDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EmploymentStatusDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EmploymentStatusDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EmploymentStatusDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EmploymentStatusDescriptor])
REFERENCES [t_edfi].[EmploymentStatusDescriptor] ([tid_EmploymentStatusDescriptor]);
ALTER TABLE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EmploymentStatusDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[EmploymentStatusType] ******/

CREATE TABLE [t_edfi].[EmploymentStatusType]
(
	[tid_EmploymentStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_EmploymentStatusType] PRIMARY KEY NONCLUSTERED
(
	[tid_EmploymentStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EmploymentStatusType] ADD CONSTRAINT [EmploymentStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EmploymentStatusType] ADD CONSTRAINT [EmploymentStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EmploymentStatusType] ADD CONSTRAINT [EmploymentStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the type of employment or contract.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EmploymentStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EmploymentStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EmploymentStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EntryGradeLevelReasonType] ******/

CREATE TABLE [t_edfi].[EntryGradeLevelReasonType]
(
    [tid_EntryGradeLevelReasonType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_EntryGradeLevelReasonType] PRIMARY KEY NONCLUSTERED
(
    [tid_EntryGradeLevelReasonType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EntryGradeLevelReasonType] ADD CONSTRAINT [EntryGradeLevelReasonType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EntryGradeLevelReasonType] ADD CONSTRAINT [EntryGradeLevelReasonType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EntryGradeLevelReasonType] ADD CONSTRAINT [EntryGradeLevelReasonType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EntryGradeLevelReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryGradeLevelReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EntryGradeLevelReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryGradeLevelReasonType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EntryGradeLevelReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryGradeLevelReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EntryTypeDescriptor] ******/

CREATE TABLE [t_edfi].[EntryTypeDescriptor]
(
    [tid_EntryTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[EntryType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EntryTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_EntryTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EntryTypeDescriptor] ADD CONSTRAINT [EntryTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EntryTypeDescriptor] ADD CONSTRAINT [EntryTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EntryTypeDescriptor] ADD CONSTRAINT [EntryTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the process by which a student enters a school during a given academic session.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EntryTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'EntryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEntryTypeDescriptor_Id ON [t_edfi].[EntryTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[EntryTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[EntryTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EntryTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EntryTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EntryTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EntryTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EntryTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[EntryTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EntryTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[EntryTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EntryTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EntryTypeDescriptor])
REFERENCES [t_edfi].[EntryTypeDescriptor] ([tid_EntryTypeDescriptor]);
ALTER TABLE [t_edfi].[EntryTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EntryTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[EntryType] ******/

CREATE TABLE [t_edfi].[EntryType]
(
	[tid_EntryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_EntryType] PRIMARY KEY NONCLUSTERED
(
	[tid_EntryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EntryType] ADD CONSTRAINT [EntryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EntryType] ADD CONSTRAINT [EntryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EntryType] ADD CONSTRAINT [EntryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The process by which a student enters a school during a given academic session.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EntryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Entry type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Entry type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EntryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[EventCircumstanceType] ******/

CREATE TABLE [t_edfi].[EventCircumstanceType]
(
    [tid_EventCircumstanceType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_EventCircumstanceType] PRIMARY KEY NONCLUSTERED
(
    [tid_EventCircumstanceType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[EventCircumstanceType] ADD CONSTRAINT [EventCircumstanceType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[EventCircumstanceType] ADD CONSTRAINT [EventCircumstanceType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[EventCircumstanceType] ADD CONSTRAINT [EventCircumstanceType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'EventCircumstanceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EventCircumstanceType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EventCircumstance type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EventCircumstanceType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EventCircumstance type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'EventCircumstanceType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ExitWithdrawTypeDescriptor] ******/

CREATE TABLE [t_edfi].[ExitWithdrawTypeDescriptor]
(
    [tid_ExitWithdrawTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ExitWithdrawType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExitWithdrawTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ExitWithdrawTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ExitWithdrawTypeDescriptor] ADD CONSTRAINT [ExitWithdrawTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ExitWithdrawTypeDescriptor] ADD CONSTRAINT [ExitWithdrawTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ExitWithdrawTypeDescriptor] ADD CONSTRAINT [ExitWithdrawTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the circumstances under which the student exited from membership in an educational institution.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN', @level2name=N'ExitWithdrawType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TExitWithdrawTypeDescriptor_Id ON [t_edfi].[ExitWithdrawTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ExitWithdrawTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExitWithdrawTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ExitWithdrawTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ExitWithdrawTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ExitWithdrawTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ExitWithdrawTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ExitWithdrawTypeDescriptor])
REFERENCES [t_edfi].[ExitWithdrawTypeDescriptor] ([tid_ExitWithdrawTypeDescriptor]);
ALTER TABLE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ExitWithdrawTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ExitWithdrawType] ******/

CREATE TABLE [t_edfi].[ExitWithdrawType]
(
	[tid_ExitWithdrawType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ExitWithdrawType] PRIMARY KEY NONCLUSTERED
(
	[tid_ExitWithdrawType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ExitWithdrawType] ADD CONSTRAINT [ExitWithdrawType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ExitWithdrawType] ADD CONSTRAINT [ExitWithdrawType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ExitWithdrawType] ADD CONSTRAINT [ExitWithdrawType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The circumstances under which the student exited from membership in an educational institution.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ExitWithdraw type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ExitWithdraw type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ExitWithdrawType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[FederalLocaleCodeDescriptor] ******/

CREATE TABLE [t_edfi].[FederalLocaleCodeDescriptor]
(
    [tid_FederalLocaleCodeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[FederalLocaleCodeType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_FederalLocaleCodeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_FederalLocaleCodeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[FederalLocaleCodeDescriptor] ADD CONSTRAINT [FederalLocaleCodeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[FederalLocaleCodeDescriptor] ADD CONSTRAINT [FederalLocaleCodeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[FederalLocaleCodeDescriptor] ADD CONSTRAINT [FederalLocaleCodeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'(TPDP Extension) The descriptor holds the federal locale code applicable to an education organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'FederalLocaleCodeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeDescriptor', @level2type=N'COLUMN', @level2name=N'FederalLocaleCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TFederalLocaleCodeDescriptor_Id ON [t_edfi].[FederalLocaleCodeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_FederalLocaleCodeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_FederalLocaleCodeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_FederalLocaleCodeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_FederalLocaleCodeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_FederalLocaleCodeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_FederalLocaleCodeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_FederalLocaleCodeDescriptor])
REFERENCES [t_edfi].[FederalLocaleCodeDescriptor] ([tid_FederalLocaleCodeDescriptor]);
ALTER TABLE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_FederalLocaleCodeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[FederalLocaleCodeType] ******/

CREATE TABLE [t_edfi].[FederalLocaleCodeType]
(
	[tid_FederalLocaleCodeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_FederalLocaleCodeType] PRIMARY KEY NONCLUSTERED
(
	[tid_FederalLocaleCodeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[FederalLocaleCodeType] ADD CONSTRAINT [FederalLocaleCodeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[FederalLocaleCodeType] ADD CONSTRAINT [FederalLocaleCodeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[FederalLocaleCodeType] ADD CONSTRAINT [FederalLocaleCodeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the type federal local codes.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'FederalLocaleCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the FederalLocaleCode type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the FederalLocaleCode type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FederalLocaleCodeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[FeederSchoolAssociation] ******/

CREATE TABLE [t_edfi].[FeederSchoolAssociation]
(
    [tid_FeederSchoolAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[FeederSchoolId] [INT] NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[EndDate] [DATE] NULL,
	[FeederRelationshipDescription] [NVARCHAR](1024) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_FeederSchoolAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_FeederSchoolAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FeederSchoolAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FeederSchoolAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FeederSchoolAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The association from feeder school to the receiving school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'FeederSchoolAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the first day of the feeder school association.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'FeederSchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the last day of the feeder school association.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'FeederRelationshipDescription';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TFeederSchoolAssociation_Id ON [t_edfi].[FeederSchoolAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[FeederSchoolAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[FeederSchoolAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_FeederSchoolAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_FeederSchoolAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_FeederSchoolAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[FeederSchoolAssociationSnapshotRecord] ADD CONSTRAINT [FK_FeederSchoolAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[FeederSchoolAssociationSnapshotRecord] CHECK CONSTRAINT [FK_FeederSchoolAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[FeederSchoolAssociationSnapshotRecord] ADD CONSTRAINT [FK_FeederSchoolAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_FeederSchoolAssociation])
REFERENCES [t_edfi].[FeederSchoolAssociation] ([tid_FeederSchoolAssociation]);
ALTER TABLE [t_edfi].[FeederSchoolAssociationSnapshotRecord] CHECK CONSTRAINT [FK_FeederSchoolAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[Grade] ******/

CREATE TABLE [t_edfi].[Grade]
(
    [tid_Grade] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[GradeType] [NVARCHAR](450) NOT NULL,
	[GradingPeriodBeginDate] [DATE] NOT NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[LetterGradeEarned] [NVARCHAR](20) NULL,
	[NumericGradeEarned] [DECIMAL](9, 2) NULL,
	[DiagnosticStatement] [NVARCHAR](1024) NULL,
	[PerformanceBaseConversionType] [NVARCHAR](450) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Grade] PRIMARY KEY NONCLUSTERED
(
    [tid_Grade] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Grade] ADD CONSTRAINT [Grade_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Grade] ADD CONSTRAINT [Grade_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Grade] ADD CONSTRAINT [Grade_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents an overall score or assessment tied to a course over a period of time (i.e., the grading period). Student grades are usually a compilation of marks and other scores.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Grade';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'GradeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'LetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'NumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'PerformanceBaseConversionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TGrade_Id ON [t_edfi].[Grade]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[GradeSnapshotRecord] ******/

CREATE TABLE [t_edfi].[GradeSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Grade] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradeSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Grade], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradeSnapshotRecord] ADD CONSTRAINT [FK_GradeSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GradeSnapshotRecord] CHECK CONSTRAINT [FK_GradeSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[GradeSnapshotRecord] ADD CONSTRAINT [FK_GradeSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Grade])
REFERENCES [t_edfi].[Grade] ([tid_Grade]);
ALTER TABLE [t_edfi].[GradeSnapshotRecord] CHECK CONSTRAINT [FK_GradeSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[GradebookEntry] ******/

CREATE TABLE [t_edfi].[GradebookEntry]
(
    [tid_GradebookEntry] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[DateAssigned] [DATE] NOT NULL,
	[GradebookEntryTitle] [NVARCHAR](60) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[GradebookEntryType] [NVARCHAR](450) NULL,
	[Description] [NVARCHAR](1024) NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NULL,
	[BeginDate] [DATE] NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradebookEntry] PRIMARY KEY NONCLUSTERED
(
    [tid_GradebookEntry] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradebookEntry] ADD CONSTRAINT [GradebookEntry_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradebookEntry] ADD CONSTRAINT [GradebookEntry_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradebookEntry] ADD CONSTRAINT [GradebookEntry_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an assignment, homework, or classroom assessment to be recorded in a gradebook.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the assignment, homework, or assessment was assigned or executed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'DateAssigned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or title of the activity to be recorded in the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'GradebookEntryTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'GradebookEntryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the assignment, homework, or classroom assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TGradebookEntry_Id ON [t_edfi].[GradebookEntry]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[GradebookEntrySnapshotRecord] ******/

CREATE TABLE [t_edfi].[GradebookEntrySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_GradebookEntry] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradebookEntrySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_GradebookEntry], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradebookEntrySnapshotRecord] ADD CONSTRAINT [FK_GradebookEntrySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GradebookEntrySnapshotRecord] CHECK CONSTRAINT [FK_GradebookEntrySnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[GradebookEntrySnapshotRecord] ADD CONSTRAINT [FK_GradebookEntrySnapshotRecord_ParentTable] FOREIGN KEY ([tid_GradebookEntry])
REFERENCES [t_edfi].[GradebookEntry] ([tid_GradebookEntry]);
ALTER TABLE [t_edfi].[GradebookEntrySnapshotRecord] CHECK CONSTRAINT [FK_GradebookEntrySnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[GradebookEntryLearningStandard] ******/

CREATE TABLE [t_edfi].[GradebookEntryLearningStandard]
(
	[tid_GradebookEntryLearningStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GradebookEntry] [INT] NOT NULL,
	[LearningStandardId] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradebookEntryLearningStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_GradebookEntryLearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradebookEntryLearningStandard] ADD CONSTRAINT [GradebookEntryLearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradebookEntryLearningStandard] ADD CONSTRAINT [FK_GradebookEntryLearningStandard_ParentTable] FOREIGN KEY ([tid_GradebookEntry])
REFERENCES [t_edfi].[GradebookEntry] ([tid_GradebookEntry]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GradebookEntryLearningStandard] CHECK CONSTRAINT [FK_GradebookEntryLearningStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard(s) associated with the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
GO

/****** TABLE: [t_edfi].[GradebookEntryLearningObjective] ******/

CREATE TABLE [t_edfi].[GradebookEntryLearningObjective]
(
	[tid_GradebookEntryLearningObjective] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GradebookEntry] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradebookEntryLearningObjective] PRIMARY KEY NONCLUSTERED
(
	[tid_GradebookEntryLearningObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradebookEntryLearningObjective] ADD CONSTRAINT [GradebookEntryLearningObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradebookEntryLearningObjective] ADD CONSTRAINT [FK_GradebookEntryLearningObjective_ParentTable] FOREIGN KEY ([tid_GradebookEntry])
REFERENCES [t_edfi].[GradebookEntry] ([tid_GradebookEntry]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GradebookEntryLearningObjective] CHECK CONSTRAINT [FK_GradebookEntryLearningObjective_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningObjectives associated with the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

/****** TABLE: [t_extension].[GradebookEntryExtension] ******/

CREATE TABLE [t_extension].[GradebookEntryExtension]
(
	[tid_GradebookEntryExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GradebookEntry] [INT] NOT NULL,
	[DueDate] [DATE] NULL,
	[ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradebookEntryExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_GradebookEntryExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[GradebookEntryExtension] ADD CONSTRAINT [FK_GradebookEntryExtension_ParentTable] FOREIGN KEY ([tid_GradebookEntry])
REFERENCES [t_edfi].[GradebookEntry] ([tid_GradebookEntry]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[GradebookEntryExtension] CHECK CONSTRAINT [FK_GradebookEntryExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'GradebookEntryExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date that the assignment was due.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'GradebookEntryExtension', @level2type=N'COLUMN', @level2name=N'DueDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'GradebookEntryExtension', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'GradebookEntryExtension', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[GradebookEntryType] ******/

CREATE TABLE [t_edfi].[GradebookEntryType]
(
    [tid_GradebookEntryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_GradebookEntryType] PRIMARY KEY NONCLUSTERED
(
    [tid_GradebookEntryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradebookEntryType] ADD CONSTRAINT [GradebookEntryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradebookEntryType] ADD CONSTRAINT [GradebookEntryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradebookEntryType] ADD CONSTRAINT [GradebookEntryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the gradebook entry; for example, homework, assignment, quiz, unit test, oral presentation, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GradebookEntry type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GradebookEntry type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradebookEntryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[GradeLevelDescriptor] ******/

CREATE TABLE [t_edfi].[GradeLevelDescriptor]
(
    [tid_GradeLevelDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradeLevelDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_GradeLevelDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradeLevelDescriptor] ADD CONSTRAINT [GradeLevelDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradeLevelDescriptor] ADD CONSTRAINT [GradeLevelDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradeLevelDescriptor] ADD CONSTRAINT [GradeLevelDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the set of grade levels. The map to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradeLevelDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN', @level2name=N'GradeLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TGradeLevelDescriptor_Id ON [t_edfi].[GradeLevelDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[GradeLevelDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[GradeLevelDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_GradeLevelDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradeLevelDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_GradeLevelDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradeLevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_GradeLevelDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GradeLevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_GradeLevelDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[GradeLevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_GradeLevelDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_GradeLevelDescriptor])
REFERENCES [t_edfi].[GradeLevelDescriptor] ([tid_GradeLevelDescriptor]);
ALTER TABLE [t_edfi].[GradeLevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_GradeLevelDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[GradeLevelType] ******/

CREATE TABLE [t_edfi].[GradeLevelType]
(
	[tid_GradeLevelType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_GradeLevelType] PRIMARY KEY NONCLUSTERED
(
	[tid_GradeLevelType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradeLevelType] ADD CONSTRAINT [GradeLevelType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradeLevelType] ADD CONSTRAINT [GradeLevelType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradeLevelType] ADD CONSTRAINT [GradeLevelType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items for the set of grade levels.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradeLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GradeLevel type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GradeLevel type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeLevelType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[GradeType] ******/

CREATE TABLE [t_edfi].[GradeType]
(
    [tid_GradeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_GradeType] PRIMARY KEY NONCLUSTERED
(
    [tid_GradeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradeType] ADD CONSTRAINT [GradeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradeType] ADD CONSTRAINT [GradeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradeType] ADD CONSTRAINT [GradeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of grade in a report card or transcript (e.g., Final, Exam, Grading Period).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Grade type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Grade type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[GradingPeriod] ******/

CREATE TABLE [t_edfi].[GradingPeriod]
(
    [tid_GradingPeriod] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[EndDate] [DATE] NOT NULL,
	[TotalInstructionalDays] [INT] NOT NULL,
	[PeriodSequence] [INT] NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradingPeriod] PRIMARY KEY NONCLUSTERED
(
    [tid_GradingPeriod] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradingPeriod] ADD CONSTRAINT [GradingPeriod_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradingPeriod] ADD CONSTRAINT [GradingPeriod_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradingPeriod] ADD CONSTRAINT [GradingPeriod_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the time span for which grades are reported.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the last day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Total days available for educational instruction during the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'TotalInstructionalDays';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The sequential order of this period relative to other periods.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'PeriodSequence';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TGradingPeriod_Id ON [t_edfi].[GradingPeriod]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[GradingPeriodSnapshotRecord] ******/

CREATE TABLE [t_edfi].[GradingPeriodSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_GradingPeriod] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradingPeriodSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_GradingPeriod], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradingPeriodSnapshotRecord] ADD CONSTRAINT [FK_GradingPeriodSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GradingPeriodSnapshotRecord] CHECK CONSTRAINT [FK_GradingPeriodSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[GradingPeriodSnapshotRecord] ADD CONSTRAINT [FK_GradingPeriodSnapshotRecord_ParentTable] FOREIGN KEY ([tid_GradingPeriod])
REFERENCES [t_edfi].[GradingPeriod] ([tid_GradingPeriod]);
ALTER TABLE [t_edfi].[GradingPeriodSnapshotRecord] CHECK CONSTRAINT [FK_GradingPeriodSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[GradingPeriodDescriptor] ******/

CREATE TABLE [t_edfi].[GradingPeriodDescriptor]
(
    [tid_GradingPeriodDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[GradingPeriodType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradingPeriodDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_GradingPeriodDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradingPeriodDescriptor] ADD CONSTRAINT [GradingPeriodDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradingPeriodDescriptor] ADD CONSTRAINT [GradingPeriodDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradingPeriodDescriptor] ADD CONSTRAINT [GradingPeriodDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the name of the period for which grades are reported. The mapping of descriptor values to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'GradingPeriodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TGradingPeriodDescriptor_Id ON [t_edfi].[GradingPeriodDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[GradingPeriodDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_GradingPeriodDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GradingPeriodDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_GradingPeriodDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradingPeriodDescriptorSnapshotRecord] ADD CONSTRAINT [FK_GradingPeriodDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GradingPeriodDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_GradingPeriodDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[GradingPeriodDescriptorSnapshotRecord] ADD CONSTRAINT [FK_GradingPeriodDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_GradingPeriodDescriptor])
REFERENCES [t_edfi].[GradingPeriodDescriptor] ([tid_GradingPeriodDescriptor]);
ALTER TABLE [t_edfi].[GradingPeriodDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_GradingPeriodDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[GradingPeriodType] ******/

CREATE TABLE [t_edfi].[GradingPeriodType]
(
	[tid_GradingPeriodType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[PeriodSequence] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_GradingPeriodType] PRIMARY KEY NONCLUSTERED
(
	[tid_GradingPeriodType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GradingPeriodType] ADD CONSTRAINT [GradingPeriodType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GradingPeriodType] ADD CONSTRAINT [GradingPeriodType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GradingPeriodType] ADD CONSTRAINT [GradingPeriodType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GradingPeriod type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GradingPeriod type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'PeriodSequence';
GO
/****** TABLE: [t_edfi].[GraduationPlan] ******/

CREATE TABLE [t_edfi].[GraduationPlan]
(
    [tid_GraduationPlan] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GraduationSchoolYear] [SMALLINT] NOT NULL,
	[IndividualPlan] [BIT] NULL,
	[TotalRequiredCredits] [DECIMAL](9, 2) NOT NULL,
	[TotalRequiredCreditType] [NVARCHAR](450) NULL,
	[TotalRequiredCreditConversion] [DECIMAL](9, 2) NULL,
	[GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlan] PRIMARY KEY NONCLUSTERED
(
    [tid_GraduationPlan] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlan] ADD CONSTRAINT [GraduationPlan_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlan] ADD CONSTRAINT [GraduationPlan_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GraduationPlan] ADD CONSTRAINT [GraduationPlan_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is a plan outlining the required credits, credits by subject,credits by course, and other criteria required for graduation. A graduation plan may be one or more standard plans defined by an education organization and/or individual plans for some or all students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether the GraduationPlan is tailored for an individual.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'IndividualPlan';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'TotalRequiredCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'TotalRequiredCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'TotalRequiredCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TGraduationPlan_Id ON [t_edfi].[GraduationPlan]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[GraduationPlanSnapshotRecord] ******/

CREATE TABLE [t_edfi].[GraduationPlanSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_GraduationPlan] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_GraduationPlan], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanSnapshotRecord] ADD CONSTRAINT [FK_GraduationPlanSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanSnapshotRecord] CHECK CONSTRAINT [FK_GraduationPlanSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[GraduationPlanSnapshotRecord] ADD CONSTRAINT [FK_GraduationPlanSnapshotRecord_ParentTable] FOREIGN KEY ([tid_GraduationPlan])
REFERENCES [t_edfi].[GraduationPlan] ([tid_GraduationPlan]);
ALTER TABLE [t_edfi].[GraduationPlanSnapshotRecord] CHECK CONSTRAINT [FK_GraduationPlanSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[GraduationPlanCreditsBySubject] ******/

CREATE TABLE [t_edfi].[GraduationPlanCreditsBySubject]
(
	[tid_GraduationPlanCreditsBySubject] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GraduationPlan] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Credits] [DECIMAL](9, 2) NOT NULL,
	[CreditType] [NVARCHAR](450) NULL,
	[CreditConversion] [DECIMAL](9, 2) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanCreditsBySubject] PRIMARY KEY NONCLUSTERED
(
	[tid_GraduationPlanCreditsBySubject] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanCreditsBySubject] ADD CONSTRAINT [GraduationPlanCreditsBySubject_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanCreditsBySubject] ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_ParentTable] FOREIGN KEY ([tid_GraduationPlan])
REFERENCES [t_edfi].[GraduationPlan] ([tid_GraduationPlan]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanCreditsBySubject] CHECK CONSTRAINT [FK_GraduationPlanCreditsBySubject_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'Credits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'CreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'CreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[GraduationPlanCreditsByCourse] ******/

CREATE TABLE [t_edfi].[GraduationPlanCreditsByCourse]
(
	[tid_GraduationPlanCreditsByCourse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GraduationPlan] [INT] NOT NULL,
	[CourseSetName] [NVARCHAR](120) NOT NULL,
	[Credits] [DECIMAL](9, 2) NOT NULL,
	[CreditType] [NVARCHAR](450) NULL,
	[CreditConversion] [DECIMAL](9, 2) NULL,
	[WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanCreditsByCourse] PRIMARY KEY NONCLUSTERED
(
	[tid_GraduationPlanCreditsByCourse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanCreditsByCourse] ADD CONSTRAINT [GraduationPlanCreditsByCourse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanCreditsByCourse] ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_ParentTable] FOREIGN KEY ([tid_GraduationPlan])
REFERENCES [t_edfi].[GraduationPlan] ([tid_GraduationPlan]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanCreditsByCourse] CHECK CONSTRAINT [FK_GraduationPlanCreditsByCourse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifying name given to a collection of courses.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'CourseSetName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'Credits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'CreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'CreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[GraduationPlanCreditsByCourseCourse] ******/

CREATE TABLE [t_edfi].[GraduationPlanCreditsByCourseCourse]
(
	[tid_GraduationPlanCreditsByCourseCourse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GraduationPlanCreditsByCourse] [INT] NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[CourseEducationOrganizationId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanCreditsByCourseCourse] PRIMARY KEY NONCLUSTERED
(
	[tid_GraduationPlanCreditsByCourseCourse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanCreditsByCourseCourse] ADD CONSTRAINT [GraduationPlanCreditsByCourseCourse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanCreditsByCourseCourse] ADD CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_ParentTable] FOREIGN KEY ([tid_GraduationPlanCreditsByCourse])
REFERENCES [t_edfi].[GraduationPlanCreditsByCourse] ([tid_GraduationPlanCreditsByCourse]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanCreditsByCourseCourse] CHECK CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'CourseEducationOrganizationId';
GO

/****** TABLE: [t_edfi].[GraduationPlanRequiredAssessment] ******/

CREATE TABLE [t_edfi].[GraduationPlanRequiredAssessment]
(
	[tid_GraduationPlanRequiredAssessment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GraduationPlan] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NOT NULL,
	[Version] [INT] NOT NULL,
	[AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanRequiredAssessment] PRIMARY KEY NONCLUSTERED
(
	[tid_GraduationPlanRequiredAssessment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessment] ADD CONSTRAINT [GraduationPlanRequiredAssessment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessment] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessment_ParentTable] FOREIGN KEY ([tid_GraduationPlan])
REFERENCES [t_edfi].[GraduationPlan] ([tid_GraduationPlan]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessment] CHECK CONSTRAINT [FK_GraduationPlanRequiredAssessment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The assessments and associated required score and performance level needed to satisfy graduation requirements.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[GraduationPlanRequiredAssessmentScore] ******/

CREATE TABLE [t_edfi].[GraduationPlanRequiredAssessmentScore]
(
	[tid_GraduationPlanRequiredAssessmentScore] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GraduationPlanRequiredAssessment] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[MinimumScore] [NVARCHAR](35) NULL,
	[MaximumScore] [NVARCHAR](35) NULL,
	[ResultDatatypeType] [NVARCHAR](450) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanRequiredAssessmentScore] PRIMARY KEY NONCLUSTERED
(
	[tid_GraduationPlanRequiredAssessmentScore] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessmentScore] ADD CONSTRAINT [GraduationPlanRequiredAssessmentScore_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessmentScore] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_ParentTable] FOREIGN KEY ([tid_GraduationPlanRequiredAssessment])
REFERENCES [t_edfi].[GraduationPlanRequiredAssessment] ([tid_GraduationPlanRequiredAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessmentScore] CHECK CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Score required to be met or exceeded.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'MinimumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'MaximumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
GO

/****** TABLE: [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ******/

CREATE TABLE [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel]
(
	[tid_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_GraduationPlanRequiredAssessment] [INT] NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[MinimumScore] [NVARCHAR](35) NULL,
	[MaximumScore] [NVARCHAR](35) NULL,
	[ResultDatatypeType] [NVARCHAR](450) NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ADD CONSTRAINT [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ParentTable] FOREIGN KEY ([tid_GraduationPlanRequiredAssessment])
REFERENCES [t_edfi].[GraduationPlanRequiredAssessment] ([tid_GraduationPlanRequiredAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] CHECK CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Performance level required to be met or exceeded.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score required to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MinimumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MaximumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[GraduationPlanTypeDescriptor] ******/

CREATE TABLE [t_edfi].[GraduationPlanTypeDescriptor]
(
    [tid_GraduationPlanTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[GraduationPlanType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_GraduationPlanTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanTypeDescriptor] ADD CONSTRAINT [GraduationPlanTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanTypeDescriptor] ADD CONSTRAINT [GraduationPlanTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GraduationPlanTypeDescriptor] ADD CONSTRAINT [GraduationPlanTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the set of graduation plan types.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN', @level2name=N'GraduationPlanType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TGraduationPlanTypeDescriptor_Id ON [t_edfi].[GraduationPlanTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_GraduationPlanTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_GraduationPlanTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_GraduationPlanTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_GraduationPlanTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_GraduationPlanTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_GraduationPlanTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_GraduationPlanTypeDescriptor])
REFERENCES [t_edfi].[GraduationPlanTypeDescriptor] ([tid_GraduationPlanTypeDescriptor]);
ALTER TABLE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_GraduationPlanTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[GraduationPlanType] ******/

CREATE TABLE [t_edfi].[GraduationPlanType]
(
	[tid_GraduationPlanType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_GraduationPlanType] PRIMARY KEY NONCLUSTERED
(
	[tid_GraduationPlanType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GraduationPlanType] ADD CONSTRAINT [GraduationPlanType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GraduationPlanType] ADD CONSTRAINT [GraduationPlanType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GraduationPlanType] ADD CONSTRAINT [GraduationPlanType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GraduationPlan type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GraduationPlan type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GraduationPlanType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[GunFreeSchoolsActReportingStatusType] ******/

CREATE TABLE [t_edfi].[GunFreeSchoolsActReportingStatusType]
(
    [tid_GunFreeSchoolsActReportingStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_GunFreeSchoolsActReportingStatusType] PRIMARY KEY NONCLUSTERED
(
    [tid_GunFreeSchoolsActReportingStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[GunFreeSchoolsActReportingStatusType] ADD CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[GunFreeSchoolsActReportingStatusType] ADD CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[GunFreeSchoolsActReportingStatusType] ADD CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether the school or local education agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'GunFreeSchoolsActReportingStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GunFreeSchoolsActReportingStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GunFreeSchoolsActReportingStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GunFreeSchoolsActReportingStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GunFreeSchoolsActReportingStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'GunFreeSchoolsActReportingStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[IdentificationDocumentUseType] ******/

CREATE TABLE [t_edfi].[IdentificationDocumentUseType]
(
    [tid_IdentificationDocumentUseType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_IdentificationDocumentUseType] PRIMARY KEY NONCLUSTERED
(
    [tid_IdentificationDocumentUseType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[IdentificationDocumentUseType] ADD CONSTRAINT [IdentificationDocumentUseType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[IdentificationDocumentUseType] ADD CONSTRAINT [IdentificationDocumentUseType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[IdentificationDocumentUseType] ADD CONSTRAINT [IdentificationDocumentUseType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the type of use given to an identification document.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'IdentificationDocumentUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IdentificationDocumentUseType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the IdentificationDocumentUse type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IdentificationDocumentUseType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the IdentificationDocumentUse type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IdentificationDocumentUseType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[IncidentLocationType] ******/

CREATE TABLE [t_edfi].[IncidentLocationType]
(
    [tid_IncidentLocationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_IncidentLocationType] PRIMARY KEY NONCLUSTERED
(
    [tid_IncidentLocationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[IncidentLocationType] ADD CONSTRAINT [IncidentLocationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[IncidentLocationType] ADD CONSTRAINT [IncidentLocationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[IncidentLocationType] ADD CONSTRAINT [IncidentLocationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies where the incident occurred and whether or not it occurred on school property.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'IncidentLocationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IncidentLocationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the IncidentLocation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IncidentLocationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the IncidentLocation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IncidentLocationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[InstitutionTelephoneNumberType] ******/

CREATE TABLE [t_edfi].[InstitutionTelephoneNumberType]
(
    [tid_InstitutionTelephoneNumberType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_InstitutionTelephoneNumberType] PRIMARY KEY NONCLUSTERED
(
    [tid_InstitutionTelephoneNumberType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InstitutionTelephoneNumberType] ADD CONSTRAINT [InstitutionTelephoneNumberType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InstitutionTelephoneNumberType] ADD CONSTRAINT [InstitutionTelephoneNumberType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[InstitutionTelephoneNumberType] ADD CONSTRAINT [InstitutionTelephoneNumberType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InstitutionTelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InstitutionTelephoneNumberType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InstitutionTelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InstitutionTelephoneNumberType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InstitutionTelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InstitutionTelephoneNumberType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[IntegratedTechnologyStatusType] ******/

CREATE TABLE [t_edfi].[IntegratedTechnologyStatusType]
(
    [tid_IntegratedTechnologyStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_IntegratedTechnologyStatusType] PRIMARY KEY NONCLUSTERED
(
    [tid_IntegratedTechnologyStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[IntegratedTechnologyStatusType] ADD CONSTRAINT [IntegratedTechnologyStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[IntegratedTechnologyStatusType] ADD CONSTRAINT [IntegratedTechnologyStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[IntegratedTechnologyStatusType] ADD CONSTRAINT [IntegratedTechnologyStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the extent to which the district has effectively and fully integrated technology, as defined by the state.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'IntegratedTechnologyStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IntegratedTechnologyStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the IntegratedTechnologyStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IntegratedTechnologyStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the IntegratedTechnologyStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'IntegratedTechnologyStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[InteractivityStyleType] ******/

CREATE TABLE [t_edfi].[InteractivityStyleType]
(
    [tid_InteractivityStyleType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_InteractivityStyleType] PRIMARY KEY NONCLUSTERED
(
    [tid_InteractivityStyleType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InteractivityStyleType] ADD CONSTRAINT [InteractivityStyleType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InteractivityStyleType] ADD CONSTRAINT [InteractivityStyleType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[InteractivityStyleType] ADD CONSTRAINT [InteractivityStyleType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InteractivityStyleType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InteractivityStyleType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InteractivityStyle type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InteractivityStyleType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InteractivityStyle type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InteractivityStyleType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[InternetAccessType] ******/

CREATE TABLE [t_edfi].[InternetAccessType]
(
    [tid_InternetAccessType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_InternetAccessType] PRIMARY KEY NONCLUSTERED
(
    [tid_InternetAccessType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InternetAccessType] ADD CONSTRAINT [InternetAccessType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InternetAccessType] ADD CONSTRAINT [InternetAccessType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[InternetAccessType] ADD CONSTRAINT [InternetAccessType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of Internet access available.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InternetAccessType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InternetAccessType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InternetAccess type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InternetAccessType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InternetAccess type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InternetAccessType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Intervention] ******/

CREATE TABLE [t_edfi].[Intervention]
(
    [tid_Intervention] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
	[InterventionClassType] [NVARCHAR](450) NOT NULL,
	[DeliveryMethodType] [NVARCHAR](450) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Intervention] PRIMARY KEY NONCLUSTERED
(
    [tid_Intervention] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Intervention] ADD CONSTRAINT [Intervention_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Intervention] ADD CONSTRAINT [Intervention_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Intervention] ADD CONSTRAINT [Intervention_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An implementation of an instructional approach focusing on the specific techniques and materials used to teach a given subject.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Intervention';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'InterventionClassType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'DeliveryMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The start date for the intervention implementation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the intervention implementation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TIntervention_Id ON [t_edfi].[Intervention]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[InterventionSnapshotRecord] ******/

CREATE TABLE [t_edfi].[InterventionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Intervention], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionSnapshotRecord] ADD CONSTRAINT [FK_InterventionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionSnapshotRecord] CHECK CONSTRAINT [FK_InterventionSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[InterventionSnapshotRecord] ADD CONSTRAINT [FK_InterventionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]);
ALTER TABLE [t_edfi].[InterventionSnapshotRecord] CHECK CONSTRAINT [FK_InterventionSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[InterventionEducationContent] ******/

CREATE TABLE [t_edfi].[InterventionEducationContent]
(
	[tid_InterventionEducationContent] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[ContentIdentifier] [NVARCHAR](225) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionEducationContent] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionEducationContent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionEducationContent] ADD CONSTRAINT [InterventionEducationContent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionEducationContent] ADD CONSTRAINT [FK_InterventionEducationContent_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionEducationContent] CHECK CONSTRAINT [FK_InterventionEducationContent_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionEducationContent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionEducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier';
GO

/****** TABLE: [t_edfi].[InterventionLearningResourceMetadataURI] ******/

CREATE TABLE [t_edfi].[InterventionLearningResourceMetadataURI]
(
	[tid_InterventionLearningResourceMetadataURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionLearningResourceMetadataURI] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionLearningResourceMetadataURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionLearningResourceMetadataURI] ADD CONSTRAINT [InterventionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionLearningResourceMetadataURI] ADD CONSTRAINT [FK_InterventionLearningResourceMetadataURI_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionLearningResourceMetadataURI] CHECK CONSTRAINT [FK_InterventionLearningResourceMetadataURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionLearningResourceMetadataURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI';
GO

/****** TABLE: [t_edfi].[InterventionURI] ******/

CREATE TABLE [t_edfi].[InterventionURI]
(
	[tid_InterventionURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[URI] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionURI] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionURI] ADD CONSTRAINT [InterventionURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionURI] ADD CONSTRAINT [FK_InterventionURI_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionURI] CHECK CONSTRAINT [FK_InterventionURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionURI', @level2type=N'COLUMN', @level2name=N'URI';
GO

/****** TABLE: [t_edfi].[InterventionDiagnosis] ******/

CREATE TABLE [t_edfi].[InterventionDiagnosis]
(
	[tid_InterventionDiagnosis] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionDiagnosis] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionDiagnosis] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionDiagnosis] ADD CONSTRAINT [InterventionDiagnosis_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionDiagnosis] ADD CONSTRAINT [FK_InterventionDiagnosis_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionDiagnosis] CHECK CONSTRAINT [FK_InterventionDiagnosis_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionDiagnosis';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionDiagnosis', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionDiagnosis', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[InterventionPopulationServed] ******/

CREATE TABLE [t_edfi].[InterventionPopulationServed]
(
	[tid_InterventionPopulationServed] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[PopulationServedType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPopulationServed] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPopulationServed] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPopulationServed] ADD CONSTRAINT [InterventionPopulationServed_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPopulationServed] ADD CONSTRAINT [FK_InterventionPopulationServed_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPopulationServed] CHECK CONSTRAINT [FK_InterventionPopulationServed_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the Intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPopulationServed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPopulationServed', @level2type=N'COLUMN', @level2name=N'PopulationServedType';
GO

/****** TABLE: [t_edfi].[InterventionAppropriateSex] ******/

CREATE TABLE [t_edfi].[InterventionAppropriateSex]
(
	[tid_InterventionAppropriateSex] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionAppropriateSex] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionAppropriateSex] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionAppropriateSex] ADD CONSTRAINT [InterventionAppropriateSex_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionAppropriateSex] ADD CONSTRAINT [FK_InterventionAppropriateSex_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionAppropriateSex] CHECK CONSTRAINT [FK_InterventionAppropriateSex_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for the Intervention. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateSex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexType';
GO

/****** TABLE: [t_edfi].[InterventionAppropriateGradeLevel] ******/

CREATE TABLE [t_edfi].[InterventionAppropriateGradeLevel]
(
	[tid_InterventionAppropriateGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionAppropriateGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionAppropriateGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionAppropriateGradeLevel] ADD CONSTRAINT [InterventionAppropriateGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionAppropriateGradeLevel_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionAppropriateGradeLevel] CHECK CONSTRAINT [FK_InterventionAppropriateGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for the Intervention-if omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[InterventionInterventionPrescription] ******/

CREATE TABLE [t_edfi].[InterventionInterventionPrescription]
(
	[tid_InterventionInterventionPrescription] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL,
	[InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionInterventionPrescription] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionInterventionPrescription] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionInterventionPrescription] ADD CONSTRAINT [InterventionInterventionPrescription_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionInterventionPrescription] ADD CONSTRAINT [FK_InterventionInterventionPrescription_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionInterventionPrescription] CHECK CONSTRAINT [FK_InterventionInterventionPrescription_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reference to the intervention prescription being followed in this intervention implementation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionInterventionPrescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionInterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionInterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode';
GO

/****** TABLE: [t_edfi].[InterventionMeetingTime] ******/

CREATE TABLE [t_edfi].[InterventionMeetingTime]
(
	[tid_InterventionMeetingTime] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[AlternateDayName] [NVARCHAR](20) NULL,
	[StartTime] [TIME](7) NOT NULL,
	[EndTime] [TIME](7) NOT NULL,
	[OfficialAttendancePeriod] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionMeetingTime] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionMeetingTime] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionMeetingTime] ADD CONSTRAINT [InterventionMeetingTime_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionMeetingTime] ADD CONSTRAINT [FK_InterventionMeetingTime_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionMeetingTime] CHECK CONSTRAINT [FK_InterventionMeetingTime_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The times at which this intervention is scheduled to meet.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An alternate name for the day (e.g., Red, Blue).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'AlternateDayName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class begins.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'StartTime';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class ends.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'EndTime';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether this meeting time is used for official daily attendance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'OfficialAttendancePeriod';
GO

/****** TABLE: [t_edfi].[InterventionStaff] ******/

CREATE TABLE [t_edfi].[InterventionStaff]
(
	[tid_InterventionStaff] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Intervention] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStaff] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStaff] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStaff] ADD CONSTRAINT [InterventionStaff_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStaff] ADD CONSTRAINT [FK_InterventionStaff_ParentTable] FOREIGN KEY ([tid_Intervention])
REFERENCES [t_edfi].[Intervention] ([tid_Intervention]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStaff] CHECK CONSTRAINT [FK_InterventionStaff_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the staff member associated with the Intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStaff';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStaff', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
GO
/****** TABLE: [t_edfi].[InterventionClassType] ******/

CREATE TABLE [t_edfi].[InterventionClassType]
(
    [tid_InterventionClassType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_InterventionClassType] PRIMARY KEY NONCLUSTERED
(
    [tid_InterventionClassType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionClassType] ADD CONSTRAINT [InterventionClassType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionClassType] ADD CONSTRAINT [InterventionClassType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[InterventionClassType] ADD CONSTRAINT [InterventionClassType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionClassType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionClassType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InterventionClass type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionClassType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InterventionClass type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionClassType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[InterventionEffectivenessRatingType] ******/

CREATE TABLE [t_edfi].[InterventionEffectivenessRatingType]
(
    [tid_InterventionEffectivenessRatingType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_InterventionEffectivenessRatingType] PRIMARY KEY NONCLUSTERED
(
    [tid_InterventionEffectivenessRatingType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionEffectivenessRatingType] ADD CONSTRAINT [InterventionEffectivenessRatingType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionEffectivenessRatingType] ADD CONSTRAINT [InterventionEffectivenessRatingType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[InterventionEffectivenessRatingType] ADD CONSTRAINT [InterventionEffectivenessRatingType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Rating Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionEffectivenessRatingType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionEffectivenessRatingType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InterventionEffectivenessRating type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionEffectivenessRatingType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InterventionEffectivenessRating type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionEffectivenessRatingType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[InterventionPrescription] ******/

CREATE TABLE [t_edfi].[InterventionPrescription]
(
    [tid_InterventionPrescription] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
	[InterventionClassType] [NVARCHAR](450) NOT NULL,
	[DeliveryMethodType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescription] PRIMARY KEY NONCLUSTERED
(
    [tid_InterventionPrescription] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescription] ADD CONSTRAINT [InterventionPrescription_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescription] ADD CONSTRAINT [InterventionPrescription_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[InterventionPrescription] ADD CONSTRAINT [InterventionPrescription_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a formal prescription of an instructional approach focusing on the specific techniques and materials used to teach a given subject. This can be prescribed by academic research, an interventions vendor, or another entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionClassType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'DeliveryMethodType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TInterventionPrescription_Id ON [t_edfi].[InterventionPrescription]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionSnapshotRecord] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_InterventionPrescription], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionSnapshotRecord] ADD CONSTRAINT [FK_InterventionPrescriptionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionSnapshotRecord] CHECK CONSTRAINT [FK_InterventionPrescriptionSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[InterventionPrescriptionSnapshotRecord] ADD CONSTRAINT [FK_InterventionPrescriptionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]);
ALTER TABLE [t_edfi].[InterventionPrescriptionSnapshotRecord] CHECK CONSTRAINT [FK_InterventionPrescriptionSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionEducationContent] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionEducationContent]
(
	[tid_InterventionPrescriptionEducationContent] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
	[ContentIdentifier] [NVARCHAR](225) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionEducationContent] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPrescriptionEducationContent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionEducationContent] ADD CONSTRAINT [InterventionPrescriptionEducationContent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescriptionEducationContent] ADD CONSTRAINT [FK_InterventionPrescriptionEducationContent_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionEducationContent] CHECK CONSTRAINT [FK_InterventionPrescriptionEducationContent_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionEducationContent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionEducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier';
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI]
(
	[tid_InterventionPrescriptionLearningResourceMetadataURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
	[LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionLearningResourceMetadataURI] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPrescriptionLearningResourceMetadataURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI] ADD CONSTRAINT [InterventionPrescriptionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI] ADD CONSTRAINT [FK_InterventionPrescriptionLearningResourceMetadataURI_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI] CHECK CONSTRAINT [FK_InterventionPrescriptionLearningResourceMetadataURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionLearningResourceMetadataURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI';
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionURI] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionURI]
(
	[tid_InterventionPrescriptionURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
	[URI] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionURI] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPrescriptionURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionURI] ADD CONSTRAINT [InterventionPrescriptionURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescriptionURI] ADD CONSTRAINT [FK_InterventionPrescriptionURI_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionURI] CHECK CONSTRAINT [FK_InterventionPrescriptionURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionURI', @level2type=N'COLUMN', @level2name=N'URI';
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionDiagnosis] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionDiagnosis]
(
	[tid_InterventionPrescriptionDiagnosis] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
	[DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionDiagnosis] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPrescriptionDiagnosis] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionDiagnosis] ADD CONSTRAINT [InterventionPrescriptionDiagnosis_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescriptionDiagnosis] ADD CONSTRAINT [FK_InterventionPrescriptionDiagnosis_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionDiagnosis] CHECK CONSTRAINT [FK_InterventionPrescriptionDiagnosis_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionDiagnosis';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionDiagnosis', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionDiagnosis', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionPopulationServed] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionPopulationServed]
(
	[tid_InterventionPrescriptionPopulationServed] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
	[PopulationServedType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionPopulationServed] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPrescriptionPopulationServed] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionPopulationServed] ADD CONSTRAINT [InterventionPrescriptionPopulationServed_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescriptionPopulationServed] ADD CONSTRAINT [FK_InterventionPrescriptionPopulationServed_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionPopulationServed] CHECK CONSTRAINT [FK_InterventionPrescriptionPopulationServed_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the InterventionPrescription.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionPopulationServed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionPopulationServed', @level2type=N'COLUMN', @level2name=N'PopulationServedType';
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionAppropriateSex] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionAppropriateSex]
(
	[tid_InterventionPrescriptionAppropriateSex] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionAppropriateSex] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPrescriptionAppropriateSex] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionAppropriateSex] ADD CONSTRAINT [InterventionPrescriptionAppropriateSex_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescriptionAppropriateSex] ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionAppropriateSex] CHECK CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for the InterventionPrescription. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateSex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexType';
GO

/****** TABLE: [t_edfi].[InterventionPrescriptionAppropriateGradeLevel] ******/

CREATE TABLE [t_edfi].[InterventionPrescriptionAppropriateGradeLevel]
(
	[tid_InterventionPrescriptionAppropriateGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionPrescription] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionPrescriptionAppropriateGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionPrescriptionAppropriateGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionPrescriptionAppropriateGradeLevel] ADD CONSTRAINT [InterventionPrescriptionAppropriateGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionPrescriptionAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_ParentTable] FOREIGN KEY ([tid_InterventionPrescription])
REFERENCES [t_edfi].[InterventionPrescription] ([tid_InterventionPrescription]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionPrescriptionAppropriateGradeLevel] CHECK CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for the prescribed intervention. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionPrescriptionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[InterventionStudy] ******/

CREATE TABLE [t_edfi].[InterventionStudy]
(
    [tid_InterventionStudy] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
	[InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL,
	[InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
	[Participants] [INT] NOT NULL,
	[DeliveryMethodType] [NVARCHAR](450) NOT NULL,
	[InterventionClassType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudy] PRIMARY KEY NONCLUSTERED
(
    [tid_InterventionStudy] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudy] ADD CONSTRAINT [InterventionStudy_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudy] ADD CONSTRAINT [InterventionStudy_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[InterventionStudy] ADD CONSTRAINT [InterventionStudy_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An experimental or quasi-experimental study of an intervention technique.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of participants observed in the study.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'Participants';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'DeliveryMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionClassType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TInterventionStudy_Id ON [t_edfi].[InterventionStudy]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[InterventionStudySnapshotRecord] ******/

CREATE TABLE [t_edfi].[InterventionStudySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_InterventionStudy], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudySnapshotRecord] ADD CONSTRAINT [FK_InterventionStudySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudySnapshotRecord] CHECK CONSTRAINT [FK_InterventionStudySnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[InterventionStudySnapshotRecord] ADD CONSTRAINT [FK_InterventionStudySnapshotRecord_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]);
ALTER TABLE [t_edfi].[InterventionStudySnapshotRecord] CHECK CONSTRAINT [FK_InterventionStudySnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[InterventionStudyEducationContent] ******/

CREATE TABLE [t_edfi].[InterventionStudyEducationContent]
(
	[tid_InterventionStudyEducationContent] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[ContentIdentifier] [NVARCHAR](225) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyEducationContent] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyEducationContent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyEducationContent] ADD CONSTRAINT [InterventionStudyEducationContent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyEducationContent] ADD CONSTRAINT [FK_InterventionStudyEducationContent_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyEducationContent] CHECK CONSTRAINT [FK_InterventionStudyEducationContent_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyEducationContent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyEducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier';
GO

/****** TABLE: [t_edfi].[InterventionStudyLearningResourceMetadataURI] ******/

CREATE TABLE [t_edfi].[InterventionStudyLearningResourceMetadataURI]
(
	[tid_InterventionStudyLearningResourceMetadataURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyLearningResourceMetadataURI] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyLearningResourceMetadataURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyLearningResourceMetadataURI] ADD CONSTRAINT [InterventionStudyLearningResourceMetadataURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyLearningResourceMetadataURI] ADD CONSTRAINT [FK_InterventionStudyLearningResourceMetadataURI_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyLearningResourceMetadataURI] CHECK CONSTRAINT [FK_InterventionStudyLearningResourceMetadataURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyLearningResourceMetadataURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI';
GO

/****** TABLE: [t_edfi].[InterventionStudyURI] ******/

CREATE TABLE [t_edfi].[InterventionStudyURI]
(
	[tid_InterventionStudyURI] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[URI] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyURI] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyURI] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyURI] ADD CONSTRAINT [InterventionStudyURI_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyURI] ADD CONSTRAINT [FK_InterventionStudyURI_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyURI] CHECK CONSTRAINT [FK_InterventionStudyURI_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyURI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyURI', @level2type=N'COLUMN', @level2name=N'URI';
GO

/****** TABLE: [t_edfi].[InterventionStudyInterventionEffectiveness] ******/

CREATE TABLE [t_edfi].[InterventionStudyInterventionEffectiveness]
(
	[tid_InterventionStudyInterventionEffectiveness] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PopulationServedType] [NVARCHAR](450) NOT NULL,
	[ImprovementIndex] [INT] NULL,
	[InterventionEffectivenessRatingType] [NVARCHAR](450) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyInterventionEffectiveness] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyInterventionEffectiveness] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [InterventionStudyInterventionEffectiveness_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyInterventionEffectiveness] CHECK CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Measurement of the effectiveness of the InterventionStudy per diagnosis.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'PopulationServedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Along a percentile distribution of students, the improvement index represents the change in an average student''s percentile rank that is considered to be due to the intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'ImprovementIndex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'InterventionEffectivenessRatingType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[InterventionStudyAppropriateGradeLevel] ******/

CREATE TABLE [t_edfi].[InterventionStudyAppropriateGradeLevel]
(
	[tid_InterventionStudyAppropriateGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyAppropriateGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyAppropriateGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyAppropriateGradeLevel] ADD CONSTRAINT [InterventionStudyAppropriateGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyAppropriateGradeLevel] CHECK CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels participating in this study.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[InterventionStudyPopulationServed] ******/

CREATE TABLE [t_edfi].[InterventionStudyPopulationServed]
(
	[tid_InterventionStudyPopulationServed] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[PopulationServedType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyPopulationServed] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyPopulationServed] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyPopulationServed] ADD CONSTRAINT [InterventionStudyPopulationServed_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyPopulationServed] ADD CONSTRAINT [FK_InterventionStudyPopulationServed_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyPopulationServed] CHECK CONSTRAINT [FK_InterventionStudyPopulationServed_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the InterventionStudy.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyPopulationServed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyPopulationServed', @level2type=N'COLUMN', @level2name=N'PopulationServedType';
GO

/****** TABLE: [t_edfi].[InterventionStudyAppropriateSex] ******/

CREATE TABLE [t_edfi].[InterventionStudyAppropriateSex]
(
	[tid_InterventionStudyAppropriateSex] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyAppropriateSex] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyAppropriateSex] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyAppropriateSex] ADD CONSTRAINT [InterventionStudyAppropriateSex_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyAppropriateSex] ADD CONSTRAINT [FK_InterventionStudyAppropriateSex_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyAppropriateSex] CHECK CONSTRAINT [FK_InterventionStudyAppropriateSex_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes participating in this study. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateSex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexType';
GO

/****** TABLE: [t_edfi].[InterventionStudyStateAbbreviation] ******/

CREATE TABLE [t_edfi].[InterventionStudyStateAbbreviation]
(
	[tid_InterventionStudyStateAbbreviation] [INT] IDENTITY(1,1) NOT NULL,
    [tid_InterventionStudy] [INT] NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_InterventionStudyStateAbbreviation] PRIMARY KEY NONCLUSTERED
(
	[tid_InterventionStudyStateAbbreviation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[InterventionStudyStateAbbreviation] ADD CONSTRAINT [InterventionStudyStateAbbreviation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[InterventionStudyStateAbbreviation] ADD CONSTRAINT [FK_InterventionStudyStateAbbreviation_ParentTable] FOREIGN KEY ([tid_InterventionStudy])
REFERENCES [t_edfi].[InterventionStudy] ([tid_InterventionStudy]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[InterventionStudyStateAbbreviation] CHECK CONSTRAINT [FK_InterventionStudyStateAbbreviation_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyStateAbbreviation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'InterventionStudyStateAbbreviation', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
GO
/****** TABLE: [t_edfi].[LanguageDescriptor] ******/

CREATE TABLE [t_edfi].[LanguageDescriptor]
(
    [tid_LanguageDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LanguageDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_LanguageDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LanguageDescriptor] ADD CONSTRAINT [LanguageDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LanguageDescriptor] ADD CONSTRAINT [LanguageDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LanguageDescriptor] ADD CONSTRAINT [LanguageDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the language(s) that are spoken or written.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LanguageDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageDescriptor', @level2type=N'COLUMN', @level2name=N'LanguageType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLanguageDescriptor_Id ON [t_edfi].[LanguageDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LanguageDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LanguageDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LanguageDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LanguageDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LanguageDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LanguageDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LanguageDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LanguageDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LanguageDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LanguageDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LanguageDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LanguageDescriptor])
REFERENCES [t_edfi].[LanguageDescriptor] ([tid_LanguageDescriptor]);
ALTER TABLE [t_edfi].[LanguageDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LanguageDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[LanguageType] ******/

CREATE TABLE [t_edfi].[LanguageType]
(
	[tid_LanguageType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_LanguageType] PRIMARY KEY NONCLUSTERED
(
	[tid_LanguageType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LanguageType] ADD CONSTRAINT [LanguageType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LanguageType] ADD CONSTRAINT [LanguageType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LanguageType] ADD CONSTRAINT [LanguageType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category denoting language(s) spoken or written.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LanguageType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Language type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Language type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[LanguageUseType] ******/

CREATE TABLE [t_edfi].[LanguageUseType]
(
    [tid_LanguageUseType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_LanguageUseType] PRIMARY KEY NONCLUSTERED
(
    [tid_LanguageUseType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LanguageUseType] ADD CONSTRAINT [LanguageUseType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LanguageUseType] ADD CONSTRAINT [LanguageUseType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LanguageUseType] ADD CONSTRAINT [LanguageUseType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category denoting how a language is used.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LanguageUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageUseType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LanguageUse type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageUseType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LanguageUse type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LanguageUseType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[LearningObjective] ******/

CREATE TABLE [t_edfi].[LearningObjective]
(
    [tid_LearningObjective] [INT] IDENTITY(1,1) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LearningObjectiveId] [NVARCHAR](60) NULL,
	[Description] [NVARCHAR](1024) NULL,
	[Nomenclature] [NVARCHAR](35) NULL,
	[SuccessCriteria] [NVARCHAR](150) NULL,
	[ParentObjective] [NVARCHAR](60) NULL,
	[ParentAcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ParentObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ParentObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[ParentAcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningObjective] PRIMARY KEY NONCLUSTERED
(
    [tid_LearningObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningObjective] ADD CONSTRAINT [LearningObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningObjective] ADD CONSTRAINT [LearningObjective_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LearningObjective] ADD CONSTRAINT [LearningObjective_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents identified learning objectives for courses in specific grades.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'LearningObjectiveId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Nomenclature';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'SuccessCriteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentAcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentAcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLearningObjective_Id ON [t_edfi].[LearningObjective]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LearningObjectiveSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LearningObjectiveSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LearningObjective] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningObjectiveSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LearningObjective], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningObjectiveSnapshotRecord] ADD CONSTRAINT [FK_LearningObjectiveSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_LearningObjectiveSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LearningObjectiveSnapshotRecord] ADD CONSTRAINT [FK_LearningObjectiveSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LearningObjective])
REFERENCES [t_edfi].[LearningObjective] ([tid_LearningObjective]);
ALTER TABLE [t_edfi].[LearningObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_LearningObjectiveSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[LearningObjectiveContentStandard] ******/

CREATE TABLE [t_edfi].[LearningObjectiveContentStandard]
(
	[tid_LearningObjectiveContentStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningObjective] [INT] NOT NULL,
	[Title] [NVARCHAR](75) NOT NULL,
	[Version] [NVARCHAR](50) NULL,
	[URI] [NVARCHAR](255) NULL,
	[PublicationDate] [DATE] NULL,
	[PublicationYear] [SMALLINT] NULL,
	[PublicationStatusType] [NVARCHAR](450) NULL,
	[MandatingEducationOrganizationId] [INT] NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningObjectiveContentStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningObjectiveContentStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningObjectiveContentStandard] ADD CONSTRAINT [LearningObjectiveContentStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningObjectiveContentStandard] ADD CONSTRAINT [FK_LearningObjectiveContentStandard_ParentTable] FOREIGN KEY ([tid_LearningObjective])
REFERENCES [t_edfi].[LearningObjective] ([tid_LearningObjective]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningObjectiveContentStandard] CHECK CONSTRAINT [FK_LearningObjectiveContentStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A reference to the type of content standard (e.g., state, national)', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'Title';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'URI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[LearningObjectiveContentStandardAuthor] ******/

CREATE TABLE [t_edfi].[LearningObjectiveContentStandardAuthor]
(
	[tid_LearningObjectiveContentStandardAuthor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningObjectiveContentStandard] [INT] NOT NULL,
	[Author] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningObjectiveContentStandardAuthor] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningObjectiveContentStandardAuthor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningObjectiveContentStandardAuthor] ADD CONSTRAINT [LearningObjectiveContentStandardAuthor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningObjectiveContentStandardAuthor] ADD CONSTRAINT [FK_LearningObjectiveContentStandardAuthor_ParentTable] FOREIGN KEY ([tid_LearningObjectiveContentStandard])
REFERENCES [t_edfi].[LearningObjectiveContentStandard] ([tid_LearningObjectiveContentStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningObjectiveContentStandardAuthor] CHECK CONSTRAINT [FK_LearningObjectiveContentStandardAuthor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandardAuthor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author';
GO

/****** TABLE: [t_edfi].[LearningObjectiveLearningStandard] ******/

CREATE TABLE [t_edfi].[LearningObjectiveLearningStandard]
(
	[tid_LearningObjectiveLearningStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningObjective] [INT] NOT NULL,
	[LearningStandardId] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningObjectiveLearningStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningObjectiveLearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningObjectiveLearningStandard] ADD CONSTRAINT [LearningObjectiveLearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningObjectiveLearningStandard] ADD CONSTRAINT [FK_LearningObjectiveLearningStandard_ParentTable] FOREIGN KEY ([tid_LearningObjective])
REFERENCES [t_edfi].[LearningObjective] ([tid_LearningObjective]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningObjectiveLearningStandard] CHECK CONSTRAINT [FK_LearningObjectiveLearningStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard(s) included in this objective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveLearningStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningObjectiveLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
GO
/****** TABLE: [t_edfi].[LearningStandard] ******/

CREATE TABLE [t_edfi].[LearningStandard]
(
    [tid_LearningStandard] [INT] IDENTITY(1,1) NOT NULL,
	[LearningStandardId] [NVARCHAR](60) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[LearningStandardItemCode] [NVARCHAR](60) NULL,
	[URI] [NVARCHAR](255) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[CourseTitle] [NVARCHAR](60) NULL,
	[SuccessCriteria] [NVARCHAR](150) NULL,
	[ParentLearningStandardId] [NVARCHAR](60) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningStandard] PRIMARY KEY NONCLUSTERED
(
    [tid_LearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningStandard] ADD CONSTRAINT [LearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningStandard] ADD CONSTRAINT [LearningStandard_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LearningStandard] ADD CONSTRAINT [LearningStandard_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is a sub-element of a learning objective consisting of a precise statement of the expectation of a student''s proficiency.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text of the statement. The textual content that either describes a specific competency such as "Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions." or describes a less granular group of competencies within the taxonomy of the standards document, e.g. "Understand and apply the Pythagorean Theorem," or "Geometry".', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardItemCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the statement using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'URI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The official Course Title with which this learning standard is associated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'SuccessCriteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'ParentLearningStandardId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the LearningStandard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLearningStandard_Id ON [t_edfi].[LearningStandard]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LearningStandardSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LearningStandardSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LearningStandard] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningStandardSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LearningStandard], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningStandardSnapshotRecord] ADD CONSTRAINT [FK_LearningStandardSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningStandardSnapshotRecord] CHECK CONSTRAINT [FK_LearningStandardSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LearningStandardSnapshotRecord] ADD CONSTRAINT [FK_LearningStandardSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LearningStandard])
REFERENCES [t_edfi].[LearningStandard] ([tid_LearningStandard]);
ALTER TABLE [t_edfi].[LearningStandardSnapshotRecord] CHECK CONSTRAINT [FK_LearningStandardSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[LearningStandardIdentificationCode] ******/

CREATE TABLE [t_edfi].[LearningStandardIdentificationCode]
(
	[tid_LearningStandardIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningStandard] [INT] NOT NULL,
	[ContentStandardName] [NVARCHAR](65) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningStandardIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningStandardIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningStandardIdentificationCode] ADD CONSTRAINT [LearningStandardIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningStandardIdentificationCode] ADD CONSTRAINT [FK_LearningStandardIdentificationCode_ParentTable] FOREIGN KEY ([tid_LearningStandard])
REFERENCES [t_edfi].[LearningStandard] ([tid_LearningStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningStandardIdentificationCode] CHECK CONSTRAINT [FK_LearningStandardIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningStandardIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardIdentificationCode', @level2type=N'COLUMN', @level2name=N'ContentStandardName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a Learning Standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
GO

/****** TABLE: [t_edfi].[LearningStandardContentStandard] ******/

CREATE TABLE [t_edfi].[LearningStandardContentStandard]
(
	[tid_LearningStandardContentStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningStandard] [INT] NOT NULL,
	[Title] [NVARCHAR](75) NOT NULL,
	[Version] [NVARCHAR](50) NULL,
	[URI] [NVARCHAR](255) NULL,
	[PublicationDate] [DATE] NULL,
	[PublicationYear] [SMALLINT] NULL,
	[PublicationStatusType] [NVARCHAR](450) NULL,
	[MandatingEducationOrganizationId] [INT] NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningStandardContentStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningStandardContentStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningStandardContentStandard] ADD CONSTRAINT [LearningStandardContentStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningStandardContentStandard] ADD CONSTRAINT [FK_LearningStandardContentStandard_ParentTable] FOREIGN KEY ([tid_LearningStandard])
REFERENCES [t_edfi].[LearningStandard] ([tid_LearningStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningStandardContentStandard] CHECK CONSTRAINT [FK_LearningStandardContentStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The content standard from which the LearningStandard was derived.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'Title';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'URI';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[LearningStandardContentStandardAuthor] ******/

CREATE TABLE [t_edfi].[LearningStandardContentStandardAuthor]
(
	[tid_LearningStandardContentStandardAuthor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningStandardContentStandard] [INT] NOT NULL,
	[Author] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningStandardContentStandardAuthor] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningStandardContentStandardAuthor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningStandardContentStandardAuthor] ADD CONSTRAINT [LearningStandardContentStandardAuthor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningStandardContentStandardAuthor] ADD CONSTRAINT [FK_LearningStandardContentStandardAuthor_ParentTable] FOREIGN KEY ([tid_LearningStandardContentStandard])
REFERENCES [t_edfi].[LearningStandardContentStandard] ([tid_LearningStandardContentStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningStandardContentStandardAuthor] CHECK CONSTRAINT [FK_LearningStandardContentStandardAuthor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandardAuthor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author';
GO

/****** TABLE: [t_edfi].[LearningStandardGradeLevel] ******/

CREATE TABLE [t_edfi].[LearningStandardGradeLevel]
(
	[tid_LearningStandardGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningStandard] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningStandardGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningStandardGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningStandardGradeLevel] ADD CONSTRAINT [LearningStandardGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningStandardGradeLevel] ADD CONSTRAINT [FK_LearningStandardGradeLevel_ParentTable] FOREIGN KEY ([tid_LearningStandard])
REFERENCES [t_edfi].[LearningStandard] ([tid_LearningStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningStandardGradeLevel] CHECK CONSTRAINT [FK_LearningStandardGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels for the specific learning standard.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningStandardGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LearningStandardGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[LearningStandardPrerequisiteLearningStandard] ******/

CREATE TABLE [t_edfi].[LearningStandardPrerequisiteLearningStandard]
(
	[tid_LearningStandardPrerequisiteLearningStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LearningStandard] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LearningStandardPrerequisiteLearningStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_LearningStandardPrerequisiteLearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LearningStandardPrerequisiteLearningStandard] ADD CONSTRAINT [LearningStandardPrerequisiteLearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LearningStandardPrerequisiteLearningStandard] ADD CONSTRAINT [FK_LearningStandardPrerequisiteLearningStandard_ParentTable] FOREIGN KEY ([tid_LearningStandard])
REFERENCES [t_edfi].[LearningStandard] ([tid_LearningStandard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LearningStandardPrerequisiteLearningStandard] CHECK CONSTRAINT [FK_LearningStandardPrerequisiteLearningStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LearningStandardPrerequisiteLearningStandard';
GO
/****** TABLE: [t_edfi].[LeaveEvent] ******/

CREATE TABLE [t_edfi].[LeaveEvent]
(
    [tid_LeaveEvent] [INT] IDENTITY(1,1) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[LeaveEventCategoryType] [NVARCHAR](450) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[LeaveEventReason] [NVARCHAR](40) NULL,
	[HoursOnLeave] [DECIMAL](18, 2) NULL,
	[SubstituteAssigned] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LeaveEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_LeaveEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LeaveEvent] ADD CONSTRAINT [LeaveEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LeaveEvent] ADD CONSTRAINT [LeaveEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LeaveEvent] ADD CONSTRAINT [LeaveEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of the dates of staff leave (e.g., sick leave, personal time, vacation).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this leave event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'LeaveEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the staff leave.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'LeaveEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The hours the staff was absent, if not the entire working day.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'HoursOnLeave';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether a substitute was assigned during the period of staff leave.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'SubstituteAssigned';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLeaveEvent_Id ON [t_edfi].[LeaveEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LeaveEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LeaveEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LeaveEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LeaveEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LeaveEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LeaveEventSnapshotRecord] ADD CONSTRAINT [FK_LeaveEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LeaveEventSnapshotRecord] CHECK CONSTRAINT [FK_LeaveEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LeaveEventSnapshotRecord] ADD CONSTRAINT [FK_LeaveEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LeaveEvent])
REFERENCES [t_edfi].[LeaveEvent] ([tid_LeaveEvent]);
ALTER TABLE [t_edfi].[LeaveEventSnapshotRecord] CHECK CONSTRAINT [FK_LeaveEventSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[LeaveEventExtension] ******/

CREATE TABLE [t_extension].[LeaveEventExtension]
(
	[tid_LeaveEventExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LeaveEvent] [INT] NOT NULL,
	[PayCodeID] [NVARCHAR](4) NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LeaveEventExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_LeaveEventExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[LeaveEventExtension] ADD CONSTRAINT [FK_LeaveEventExtension_ParentTable] FOREIGN KEY ([tid_LeaveEvent])
REFERENCES [t_edfi].[LeaveEvent] ([tid_LeaveEvent]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[LeaveEventExtension] CHECK CONSTRAINT [FK_LeaveEventExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'LeaveEventExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Pay Code ID column identifies the pay code to which the edit applies', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LeaveEventExtension', @level2type=N'COLUMN', @level2name=N'PayCodeID';
GO
/****** TABLE: [t_edfi].[LeaveEventCategoryType] ******/

CREATE TABLE [t_edfi].[LeaveEventCategoryType]
(
    [tid_LeaveEventCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_LeaveEventCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_LeaveEventCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LeaveEventCategoryType] ADD CONSTRAINT [LeaveEventCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LeaveEventCategoryType] ADD CONSTRAINT [LeaveEventCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LeaveEventCategoryType] ADD CONSTRAINT [LeaveEventCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the type of the leave event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LeaveEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEventCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LeaveEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEventCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LeaveEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LeaveEventCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[LevelDescriptor] ******/

CREATE TABLE [t_edfi].[LevelDescriptor]
(
    [tid_LevelDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_LevelDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LevelDescriptor] ADD CONSTRAINT [LevelDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LevelDescriptor] ADD CONSTRAINT [LevelDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LevelDescriptor] ADD CONSTRAINT [LevelDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the grade level(s) certified for teaching.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LevelDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLevelDescriptor_Id ON [t_edfi].[LevelDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LevelDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LevelDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LevelDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LevelDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LevelDescriptor])
REFERENCES [t_edfi].[LevelDescriptor] ([tid_LevelDescriptor]);
ALTER TABLE [t_edfi].[LevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[LevelDescriptorGradeLevel] ******/

CREATE TABLE [t_edfi].[LevelDescriptorGradeLevel]
(
	[tid_LevelDescriptorGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LevelDescriptor] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelDescriptorGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_LevelDescriptorGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LevelDescriptorGradeLevel] ADD CONSTRAINT [LevelDescriptorGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LevelDescriptorGradeLevel] ADD CONSTRAINT [FK_LevelDescriptorGradeLevel_ParentTable] FOREIGN KEY ([tid_LevelDescriptor])
REFERENCES [t_edfi].[LevelDescriptor] ([tid_LevelDescriptor]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LevelDescriptorGradeLevel] CHECK CONSTRAINT [FK_LevelDescriptorGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The mapping to known grade levels for which certification exists.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LevelDescriptorGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptorGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelDescriptorGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[LevelOfEducationDescriptor] ******/

CREATE TABLE [t_edfi].[LevelOfEducationDescriptor]
(
    [tid_LevelOfEducationDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[LevelOfEducationType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelOfEducationDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_LevelOfEducationDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LevelOfEducationDescriptor] ADD CONSTRAINT [LevelOfEducationDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LevelOfEducationDescriptor] ADD CONSTRAINT [LevelOfEducationDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LevelOfEducationDescriptor] ADD CONSTRAINT [LevelOfEducationDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the different levels of education achievable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN', @level2name=N'LevelOfEducationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLevelOfEducationDescriptor_Id ON [t_edfi].[LevelOfEducationDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LevelOfEducationDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LevelOfEducationDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelOfEducationDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LevelOfEducationDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelOfEducationDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelOfEducationDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelOfEducationDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LevelOfEducationDescriptor])
REFERENCES [t_edfi].[LevelOfEducationDescriptor] ([tid_LevelOfEducationDescriptor]);
ALTER TABLE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelOfEducationDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[LevelOfEducationType] ******/

CREATE TABLE [t_edfi].[LevelOfEducationType]
(
	[tid_LevelOfEducationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_LevelOfEducationType] PRIMARY KEY NONCLUSTERED
(
	[tid_LevelOfEducationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LevelOfEducationType] ADD CONSTRAINT [LevelOfEducationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LevelOfEducationType] ADD CONSTRAINT [LevelOfEducationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LevelOfEducationType] ADD CONSTRAINT [LevelOfEducationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration of the different levels of education achievable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LevelOfEducation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LevelOfEducation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LevelOfEducationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[LimitedEnglishProficiencyDescriptor] ******/

CREATE TABLE [t_edfi].[LimitedEnglishProficiencyDescriptor]
(
    [tid_LimitedEnglishProficiencyDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[LimitedEnglishProficiencyType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LimitedEnglishProficiencyDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_LimitedEnglishProficiencyDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LimitedEnglishProficiencyDescriptor] ADD CONSTRAINT [LimitedEnglishProficiencyDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LimitedEnglishProficiencyDescriptor] ADD CONSTRAINT [LimitedEnglishProficiencyDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LimitedEnglishProficiencyDescriptor] ADD CONSTRAINT [LimitedEnglishProficiencyDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the indications that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. The mapping of descriptor values to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLimitedEnglishProficiencyDescriptor_Id ON [t_edfi].[LimitedEnglishProficiencyDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LimitedEnglishProficiencyDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LimitedEnglishProficiencyDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LimitedEnglishProficiencyDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LimitedEnglishProficiencyDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LimitedEnglishProficiencyDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LimitedEnglishProficiencyDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LimitedEnglishProficiencyDescriptor])
REFERENCES [t_edfi].[LimitedEnglishProficiencyDescriptor] ([tid_LimitedEnglishProficiencyDescriptor]);
ALTER TABLE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LimitedEnglishProficiencyDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[LimitedEnglishProficiencyType] ******/

CREATE TABLE [t_edfi].[LimitedEnglishProficiencyType]
(
	[tid_LimitedEnglishProficiencyType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_LimitedEnglishProficiencyType] PRIMARY KEY NONCLUSTERED
(
	[tid_LimitedEnglishProficiencyType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LimitedEnglishProficiencyType] ADD CONSTRAINT [LimitedEnglishProficiencyType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LimitedEnglishProficiencyType] ADD CONSTRAINT [LimitedEnglishProficiencyType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LimitedEnglishProficiencyType] ADD CONSTRAINT [LimitedEnglishProficiencyType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the student has been identified as Limited English Proficient or English Proficient by the Language Proficiency Assessment Committee (LPAC).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LimitedEnglishProficiency type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LimitedEnglishProficiency type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LimitedEnglishProficiencyType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[LocalEducationAgency] ******/

CREATE TABLE [t_edfi].[LocalEducationAgency]
(
    [tid_LocalEducationAgency] [INT] IDENTITY(1,1) NOT NULL,
	[LocalEducationAgencyId] [INT] NOT NULL,
	[LocalEducationAgencyCategoryType] [NVARCHAR](450) NOT NULL,
	[CharterStatusType] [NVARCHAR](450) NULL,
	[ParentLocalEducationAgencyId] [INT] NULL,
	[EducationServiceCenterId] [INT] NULL,
	[StateEducationAgencyId] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LocalEducationAgency] PRIMARY KEY NONCLUSTERED
(
    [tid_LocalEducationAgency] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LocalEducationAgency] ADD CONSTRAINT [LocalEducationAgency_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LocalEducationAgency] ADD CONSTRAINT [LocalEducationAgency_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LocalEducationAgency] ADD CONSTRAINT [LocalEducationAgency_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an administrative unit at the local level which exists primarily to operate schools or to contract for educational services. It includes school districts, charter schools, charter management organizations, or other local administrative organizations.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'CharterStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'ParentLocalEducationAgencyId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education service center by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'EducationServiceCenterId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLocalEducationAgency_Id ON [t_edfi].[LocalEducationAgency]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LocalEducationAgencySnapshotRecord] ******/

CREATE TABLE [t_edfi].[LocalEducationAgencySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LocalEducationAgency] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LocalEducationAgencySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LocalEducationAgency], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LocalEducationAgencySnapshotRecord] ADD CONSTRAINT [FK_LocalEducationAgencySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LocalEducationAgencySnapshotRecord] CHECK CONSTRAINT [FK_LocalEducationAgencySnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LocalEducationAgencySnapshotRecord] ADD CONSTRAINT [FK_LocalEducationAgencySnapshotRecord_ParentTable] FOREIGN KEY ([tid_LocalEducationAgency])
REFERENCES [t_edfi].[LocalEducationAgency] ([tid_LocalEducationAgency]);
ALTER TABLE [t_edfi].[LocalEducationAgencySnapshotRecord] CHECK CONSTRAINT [FK_LocalEducationAgencySnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[LocalEducationAgencyAccountability] ******/

CREATE TABLE [t_edfi].[LocalEducationAgencyAccountability]
(
	[tid_LocalEducationAgencyAccountability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LocalEducationAgency] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[GunFreeSchoolsActReportingStatusType] [NVARCHAR](450) NULL,
	[SchoolChoiceImplementStatusType] [NVARCHAR](450) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LocalEducationAgencyAccountability] PRIMARY KEY NONCLUSTERED
(
	[tid_LocalEducationAgencyAccountability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LocalEducationAgencyAccountability] ADD CONSTRAINT [LocalEducationAgencyAccountability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LocalEducationAgencyAccountability] ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_ParentTable] FOREIGN KEY ([tid_LocalEducationAgency])
REFERENCES [t_edfi].[LocalEducationAgency] ([tid_LocalEducationAgency]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LocalEducationAgencyAccountability] CHECK CONSTRAINT [FK_LocalEducationAgencyAccountability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity maintains information about federal reporting and accountability for local education agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyAccountability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the accountability is reported.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'GunFreeSchoolsActReportingStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'SchoolChoiceImplementStatusType';
GO

/****** TABLE: [t_edfi].[LocalEducationAgencyFederalFunds] ******/

CREATE TABLE [t_edfi].[LocalEducationAgencyFederalFunds]
(
	[tid_LocalEducationAgencyFederalFunds] [INT] IDENTITY(1,1) NOT NULL,
    [tid_LocalEducationAgency] [INT] NOT NULL,
	[FiscalYear] [INT] NOT NULL,
	[InnovativeDollarsSpent] [MONEY] NULL,
	[InnovativeDollarsSpentOnStrategicPriorities] [MONEY] NULL,
	[InnovativeProgramsFundsReceived] [MONEY] NULL,
	[SchoolImprovementAllocation] [MONEY] NULL,
	[SchoolImprovementReservedFundsPercentage] [DECIMAL](5, 4) NULL,
	[SupplementalEducationalServicesFundsSpent] [MONEY] NULL,
	[SupplementalEducationalServicesPerPupilExpenditure] [MONEY] NULL,
	[StateAssessmentAdministrationFunding] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LocalEducationAgencyFederalFunds] PRIMARY KEY NONCLUSTERED
(
	[tid_LocalEducationAgencyFederalFunds] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [LocalEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [LocalEducationAgencyFederalFunds_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [LocalEducationAgencyFederalFunds_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
ALTER TABLE [t_edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [FK_LocalEducationAgencyFederalFunds_ParentTable] FOREIGN KEY ([tid_LocalEducationAgency])
REFERENCES [t_edfi].[LocalEducationAgency] ([tid_LocalEducationAgency]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LocalEducationAgencyFederalFunds] CHECK CONSTRAINT [FK_LocalEducationAgencyFederalFunds_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contains the information about the reception and use of federal funds for reporting purposes.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the accountability is reported.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'FiscalYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total Title V, Part A funds expended by LEAs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'InnovativeDollarsSpent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'InnovativeDollarsSpentOnStrategicPriorities';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total Title V, Part A funds received by LEAs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'InnovativeProgramsFundsReceived';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of Section 1003(a) and 1003(g) allocations to LEAs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SchoolImprovementAllocation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and §200.100(a) of ED''s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SchoolImprovementReservedFundsPercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SupplementalEducationalServicesFundsSpent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SupplementalEducationalServicesPerPupilExpenditure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state''s schools and LEAs are held accountable for results.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'StateAssessmentAdministrationFunding';
GO
/****** TABLE: [t_edfi].[LocalEducationAgencyCategoryType] ******/

CREATE TABLE [t_edfi].[LocalEducationAgencyCategoryType]
(
    [tid_LocalEducationAgencyCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_LocalEducationAgencyCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_LocalEducationAgencyCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LocalEducationAgencyCategoryType] ADD CONSTRAINT [LocalEducationAgencyCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[LocalEducationAgencyCategoryType] ADD CONSTRAINT [LocalEducationAgencyCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[LocalEducationAgencyCategoryType] ADD CONSTRAINT [LocalEducationAgencyCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of local education agency/district. For example: Independent or Charter.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LocalEducationAgencyCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LocalEducationAgencyCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'LocalEducationAgencyCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Location] ******/

CREATE TABLE [t_edfi].[Location]
(
    [tid_Location] [INT] IDENTITY(1,1) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[MaximumNumberOfSeats] [INT] NULL,
	[OptimalNumberOfSeats] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Location] PRIMARY KEY NONCLUSTERED
(
    [tid_Location] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Location] ADD CONSTRAINT [Location_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Location] ADD CONSTRAINT [Location_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Location] ADD CONSTRAINT [Location_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the physical space where students gather for a particular class/section. The Location may be an indoor or outdoor area designated for the purpose of meeting the educational needs of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Location';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Location', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Location', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The most number of seats the class can maintain.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Location', @level2type=N'COLUMN', @level2name=N'MaximumNumberOfSeats';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of seats that is most favorable to the class.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Location', @level2type=N'COLUMN', @level2name=N'OptimalNumberOfSeats';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLocation_Id ON [t_edfi].[Location]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[LocationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[LocationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Location] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LocationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Location], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[LocationSnapshotRecord] ADD CONSTRAINT [FK_LocationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[LocationSnapshotRecord] CHECK CONSTRAINT [FK_LocationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[LocationSnapshotRecord] ADD CONSTRAINT [FK_LocationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Location])
REFERENCES [t_edfi].[Location] ([tid_Location]);
ALTER TABLE [t_edfi].[LocationSnapshotRecord] CHECK CONSTRAINT [FK_LocationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[MagnetSpecialProgramEmphasisSchoolType] ******/

CREATE TABLE [t_edfi].[MagnetSpecialProgramEmphasisSchoolType]
(
    [tid_MagnetSpecialProgramEmphasisSchoolType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_MagnetSpecialProgramEmphasisSchoolType] PRIMARY KEY NONCLUSTERED
(
    [tid_MagnetSpecialProgramEmphasisSchoolType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[MagnetSpecialProgramEmphasisSchoolType] ADD CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[MagnetSpecialProgramEmphasisSchoolType] ADD CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[MagnetSpecialProgramEmphasisSchoolType] ADD CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A school that has been designed to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing or eliminating racial isolation; and/or to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'MagnetSpecialProgramEmphasisSchoolType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MagnetSpecialProgramEmphasisSchoolType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MagnetSpecialProgramEmphasisSchool type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MagnetSpecialProgramEmphasisSchoolType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MagnetSpecialProgramEmphasisSchool type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MagnetSpecialProgramEmphasisSchoolType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[MediumOfInstructionType] ******/

CREATE TABLE [t_edfi].[MediumOfInstructionType]
(
    [tid_MediumOfInstructionType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_MediumOfInstructionType] PRIMARY KEY NONCLUSTERED
(
    [tid_MediumOfInstructionType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[MediumOfInstructionType] ADD CONSTRAINT [MediumOfInstructionType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[MediumOfInstructionType] ADD CONSTRAINT [MediumOfInstructionType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[MediumOfInstructionType] ADD CONSTRAINT [MediumOfInstructionType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The media through which teachers provide instruction to students and students and teachers communicate about instructional matters.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'MediumOfInstructionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MediumOfInstructionType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MediumOfInstruction type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MediumOfInstructionType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MediumOfInstruction type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MediumOfInstructionType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[MeetingDayType] ******/

CREATE TABLE [t_edfi].[MeetingDayType]
(
    [tid_MeetingDayType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_MeetingDayType] PRIMARY KEY NONCLUSTERED
(
    [tid_MeetingDayType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[MeetingDayType] ADD CONSTRAINT [MeetingDayType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[MeetingDayType] ADD CONSTRAINT [MeetingDayType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[MeetingDayType] ADD CONSTRAINT [MeetingDayType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items for the day(s) of the week (e.g., Monday, Wednesday) that the class meets or an indication that a class meets "out-of-school" or "self-paced".', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'MeetingDayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MeetingDayType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MeetingDay type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MeetingDayType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MeetingDay type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MeetingDayType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[MethodCreditEarnedType] ******/

CREATE TABLE [t_edfi].[MethodCreditEarnedType]
(
    [tid_MethodCreditEarnedType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_MethodCreditEarnedType] PRIMARY KEY NONCLUSTERED
(
    [tid_MethodCreditEarnedType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[MethodCreditEarnedType] ADD CONSTRAINT [MethodCreditEarnedType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[MethodCreditEarnedType] ADD CONSTRAINT [MethodCreditEarnedType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[MethodCreditEarnedType] ADD CONSTRAINT [MethodCreditEarnedType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method the credits were earned, for example:  Classroom, Examination, Transfer.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'MethodCreditEarnedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MethodCreditEarnedType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MethodCreditEarned type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MethodCreditEarnedType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MethodCreditEarned type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'MethodCreditEarnedType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[NetworkPurposeType] ******/

CREATE TABLE [t_edfi].[NetworkPurposeType]
(
    [tid_NetworkPurposeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_NetworkPurposeType] PRIMARY KEY NONCLUSTERED
(
    [tid_NetworkPurposeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[NetworkPurposeType] ADD CONSTRAINT [NetworkPurposeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[NetworkPurposeType] ADD CONSTRAINT [NetworkPurposeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[NetworkPurposeType] ADD CONSTRAINT [NetworkPurposeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The purpose(s) of the network, e.g. shared services, collective procurement, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'NetworkPurposeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'NetworkPurposeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the NetworkPurpose type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'NetworkPurposeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the NetworkPurpose type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'NetworkPurposeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ObjectiveAssessment] ******/

CREATE TABLE [t_edfi].[ObjectiveAssessment]
(
    [tid_ObjectiveAssessment] [INT] IDENTITY(1,1) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[Version] [INT] NOT NULL,
	[MaxRawScore] [INT] NULL,
	[PercentOfAssessment] [DECIMAL](5, 4) NULL,
	[Nomenclature] [NVARCHAR](35) NULL,
	[Description] [NVARCHAR](1024) NULL,
	[ParentIdentificationCode] [NVARCHAR](60) NULL,
	[AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ObjectiveAssessment] PRIMARY KEY NONCLUSTERED
(
    [tid_ObjectiveAssessment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ObjectiveAssessment] ADD CONSTRAINT [ObjectiveAssessment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ObjectiveAssessment] ADD CONSTRAINT [ObjectiveAssessment_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ObjectiveAssessment] ADD CONSTRAINT [ObjectiveAssessment_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents subtests that assess specific learning objectives.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'MaxRawScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of the Assessment that tests this objective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'PercentOfAssessment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for this level of ObjectiveAssessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'Nomenclature';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'ParentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TObjectiveAssessment_Id ON [t_edfi].[ObjectiveAssessment]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ObjectiveAssessmentSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ObjectiveAssessmentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ObjectiveAssessment] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ObjectiveAssessmentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ObjectiveAssessment], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ObjectiveAssessmentSnapshotRecord] ADD CONSTRAINT [FK_ObjectiveAssessmentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ObjectiveAssessmentSnapshotRecord] CHECK CONSTRAINT [FK_ObjectiveAssessmentSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ObjectiveAssessmentSnapshotRecord] ADD CONSTRAINT [FK_ObjectiveAssessmentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ObjectiveAssessment])
REFERENCES [t_edfi].[ObjectiveAssessment] ([tid_ObjectiveAssessment]);
ALTER TABLE [t_edfi].[ObjectiveAssessmentSnapshotRecord] CHECK CONSTRAINT [FK_ObjectiveAssessmentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ObjectiveAssessmentPerformanceLevel] ******/

CREATE TABLE [t_edfi].[ObjectiveAssessmentPerformanceLevel]
(
	[tid_ObjectiveAssessmentPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ObjectiveAssessment] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[MinimumScore] [NVARCHAR](35) NULL,
	[MaximumScore] [NVARCHAR](35) NULL,
	[ResultDatatypeType] [NVARCHAR](450) NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ObjectiveAssessmentPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_ObjectiveAssessmentPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [ObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ParentTable] FOREIGN KEY ([tid_ObjectiveAssessment])
REFERENCES [t_edfi].[ObjectiveAssessment] ([tid_ObjectiveAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ObjectiveAssessmentPerformanceLevel] CHECK CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Definition of the performance levels and the associated cut scores. Three styles are supported:
        1. Specification of performance level by minimum and maximum score    
        2. Specification of performance level by cut score, using only minimum score    
        3. Specification of performance level without any mapping to scores.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score required to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MinimumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MaximumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[ObjectiveAssessmentAssessmentItem] ******/

CREATE TABLE [t_edfi].[ObjectiveAssessmentAssessmentItem]
(
	[tid_ObjectiveAssessmentAssessmentItem] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ObjectiveAssessment] [INT] NOT NULL,
	[AssessmentItemIdentificationCode] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ObjectiveAssessmentAssessmentItem] PRIMARY KEY NONCLUSTERED
(
	[tid_ObjectiveAssessmentAssessmentItem] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ObjectiveAssessmentAssessmentItem] ADD CONSTRAINT [ObjectiveAssessmentAssessmentItem_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ObjectiveAssessmentAssessmentItem] ADD CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_ParentTable] FOREIGN KEY ([tid_ObjectiveAssessment])
REFERENCES [t_edfi].[ObjectiveAssessment] ([tid_ObjectiveAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ObjectiveAssessmentAssessmentItem] CHECK CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'References individual test items, if appropriate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentItemIdentificationCode';
GO

/****** TABLE: [t_edfi].[ObjectiveAssessmentLearningObjective] ******/

CREATE TABLE [t_edfi].[ObjectiveAssessmentLearningObjective]
(
	[tid_ObjectiveAssessmentLearningObjective] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ObjectiveAssessment] [INT] NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ObjectiveAssessmentLearningObjective] PRIMARY KEY NONCLUSTERED
(
	[tid_ObjectiveAssessmentLearningObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ObjectiveAssessmentLearningObjective] ADD CONSTRAINT [ObjectiveAssessmentLearningObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ObjectiveAssessmentLearningObjective] ADD CONSTRAINT [FK_ObjectiveAssessmentLearningObjective_ParentTable] FOREIGN KEY ([tid_ObjectiveAssessment])
REFERENCES [t_edfi].[ObjectiveAssessment] ([tid_ObjectiveAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ObjectiveAssessmentLearningObjective] CHECK CONSTRAINT [FK_ObjectiveAssessmentLearningObjective_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'References the LearningObjective(s) the ObjectiveAssessment tests.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective';
GO

/****** TABLE: [t_edfi].[ObjectiveAssessmentLearningStandard] ******/

CREATE TABLE [t_edfi].[ObjectiveAssessmentLearningStandard]
(
	[tid_ObjectiveAssessmentLearningStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ObjectiveAssessment] [INT] NOT NULL,
	[LearningStandardId] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ObjectiveAssessmentLearningStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_ObjectiveAssessmentLearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ObjectiveAssessmentLearningStandard] ADD CONSTRAINT [ObjectiveAssessmentLearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ObjectiveAssessmentLearningStandard] ADD CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_ParentTable] FOREIGN KEY ([tid_ObjectiveAssessment])
REFERENCES [t_edfi].[ObjectiveAssessment] ([tid_ObjectiveAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ObjectiveAssessmentLearningStandard] CHECK CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard tested by this ObjectiveAssessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ObjectiveAssessmentLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
GO
/****** TABLE: [t_edfi].[OldEthnicityType] ******/

CREATE TABLE [t_edfi].[OldEthnicityType]
(
    [tid_OldEthnicityType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_OldEthnicityType] PRIMARY KEY NONCLUSTERED
(
    [tid_OldEthnicityType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[OldEthnicityType] ADD CONSTRAINT [OldEthnicityType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[OldEthnicityType] ADD CONSTRAINT [OldEthnicityType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[OldEthnicityType] ADD CONSTRAINT [OldEthnicityType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Previous definition of Ethnicity combining Hispanic/Latino and Race.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'OldEthnicityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OldEthnicityType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the OldEthnicity type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OldEthnicityType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the OldEthnicity type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OldEthnicityType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[OpenStaffPosition] ******/

CREATE TABLE [t_edfi].[OpenStaffPosition]
(
    [tid_OpenStaffPosition] [INT] IDENTITY(1,1) NOT NULL,
	[DatePosted] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[RequisitionNumber] [NVARCHAR](20) NOT NULL,
	[StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PositionTitle] [NVARCHAR](100) NULL,
	[ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NULL,
	[DatePostingRemoved] [DATE] NULL,
	[PostingResultType] [NVARCHAR](450) NULL,
	[ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NULL,
	[StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_OpenStaffPosition] PRIMARY KEY NONCLUSTERED
(
    [tid_OpenStaffPosition] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[OpenStaffPosition] ADD CONSTRAINT [OpenStaffPosition_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[OpenStaffPosition] ADD CONSTRAINT [OpenStaffPosition_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[OpenStaffPosition] ADD CONSTRAINT [OpenStaffPosition_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an open staff position that the education organization is seeking to fill.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the OpenStaffPosition was posted.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'DatePosted';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'RequisitionNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name of an individual''s position.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'PositionTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the posting was removed or filled.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'DatePostingRemoved';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'PostingResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TOpenStaffPosition_Id ON [t_edfi].[OpenStaffPosition]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[OpenStaffPositionSnapshotRecord] ******/

CREATE TABLE [t_edfi].[OpenStaffPositionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_OpenStaffPosition] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_OpenStaffPositionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_OpenStaffPosition], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[OpenStaffPositionSnapshotRecord] ADD CONSTRAINT [FK_OpenStaffPositionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[OpenStaffPositionSnapshotRecord] CHECK CONSTRAINT [FK_OpenStaffPositionSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[OpenStaffPositionSnapshotRecord] ADD CONSTRAINT [FK_OpenStaffPositionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_OpenStaffPosition])
REFERENCES [t_edfi].[OpenStaffPosition] ([tid_OpenStaffPosition]);
ALTER TABLE [t_edfi].[OpenStaffPositionSnapshotRecord] CHECK CONSTRAINT [FK_OpenStaffPositionSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[OpenStaffPositionInstructionalGradeLevel] ******/

CREATE TABLE [t_edfi].[OpenStaffPositionInstructionalGradeLevel]
(
	[tid_OpenStaffPositionInstructionalGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_OpenStaffPosition] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_OpenStaffPositionInstructionalGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_OpenStaffPositionInstructionalGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[OpenStaffPositionInstructionalGradeLevel] ADD CONSTRAINT [OpenStaffPositionInstructionalGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[OpenStaffPositionInstructionalGradeLevel] ADD CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_ParentTable] FOREIGN KEY ([tid_OpenStaffPosition])
REFERENCES [t_edfi].[OpenStaffPosition] ([tid_OpenStaffPosition]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[OpenStaffPositionInstructionalGradeLevel] CHECK CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of grade levels for which the position''s assignment is responsible.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[OpenStaffPositionAcademicSubject] ******/

CREATE TABLE [t_edfi].[OpenStaffPositionAcademicSubject]
(
	[tid_OpenStaffPositionAcademicSubject] [INT] IDENTITY(1,1) NOT NULL,
    [tid_OpenStaffPosition] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_OpenStaffPositionAcademicSubject] PRIMARY KEY NONCLUSTERED
(
	[tid_OpenStaffPositionAcademicSubject] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[OpenStaffPositionAcademicSubject] ADD CONSTRAINT [OpenStaffPositionAcademicSubject_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[OpenStaffPositionAcademicSubject] ADD CONSTRAINT [FK_OpenStaffPositionAcademicSubject_ParentTable] FOREIGN KEY ([tid_OpenStaffPosition])
REFERENCES [t_edfi].[OpenStaffPosition] ([tid_OpenStaffPosition]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[OpenStaffPositionAcademicSubject] CHECK CONSTRAINT [FK_OpenStaffPositionAcademicSubject_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[OperationalStatusType] ******/

CREATE TABLE [t_edfi].[OperationalStatusType]
(
    [tid_OperationalStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_OperationalStatusType] PRIMARY KEY NONCLUSTERED
(
    [tid_OperationalStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[OperationalStatusType] ADD CONSTRAINT [OperationalStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[OperationalStatusType] ADD CONSTRAINT [OperationalStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[OperationalStatusType] ADD CONSTRAINT [OperationalStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The current operational status of the education organization (e.g., active, inactive).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'OperationalStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OperationalStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the OperationalStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OperationalStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the OperationalStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OperationalStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[OtherNameType] ******/

CREATE TABLE [t_edfi].[OtherNameType]
(
    [tid_OtherNameType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_OtherNameType] PRIMARY KEY NONCLUSTERED
(
    [tid_OtherNameType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[OtherNameType] ADD CONSTRAINT [OtherNameType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[OtherNameType] ADD CONSTRAINT [OtherNameType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[OtherNameType] ADD CONSTRAINT [OtherNameType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of alternate names for a person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'OtherNameType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OtherNameType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the OtherName type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OtherNameType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the OtherName type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'OtherNameType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Parent] ******/

CREATE TABLE [t_edfi].[Parent]
(
    [tid_Parent] [INT] IDENTITY(1,1) NOT NULL,
	[ParentUniqueId] [NVARCHAR](32) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[MaidenName] [NVARCHAR](75) NULL,
	[SexType] [NVARCHAR](450) NULL,
	[LoginId] [NVARCHAR](60) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Parent] PRIMARY KEY NONCLUSTERED
(
    [tid_Parent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Parent] ADD CONSTRAINT [Parent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Parent] ADD CONSTRAINT [Parent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Parent] ADD CONSTRAINT [Parent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a parent or guardian of a student, such as mother, father, or caretaker.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Parent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'ParentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'MaidenName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'LoginId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TParent_Id ON [t_edfi].[Parent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ParentSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ParentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Parent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ParentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Parent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ParentSnapshotRecord] ADD CONSTRAINT [FK_ParentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ParentSnapshotRecord] CHECK CONSTRAINT [FK_ParentSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ParentSnapshotRecord] ADD CONSTRAINT [FK_ParentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Parent])
REFERENCES [t_edfi].[Parent] ([tid_Parent]);
ALTER TABLE [t_edfi].[ParentSnapshotRecord] CHECK CONSTRAINT [FK_ParentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ParentOtherName] ******/

CREATE TABLE [t_edfi].[ParentOtherName]
(
	[tid_ParentOtherName] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Parent] [INT] NOT NULL,
	[OtherNameType] [NVARCHAR](450) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ParentOtherName] PRIMARY KEY NONCLUSTERED
(
	[tid_ParentOtherName] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ParentOtherName] ADD CONSTRAINT [ParentOtherName_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ParentOtherName] ADD CONSTRAINT [FK_ParentOtherName_ParentTable] FOREIGN KEY ([tid_Parent])
REFERENCES [t_edfi].[Parent] ([tid_Parent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ParentOtherName] CHECK CONSTRAINT [FK_ParentOtherName_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other names (e.g., alias, nickname, previous legal name) associated with a person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'OtherNameType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
GO

/****** TABLE: [t_edfi].[ParentAddress] ******/

CREATE TABLE [t_edfi].[ParentAddress]
(
	[tid_ParentAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Parent] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ParentAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_ParentAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ParentAddress] ADD CONSTRAINT [ParentAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ParentAddress] ADD CONSTRAINT [FK_ParentAddress_ParentTable] FOREIGN KEY ([tid_Parent])
REFERENCES [t_edfi].[Parent] ([tid_Parent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ParentAddress] CHECK CONSTRAINT [FK_ParentAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent''s address, if different from the student address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ParentAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[ParentInternationalAddress] ******/

CREATE TABLE [t_edfi].[ParentInternationalAddress]
(
	[tid_ParentInternationalAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Parent] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[AddressLine1] [NVARCHAR](150) NOT NULL,
	[AddressLine2] [NVARCHAR](150) NULL,
	[AddressLine3] [NVARCHAR](150) NULL,
	[AddressLine4] [NVARCHAR](150) NULL,
	[CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ParentInternationalAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_ParentInternationalAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ParentInternationalAddress] ADD CONSTRAINT [ParentInternationalAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ParentInternationalAddress] ADD CONSTRAINT [FK_ParentInternationalAddress_ParentTable] FOREIGN KEY ([tid_Parent])
REFERENCES [t_edfi].[Parent] ([tid_Parent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ParentInternationalAddress] CHECK CONSTRAINT [FK_ParentInternationalAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[ParentTelephone] ******/

CREATE TABLE [t_edfi].[ParentTelephone]
(
	[tid_ParentTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Parent] [INT] NOT NULL,
	[TelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[OrderOfPriority] [INT] NULL,
	[TextMessageCapabilityIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ParentTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_ParentTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ParentTelephone] ADD CONSTRAINT [ParentTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ParentTelephone] ADD CONSTRAINT [FK_ParentTelephone_ParentTable] FOREIGN KEY ([tid_Parent])
REFERENCES [t_edfi].[Parent] ([tid_Parent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ParentTelephone] CHECK CONSTRAINT [FK_ParentTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ParentTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator';
GO

/****** TABLE: [t_edfi].[ParentElectronicMail] ******/

CREATE TABLE [t_edfi].[ParentElectronicMail]
(
	[tid_ParentElectronicMail] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Parent] [INT] NOT NULL,
	[ElectronicMailType] [NVARCHAR](450) NOT NULL,
	[ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
	[PrimaryEmailAddressIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ParentElectronicMail] PRIMARY KEY NONCLUSTERED
(
	[tid_ParentElectronicMail] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ParentElectronicMail] ADD CONSTRAINT [ParentElectronicMail_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ParentElectronicMail] ADD CONSTRAINT [FK_ParentElectronicMail_ParentTable] FOREIGN KEY ([tid_Parent])
REFERENCES [t_edfi].[Parent] ([tid_Parent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ParentElectronicMail] CHECK CONSTRAINT [FK_ParentElectronicMail_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ParentElectronicMail';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator';
GO

/****** TABLE: [t_edfi].[ParentIdentificationDocument] ******/

CREATE TABLE [t_edfi].[ParentIdentificationDocument]
(
	[tid_ParentIdentificationDocument] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Parent] [INT] NOT NULL,
	[IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL,
	[PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL,
	[DocumentTitle] [NVARCHAR](60) NULL,
	[DocumentExpirationDate] [DATE] NULL,
	[IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ParentIdentificationDocument] PRIMARY KEY NONCLUSTERED
(
	[tid_ParentIdentificationDocument] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ParentIdentificationDocument] ADD CONSTRAINT [ParentIdentificationDocument_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ParentIdentificationDocument] ADD CONSTRAINT [FK_ParentIdentificationDocument_ParentTable] FOREIGN KEY ([tid_Parent])
REFERENCES [t_edfi].[Parent] ([tid_Parent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ParentIdentificationDocument] CHECK CONSTRAINT [FK_ParentIdentificationDocument_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[Payroll] ******/

CREATE TABLE [t_edfi].[Payroll]
(
    [tid_Payroll] [INT] IDENTITY(1,1) NOT NULL,
	[AccountNumber] [NVARCHAR](50) NOT NULL,
	[AsOfDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FiscalYear] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[AmountToDate] [MONEY] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Payroll] PRIMARY KEY NONCLUSTERED
(
    [tid_Payroll] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Payroll] ADD CONSTRAINT [Payroll_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Payroll] ADD CONSTRAINT [Payroll_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Payroll] ADD CONSTRAINT [Payroll_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the sum of the financial transactions to date for employee compensation. An "employee" who performs services under the direction of the employing institution or agency, is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Payroll';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'AccountNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported payroll element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'AsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'FiscalYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current balance (amount paid to employee) for account for the fiscal year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'AmountToDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPayroll_Id ON [t_edfi].[Payroll]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[PayrollSnapshotRecord] ******/

CREATE TABLE [t_edfi].[PayrollSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Payroll] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PayrollSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Payroll], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PayrollSnapshotRecord] ADD CONSTRAINT [FK_PayrollSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[PayrollSnapshotRecord] CHECK CONSTRAINT [FK_PayrollSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[PayrollSnapshotRecord] ADD CONSTRAINT [FK_PayrollSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Payroll])
REFERENCES [t_edfi].[Payroll] ([tid_Payroll]);
ALTER TABLE [t_edfi].[PayrollSnapshotRecord] CHECK CONSTRAINT [FK_PayrollSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[PerformanceBaseConversionType] ******/

CREATE TABLE [t_edfi].[PerformanceBaseConversionType]
(
    [tid_PerformanceBaseConversionType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_PerformanceBaseConversionType] PRIMARY KEY NONCLUSTERED
(
    [tid_PerformanceBaseConversionType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PerformanceBaseConversionType] ADD CONSTRAINT [PerformanceBaseConversionType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PerformanceBaseConversionType] ADD CONSTRAINT [PerformanceBaseConversionType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PerformanceBaseConversionType] ADD CONSTRAINT [PerformanceBaseConversionType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Defines standard levels of competency or performance that can be used for dashboard visualizations: advanced, proficient, basic, and below basic.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PerformanceBaseConversionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceBaseConversionType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PerformanceBaseConversion type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceBaseConversionType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PerformanceBaseConversion type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceBaseConversionType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[PerformanceLevelDescriptor] ******/

CREATE TABLE [t_edfi].[PerformanceLevelDescriptor]
(
    [tid_PerformanceLevelDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceBaseConversionType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceLevelDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_PerformanceLevelDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PerformanceLevelDescriptor] ADD CONSTRAINT [PerformanceLevelDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PerformanceLevelDescriptor] ADD CONSTRAINT [PerformanceLevelDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PerformanceLevelDescriptor] ADD CONSTRAINT [PerformanceLevelDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines various levels or thresholds for performance on the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PerformanceLevelDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN', @level2name=N'PerformanceBaseConversionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPerformanceLevelDescriptor_Id ON [t_edfi].[PerformanceLevelDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[PerformanceLevelDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PerformanceLevelDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceLevelDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PerformanceLevelDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PerformanceLevelDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceLevelDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PerformanceLevelDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PerformanceLevelDescriptor])
REFERENCES [t_edfi].[PerformanceLevelDescriptor] ([tid_PerformanceLevelDescriptor]);
ALTER TABLE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceLevelDescriptorSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[PersonalInformationVerificationType] ******/

CREATE TABLE [t_edfi].[PersonalInformationVerificationType]
(
    [tid_PersonalInformationVerificationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_PersonalInformationVerificationType] PRIMARY KEY NONCLUSTERED
(
    [tid_PersonalInformationVerificationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PersonalInformationVerificationType] ADD CONSTRAINT [PersonalInformationVerificationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PersonalInformationVerificationType] ADD CONSTRAINT [PersonalInformationVerificationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PersonalInformationVerificationType] ADD CONSTRAINT [PersonalInformationVerificationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The evidence presented to verify one''s personal identity; for example: driver''s license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PersonalInformationVerificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PersonalInformationVerificationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PersonalInformationVerification type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PersonalInformationVerificationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PersonalInformationVerification type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PersonalInformationVerificationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[PopulationServedType] ******/

CREATE TABLE [t_edfi].[PopulationServedType]
(
    [tid_PopulationServedType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_PopulationServedType] PRIMARY KEY NONCLUSTERED
(
    [tid_PopulationServedType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PopulationServedType] ADD CONSTRAINT [PopulationServedType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PopulationServedType] ADD CONSTRAINT [PopulationServedType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PopulationServedType] ADD CONSTRAINT [PopulationServedType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of students the Section is offered and tailored to.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PopulationServedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PopulationServedType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PopulationServed type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PopulationServedType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PopulationServed type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PopulationServedType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[PostingResultType] ******/

CREATE TABLE [t_edfi].[PostingResultType]
(
    [tid_PostingResultType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_PostingResultType] PRIMARY KEY NONCLUSTERED
(
    [tid_PostingResultType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostingResultType] ADD CONSTRAINT [PostingResultType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PostingResultType] ADD CONSTRAINT [PostingResultType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PostingResultType] ADD CONSTRAINT [PostingResultType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indication of whether the position was filled or retired without filling.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PostingResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostingResultType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PostingResult type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostingResultType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PostingResult type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostingResultType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[PostSecondaryEvent] ******/

CREATE TABLE [t_edfi].[PostSecondaryEvent]
(
    [tid_PostSecondaryEvent] [INT] IDENTITY(1,1) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PostSecondaryEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_PostSecondaryEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostSecondaryEvent] ADD CONSTRAINT [PostSecondaryEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PostSecondaryEvent] ADD CONSTRAINT [PostSecondaryEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PostSecondaryEvent] ADD CONSTRAINT [PostSecondaryEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity captures significant postsecondary events during a student''s high school tenure (e.g., FAFSA application or college application, acceptance, and enrollment) or during a student''s enrollment at a post-secondary institution.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the event occurred or was recorded.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEvent', @level2type=N'COLUMN', @level2name=N'PostSecondaryEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEvent', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPostSecondaryEvent_Id ON [t_edfi].[PostSecondaryEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[PostSecondaryEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[PostSecondaryEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PostSecondaryEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PostSecondaryEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PostSecondaryEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostSecondaryEventSnapshotRecord] ADD CONSTRAINT [FK_PostSecondaryEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[PostSecondaryEventSnapshotRecord] CHECK CONSTRAINT [FK_PostSecondaryEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[PostSecondaryEventSnapshotRecord] ADD CONSTRAINT [FK_PostSecondaryEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PostSecondaryEvent])
REFERENCES [t_edfi].[PostSecondaryEvent] ([tid_PostSecondaryEvent]);
ALTER TABLE [t_edfi].[PostSecondaryEventSnapshotRecord] CHECK CONSTRAINT [FK_PostSecondaryEventSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[PostSecondaryEventPostSecondaryInstitution] ******/

CREATE TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitution]
(
	[tid_PostSecondaryEventPostSecondaryInstitution] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PostSecondaryEvent] [INT] NOT NULL,
	[PostSecondaryInstitutionId] [NVARCHAR](30) NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[PostSecondaryInstitutionLevelType] [NVARCHAR](450) NULL,
	[AdministrativeFundingControlDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AdministrativeFundingControlDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PostSecondaryEventPostSecondaryInstitution] PRIMARY KEY NONCLUSTERED
(
	[tid_PostSecondaryEventPostSecondaryInstitution] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitution] ADD CONSTRAINT [PostSecondaryEventPostSecondaryInstitution_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitution] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_ParentTable] FOREIGN KEY ([tid_PostSecondaryEvent])
REFERENCES [t_edfi].[PostSecondaryEvent] ([tid_PostSecondaryEvent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitution] CHECK CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An organization that provides educational programs for individuals who have completed or otherwise left educational programs in secondary school(s).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the post secondary institution.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'PostSecondaryInstitutionId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The postsecondary institution associated with the event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'PostSecondaryInstitutionLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ******/

CREATE TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode]
(
	[tid_PostSecondaryEventPostSecondaryInstitutionIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PostSecondaryEventPostSecondaryInstitution] [INT] NOT NULL,
	[EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ADD CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_ParentTable] FOREIGN KEY ([tid_PostSecondaryEventPostSecondaryInstitution])
REFERENCES [t_edfi].[PostSecondaryEventPostSecondaryInstitution] ([tid_PostSecondaryEventPostSecondaryInstitution]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] CHECK CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ******/

CREATE TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]
(
	[tid_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PostSecondaryEventPostSecondaryInstitution] [INT] NOT NULL,
	[MediumOfInstructionType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] PRIMARY KEY NONCLUSTERED
(
	[tid_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ADD CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_ParentTable] FOREIGN KEY ([tid_PostSecondaryEventPostSecondaryInstitution])
REFERENCES [t_edfi].[PostSecondaryEventPostSecondaryInstitution] ([tid_PostSecondaryEventPostSecondaryInstitution]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] CHECK CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categories in which an institution serves the students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', @level2type=N'COLUMN', @level2name=N'MediumOfInstructionType';
GO
/****** TABLE: [t_edfi].[PostSecondaryEventCategoryType] ******/

CREATE TABLE [t_edfi].[PostSecondaryEventCategoryType]
(
    [tid_PostSecondaryEventCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_PostSecondaryEventCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_PostSecondaryEventCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostSecondaryEventCategoryType] ADD CONSTRAINT [PostSecondaryEventCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PostSecondaryEventCategoryType] ADD CONSTRAINT [PostSecondaryEventCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PostSecondaryEventCategoryType] ADD CONSTRAINT [PostSecondaryEventCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the type of post-secondary event (e.g., college application or acceptance).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PostSecondaryEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PostSecondaryEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryEventCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[PostSecondaryInstitutionLevelType] ******/

CREATE TABLE [t_edfi].[PostSecondaryInstitutionLevelType]
(
    [tid_PostSecondaryInstitutionLevelType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_PostSecondaryInstitutionLevelType] PRIMARY KEY NONCLUSTERED
(
    [tid_PostSecondaryInstitutionLevelType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PostSecondaryInstitutionLevelType] ADD CONSTRAINT [PostSecondaryInstitutionLevelType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PostSecondaryInstitutionLevelType] ADD CONSTRAINT [PostSecondaryInstitutionLevelType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PostSecondaryInstitutionLevelType] ADD CONSTRAINT [PostSecondaryInstitutionLevelType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A classification of whether a post-secondary institution''s highest level of offering is a program of 4 years or higher (4 year), 2 but less than 4 years (2 year) or less than 2 years.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryInstitutionLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryInstitutionLevelType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PostSecondaryInstitutionLevel type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryInstitutionLevelType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PostSecondaryInstitutionLevel type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PostSecondaryInstitutionLevelType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Program] ******/

CREATE TABLE [t_edfi].[Program]
(
    [tid_Program] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[ProgramId] [NVARCHAR](20) NULL,
	[ProgramSponsorType] [NVARCHAR](450) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Program] PRIMARY KEY NONCLUSTERED
(
    [tid_Program] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Program] ADD CONSTRAINT [Program_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Program] ADD CONSTRAINT [Program_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Program] ADD CONSTRAINT [Program_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents any program designed to work in conjunction with, or as a supplement to, the main academic program. Programs may provide instruction, training, services, or benefits through federal, state, or local agencies. Programs may also include organized extracurricular activities for students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Program';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Program', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramSponsorType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProgram_Id ON [t_edfi].[Program]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ProgramSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ProgramSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Program] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Program], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramSnapshotRecord] ADD CONSTRAINT [FK_ProgramSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ProgramSnapshotRecord] CHECK CONSTRAINT [FK_ProgramSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ProgramSnapshotRecord] ADD CONSTRAINT [FK_ProgramSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Program])
REFERENCES [t_edfi].[Program] ([tid_Program]);
ALTER TABLE [t_edfi].[ProgramSnapshotRecord] CHECK CONSTRAINT [FK_ProgramSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ProgramCharacteristic] ******/

CREATE TABLE [t_edfi].[ProgramCharacteristic]
(
	[tid_ProgramCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Program] [INT] NOT NULL,
	[ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_ProgramCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramCharacteristic] ADD CONSTRAINT [ProgramCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramCharacteristic] ADD CONSTRAINT [FK_ProgramCharacteristic_ParentTable] FOREIGN KEY ([tid_Program])
REFERENCES [t_edfi].[Program] ([tid_Program]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ProgramCharacteristic] CHECK CONSTRAINT [FK_ProgramCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[ProgramService] ******/

CREATE TABLE [t_edfi].[ProgramService]
(
	[tid_ProgramService] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Program] [INT] NOT NULL,
	[ServiceDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ServiceDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramService] PRIMARY KEY NONCLUSTERED
(
	[tid_ProgramService] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramService] ADD CONSTRAINT [ProgramService_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramService] ADD CONSTRAINT [FK_ProgramService_ParentTable] FOREIGN KEY ([tid_Program])
REFERENCES [t_edfi].[Program] ([tid_Program]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ProgramService] CHECK CONSTRAINT [FK_ProgramService_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Defines the services this program provides to students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramService';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramService', @level2type=N'COLUMN', @level2name=N'ServiceDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramService', @level2type=N'COLUMN', @level2name=N'ServiceDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[ProgramLearningObjective] ******/

CREATE TABLE [t_edfi].[ProgramLearningObjective]
(
	[tid_ProgramLearningObjective] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Program] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramLearningObjective] PRIMARY KEY NONCLUSTERED
(
	[tid_ProgramLearningObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramLearningObjective] ADD CONSTRAINT [ProgramLearningObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramLearningObjective] ADD CONSTRAINT [FK_ProgramLearningObjective_ParentTable] FOREIGN KEY ([tid_Program])
REFERENCES [t_edfi].[Program] ([tid_Program]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ProgramLearningObjective] CHECK CONSTRAINT [FK_ProgramLearningObjective_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'References the LearningObjective(s) with which the Program is associated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[ProgramLearningStandard] ******/

CREATE TABLE [t_edfi].[ProgramLearningStandard]
(
	[tid_ProgramLearningStandard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Program] [INT] NOT NULL,
	[LearningStandardId] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramLearningStandard] PRIMARY KEY NONCLUSTERED
(
	[tid_ProgramLearningStandard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramLearningStandard] ADD CONSTRAINT [ProgramLearningStandard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramLearningStandard] ADD CONSTRAINT [FK_ProgramLearningStandard_ParentTable] FOREIGN KEY ([tid_Program])
REFERENCES [t_edfi].[Program] ([tid_Program]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ProgramLearningStandard] CHECK CONSTRAINT [FK_ProgramLearningStandard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard followed by this program.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningStandard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId';
GO
/****** TABLE: [t_edfi].[ProgramAssignmentDescriptor] ******/

CREATE TABLE [t_edfi].[ProgramAssignmentDescriptor]
(
    [tid_ProgramAssignmentDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramAssignmentType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramAssignmentDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ProgramAssignmentDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramAssignmentDescriptor] ADD CONSTRAINT [ProgramAssignmentDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramAssignmentDescriptor] ADD CONSTRAINT [ProgramAssignmentDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ProgramAssignmentDescriptor] ADD CONSTRAINT [ProgramAssignmentDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the name of the education program for which a teacher is assigned to a school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProgramAssignmentDescriptor_Id ON [t_edfi].[ProgramAssignmentDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ProgramAssignmentDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramAssignmentDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ProgramAssignmentDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProgramAssignmentDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProgramAssignmentDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProgramAssignmentDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ProgramAssignmentDescriptor])
REFERENCES [t_edfi].[ProgramAssignmentDescriptor] ([tid_ProgramAssignmentDescriptor]);
ALTER TABLE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProgramAssignmentDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ProgramAssignmentType] ******/

CREATE TABLE [t_edfi].[ProgramAssignmentType]
(
	[tid_ProgramAssignmentType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ProgramAssignmentType] PRIMARY KEY NONCLUSTERED
(
	[tid_ProgramAssignmentType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramAssignmentType] ADD CONSTRAINT [ProgramAssignmentType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramAssignmentType] ADD CONSTRAINT [ProgramAssignmentType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ProgramAssignmentType] ADD CONSTRAINT [ProgramAssignmentType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the education program for which a teacher is assigned to a school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProgramAssignment type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProgramAssignment type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramAssignmentType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ProgramCharacteristicDescriptor] ******/

CREATE TABLE [t_edfi].[ProgramCharacteristicDescriptor]
(
    [tid_ProgramCharacteristicDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramCharacteristicType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramCharacteristicDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ProgramCharacteristicDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramCharacteristicDescriptor] ADD CONSTRAINT [ProgramCharacteristicDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramCharacteristicDescriptor] ADD CONSTRAINT [ProgramCharacteristicDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ProgramCharacteristicDescriptor] ADD CONSTRAINT [ProgramCharacteristicDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProgramCharacteristicDescriptor_Id ON [t_edfi].[ProgramCharacteristicDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ProgramCharacteristicDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramCharacteristicDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ProgramCharacteristicDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProgramCharacteristicDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProgramCharacteristicDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProgramCharacteristicDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ProgramCharacteristicDescriptor])
REFERENCES [t_edfi].[ProgramCharacteristicDescriptor] ([tid_ProgramCharacteristicDescriptor]);
ALTER TABLE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProgramCharacteristicDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ProgramCharacteristicType] ******/

CREATE TABLE [t_edfi].[ProgramCharacteristicType]
(
	[tid_ProgramCharacteristicType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ProgramCharacteristicType] PRIMARY KEY NONCLUSTERED
(
	[tid_ProgramCharacteristicType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramCharacteristicType] ADD CONSTRAINT [ProgramCharacteristicType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramCharacteristicType] ADD CONSTRAINT [ProgramCharacteristicType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ProgramCharacteristicType] ADD CONSTRAINT [ProgramCharacteristicType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProgramCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProgramCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ProgramSponsorType] ******/

CREATE TABLE [t_edfi].[ProgramSponsorType]
(
    [tid_ProgramSponsorType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ProgramSponsorType] PRIMARY KEY NONCLUSTERED
(
    [tid_ProgramSponsorType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramSponsorType] ADD CONSTRAINT [ProgramSponsorType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramSponsorType] ADD CONSTRAINT [ProgramSponsorType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ProgramSponsorType] ADD CONSTRAINT [ProgramSponsorType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Ultimate and intermediate providers of funds for a particular educational or service program or activity or for an individual''s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Org).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramSponsorType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramSponsorType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProgramSponsor type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramSponsorType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProgramSponsor type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramSponsorType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ProgramType] ******/

CREATE TABLE [t_edfi].[ProgramType]
(
    [tid_ProgramType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ProgramType] PRIMARY KEY NONCLUSTERED
(
    [tid_ProgramType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ProgramType] ADD CONSTRAINT [ProgramType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ProgramType] ADD CONSTRAINT [ProgramType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ProgramType] ADD CONSTRAINT [ProgramType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Program type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Program type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ProgramType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[PublicationStatusType] ******/

CREATE TABLE [t_edfi].[PublicationStatusType]
(
    [tid_PublicationStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_PublicationStatusType] PRIMARY KEY NONCLUSTERED
(
    [tid_PublicationStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[PublicationStatusType] ADD CONSTRAINT [PublicationStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[PublicationStatusType] ADD CONSTRAINT [PublicationStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[PublicationStatusType] ADD CONSTRAINT [PublicationStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'PublicationStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PublicationStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PublicationStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PublicationStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PublicationStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'PublicationStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[RaceType] ******/

CREATE TABLE [t_edfi].[RaceType]
(
    [tid_RaceType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_RaceType] PRIMARY KEY NONCLUSTERED
(
    [tid_RaceType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RaceType] ADD CONSTRAINT [RaceType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RaceType] ADD CONSTRAINT [RaceType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[RaceType] ADD CONSTRAINT [RaceType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items defining the racial categories which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RaceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RaceType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Race type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RaceType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Race type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RaceType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ReasonExitedDescriptor] ******/

CREATE TABLE [t_edfi].[ReasonExitedDescriptor]
(
    [tid_ReasonExitedDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ReasonExitedType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReasonExitedDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ReasonExitedDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReasonExitedDescriptor] ADD CONSTRAINT [ReasonExitedDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReasonExitedDescriptor] ADD CONSTRAINT [ReasonExitedDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ReasonExitedDescriptor] ADD CONSTRAINT [ReasonExitedDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the reason a student exited a program.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN', @level2name=N'ReasonExitedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TReasonExitedDescriptor_Id ON [t_edfi].[ReasonExitedDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ReasonExitedDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ReasonExitedDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReasonExitedDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ReasonExitedDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReasonExitedDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ReasonExitedDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ReasonExitedDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ReasonExitedDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ReasonExitedDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ReasonExitedDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ReasonExitedDescriptor])
REFERENCES [t_edfi].[ReasonExitedDescriptor] ([tid_ReasonExitedDescriptor]);
ALTER TABLE [t_edfi].[ReasonExitedDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ReasonExitedDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ReasonExitedType] ******/

CREATE TABLE [t_edfi].[ReasonExitedType]
(
	[tid_ReasonExitedType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ReasonExitedType] PRIMARY KEY NONCLUSTERED
(
	[tid_ReasonExitedType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReasonExitedType] ADD CONSTRAINT [ReasonExitedType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReasonExitedType] ADD CONSTRAINT [ReasonExitedType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ReasonExitedType] ADD CONSTRAINT [ReasonExitedType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reason the child left the program within a school or district.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ReasonExited type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ReasonExited type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonExitedType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ReasonNotTestedType] ******/

CREATE TABLE [t_edfi].[ReasonNotTestedType]
(
    [tid_ReasonNotTestedType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ReasonNotTestedType] PRIMARY KEY NONCLUSTERED
(
    [tid_ReasonNotTestedType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReasonNotTestedType] ADD CONSTRAINT [ReasonNotTestedType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReasonNotTestedType] ADD CONSTRAINT [ReasonNotTestedType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ReasonNotTestedType] ADD CONSTRAINT [ReasonNotTestedType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary reason student is not tested. For example:
    Absent
    Refusal by parent
    Refusal by student
    Medical waiver
    Illness
    Disruptive behavior
    LEP Exempt
    ''...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReasonNotTestedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonNotTestedType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ReasonNotTested type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonNotTestedType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ReasonNotTested type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReasonNotTestedType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[RecognitionType] ******/

CREATE TABLE [t_edfi].[RecognitionType]
(
    [tid_RecognitionType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_RecognitionType] PRIMARY KEY NONCLUSTERED
(
    [tid_RecognitionType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RecognitionType] ADD CONSTRAINT [RecognitionType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RecognitionType] ADD CONSTRAINT [RecognitionType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[RecognitionType] ADD CONSTRAINT [RecognitionType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RecognitionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RecognitionType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Recognition type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RecognitionType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Recognition type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RecognitionType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[RelationType] ******/

CREATE TABLE [t_edfi].[RelationType]
(
    [tid_RelationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_RelationType] PRIMARY KEY NONCLUSTERED
(
    [tid_RelationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RelationType] ADD CONSTRAINT [RelationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RelationType] ADD CONSTRAINT [RelationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[RelationType] ADD CONSTRAINT [RelationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The nature of an individual''s relationship to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RelationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RelationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Relation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RelationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Relation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RelationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[RepeatIdentifierType] ******/

CREATE TABLE [t_edfi].[RepeatIdentifierType]
(
    [tid_RepeatIdentifierType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_RepeatIdentifierType] PRIMARY KEY NONCLUSTERED
(
    [tid_RepeatIdentifierType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RepeatIdentifierType] ADD CONSTRAINT [RepeatIdentifierType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RepeatIdentifierType] ADD CONSTRAINT [RepeatIdentifierType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[RepeatIdentifierType] ADD CONSTRAINT [RepeatIdentifierType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication as to whether a student has previously taken a given course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RepeatIdentifierType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RepeatIdentifierType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the RepeatIdentifier type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RepeatIdentifierType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the RepeatIdentifier type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RepeatIdentifierType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ReportCard] ******/

CREATE TABLE [t_edfi].[ReportCard]
(
    [tid_ReportCard] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[GradingPeriodBeginDate] [DATE] NOT NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[GPAGivenGradingPeriod] [DECIMAL](18, 4) NULL,
	[GPACumulative] [DECIMAL](18, 4) NULL,
	[NumberOfDaysAbsent] [DECIMAL](18, 4) NULL,
	[NumberOfDaysInAttendance] [DECIMAL](18, 4) NULL,
	[NumberOfDaysTardy] [INT] NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReportCard] PRIMARY KEY NONCLUSTERED
(
    [tid_ReportCard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReportCard] ADD CONSTRAINT [ReportCard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReportCard] ADD CONSTRAINT [ReportCard_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ReportCard] ADD CONSTRAINT [ReportCard_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the collection of student grades for courses taken during a grading period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReportCard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of average performance in all courses taken by an individual for the current grading period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GPAGivenGradingPeriod';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GPACumulative';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of days an individual is absent when school is in session during a given reporting period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'NumberOfDaysAbsent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of days an individual is present when school is in session during a given reporting period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'NumberOfDaysInAttendance';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of days an individual is tardy during a given reporting period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'NumberOfDaysTardy';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TReportCard_Id ON [t_edfi].[ReportCard]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ReportCardSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ReportCardSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ReportCard] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReportCardSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ReportCard], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReportCardSnapshotRecord] ADD CONSTRAINT [FK_ReportCardSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ReportCardSnapshotRecord] CHECK CONSTRAINT [FK_ReportCardSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ReportCardSnapshotRecord] ADD CONSTRAINT [FK_ReportCardSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ReportCard])
REFERENCES [t_edfi].[ReportCard] ([tid_ReportCard]);
ALTER TABLE [t_edfi].[ReportCardSnapshotRecord] CHECK CONSTRAINT [FK_ReportCardSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ReportCardGrade] ******/

CREATE TABLE [t_edfi].[ReportCardGrade]
(
	[tid_ReportCardGrade] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ReportCard] [INT] NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[GradeType] [NVARCHAR](450) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReportCardGrade] PRIMARY KEY NONCLUSTERED
(
	[tid_ReportCardGrade] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReportCardGrade] ADD CONSTRAINT [ReportCardGrade_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReportCardGrade] ADD CONSTRAINT [FK_ReportCardGrade_ParentTable] FOREIGN KEY ([tid_ReportCard])
REFERENCES [t_edfi].[ReportCard] ([tid_ReportCard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ReportCardGrade] CHECK CONSTRAINT [FK_ReportCardGrade_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grades for the classes attended by the Student for this grading period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'GradeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[ReportCardStudentCompetencyObjective] ******/

CREATE TABLE [t_edfi].[ReportCardStudentCompetencyObjective]
(
	[tid_ReportCardStudentCompetencyObjective] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ReportCard] [INT] NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveEducationOrganizationId] [INT] NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReportCardStudentCompetencyObjective] PRIMARY KEY NONCLUSTERED
(
	[tid_ReportCardStudentCompetencyObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReportCardStudentCompetencyObjective] ADD CONSTRAINT [ReportCardStudentCompetencyObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReportCardStudentCompetencyObjective] ADD CONSTRAINT [FK_ReportCardStudentCompetencyObjective_ParentTable] FOREIGN KEY ([tid_ReportCard])
REFERENCES [t_edfi].[ReportCard] ([tid_ReportCard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ReportCardStudentCompetencyObjective] CHECK CONSTRAINT [FK_ReportCardStudentCompetencyObjective_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Student competency evaluations associated for this grading period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[ReportCardStudentLearningObjective] ******/

CREATE TABLE [t_edfi].[ReportCardStudentLearningObjective]
(
	[tid_ReportCardStudentLearningObjective] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ReportCard] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReportCardStudentLearningObjective] PRIMARY KEY NONCLUSTERED
(
	[tid_ReportCardStudentLearningObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReportCardStudentLearningObjective] ADD CONSTRAINT [ReportCardStudentLearningObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReportCardStudentLearningObjective] ADD CONSTRAINT [FK_ReportCardStudentLearningObjective_ParentTable] FOREIGN KEY ([tid_ReportCard])
REFERENCES [t_edfi].[ReportCard] ([tid_ReportCard]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ReportCardStudentLearningObjective] CHECK CONSTRAINT [FK_ReportCardStudentLearningObjective_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The StudentLearningObjective evaluations associated for this grading period.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[ReporterDescriptionDescriptor] ******/

CREATE TABLE [t_edfi].[ReporterDescriptionDescriptor]
(
    [tid_ReporterDescriptionDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ReporterDescriptionType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReporterDescriptionDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ReporterDescriptionDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReporterDescriptionDescriptor] ADD CONSTRAINT [ReporterDescriptionDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReporterDescriptionDescriptor] ADD CONSTRAINT [ReporterDescriptionDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ReporterDescriptionDescriptor] ADD CONSTRAINT [ReporterDescriptionDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of individual who reported an incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN', @level2name=N'ReporterDescriptionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TReporterDescriptionDescriptor_Id ON [t_edfi].[ReporterDescriptionDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ReporterDescriptionDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ReporterDescriptionDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ReporterDescriptionDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ReporterDescriptionDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ReporterDescriptionDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ReporterDescriptionDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ReporterDescriptionDescriptor])
REFERENCES [t_edfi].[ReporterDescriptionDescriptor] ([tid_ReporterDescriptionDescriptor]);
ALTER TABLE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ReporterDescriptionDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ReporterDescriptionType] ******/

CREATE TABLE [t_edfi].[ReporterDescriptionType]
(
	[tid_ReporterDescriptionType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ReporterDescriptionType] PRIMARY KEY NONCLUSTERED
(
	[tid_ReporterDescriptionType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ReporterDescriptionType] ADD CONSTRAINT [ReporterDescriptionType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ReporterDescriptionType] ADD CONSTRAINT [ReporterDescriptionType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ReporterDescriptionType] ADD CONSTRAINT [ReporterDescriptionType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information on the type of individual who reported the incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ReporterDescription type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ReporterDescription type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ReporterDescriptionType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ResidencyStatusDescriptor] ******/

CREATE TABLE [t_edfi].[ResidencyStatusDescriptor]
(
    [tid_ResidencyStatusDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ResidencyStatusType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ResidencyStatusDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ResidencyStatusDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResidencyStatusDescriptor] ADD CONSTRAINT [ResidencyStatusDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ResidencyStatusDescriptor] ADD CONSTRAINT [ResidencyStatusDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ResidencyStatusDescriptor] ADD CONSTRAINT [ResidencyStatusDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines indications of the location of a person''s legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN', @level2name=N'ResidencyStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TResidencyStatusDescriptor_Id ON [t_edfi].[ResidencyStatusDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ResidencyStatusDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ResidencyStatusDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ResidencyStatusDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ResidencyStatusDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ResidencyStatusDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ResidencyStatusDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ResidencyStatusDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ResidencyStatusDescriptor])
REFERENCES [t_edfi].[ResidencyStatusDescriptor] ([tid_ResidencyStatusDescriptor]);
ALTER TABLE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ResidencyStatusDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ResidencyStatusType] ******/

CREATE TABLE [t_edfi].[ResidencyStatusType]
(
	[tid_ResidencyStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ResidencyStatusType] PRIMARY KEY NONCLUSTERED
(
	[tid_ResidencyStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResidencyStatusType] ADD CONSTRAINT [ResidencyStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ResidencyStatusType] ADD CONSTRAINT [ResidencyStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ResidencyStatusType] ADD CONSTRAINT [ResidencyStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ResidencyStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ResidencyStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResidencyStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ResponseIndicatorType] ******/

CREATE TABLE [t_edfi].[ResponseIndicatorType]
(
    [tid_ResponseIndicatorType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ResponseIndicatorType] PRIMARY KEY NONCLUSTERED
(
    [tid_ResponseIndicatorType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResponseIndicatorType] ADD CONSTRAINT [ResponseIndicatorType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ResponseIndicatorType] ADD CONSTRAINT [ResponseIndicatorType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ResponseIndicatorType] ADD CONSTRAINT [ResponseIndicatorType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of the response.  For example:
    Nonscorable response
    Ineffective response
    Effective response
    Partial response
    ...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ResponseIndicatorType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponseIndicatorType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ResponseIndicator type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponseIndicatorType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ResponseIndicator type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponseIndicatorType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ResponsibilityDescriptor] ******/

CREATE TABLE [t_edfi].[ResponsibilityDescriptor]
(
    [tid_ResponsibilityDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ResponsibilityType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ResponsibilityDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ResponsibilityDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResponsibilityDescriptor] ADD CONSTRAINT [ResponsibilityDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ResponsibilityDescriptor] ADD CONSTRAINT [ResponsibilityDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ResponsibilityDescriptor] ADD CONSTRAINT [ResponsibilityDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines types of responsibility an education organization may have for a student (e.g., accountability, attendance, funding).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN', @level2name=N'ResponsibilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TResponsibilityDescriptor_Id ON [t_edfi].[ResponsibilityDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ResponsibilityDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ResponsibilityDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ResponsibilityDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ResponsibilityDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResponsibilityDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ResponsibilityDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ResponsibilityDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ResponsibilityDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ResponsibilityDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ResponsibilityDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ResponsibilityDescriptor])
REFERENCES [t_edfi].[ResponsibilityDescriptor] ([tid_ResponsibilityDescriptor]);
ALTER TABLE [t_edfi].[ResponsibilityDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ResponsibilityDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[ResponsibilityType] ******/

CREATE TABLE [t_edfi].[ResponsibilityType]
(
	[tid_ResponsibilityType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ResponsibilityType] PRIMARY KEY NONCLUSTERED
(
	[tid_ResponsibilityType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResponsibilityType] ADD CONSTRAINT [ResponsibilityType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ResponsibilityType] ADD CONSTRAINT [ResponsibilityType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ResponsibilityType] ADD CONSTRAINT [ResponsibilityType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indications of an education organization''s responsibility for a student, such as accountability, attendance, funding, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Responsibility type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Responsibility type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResponsibilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[RestraintEvent] ******/

CREATE TABLE [t_edfi].[RestraintEvent]
(
    [tid_RestraintEvent] [INT] IDENTITY(1,1) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[RestraintEventIdentifier] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[EducationalEnvironmentType] [NVARCHAR](450) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RestraintEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_RestraintEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RestraintEvent] ADD CONSTRAINT [RestraintEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RestraintEvent] ADD CONSTRAINT [RestraintEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[RestraintEvent] ADD CONSTRAINT [RestraintEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the instances where a special education student was physically or mechanically restrained due to imminent serious physical harm to themselves or others, imminent serious property destruction or a combination of both imminent serious physical harm to themselves or others and imminent serious property destruction.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RestraintEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'RestraintEventIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TRestraintEvent_Id ON [t_edfi].[RestraintEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[RestraintEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[RestraintEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_RestraintEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RestraintEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_RestraintEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RestraintEventSnapshotRecord] ADD CONSTRAINT [FK_RestraintEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[RestraintEventSnapshotRecord] CHECK CONSTRAINT [FK_RestraintEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[RestraintEventSnapshotRecord] ADD CONSTRAINT [FK_RestraintEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_RestraintEvent])
REFERENCES [t_edfi].[RestraintEvent] ([tid_RestraintEvent]);
ALTER TABLE [t_edfi].[RestraintEventSnapshotRecord] CHECK CONSTRAINT [FK_RestraintEventSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[RestraintEventReason] ******/

CREATE TABLE [t_edfi].[RestraintEventReason]
(
	[tid_RestraintEventReason] [INT] IDENTITY(1,1) NOT NULL,
    [tid_RestraintEvent] [INT] NOT NULL,
	[RestraintEventReasonType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RestraintEventReason] PRIMARY KEY NONCLUSTERED
(
	[tid_RestraintEventReason] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RestraintEventReason] ADD CONSTRAINT [RestraintEventReason_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RestraintEventReason] ADD CONSTRAINT [FK_RestraintEventReason_ParentTable] FOREIGN KEY ([tid_RestraintEvent])
REFERENCES [t_edfi].[RestraintEvent] ([tid_RestraintEvent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[RestraintEventReason] CHECK CONSTRAINT [FK_RestraintEventReason_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A categorization of the circumstances or reason for the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEventReason', @level2type=N'COLUMN', @level2name=N'RestraintEventReasonType';
GO

/****** TABLE: [t_edfi].[RestraintEventProgram] ******/

CREATE TABLE [t_edfi].[RestraintEventProgram]
(
	[tid_RestraintEventProgram] [INT] IDENTITY(1,1) NOT NULL,
    [tid_RestraintEvent] [INT] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RestraintEventProgram] PRIMARY KEY NONCLUSTERED
(
	[tid_RestraintEventProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RestraintEventProgram] ADD CONSTRAINT [RestraintEventProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RestraintEventProgram] ADD CONSTRAINT [FK_RestraintEventProgram_ParentTable] FOREIGN KEY ([tid_RestraintEvent])
REFERENCES [t_edfi].[RestraintEvent] ([tid_RestraintEvent]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[RestraintEventProgram] CHECK CONSTRAINT [FK_RestraintEventProgram_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The special education program associated with the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'ProgramType';
GO
/****** TABLE: [t_edfi].[RestraintEventReasonType] ******/

CREATE TABLE [t_edfi].[RestraintEventReasonType]
(
    [tid_RestraintEventReasonType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_RestraintEventReasonType] PRIMARY KEY NONCLUSTERED
(
    [tid_RestraintEventReasonType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RestraintEventReasonType] ADD CONSTRAINT [RestraintEventReasonType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RestraintEventReasonType] ADD CONSTRAINT [RestraintEventReasonType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[RestraintEventReasonType] ADD CONSTRAINT [RestraintEventReasonType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The items of categorization of the circumstances or reason for the restraint.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEventReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the RestraintEventReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEventReasonType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the RestraintEventReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RestraintEventReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ResultDatatypeType] ******/

CREATE TABLE [t_edfi].[ResultDatatypeType]
(
    [tid_ResultDatatypeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ResultDatatypeType] PRIMARY KEY NONCLUSTERED
(
    [tid_ResultDatatypeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ResultDatatypeType] ADD CONSTRAINT [ResultDatatypeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ResultDatatypeType] ADD CONSTRAINT [ResultDatatypeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ResultDatatypeType] ADD CONSTRAINT [ResultDatatypeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResultDatatypeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ResultDatatype type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResultDatatypeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ResultDatatype type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ResultDatatypeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[RetestIndicatorType] ******/

CREATE TABLE [t_edfi].[RetestIndicatorType]
(
    [tid_RetestIndicatorType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_RetestIndicatorType] PRIMARY KEY NONCLUSTERED
(
    [tid_RetestIndicatorType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[RetestIndicatorType] ADD CONSTRAINT [RetestIndicatorType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[RetestIndicatorType] ADD CONSTRAINT [RetestIndicatorType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[RetestIndicatorType] ADD CONSTRAINT [RetestIndicatorType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator if the test was retaken.  For example:
    Primary administration
    First retest
    Second retest
    ...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'RetestIndicatorType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RetestIndicatorType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the RetestIndicator type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RetestIndicatorType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the RetestIndicator type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'RetestIndicatorType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[School] ******/

CREATE TABLE [t_edfi].[School]
(
    [tid_School] [INT] IDENTITY(1,1) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolType] [NVARCHAR](450) NULL,
	[CharterStatusType] [NVARCHAR](450) NULL,
	[TitleIPartASchoolDesignationType] [NVARCHAR](450) NULL,
	[MagnetSpecialProgramEmphasisSchoolType] [NVARCHAR](450) NULL,
	[AdministrativeFundingControlDescriptorCodeValue] [NVARCHAR](50) NULL,
	[InternetAccessType] [NVARCHAR](450) NULL,
	[LocalEducationAgencyId] [INT] NULL,
	[CharterApprovalAgencyType] [NVARCHAR](450) NULL,
	[CharterApprovalSchoolYear] [SMALLINT] NULL,
	[AdministrativeFundingControlDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_School] PRIMARY KEY NONCLUSTERED
(
    [tid_School] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[School] ADD CONSTRAINT [School_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[School] ADD CONSTRAINT [School_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[School] ADD CONSTRAINT [School_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'School';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'SchoolType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'CharterStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'TitleIPartASchoolDesignationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'MagnetSpecialProgramEmphasisSchoolType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'InternetAccessType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'CharterApprovalAgencyType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year in which a charter school was initially approved.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'CharterApprovalSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'School', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSchool_Id ON [t_edfi].[School]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SchoolSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SchoolSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_School] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_School], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolSnapshotRecord] ADD CONSTRAINT [FK_SchoolSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SchoolSnapshotRecord] CHECK CONSTRAINT [FK_SchoolSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SchoolSnapshotRecord] ADD CONSTRAINT [FK_SchoolSnapshotRecord_ParentTable] FOREIGN KEY ([tid_School])
REFERENCES [t_edfi].[School] ([tid_School]);
ALTER TABLE [t_edfi].[SchoolSnapshotRecord] CHECK CONSTRAINT [FK_SchoolSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[SchoolGradeLevel] ******/

CREATE TABLE [t_edfi].[SchoolGradeLevel]
(
	[tid_SchoolGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_School] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_SchoolGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolGradeLevel] ADD CONSTRAINT [SchoolGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolGradeLevel] ADD CONSTRAINT [FK_SchoolGradeLevel_ParentTable] FOREIGN KEY ([tid_School])
REFERENCES [t_edfi].[School] ([tid_School]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SchoolGradeLevel] CHECK CONSTRAINT [FK_SchoolGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels served at the school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[SchoolCategory] ******/

CREATE TABLE [t_edfi].[SchoolCategory]
(
	[tid_SchoolCategory] [INT] IDENTITY(1,1) NOT NULL,
    [tid_School] [INT] NOT NULL,
	[SchoolCategoryType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolCategory] PRIMARY KEY NONCLUSTERED
(
	[tid_SchoolCategory] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolCategory] ADD CONSTRAINT [SchoolCategory_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolCategory] ADD CONSTRAINT [FK_SchoolCategory_ParentTable] FOREIGN KEY ([tid_School])
REFERENCES [t_edfi].[School] ([tid_School]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SchoolCategory] CHECK CONSTRAINT [FK_SchoolCategory_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The one or more categories of school. For example: High School, Middle School, and/or Elementary School.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolCategory';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolCategory', @level2type=N'COLUMN', @level2name=N'SchoolCategoryType';
GO

/****** TABLE: [t_extension].[SchoolExtension] ******/

CREATE TABLE [t_extension].[SchoolExtension]
(
	[tid_SchoolExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_School] [INT] NOT NULL,
	[SchoolStatusDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ImprovingSchool] [BIT] NULL,
	[SchoolStatusDescriptorNamespace] [NVARCHAR](255) NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_SchoolExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SchoolExtension] ADD CONSTRAINT [FK_SchoolExtension_ParentTable] FOREIGN KEY ([tid_School])
REFERENCES [t_edfi].[School] ([tid_School]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SchoolExtension] CHECK CONSTRAINT [FK_SchoolExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SchoolExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolExtension', @level2type=N'COLUMN', @level2name=N'SchoolStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a school is identified as an improving school.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolExtension', @level2type=N'COLUMN', @level2name=N'ImprovingSchool';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolExtension', @level2type=N'COLUMN', @level2name=N'SchoolStatusDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[SchoolCategoryType] ******/

CREATE TABLE [t_edfi].[SchoolCategoryType]
(
    [tid_SchoolCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_SchoolCategoryType] PRIMARY KEY NONCLUSTERED
(
    [tid_SchoolCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolCategoryType] ADD CONSTRAINT [SchoolCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolCategoryType] ADD CONSTRAINT [SchoolCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SchoolCategoryType] ADD CONSTRAINT [SchoolCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of school. For example: High School, Middle School, Elementary School.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SchoolCategory type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[SchoolChoiceImplementStatusType] ******/

CREATE TABLE [t_edfi].[SchoolChoiceImplementStatusType]
(
    [tid_SchoolChoiceImplementStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_SchoolChoiceImplementStatusType] PRIMARY KEY NONCLUSTERED
(
    [tid_SchoolChoiceImplementStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolChoiceImplementStatusType] ADD CONSTRAINT [SchoolChoiceImplementStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolChoiceImplementStatusType] ADD CONSTRAINT [SchoolChoiceImplementStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SchoolChoiceImplementStatusType] ADD CONSTRAINT [SchoolChoiceImplementStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA, as amended.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolChoiceImplementStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolChoiceImplementStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolChoiceImplementStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolChoiceImplementStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SchoolChoiceImplementStatus type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolChoiceImplementStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[SchoolFoodServicesEligibilityDescriptor] ******/

CREATE TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptor]
(
    [tid_SchoolFoodServicesEligibilityDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolFoodServicesEligibilityType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolFoodServicesEligibilityDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_SchoolFoodServicesEligibilityDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptor] ADD CONSTRAINT [SchoolFoodServicesEligibilityDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptor] ADD CONSTRAINT [SchoolFoodServicesEligibilityDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptor] ADD CONSTRAINT [SchoolFoodServicesEligibilityDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines indications of a student''s level of eligibility for breakfast, lunch, snack, supper, and milk programs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSchoolFoodServicesEligibilityDescriptor_Id ON [t_edfi].[SchoolFoodServicesEligibilityDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SchoolFoodServicesEligibilityDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolFoodServicesEligibilityDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SchoolFoodServicesEligibilityDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SchoolFoodServicesEligibilityDescriptor])
REFERENCES [t_edfi].[SchoolFoodServicesEligibilityDescriptor] ([tid_SchoolFoodServicesEligibilityDescriptor]);
ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[SchoolFoodServicesEligibilityType] ******/

CREATE TABLE [t_edfi].[SchoolFoodServicesEligibilityType]
(
	[tid_SchoolFoodServicesEligibilityType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_SchoolFoodServicesEligibilityType] PRIMARY KEY NONCLUSTERED
(
	[tid_SchoolFoodServicesEligibilityType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityType] ADD CONSTRAINT [SchoolFoodServicesEligibilityType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityType] ADD CONSTRAINT [SchoolFoodServicesEligibilityType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SchoolFoodServicesEligibilityType] ADD CONSTRAINT [SchoolFoodServicesEligibilityType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of a student''s level of eligibility for breakfast, lunch, snack, supper, and milk programs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolFoodServicesEligibility type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SchoolFoodServicesEligibility type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolFoodServicesEligibilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[SchoolType] ******/

CREATE TABLE [t_edfi].[SchoolType]
(
    [tid_SchoolType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_SchoolType] PRIMARY KEY NONCLUSTERED
(
    [tid_SchoolType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolType] ADD CONSTRAINT [SchoolType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolType] ADD CONSTRAINT [SchoolType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SchoolType] ADD CONSTRAINT [SchoolType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education institution as classified by its primary focus.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the School type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the School type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[SchoolYearType] ******/

CREATE TABLE [t_edfi].[SchoolYearType]
(
    [tid_SchoolYearType] [INT] IDENTITY(1,1) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SchoolYearDescription] [NVARCHAR](50) NOT NULL,
	[CurrentSchoolYear] [BIT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolYearType] PRIMARY KEY NONCLUSTERED
(
    [tid_SchoolYearType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolYearType] ADD CONSTRAINT [SchoolYearType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SchoolYearType] ADD CONSTRAINT [SchoolYearType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SchoolYearType] ADD CONSTRAINT [SchoolYearType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier for a school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SchoolYearType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for School Year', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolYearType', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolYear type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolYearType', @level2type=N'COLUMN', @level2name=N'SchoolYearDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code for the current school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SchoolYearType', @level2type=N'COLUMN', @level2name=N'CurrentSchoolYear';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSchoolYearType_Id ON [t_edfi].[SchoolYearType]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SchoolYearTypeSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SchoolYearTypeSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SchoolYearType] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolYearTypeSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SchoolYearType], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SchoolYearTypeSnapshotRecord] ADD CONSTRAINT [FK_SchoolYearTypeSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SchoolYearTypeSnapshotRecord] CHECK CONSTRAINT [FK_SchoolYearTypeSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SchoolYearTypeSnapshotRecord] ADD CONSTRAINT [FK_SchoolYearTypeSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SchoolYearType])
REFERENCES [t_edfi].[SchoolYearType] ([tid_SchoolYearType]);
ALTER TABLE [t_edfi].[SchoolYearTypeSnapshotRecord] CHECK CONSTRAINT [FK_SchoolYearTypeSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[Section] ******/

CREATE TABLE [t_edfi].[Section]
(
    [tid_Section] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[EducationalEnvironmentType] [NVARCHAR](450) NULL,
	[MediumOfInstructionType] [NVARCHAR](450) NULL,
	[PopulationServedType] [NVARCHAR](450) NULL,
	[AvailableCredits] [DECIMAL](9, 2) NULL,
	[AvailableCreditType] [NVARCHAR](450) NULL,
	[AvailableCreditConversion] [DECIMAL](9, 2) NULL,
	[InstructionLanguageDescriptorCodeValue] [NVARCHAR](50) NULL,
	[InstructionLanguageDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Section] PRIMARY KEY NONCLUSTERED
(
    [tid_Section] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Section] ADD CONSTRAINT [Section_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Section] ADD CONSTRAINT [Section_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Section] ADD CONSTRAINT [Section_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Section';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'MediumOfInstructionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'PopulationServedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'AvailableCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'AvailableCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'AvailableCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'InstructionLanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'InstructionLanguageDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Section', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSection_Id ON [t_edfi].[Section]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SectionSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SectionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Section] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Section], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionSnapshotRecord] ADD CONSTRAINT [FK_SectionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SectionSnapshotRecord] CHECK CONSTRAINT [FK_SectionSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SectionSnapshotRecord] ADD CONSTRAINT [FK_SectionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Section])
REFERENCES [t_edfi].[Section] ([tid_Section]);
ALTER TABLE [t_edfi].[SectionSnapshotRecord] CHECK CONSTRAINT [FK_SectionSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[SectionCharacteristic] ******/

CREATE TABLE [t_edfi].[SectionCharacteristic]
(
	[tid_SectionCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Section] [INT] NOT NULL,
	[SectionCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SectionCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionCharacteristic] ADD CONSTRAINT [SectionCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SectionCharacteristic] ADD CONSTRAINT [FK_SectionCharacteristic_ParentTable] FOREIGN KEY ([tid_Section])
REFERENCES [t_edfi].[Section] ([tid_Section]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SectionCharacteristic] CHECK CONSTRAINT [FK_SectionCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'SectionCharacteristicDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'SectionCharacteristicDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[SectionProgram] ******/

CREATE TABLE [t_edfi].[SectionProgram]
(
	[tid_SectionProgram] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Section] [INT] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionProgram] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionProgram] ADD CONSTRAINT [SectionProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SectionProgram] ADD CONSTRAINT [FK_SectionProgram_ParentTable] FOREIGN KEY ([tid_Section])
REFERENCES [t_edfi].[Section] ([tid_Section]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SectionProgram] CHECK CONSTRAINT [FK_SectionProgram_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional reference to program (e.g., CTE) to which the Section is associated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SectionProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'ProgramType';
GO
/****** TABLE: [t_edfi].[SectionAttendanceTakenEvent] ******/

CREATE TABLE [t_edfi].[SectionAttendanceTakenEvent]
(
    [tid_SectionAttendanceTakenEvent] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[Date] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionAttendanceTakenEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionAttendanceTakenEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [SectionAttendanceTakenEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [SectionAttendanceTakenEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [SectionAttendanceTakenEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Captures attendance taken event for given section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'Date';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionAttendanceTakenEvent_Id ON [t_edfi].[SectionAttendanceTakenEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SectionAttendanceTakenEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionAttendanceTakenEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionAttendanceTakenEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionAttendanceTakenEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord] ADD CONSTRAINT [FK_SectionAttendanceTakenEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord] CHECK CONSTRAINT [FK_SectionAttendanceTakenEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord] ADD CONSTRAINT [FK_SectionAttendanceTakenEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionAttendanceTakenEvent])
REFERENCES [t_edfi].[SectionAttendanceTakenEvent] ([tid_SectionAttendanceTakenEvent]);
ALTER TABLE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord] CHECK CONSTRAINT [FK_SectionAttendanceTakenEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[SectionCharacteristicDescriptor] ******/

CREATE TABLE [t_edfi].[SectionCharacteristicDescriptor]
(
    [tid_SectionCharacteristicDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[SectionCharacteristicType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCharacteristicDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionCharacteristicDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionCharacteristicDescriptor] ADD CONSTRAINT [SectionCharacteristicDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SectionCharacteristicDescriptor] ADD CONSTRAINT [SectionCharacteristicDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SectionCharacteristicDescriptor] ADD CONSTRAINT [SectionCharacteristicDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines characteristics of a Section, such as whether attendance is taken and the Section is graded.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'SectionCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionCharacteristicDescriptor_Id ON [t_edfi].[SectionCharacteristicDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionCharacteristicDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCharacteristicDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionCharacteristicDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SectionCharacteristicDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SectionCharacteristicDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SectionCharacteristicDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionCharacteristicDescriptor])
REFERENCES [t_edfi].[SectionCharacteristicDescriptor] ([tid_SectionCharacteristicDescriptor]);
ALTER TABLE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SectionCharacteristicDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[SectionCharacteristicType] ******/

CREATE TABLE [t_edfi].[SectionCharacteristicType]
(
	[tid_SectionCharacteristicType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_SectionCharacteristicType] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionCharacteristicType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SectionCharacteristicType] ADD CONSTRAINT [SectionCharacteristicType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SectionCharacteristicType] ADD CONSTRAINT [SectionCharacteristicType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SectionCharacteristicType] ADD CONSTRAINT [SectionCharacteristicType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumeration items for Section Characteristic.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SectionCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SectionCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SectionCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[SeparationReasonDescriptor] ******/

CREATE TABLE [t_edfi].[SeparationReasonDescriptor]
(
    [tid_SeparationReasonDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[SeparationReasonType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SeparationReasonDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_SeparationReasonDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SeparationReasonDescriptor] ADD CONSTRAINT [SeparationReasonDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SeparationReasonDescriptor] ADD CONSTRAINT [SeparationReasonDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SeparationReasonDescriptor] ADD CONSTRAINT [SeparationReasonDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the reasons for terminating the employment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN', @level2name=N'SeparationReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSeparationReasonDescriptor_Id ON [t_edfi].[SeparationReasonDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SeparationReasonDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SeparationReasonDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SeparationReasonDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SeparationReasonDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SeparationReasonDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SeparationReasonDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SeparationReasonDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SeparationReasonDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SeparationReasonDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SeparationReasonDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SeparationReasonDescriptor])
REFERENCES [t_edfi].[SeparationReasonDescriptor] ([tid_SeparationReasonDescriptor]);
ALTER TABLE [t_edfi].[SeparationReasonDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SeparationReasonDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[SeparationReasonType] ******/

CREATE TABLE [t_edfi].[SeparationReasonType]
(
	[tid_SeparationReasonType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_SeparationReasonType] PRIMARY KEY NONCLUSTERED
(
	[tid_SeparationReasonType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SeparationReasonType] ADD CONSTRAINT [SeparationReasonType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SeparationReasonType] ADD CONSTRAINT [SeparationReasonType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SeparationReasonType] ADD CONSTRAINT [SeparationReasonType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reason for terminating the employment; for example:  Employment in education, Employment outside of education, Retirement, Family/personal relocation, Change of assignment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SeparationReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SeparationReason type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[SeparationType] ******/

CREATE TABLE [t_edfi].[SeparationType]
(
    [tid_SeparationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_SeparationType] PRIMARY KEY NONCLUSTERED
(
    [tid_SeparationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SeparationType] ADD CONSTRAINT [SeparationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SeparationType] ADD CONSTRAINT [SeparationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SeparationType] ADD CONSTRAINT [SeparationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of employment separation; for example:  Voluntary separation, Involuntary separation, Mutual agreement. Other, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SeparationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Separation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Separation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SeparationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[ServiceDescriptor] ******/

CREATE TABLE [t_edfi].[ServiceDescriptor]
(
    [tid_ServiceDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ServiceCategory] [NVARCHAR](50) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ServiceDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ServiceDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ServiceDescriptor] ADD CONSTRAINT [ServiceDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[ServiceDescriptor] ADD CONSTRAINT [ServiceDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[ServiceDescriptor] ADD CONSTRAINT [ServiceDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the services provided by an education organization to populations of students associated with a program.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'ServiceDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ServiceDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A classification of the behavior for reporting types.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ServiceDescriptor', @level2type=N'COLUMN', @level2name=N'ServiceCategory';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ServiceDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ServiceDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ServiceDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ServiceDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'ServiceDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TServiceDescriptor_Id ON [t_edfi].[ServiceDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[ServiceDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[ServiceDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ServiceDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ServiceDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ServiceDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[ServiceDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ServiceDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[ServiceDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ServiceDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[ServiceDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ServiceDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ServiceDescriptor])
REFERENCES [t_edfi].[ServiceDescriptor] ([tid_ServiceDescriptor]);
ALTER TABLE [t_edfi].[ServiceDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ServiceDescriptorSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[Session] ******/

CREATE TABLE [t_edfi].[Session]
(
    [tid_Session] [INT] IDENTITY(1,1) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SessionName] [NVARCHAR](60) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EndDate] [DATE] NOT NULL,
	[TotalInstructionalDays] [INT] NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Session] PRIMARY KEY NONCLUSTERED
(
    [tid_Session] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Session] ADD CONSTRAINT [Session_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Session] ADD CONSTRAINT [Session_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Session] ADD CONSTRAINT [Session_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the prescribed span of time when an education institution is open, instruction is provided and students are under the direction and guidance of teachers and/or education institution administration. A session may be interrupted by one or more vacations.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Session';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'SessionName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the Session.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day and year of the last day of the Session.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of instructional days in the school calendar.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'TotalInstructionalDays';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Session', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSession_Id ON [t_edfi].[Session]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SessionSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SessionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Session] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SessionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Session], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SessionSnapshotRecord] ADD CONSTRAINT [FK_SessionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SessionSnapshotRecord] CHECK CONSTRAINT [FK_SessionSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SessionSnapshotRecord] ADD CONSTRAINT [FK_SessionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Session])
REFERENCES [t_edfi].[Session] ([tid_Session]);
ALTER TABLE [t_edfi].[SessionSnapshotRecord] CHECK CONSTRAINT [FK_SessionSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[SessionGradingPeriod] ******/

CREATE TABLE [t_edfi].[SessionGradingPeriod]
(
	[tid_SessionGradingPeriod] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Session] [INT] NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SessionGradingPeriod] PRIMARY KEY NONCLUSTERED
(
	[tid_SessionGradingPeriod] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SessionGradingPeriod] ADD CONSTRAINT [SessionGradingPeriod_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SessionGradingPeriod] ADD CONSTRAINT [FK_SessionGradingPeriod_ParentTable] FOREIGN KEY ([tid_Session])
REFERENCES [t_edfi].[Session] ([tid_Session]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SessionGradingPeriod] CHECK CONSTRAINT [FK_SessionGradingPeriod_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grading periods associated with the calendar.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SessionGradingPeriod';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[SessionAcademicWeek] ******/

CREATE TABLE [t_edfi].[SessionAcademicWeek]
(
	[tid_SessionAcademicWeek] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Session] [INT] NOT NULL,
	[WeekIdentifier] [NVARCHAR](80) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SessionAcademicWeek] PRIMARY KEY NONCLUSTERED
(
	[tid_SessionAcademicWeek] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SessionAcademicWeek] ADD CONSTRAINT [SessionAcademicWeek_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SessionAcademicWeek] ADD CONSTRAINT [FK_SessionAcademicWeek_ParentTable] FOREIGN KEY ([tid_Session])
REFERENCES [t_edfi].[Session] ([tid_Session]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SessionAcademicWeek] CHECK CONSTRAINT [FK_SessionAcademicWeek_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic weeks associated with the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SessionAcademicWeek';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school label for the week.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SessionAcademicWeek', @level2type=N'COLUMN', @level2name=N'WeekIdentifier';
GO
/****** TABLE: [t_edfi].[SexType] ******/

CREATE TABLE [t_edfi].[SexType]
(
    [tid_SexType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_SexType] PRIMARY KEY NONCLUSTERED
(
    [tid_SexType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SexType] ADD CONSTRAINT [SexType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SexType] ADD CONSTRAINT [SexType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SexType] ADD CONSTRAINT [SexType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person''s gender.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SexType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Sex type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SexType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Sex type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SexType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[SpecialEducationSettingDescriptor] ******/

CREATE TABLE [t_edfi].[SpecialEducationSettingDescriptor]
(
    [tid_SpecialEducationSettingDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[SpecialEducationSettingType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SpecialEducationSettingDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_SpecialEducationSettingDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SpecialEducationSettingDescriptor] ADD CONSTRAINT [SpecialEducationSettingDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SpecialEducationSettingDescriptor] ADD CONSTRAINT [SpecialEducationSettingDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SpecialEducationSettingDescriptor] ADD CONSTRAINT [SpecialEducationSettingDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the major instructional setting (more than 50 percent of a student''s special education program).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN', @level2name=N'SpecialEducationSettingType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSpecialEducationSettingDescriptor_Id ON [t_edfi].[SpecialEducationSettingDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SpecialEducationSettingDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SpecialEducationSettingDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SpecialEducationSettingDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SpecialEducationSettingDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SpecialEducationSettingDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SpecialEducationSettingDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SpecialEducationSettingDescriptor])
REFERENCES [t_edfi].[SpecialEducationSettingDescriptor] ([tid_SpecialEducationSettingDescriptor]);
ALTER TABLE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SpecialEducationSettingDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[SpecialEducationSettingType] ******/

CREATE TABLE [t_edfi].[SpecialEducationSettingType]
(
	[tid_SpecialEducationSettingType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_SpecialEducationSettingType] PRIMARY KEY NONCLUSTERED
(
	[tid_SpecialEducationSettingType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[SpecialEducationSettingType] ADD CONSTRAINT [SpecialEducationSettingType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[SpecialEducationSettingType] ADD CONSTRAINT [SpecialEducationSettingType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[SpecialEducationSettingType] ADD CONSTRAINT [SpecialEducationSettingType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The major instructional setting (more than 50 percent of a student''s special education program).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SpecialEducationSetting type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SpecialEducationSetting type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'SpecialEducationSettingType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[Staff] ******/

CREATE TABLE [t_edfi].[Staff]
(
    [tid_Staff] [INT] IDENTITY(1,1) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[MaidenName] [NVARCHAR](75) NULL,
	[SexType] [NVARCHAR](450) NULL,
	[BirthDate] [DATE] NULL,
	[HispanicLatinoEthnicity] [BIT] NULL,
	[OldEthnicityType] [NVARCHAR](450) NULL,
	[CitizenshipStatusType] [NVARCHAR](450) NULL,
	[HighestCompletedLevelOfEducationDescriptorCodeValue] [NVARCHAR](50) NULL,
	[YearsOfPriorProfessionalExperience] [DECIMAL](5, 2) NULL,
	[YearsOfPriorTeachingExperience] [DECIMAL](5, 2) NULL,
	[LoginId] [NVARCHAR](60) NULL,
	[HighlyQualifiedTeacher] [BIT] NULL,
	[HighestCompletedLevelOfEducationDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Staff] PRIMARY KEY NONCLUSTERED
(
    [tid_Staff] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Staff] ADD CONSTRAINT [Staff_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Staff] ADD CONSTRAINT [Staff_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Staff] ADD CONSTRAINT [Staff_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an individual who performs specified activities for any public or private education institution or agency that provides instructional and/or support services to students or staff at the early childhood level through high school completion. For example, this includes:
    1. An "employee" who performs services under the direction of the employing institution or agency is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings
    2. A "contractor" or "consultant" who performs services for an agreed upon fee or an employee of a management service contracted to work on site
    3. A "volunteer" who performs services on a voluntary and uncompensated basis
    4. An in-kind service provider
    5. An independent contractor or businessperson working at a school site.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Staff';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'MaidenName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was born.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'BirthDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'OldEthnicityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'CitizenshipStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'HighestCompletedLevelOfEducationDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years that an individual has previously held a similar professional position in one or more education institutions.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'YearsOfPriorProfessionalExperience';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years that an individual has previously held a teaching position in one or more education institutions.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'YearsOfPriorTeachingExperience';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'LoginId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'HighlyQualifiedTeacher';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'HighestCompletedLevelOfEducationDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaff_Id ON [t_edfi].[Staff]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Staff] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Staff], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffSnapshotRecord] ADD CONSTRAINT [FK_StaffSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffSnapshotRecord] CHECK CONSTRAINT [FK_StaffSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffSnapshotRecord] ADD CONSTRAINT [FK_StaffSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]);
ALTER TABLE [t_edfi].[StaffSnapshotRecord] CHECK CONSTRAINT [FK_StaffSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StaffIdentificationCode] ******/

CREATE TABLE [t_edfi].[StaffIdentificationCode]
(
	[tid_StaffIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[StaffIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
	[StaffIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffIdentificationCode] ADD CONSTRAINT [StaffIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffIdentificationCode] ADD CONSTRAINT [FK_StaffIdentificationCode_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffIdentificationCode] CHECK CONSTRAINT [FK_StaffIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the staff Identification Code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StaffOtherName] ******/

CREATE TABLE [t_edfi].[StaffOtherName]
(
	[tid_StaffOtherName] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[OtherNameType] [NVARCHAR](450) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffOtherName] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffOtherName] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffOtherName] ADD CONSTRAINT [StaffOtherName_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffOtherName] ADD CONSTRAINT [FK_StaffOtherName_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffOtherName] CHECK CONSTRAINT [FK_StaffOtherName_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other names (e.g., alias, nickname, previous legal name) associated with a person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'OtherNameType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
GO

/****** TABLE: [t_edfi].[StaffAddress] ******/

CREATE TABLE [t_edfi].[StaffAddress]
(
	[tid_StaffAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffAddress] ADD CONSTRAINT [StaffAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffAddress] ADD CONSTRAINT [FK_StaffAddress_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffAddress] CHECK CONSTRAINT [FK_StaffAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an address, including the street address, city, state, and ZIP code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[StaffInternationalAddress] ******/

CREATE TABLE [t_edfi].[StaffInternationalAddress]
(
	[tid_StaffInternationalAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[AddressLine1] [NVARCHAR](150) NOT NULL,
	[AddressLine2] [NVARCHAR](150) NULL,
	[AddressLine3] [NVARCHAR](150) NULL,
	[AddressLine4] [NVARCHAR](150) NULL,
	[CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffInternationalAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffInternationalAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffInternationalAddress] ADD CONSTRAINT [StaffInternationalAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffInternationalAddress] ADD CONSTRAINT [FK_StaffInternationalAddress_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffInternationalAddress] CHECK CONSTRAINT [FK_StaffInternationalAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StaffTelephone] ******/

CREATE TABLE [t_edfi].[StaffTelephone]
(
	[tid_StaffTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[TelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[OrderOfPriority] [INT] NULL,
	[TextMessageCapabilityIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffTelephone] ADD CONSTRAINT [StaffTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffTelephone] ADD CONSTRAINT [FK_StaffTelephone_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffTelephone] CHECK CONSTRAINT [FK_StaffTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator';
GO

/****** TABLE: [t_edfi].[StaffElectronicMail] ******/

CREATE TABLE [t_edfi].[StaffElectronicMail]
(
	[tid_StaffElectronicMail] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[ElectronicMailType] [NVARCHAR](450) NOT NULL,
	[ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
	[PrimaryEmailAddressIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffElectronicMail] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffElectronicMail] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffElectronicMail] ADD CONSTRAINT [StaffElectronicMail_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffElectronicMail] ADD CONSTRAINT [FK_StaffElectronicMail_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffElectronicMail] CHECK CONSTRAINT [FK_StaffElectronicMail_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffElectronicMail';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator';
GO

/****** TABLE: [t_edfi].[StaffRace] ******/

CREATE TABLE [t_edfi].[StaffRace]
(
	[tid_StaffRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffRace] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffRace] ADD CONSTRAINT [StaffRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffRace] ADD CONSTRAINT [FK_StaffRace_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffRace] CHECK CONSTRAINT [FK_StaffRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRace', @level2type=N'COLUMN', @level2name=N'RaceType';
GO

/****** TABLE: [t_edfi].[StaffVisa] ******/

CREATE TABLE [t_edfi].[StaffVisa]
(
	[tid_StaffVisa] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[VisaType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffVisa] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffVisa] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffVisa] ADD CONSTRAINT [StaffVisa_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffVisa] ADD CONSTRAINT [FK_StaffVisa_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffVisa] CHECK CONSTRAINT [FK_StaffVisa_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffVisa';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffVisa', @level2type=N'COLUMN', @level2name=N'VisaType';
GO

/****** TABLE: [t_edfi].[StaffLanguage] ******/

CREATE TABLE [t_edfi].[StaffLanguage]
(
	[tid_StaffLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffLanguage] ADD CONSTRAINT [StaffLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffLanguage] ADD CONSTRAINT [FK_StaffLanguage_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffLanguage] CHECK CONSTRAINT [FK_StaffLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StaffLanguageUse] ******/

CREATE TABLE [t_edfi].[StaffLanguageUse]
(
	[tid_StaffLanguageUse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffLanguage] [INT] NOT NULL,
	[LanguageUseType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffLanguageUse] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffLanguageUse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffLanguageUse] ADD CONSTRAINT [StaffLanguageUse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffLanguageUse] ADD CONSTRAINT [FK_StaffLanguageUse_ParentTable] FOREIGN KEY ([tid_StaffLanguage])
REFERENCES [t_edfi].[StaffLanguage] ([tid_StaffLanguage]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffLanguageUse] CHECK CONSTRAINT [FK_StaffLanguageUse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffLanguageUse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageUseType';
GO

/****** TABLE: [t_edfi].[StaffRecognition] ******/

CREATE TABLE [t_edfi].[StaffRecognition]
(
	[tid_StaffRecognition] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[RecognitionType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[RecognitionDescription] [NVARCHAR](80) NULL,
	[RecognitionAwardDate] [DATE] NULL,
	[RecognitionAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffRecognition] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffRecognition] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffRecognition] ADD CONSTRAINT [StaffRecognition_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffRecognition] ADD CONSTRAINT [FK_StaffRecognition_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffRecognition] CHECK CONSTRAINT [FK_StaffRecognition_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffRecognition';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the recognition was awarded or earned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StaffCredential] ******/

CREATE TABLE [t_edfi].[StaffCredential]
(
	[tid_StaffCredential] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[CredentialIdentifier] [NVARCHAR](60) NOT NULL,
	[StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffCredential] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffCredential] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffCredential] ADD CONSTRAINT [StaffCredential_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffCredential] CHECK CONSTRAINT [FK_StaffCredential_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The legal document giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffCredential';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier or serial number assigned to the credential.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'CredentialIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'StateOfIssueStateAbbreviationType';
GO

/****** TABLE: [t_edfi].[StaffIdentificationDocument] ******/

CREATE TABLE [t_edfi].[StaffIdentificationDocument]
(
	[tid_StaffIdentificationDocument] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL,
	[PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL,
	[DocumentTitle] [NVARCHAR](60) NULL,
	[DocumentExpirationDate] [DATE] NULL,
	[IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffIdentificationDocument] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffIdentificationDocument] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffIdentificationDocument] ADD CONSTRAINT [StaffIdentificationDocument_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffIdentificationDocument] ADD CONSTRAINT [FK_StaffIdentificationDocument_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffIdentificationDocument] CHECK CONSTRAINT [FK_StaffIdentificationDocument_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[StaffExtension] ******/

CREATE TABLE [t_extension].[StaffExtension]
(
	[tid_StaffExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[ProbationCompleteDate] [DATE] NULL,
	[Tenured] [BIT] NULL,
	[GenderType] [NVARCHAR](450) NULL,
	[TenureTrack] [BIT] NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffExtension] ADD CONSTRAINT [FK_StaffExtension_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffExtension] CHECK CONSTRAINT [FK_StaffExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the probation period ended or is scheduled to end.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffExtension', @level2type=N'COLUMN', @level2name=N'ProbationCompleteDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the staff member is tenured.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffExtension', @level2type=N'COLUMN', @level2name=N'Tenured';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffExtension', @level2type=N'COLUMN', @level2name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the staff is on track for tenure.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffExtension', @level2type=N'COLUMN', @level2name=N'TenureTrack';
GO

/****** TABLE: [t_extension].[StaffBackgroundCheck] ******/

CREATE TABLE [t_extension].[StaffBackgroundCheck]
(
	[tid_StaffBackgroundCheck] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BackgroundCheckRequestedDate] [DATE] NOT NULL,
	[BackgroundCheckStatusDescriptorCodeValue] [NVARCHAR](50) NULL,
	[BackgroundCheckCompletedDate] [DATE] NULL,
	[Fingerprint] [BIT] NULL,
	[BackgroundCheckStatusDescriptorNamespace] [NVARCHAR](255) NULL,
	[BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffBackgroundCheck] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffBackgroundCheck] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffBackgroundCheck] ADD CONSTRAINT [StaffBackgroundCheck_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffBackgroundCheck] ADD CONSTRAINT [FK_StaffBackgroundCheck_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffBackgroundCheck] CHECK CONSTRAINT [FK_StaffBackgroundCheck_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Staff background check history and disposition.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffBackgroundCheck';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the background check was requested.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckRequestedDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the background check was completed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckCompletedDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that a person has or has not completed a fingerprint.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffBackgroundCheck', @level2type=N'COLUMN', @level2name=N'Fingerprint';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckStatusDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[StaffHighlyQualifiedAcademicSubject] ******/

CREATE TABLE [t_extension].[StaffHighlyQualifiedAcademicSubject]
(
	[tid_StaffHighlyQualifiedAcademicSubject] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffHighlyQualifiedAcademicSubject] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffHighlyQualifiedAcademicSubject] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffHighlyQualifiedAcademicSubject] ADD CONSTRAINT [StaffHighlyQualifiedAcademicSubject_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffHighlyQualifiedAcademicSubject] ADD CONSTRAINT [FK_StaffHighlyQualifiedAcademicSubject_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffHighlyQualifiedAcademicSubject] CHECK CONSTRAINT [FK_StaffHighlyQualifiedAcademicSubject_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic subject(s) in which the staff is deemed to be "highly qualified".', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffHighlyQualifiedAcademicSubject';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffHighlyQualifiedAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffHighlyQualifiedAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

/****** TABLE: [t_extension].[StaffSeniority] ******/

CREATE TABLE [t_extension].[StaffSeniority]
(
	[tid_StaffSeniority] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[CredentialFieldDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[YearsExperience] [DECIMAL](5, 2) NOT NULL,
	[CredentialFieldDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSeniority] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffSeniority] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffSeniority] ADD CONSTRAINT [StaffSeniority_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffSeniority] ADD CONSTRAINT [FK_StaffSeniority_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffSeniority] CHECK CONSTRAINT [FK_StaffSeniority_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Entries of job experience contributing to computations of seniority.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffSeniority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSeniority', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the education organization worked.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSeniority', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of years of experience.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSeniority', @level2type=N'COLUMN', @level2name=N'YearsExperience';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSeniority', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorNamespace';
GO

/****** TABLE: [t_extension].[StaffTeacherPreparationProgram] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProgram]
(
	[tid_StaffTeacherPreparationProgram] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL,
	[TeacherPreparationProgramIdentifier] [NVARCHAR](75) NULL,
	[TeacherPreparationProgramTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[MajorSpecialization] [NVARCHAR](75) NOT NULL,
	[GPA] [DECIMAL](18, 4) NULL,
	[LevelOfDegreeAwardedDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LevelOfDegreeAwardedDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[TeacherPreparationProgramTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProgram] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffTeacherPreparationProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProgram] ADD CONSTRAINT [StaffTeacherPreparationProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffTeacherPreparationProgram] ADD CONSTRAINT [FK_StaffTeacherPreparationProgram_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffTeacherPreparationProgram] CHECK CONSTRAINT [FK_StaffTeacherPreparationProgram_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Teacher Preparation Program(s) completed by the teacher.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffTeacherPreparationProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the Teacher Preparation Program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An identifier assigned to the teacher preparation program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the organization providing the teacher preparation program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The major area for a degree or area of specialization for a certificate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'MajorSpecialization';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final GPA the teacher achieved in the program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'GPA';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'LevelOfDegreeAwardedDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'LevelOfDegreeAwardedDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[StaffTeacherPreparationProgramAddress] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProgramAddress]
(
	[tid_StaffTeacherPreparationProgramAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffTeacherPreparationProgram] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProgramAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffTeacherPreparationProgramAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProgramAddress] ADD CONSTRAINT [StaffTeacherPreparationProgramAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffTeacherPreparationProgramAddress] ADD CONSTRAINT [FK_StaffTeacherPreparationProgramAddress_ParentTable] FOREIGN KEY ([tid_StaffTeacherPreparationProgram])
REFERENCES [t_extension].[StaffTeacherPreparationProgram] ([tid_StaffTeacherPreparationProgram]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffTeacherPreparationProgramAddress] CHECK CONSTRAINT [FK_StaffTeacherPreparationProgramAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The address of the institution providing the teacher prep program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffTeacherPreparationProgramAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_extension].[StaffApplicant] ******/

CREATE TABLE [t_extension].[StaffApplicant]
(
	[tid_StaffApplicant] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[ApplicantIdentifier] [NVARCHAR](32) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffApplicant] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffApplicant] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffApplicant] ADD CONSTRAINT [StaffApplicant_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffApplicant] ADD CONSTRAINT [FK_StaffApplicant_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffApplicant] CHECK CONSTRAINT [FK_StaffApplicant_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reference to applicant(s) represented by this staff member.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffApplicant';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned to a person making formal application for an open staff position.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffApplicant', @level2type=N'COLUMN', @level2name=N'ApplicantIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffApplicant', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
GO

/****** TABLE: [t_extension].[StaffSalary] ******/

CREATE TABLE [t_extension].[StaffSalary]
(
	[tid_StaffSalary] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[SalaryMinRange] [INT] NULL,
	[SalaryMaxRange] [INT] NULL,
	[SalaryTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[SalaryAmount] [MONEY] NULL,
	[SalaryTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSalary] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffSalary] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffSalary] ADD CONSTRAINT [StaffSalary_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffSalary] ADD CONSTRAINT [FK_StaffSalary_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffSalary] CHECK CONSTRAINT [FK_StaffSalary_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information regarding the salary of a staff member.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffSalary';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum salary range for a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSalary', @level2type=N'COLUMN', @level2name=N'SalaryMinRange';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum salary range for a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSalary', @level2type=N'COLUMN', @level2name=N'SalaryMaxRange';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSalary', @level2type=N'COLUMN', @level2name=N'SalaryTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The salary of a staff member.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSalary', @level2type=N'COLUMN', @level2name=N'SalaryAmount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffSalary', @level2type=N'COLUMN', @level2name=N'SalaryTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[StaffTeacherEducatorResearch] ******/

CREATE TABLE [t_extension].[StaffTeacherEducatorResearch]
(
	[tid_StaffTeacherEducatorResearch] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Staff] [INT] NOT NULL,
	[ResearchExperienceDate] [DATE] NOT NULL,
	[ResearchExperienceTitle] [NVARCHAR](60) NULL,
	[ResearchExperienceDescription] [NVARCHAR](1024) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherEducatorResearch] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffTeacherEducatorResearch] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherEducatorResearch] ADD CONSTRAINT [StaffTeacherEducatorResearch_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffTeacherEducatorResearch] ADD CONSTRAINT [FK_StaffTeacherEducatorResearch_ParentTable] FOREIGN KEY ([tid_Staff])
REFERENCES [t_edfi].[Staff] ([tid_Staff]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffTeacherEducatorResearch] CHECK CONSTRAINT [FK_StaffTeacherEducatorResearch_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Teacher preparation provider faculty that instruct teacher candidates in content area or pedagogy.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffTeacherEducatorResearch';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the start or effective date of a staff member''s teacher educator position for an Education Organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherEducatorResearch', @level2type=N'COLUMN', @level2name=N'ResearchExperienceDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the research experience.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherEducatorResearch', @level2type=N'COLUMN', @level2name=N'ResearchExperienceTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the research experience.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherEducatorResearch', @level2type=N'COLUMN', @level2name=N'ResearchExperienceDescription';
GO
/****** TABLE: [t_edfi].[StaffClassificationDescriptor] ******/

CREATE TABLE [t_edfi].[StaffClassificationDescriptor]
(
    [tid_StaffClassificationDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[StaffClassificationType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffClassificationDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffClassificationDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffClassificationDescriptor] ADD CONSTRAINT [StaffClassificationDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffClassificationDescriptor] ADD CONSTRAINT [StaffClassificationDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffClassificationDescriptor] ADD CONSTRAINT [StaffClassificationDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines an individual''s title of employment, official status or rank.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN', @level2name=N'StaffClassificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffClassificationDescriptor_Id ON [t_edfi].[StaffClassificationDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffClassificationDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffClassificationDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffClassificationDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffClassificationDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffClassificationDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StaffClassificationDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffClassificationDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StaffClassificationDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffClassificationDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StaffClassificationDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffClassificationDescriptor])
REFERENCES [t_edfi].[StaffClassificationDescriptor] ([tid_StaffClassificationDescriptor]);
ALTER TABLE [t_edfi].[StaffClassificationDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StaffClassificationDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StaffClassificationType] ******/

CREATE TABLE [t_edfi].[StaffClassificationType]
(
	[tid_StaffClassificationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_StaffClassificationType] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffClassificationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffClassificationType] ADD CONSTRAINT [StaffClassificationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffClassificationType] ADD CONSTRAINT [StaffClassificationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffClassificationType] ADD CONSTRAINT [StaffClassificationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An individual''s title of employment, official status or rank.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StaffClassification type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StaffClassification type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffClassificationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[StaffCohortAssociation] ******/

CREATE TABLE [t_edfi].[StaffCohortAssociation]
(
    [tid_StaffCohortAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[CohortIdentifier] [NVARCHAR](20) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[EndDate] [DATE] NULL,
	[StudentRecordAccess] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffCohortAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffCohortAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffCohortAssociation] ADD CONSTRAINT [StaffCohortAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffCohortAssociation] ADD CONSTRAINT [StaffCohortAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffCohortAssociation] ADD CONSTRAINT [StaffCohortAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the Staff associated with a cohort of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start date for the association of staff to this cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'CohortIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End date for the association of staff to this cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'StudentRecordAccess';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffCohortAssociation_Id ON [t_edfi].[StaffCohortAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffCohortAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffCohortAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffCohortAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffCohortAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffCohortAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffCohortAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffCohortAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffCohortAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffCohortAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffCohortAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffCohortAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffCohortAssociation])
REFERENCES [t_edfi].[StaffCohortAssociation] ([tid_StaffCohortAssociation]);
ALTER TABLE [t_edfi].[StaffCohortAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffCohortAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StaffEducationOrganizationAssignmentAssociation] ******/

CREATE TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociation]
(
    [tid_StaffEducationOrganizationAssignmentAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[PositionTitle] [NVARCHAR](100) NULL,
	[EndDate] [DATE] NULL,
	[OrderOfAssignment] [INT] NULL,
	[EmploymentEducationOrganizationId] [INT] NULL,
	[EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NULL,
	[EmploymentHireDate] [DATE] NULL,
	[EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NULL,
	[StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffEducationOrganizationAssignmentAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffEducationOrganizationAssignmentAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the education organization to which a staff member provides services; also known as school of service.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the start or effective date of a staff member''s employment, contract, or relationship with the LEA.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name of an individual''s position.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'PositionTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the end or termination date of a staff member''s employment, contract, or relationship with the LEA.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes whether the assignment is this the staff member''s primary assignment, secondary assignment, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'OrderOfAssignment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was hired for a position.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentHireDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffEducationOrganizationAssignmentAssociation_Id ON [t_edfi].[StaffEducationOrganizationAssignmentAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffEducationOrganizationAssignmentAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffEducationOrganizationAssignmentAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffEducationOrganizationAssignmentAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffEducationOrganizationAssignmentAssociation])
REFERENCES [t_edfi].[StaffEducationOrganizationAssignmentAssociation] ([tid_StaffEducationOrganizationAssignmentAssociation]);
ALTER TABLE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[StaffEducationOrganizationAssignmentAssociationExtension] ******/

CREATE TABLE [t_extension].[StaffEducationOrganizationAssignmentAssociationExtension]
(
	[tid_StaffEducationOrganizationAssignmentAssociationExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffEducationOrganizationAssignmentAssociation] [INT] NOT NULL,
	[YearsOfExperienceAtCurrentEducationOrganization] [DECIMAL](5, 2) NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffEducationOrganizationAssignmentAssociationExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffEducationOrganizationAssignmentAssociationExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffEducationOrganizationAssignmentAssociationExtension] ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociationExtension_ParentTable] FOREIGN KEY ([tid_StaffEducationOrganizationAssignmentAssociation])
REFERENCES [t_edfi].[StaffEducationOrganizationAssignmentAssociation] ([tid_StaffEducationOrganizationAssignmentAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffEducationOrganizationAssignmentAssociationExtension] CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociationExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociationExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years that an individual has previously held a teaching position in one or more education institutions.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationAssignmentAssociationExtension', @level2type=N'COLUMN', @level2name=N'YearsOfExperienceAtCurrentEducationOrganization';
GO
/****** TABLE: [t_edfi].[StaffEducationOrganizationEmploymentAssociation] ******/

CREATE TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociation]
(
    [tid_StaffEducationOrganizationEmploymentAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[HireDate] [DATE] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[EndDate] [DATE] NULL,
	[SeparationType] [NVARCHAR](450) NULL,
	[SeparationReasonDescriptorCodeValue] [NVARCHAR](50) NULL,
	[Department] [NVARCHAR](3) NULL,
	[FullTimeEquivalency] [DECIMAL](5, 4) NULL,
	[OfferDate] [DATE] NULL,
	[HourlyWage] [MONEY] NULL,
	[SeparationReasonDescriptorNamespace] [NVARCHAR](255) NULL,
	[EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffEducationOrganizationEmploymentAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffEducationOrganizationEmploymentAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the EducationOrganization an employee, contractor, volunteer, or other service provider is formally associated with typically indicated by which organization the staff member has a services contract with or receives compensation from.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was hired for a position.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'HireDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'SeparationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'SeparationReasonDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The department or suborganization the employee/contractor is associated with in the EducationOrganization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'Department';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'FullTimeEquivalency';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date at which the staff member was made an official offer for this employment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'OfferDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Hourly wage associated with the employment position being reported.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'HourlyWage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'SeparationReasonDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffEducationOrganizationEmploymentAssociation_Id ON [t_edfi].[StaffEducationOrganizationEmploymentAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffEducationOrganizationEmploymentAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffEducationOrganizationEmploymentAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffEducationOrganizationEmploymentAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffEducationOrganizationEmploymentAssociation])
REFERENCES [t_edfi].[StaffEducationOrganizationEmploymentAssociation] ([tid_StaffEducationOrganizationEmploymentAssociation]);
ALTER TABLE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StaffIdentificationSystemDescriptor] ******/

CREATE TABLE [t_edfi].[StaffIdentificationSystemDescriptor]
(
    [tid_StaffIdentificationSystemDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[StaffIdentificationSystemType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffIdentificationSystemDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffIdentificationSystemDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffIdentificationSystemDescriptor] ADD CONSTRAINT [StaffIdentificationSystemDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffIdentificationSystemDescriptor] ADD CONSTRAINT [StaffIdentificationSystemDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffIdentificationSystemDescriptor] ADD CONSTRAINT [StaffIdentificationSystemDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the originating record system and code that is used for record-keeping purposes of the staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffIdentificationSystemDescriptor_Id ON [t_edfi].[StaffIdentificationSystemDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffIdentificationSystemDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffIdentificationSystemDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffIdentificationSystemDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StaffIdentificationSystemDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StaffIdentificationSystemDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StaffIdentificationSystemDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffIdentificationSystemDescriptor])
REFERENCES [t_edfi].[StaffIdentificationSystemDescriptor] ([tid_StaffIdentificationSystemDescriptor]);
ALTER TABLE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StaffIdentificationSystemDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StaffIdentificationSystemType] ******/

CREATE TABLE [t_edfi].[StaffIdentificationSystemType]
(
	[tid_StaffIdentificationSystemType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_StaffIdentificationSystemType] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffIdentificationSystemType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffIdentificationSystemType] ADD CONSTRAINT [StaffIdentificationSystemType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffIdentificationSystemType] ADD CONSTRAINT [StaffIdentificationSystemType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffIdentificationSystemType] ADD CONSTRAINT [StaffIdentificationSystemType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a staff member.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StaffIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StaffIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[StaffProgramAssociation] ******/

CREATE TABLE [t_edfi].[StaffProgramAssociation]
(
    [tid_StaffProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[EndDate] [DATE] NULL,
	[StudentRecordAccess] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffProgramAssociation] ADD CONSTRAINT [StaffProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffProgramAssociation] ADD CONSTRAINT [StaffProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffProgramAssociation] ADD CONSTRAINT [StaffProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the Staff associated with a program.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start date for the association of staff to this program.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End date for the association of staff to this program.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentRecordAccess';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffProgramAssociation_Id ON [t_edfi].[StaffProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffProgramAssociation])
REFERENCES [t_edfi].[StaffProgramAssociation] ([tid_StaffProgramAssociation]);
ALTER TABLE [t_edfi].[StaffProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffProgramAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StaffSchoolAssociation] ******/

CREATE TABLE [t_edfi].[StaffSchoolAssociation]
(
    [tid_StaffSchoolAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[SchoolYear] [SMALLINT] NULL,
	[ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSchoolAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffSchoolAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffSchoolAssociation] ADD CONSTRAINT [StaffSchoolAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffSchoolAssociation] ADD CONSTRAINT [StaffSchoolAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffSchoolAssociation] ADD CONSTRAINT [StaffSchoolAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the School(s) to which a staff member provides instructional services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier for a school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffSchoolAssociation_Id ON [t_edfi].[StaffSchoolAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffSchoolAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffSchoolAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffSchoolAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSchoolAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffSchoolAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffSchoolAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffSchoolAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffSchoolAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffSchoolAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffSchoolAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffSchoolAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffSchoolAssociation])
REFERENCES [t_edfi].[StaffSchoolAssociation] ([tid_StaffSchoolAssociation]);
ALTER TABLE [t_edfi].[StaffSchoolAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffSchoolAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StaffSchoolAssociationGradeLevel] ******/

CREATE TABLE [t_edfi].[StaffSchoolAssociationGradeLevel]
(
	[tid_StaffSchoolAssociationGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffSchoolAssociation] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSchoolAssociationGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffSchoolAssociationGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffSchoolAssociationGradeLevel] ADD CONSTRAINT [StaffSchoolAssociationGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffSchoolAssociationGradeLevel] ADD CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_ParentTable] FOREIGN KEY ([tid_StaffSchoolAssociation])
REFERENCES [t_edfi].[StaffSchoolAssociation] ([tid_StaffSchoolAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffSchoolAssociationGradeLevel] CHECK CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of grade levels for which the individual''s assignment is responsible.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StaffSchoolAssociationAcademicSubject] ******/

CREATE TABLE [t_edfi].[StaffSchoolAssociationAcademicSubject]
(
	[tid_StaffSchoolAssociationAcademicSubject] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffSchoolAssociation] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSchoolAssociationAcademicSubject] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffSchoolAssociationAcademicSubject] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffSchoolAssociationAcademicSubject] ADD CONSTRAINT [StaffSchoolAssociationAcademicSubject_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffSchoolAssociationAcademicSubject] ADD CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_ParentTable] FOREIGN KEY ([tid_StaffSchoolAssociation])
REFERENCES [t_edfi].[StaffSchoolAssociation] ([tid_StaffSchoolAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffSchoolAssociationAcademicSubject] CHECK CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationAcademicSubject';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSchoolAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StaffSectionAssociation] ******/

CREATE TABLE [t_edfi].[StaffSectionAssociation]
(
    [tid_StaffSectionAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[ClassroomPositionDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[HighlyQualifiedTeacher] [BIT] NULL,
	[TeacherStudentDataLinkExclusion] [BIT] NULL,
	[PercentageContribution] [DECIMAL](5, 4) NULL,
	[ClassroomPositionDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSectionAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffSectionAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffSectionAssociation] ADD CONSTRAINT [StaffSectionAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StaffSectionAssociation] ADD CONSTRAINT [StaffSectionAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StaffSectionAssociation] ADD CONSTRAINT [StaffSectionAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the class sections to which a staff member is assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomPositionDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of a teacher''s assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the last day of a staff member''s assignment to the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'HighlyQualifiedTeacher';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'TeacherStudentDataLinkExclusion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'PercentageContribution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomPositionDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffSectionAssociation_Id ON [t_edfi].[StaffSectionAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StaffSectionAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StaffSectionAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffSectionAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffSectionAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffSectionAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StaffSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffSectionAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StaffSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffSectionAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StaffSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffSectionAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffSectionAssociation])
REFERENCES [t_edfi].[StaffSectionAssociation] ([tid_StaffSectionAssociation]);
ALTER TABLE [t_edfi].[StaffSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffSectionAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StateAbbreviationType] ******/

CREATE TABLE [t_edfi].[StateAbbreviationType]
(
    [tid_StateAbbreviationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_StateAbbreviationType] PRIMARY KEY NONCLUSTERED
(
    [tid_StateAbbreviationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StateAbbreviationType] ADD CONSTRAINT [StateAbbreviationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StateAbbreviationType] ADD CONSTRAINT [StateAbbreviationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StateAbbreviationType] ADD CONSTRAINT [StateAbbreviationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateAbbreviationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StateAbbreviation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateAbbreviationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StateAbbreviation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateAbbreviationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[StateEducationAgency] ******/

CREATE TABLE [t_edfi].[StateEducationAgency]
(
    [tid_StateEducationAgency] [INT] IDENTITY(1,1) NOT NULL,
	[StateEducationAgencyId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StateEducationAgency] PRIMARY KEY NONCLUSTERED
(
    [tid_StateEducationAgency] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StateEducationAgency] ADD CONSTRAINT [StateEducationAgency_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StateEducationAgency] ADD CONSTRAINT [StateEducationAgency_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StateEducationAgency] ADD CONSTRAINT [StateEducationAgency_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the agency of the state charged with the primary responsibility for coordinating and supervising public instruction, including the setting of standards for elementary and secondary instructional programs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgency';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateEducationAgency', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStateEducationAgency_Id ON [t_edfi].[StateEducationAgency]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StateEducationAgencySnapshotRecord] ******/

CREATE TABLE [t_edfi].[StateEducationAgencySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StateEducationAgency] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StateEducationAgencySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StateEducationAgency], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StateEducationAgencySnapshotRecord] ADD CONSTRAINT [FK_StateEducationAgencySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StateEducationAgencySnapshotRecord] CHECK CONSTRAINT [FK_StateEducationAgencySnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StateEducationAgencySnapshotRecord] ADD CONSTRAINT [FK_StateEducationAgencySnapshotRecord_ParentTable] FOREIGN KEY ([tid_StateEducationAgency])
REFERENCES [t_edfi].[StateEducationAgency] ([tid_StateEducationAgency]);
ALTER TABLE [t_edfi].[StateEducationAgencySnapshotRecord] CHECK CONSTRAINT [FK_StateEducationAgencySnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StateEducationAgencyAccountability] ******/

CREATE TABLE [t_edfi].[StateEducationAgencyAccountability]
(
	[tid_StateEducationAgencyAccountability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StateEducationAgency] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[CTEGraduationRateInclusion] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StateEducationAgencyAccountability] PRIMARY KEY NONCLUSTERED
(
	[tid_StateEducationAgencyAccountability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StateEducationAgencyAccountability] ADD CONSTRAINT [StateEducationAgencyAccountability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StateEducationAgencyAccountability] ADD CONSTRAINT [FK_StateEducationAgencyAccountability_ParentTable] FOREIGN KEY ([tid_StateEducationAgency])
REFERENCES [t_edfi].[StateEducationAgency] ([tid_StateEducationAgency]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StateEducationAgencyAccountability] CHECK CONSTRAINT [FK_StateEducationAgencyAccountability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity maintains information about federal reporting and accountability for state education agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyAccountability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the accountability is reported.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether CTE concentrators are included in the state''s computation of its graduation rate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'CTEGraduationRateInclusion';
GO

/****** TABLE: [t_edfi].[StateEducationAgencyFederalFunds] ******/

CREATE TABLE [t_edfi].[StateEducationAgencyFederalFunds]
(
	[tid_StateEducationAgencyFederalFunds] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StateEducationAgency] [INT] NOT NULL,
	[FiscalYear] [INT] NOT NULL,
	[FederalProgramsFundingAllocation] [MONEY] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StateEducationAgencyFederalFunds] PRIMARY KEY NONCLUSTERED
(
	[tid_StateEducationAgencyFederalFunds] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [StateEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [StateEducationAgencyFederalFunds_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [StateEducationAgencyFederalFunds_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
ALTER TABLE [t_edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [FK_StateEducationAgencyFederalFunds_ParentTable] FOREIGN KEY ([tid_StateEducationAgency])
REFERENCES [t_edfi].[StateEducationAgency] ([tid_StateEducationAgency]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StateEducationAgencyFederalFunds] CHECK CONSTRAINT [FK_StateEducationAgencyFederalFunds_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contains the information about the reception and use of federal funds for reporting purposes.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyFederalFunds';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fiscal year for which the federal funds are received.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'FiscalYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StateEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'FederalProgramsFundingAllocation';
GO
/****** TABLE: [t_edfi].[Student] ******/

CREATE TABLE [t_edfi].[Student]
(
    [tid_Student] [INT] IDENTITY(1,1) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[MaidenName] [NVARCHAR](75) NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[BirthDate] [DATE] NOT NULL,
	[BirthCity] [NVARCHAR](30) NULL,
	[BirthStateAbbreviationType] [NVARCHAR](450) NULL,
	[BirthInternationalProvince] [NVARCHAR](150) NULL,
	[BirthCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[DateEnteredUS] [DATE] NULL,
	[MultipleBirthStatus] [BIT] NULL,
	[ProfileThumbnail] [NVARCHAR](59) NULL,
	[HispanicLatinoEthnicity] [BIT] NOT NULL,
	[OldEthnicityType] [NVARCHAR](450) NULL,
	[CitizenshipStatusType] [NVARCHAR](450) NULL,
	[EconomicDisadvantaged] [BIT] NULL,
	[SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NULL,
	[LimitedEnglishProficiencyDescriptorCodeValue] [NVARCHAR](50) NULL,
	[DisplacementStatus] [NVARCHAR](30) NULL,
	[LoginId] [NVARCHAR](60) NULL,
	[LimitedEnglishProficiencyDescriptorNamespace] [NVARCHAR](255) NULL,
	[SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NULL,
	[BirthCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Student] PRIMARY KEY NONCLUSTERED
(
    [tid_Student] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[Student] ADD CONSTRAINT [Student_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[Student] ADD CONSTRAINT [Student_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[Student] ADD CONSTRAINT [Student_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'Student';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'MaidenName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was born.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The city the student was born in.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthCity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthStateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For students born outside of the U.S., the Province or jurisdiction in which an individual is born.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthInternationalProvince';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For students born outside of the U.S., the date the student entered the U.S.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'DateEnteredUS';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'MultipleBirthStatus';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Locator for the student photo.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'ProfileThumbnail';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'OldEthnicityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'CitizenshipStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of inadequate financial condition of an individual''s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'EconomicDisadvantaged';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'DisplacementStatus';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'LoginId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthCountryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudent_Id ON [t_edfi].[Student]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Student] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Student], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSnapshotRecord] ADD CONSTRAINT [FK_StudentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSnapshotRecord] CHECK CONSTRAINT [FK_StudentSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentSnapshotRecord] ADD CONSTRAINT [FK_StudentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]);
ALTER TABLE [t_edfi].[StudentSnapshotRecord] CHECK CONSTRAINT [FK_StudentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentIdentificationCode] ******/

CREATE TABLE [t_edfi].[StudentIdentificationCode]
(
	[tid_StudentIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NOT NULL,
	[StudentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[StudentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentIdentificationCode] ADD CONSTRAINT [StudentIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentIdentificationCode] ADD CONSTRAINT [FK_StudentIdentificationCode_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentIdentificationCode] CHECK CONSTRAINT [FK_StudentIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the StudentIdentificationCode.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentOtherName] ******/

CREATE TABLE [t_edfi].[StudentOtherName]
(
	[tid_StudentOtherName] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[OtherNameType] [NVARCHAR](450) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentOtherName] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentOtherName] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentOtherName] ADD CONSTRAINT [StudentOtherName_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentOtherName] ADD CONSTRAINT [FK_StudentOtherName_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentOtherName] CHECK CONSTRAINT [FK_StudentOtherName_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other names (e.g., alias, nickname, previous legal name) associated with a person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'OtherNameType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
GO

/****** TABLE: [t_edfi].[StudentAddress] ******/

CREATE TABLE [t_edfi].[StudentAddress]
(
	[tid_StudentAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAddress] ADD CONSTRAINT [StudentAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAddress] ADD CONSTRAINT [FK_StudentAddress_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAddress] CHECK CONSTRAINT [FK_StudentAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an address, including the street address, city, state, and ZIP code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_edfi].[StudentInternationalAddress] ******/

CREATE TABLE [t_edfi].[StudentInternationalAddress]
(
	[tid_StudentInternationalAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[AddressLine1] [NVARCHAR](150) NOT NULL,
	[AddressLine2] [NVARCHAR](150) NULL,
	[AddressLine3] [NVARCHAR](150) NULL,
	[AddressLine4] [NVARCHAR](150) NULL,
	[CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentInternationalAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentInternationalAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentInternationalAddress] ADD CONSTRAINT [StudentInternationalAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentInternationalAddress] ADD CONSTRAINT [FK_StudentInternationalAddress_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentInternationalAddress] CHECK CONSTRAINT [FK_StudentInternationalAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentTelephone] ******/

CREATE TABLE [t_edfi].[StudentTelephone]
(
	[tid_StudentTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[TelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[OrderOfPriority] [INT] NULL,
	[TextMessageCapabilityIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentTelephone] ADD CONSTRAINT [StudentTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentTelephone] ADD CONSTRAINT [FK_StudentTelephone_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentTelephone] CHECK CONSTRAINT [FK_StudentTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator';
GO

/****** TABLE: [t_edfi].[StudentElectronicMail] ******/

CREATE TABLE [t_edfi].[StudentElectronicMail]
(
	[tid_StudentElectronicMail] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[ElectronicMailType] [NVARCHAR](450) NOT NULL,
	[ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
	[PrimaryEmailAddressIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentElectronicMail] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentElectronicMail] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentElectronicMail] ADD CONSTRAINT [StudentElectronicMail_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentElectronicMail] ADD CONSTRAINT [FK_StudentElectronicMail_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentElectronicMail] CHECK CONSTRAINT [FK_StudentElectronicMail_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentElectronicMail';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator';
GO

/****** TABLE: [t_edfi].[StudentRace] ******/

CREATE TABLE [t_edfi].[StudentRace]
(
	[tid_StudentRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentRace] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentRace] ADD CONSTRAINT [StudentRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentRace] ADD CONSTRAINT [FK_StudentRace_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentRace] CHECK CONSTRAINT [FK_StudentRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentRace', @level2type=N'COLUMN', @level2name=N'RaceType';
GO

/****** TABLE: [t_edfi].[StudentVisa] ******/

CREATE TABLE [t_edfi].[StudentVisa]
(
	[tid_StudentVisa] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[VisaType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentVisa] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentVisa] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentVisa] ADD CONSTRAINT [StudentVisa_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentVisa] ADD CONSTRAINT [FK_StudentVisa_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentVisa] CHECK CONSTRAINT [FK_StudentVisa_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentVisa';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentVisa', @level2type=N'COLUMN', @level2name=N'VisaType';
GO

/****** TABLE: [t_edfi].[StudentCharacteristic] ******/

CREATE TABLE [t_edfi].[StudentCharacteristic]
(
	[tid_StudentCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[StudentCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[DesignatedBy] [NVARCHAR](60) NULL,
	[StudentCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCharacteristic] ADD CONSTRAINT [StudentCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCharacteristic] ADD CONSTRAINT [FK_StudentCharacteristic_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCharacteristic] CHECK CONSTRAINT [FK_StudentCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the student''s home situation:
        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the characteristic was designated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the characteristic was removed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the characteristic.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'DesignatedBy';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentLanguage] ******/

CREATE TABLE [t_edfi].[StudentLanguage]
(
	[tid_StudentLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentLanguage] ADD CONSTRAINT [StudentLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentLanguage] ADD CONSTRAINT [FK_StudentLanguage_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentLanguage] CHECK CONSTRAINT [FK_StudentLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language(s) the individual uses to communicate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentLanguageUse] ******/

CREATE TABLE [t_edfi].[StudentLanguageUse]
(
	[tid_StudentLanguageUse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentLanguage] [INT] NOT NULL,
	[LanguageUseType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentLanguageUse] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentLanguageUse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentLanguageUse] ADD CONSTRAINT [StudentLanguageUse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentLanguageUse] ADD CONSTRAINT [FK_StudentLanguageUse_ParentTable] FOREIGN KEY ([tid_StudentLanguage])
REFERENCES [t_edfi].[StudentLanguage] ([tid_StudentLanguage]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentLanguageUse] CHECK CONSTRAINT [FK_StudentLanguageUse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentLanguageUse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageUseType';
GO

/****** TABLE: [t_edfi].[StudentDisability] ******/

CREATE TABLE [t_edfi].[StudentDisability]
(
	[tid_StudentDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DisabilityDiagnosis] [NVARCHAR](80) NULL,
	[OrderOfDisability] [INT] NULL,
	[DisabilityDeterminationSourceType] [NVARCHAR](450) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentDisability] ADD CONSTRAINT [StudentDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentDisability] ADD CONSTRAINT [FK_StudentDisability_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentDisability] CHECK CONSTRAINT [FK_StudentDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The disability condition(s) that best describes an individual''s impairment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the disability diagnosis.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDiagnosis';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order by severity of student''s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'OrderOfDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDeterminationSourceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentProgramParticipation] ******/

CREATE TABLE [t_edfi].[StudentProgramParticipation]
(
	[tid_StudentProgramParticipation] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[BeginDate] [DATETIME] NULL,
	[EndDate] [DATETIME] NULL,
	[DesignatedBy] [NVARCHAR](60) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentProgramParticipation] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentProgramParticipation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentProgramParticipation] ADD CONSTRAINT [StudentProgramParticipation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentProgramParticipation] ADD CONSTRAINT [FK_StudentProgramParticipation_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentProgramParticipation] CHECK CONSTRAINT [FK_StudentProgramParticipation_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key programs the student is participating in or receives services from.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the Student was associated with the Program or service.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the Program participation ended.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the program association.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'DesignatedBy';
GO

/****** TABLE: [t_edfi].[StudentProgramParticipationProgramCharacteristic] ******/

CREATE TABLE [t_edfi].[StudentProgramParticipationProgramCharacteristic]
(
	[tid_StudentProgramParticipationProgramCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentProgramParticipation] [INT] NOT NULL,
	[ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentProgramParticipationProgramCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentProgramParticipationProgramCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentProgramParticipationProgramCharacteristic] ADD CONSTRAINT [StudentProgramParticipationProgramCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentProgramParticipationProgramCharacteristic] ADD CONSTRAINT [FK_StudentProgramParticipationProgramCharacteristic_ParentTable] FOREIGN KEY ([tid_StudentProgramParticipation])
REFERENCES [t_edfi].[StudentProgramParticipation] ([tid_StudentProgramParticipation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentProgramParticipationProgramCharacteristic] CHECK CONSTRAINT [FK_StudentProgramParticipationProgramCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipationProgramCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramParticipationProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramParticipationProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentLearningStyle] ******/

CREATE TABLE [t_edfi].[StudentLearningStyle]
(
	[tid_StudentLearningStyle] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[VisualLearning] [DECIMAL](5, 4) NOT NULL,
	[AuditoryLearning] [DECIMAL](5, 4) NOT NULL,
	[TactileLearning] [DECIMAL](5, 4) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentLearningStyle] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentLearningStyle] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentLearningStyle] ADD CONSTRAINT [StudentLearningStyle_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentLearningStyle] ADD CONSTRAINT [FK_StudentLearningStyle_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentLearningStyle] CHECK CONSTRAINT [FK_StudentLearningStyle_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference to visual, auditory, and tactile learning expressed as percentages.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentLearningStyle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to visual learning.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningStyle', @level2type=N'COLUMN', @level2name=N'VisualLearning';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to auditory learning.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningStyle', @level2type=N'COLUMN', @level2name=N'AuditoryLearning';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to kinesthetic or tactile learning.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningStyle', @level2type=N'COLUMN', @level2name=N'TactileLearning';
GO

/****** TABLE: [t_edfi].[StudentCohortYear] ******/

CREATE TABLE [t_edfi].[StudentCohortYear]
(
	[tid_StudentCohortYear] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[CohortYearType] [NVARCHAR](450) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCohortYear] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentCohortYear] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCohortYear] ADD CONSTRAINT [StudentCohortYear_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCohortYear] ADD CONSTRAINT [FK_StudentCohortYear_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCohortYear] CHECK CONSTRAINT [FK_StudentCohortYear_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCohortYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortYear', @level2type=N'COLUMN', @level2name=N'CohortYearType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the  school year for the Cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortYear', @level2type=N'COLUMN', @level2name=N'SchoolYear';
GO

/****** TABLE: [t_edfi].[StudentIndicator] ******/

CREATE TABLE [t_edfi].[StudentIndicator]
(
	[tid_StudentIndicator] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[IndicatorName] [NVARCHAR](60) NOT NULL,
	[IndicatorGroup] [NVARCHAR](60) NULL,
	[Indicator] [NVARCHAR](35) NOT NULL,
	[BeginDate] [DATETIME] NULL,
	[EndDate] [DATETIME] NULL,
	[DesignatedBy] [NVARCHAR](60) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentIndicator] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentIndicator] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentIndicator] ADD CONSTRAINT [StudentIndicator_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentIndicator] ADD CONSTRAINT [FK_StudentIndicator_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentIndicator] CHECK CONSTRAINT [FK_StudentIndicator_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the indicator or metric.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'IndicatorName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name for a group of indicators.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'IndicatorGroup';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the indicator or metric.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'Indicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date when the indicator was assigned or computed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the indicator or metric was sunset or removed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the program association.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'DesignatedBy';
GO

/****** TABLE: [t_edfi].[StudentIdentificationDocument] ******/

CREATE TABLE [t_edfi].[StudentIdentificationDocument]
(
	[tid_StudentIdentificationDocument] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Student] [INT] NOT NULL,
	[IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL,
	[PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL,
	[DocumentTitle] [NVARCHAR](60) NULL,
	[DocumentExpirationDate] [DATE] NULL,
	[IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentIdentificationDocument] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentIdentificationDocument] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentIdentificationDocument] ADD CONSTRAINT [StudentIdentificationDocument_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentIdentificationDocument] ADD CONSTRAINT [FK_StudentIdentificationDocument_ParentTable] FOREIGN KEY ([tid_Student])
REFERENCES [t_edfi].[Student] ([tid_Student]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentIdentificationDocument] CHECK CONSTRAINT [FK_StudentIdentificationDocument_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StudentAcademicRecord] ******/

CREATE TABLE [t_edfi].[StudentAcademicRecord]
(
    [tid_StudentAcademicRecord] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[CumulativeEarnedCredits] [DECIMAL](9, 2) NULL,
	[CumulativeEarnedCreditType] [NVARCHAR](450) NULL,
	[CumulativeEarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[CumulativeAttemptedCredits] [DECIMAL](9, 2) NULL,
	[CumulativeAttemptedCreditType] [NVARCHAR](450) NULL,
	[CumulativeAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[CumulativeGradePointsEarned] [DECIMAL](18, 4) NULL,
	[CumulativeGradePointAverage] [DECIMAL](18, 4) NULL,
	[GradeValueQualifier] [NVARCHAR](80) NULL,
	[ProjectedGraduationDate] [DATE] NULL,
	[SessionEarnedCredits] [DECIMAL](9, 2) NULL,
	[SessionEarnedCreditType] [NVARCHAR](450) NULL,
	[SessionEarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[SessionAttemptedCredits] [DECIMAL](9, 2) NULL,
	[SessionAttemptedCreditType] [NVARCHAR](450) NULL,
	[SessionAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[SessionGradePointsEarned] [DECIMAL](18, 4) NULL,
	[SessionGradePointAverage] [DECIMAL](18, 4) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAcademicRecord] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentAcademicRecord] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAcademicRecord] ADD CONSTRAINT [StudentAcademicRecord_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAcademicRecord] ADD CONSTRAINT [StudentAcademicRecord_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentAcademicRecord] ADD CONSTRAINT [StudentAcademicRecord_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the cumulative record of academic achievement for a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointsEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student''s Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'GradeValueQualifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month and year the student is projected to graduate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'ProjectedGraduationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of grade points an individual earned for this session.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointsEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentAcademicRecord_Id ON [t_edfi].[StudentAcademicRecord]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentAcademicRecordSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentAcademicRecordSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentAcademicRecord] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAcademicRecordSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentAcademicRecord], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_StudentAcademicRecordSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_StudentAcademicRecordSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_StudentAcademicRecordSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentAcademicRecord])
REFERENCES [t_edfi].[StudentAcademicRecord] ([tid_StudentAcademicRecord]);
ALTER TABLE [t_edfi].[StudentAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_StudentAcademicRecordSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentAcademicRecordClassRanking] ******/

CREATE TABLE [t_edfi].[StudentAcademicRecordClassRanking]
(
	[tid_StudentAcademicRecordClassRanking] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAcademicRecord] [INT] NOT NULL,
	[ClassRank] [INT] NOT NULL,
	[TotalNumberInClass] [INT] NOT NULL,
	[PercentageRanking] [INT] NULL,
	[ClassRankingDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAcademicRecordClassRanking] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAcademicRecordClassRanking] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAcademicRecordClassRanking] ADD CONSTRAINT [StudentAcademicRecordClassRanking_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAcademicRecordClassRanking] ADD CONSTRAINT [FK_StudentAcademicRecordClassRanking_ParentTable] FOREIGN KEY ([tid_StudentAcademicRecord])
REFERENCES [t_edfi].[StudentAcademicRecord] ([tid_StudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAcademicRecordClassRanking] CHECK CONSTRAINT [FK_StudentAcademicRecordClassRanking_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank information of a student in relation to his or her graduating class.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRank';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students in the student''s graduating class.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'TotalNumberInClass';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'PercentageRanking';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date class ranking was determined.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRankingDate';
GO

/****** TABLE: [t_edfi].[StudentAcademicRecordAcademicHonor] ******/

CREATE TABLE [t_edfi].[StudentAcademicRecordAcademicHonor]
(
	[tid_StudentAcademicRecordAcademicHonor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAcademicRecord] [INT] NOT NULL,
	[AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[HonorDescription] [NVARCHAR](80) NULL,
	[HonorAwardDate] [DATE] NULL,
	[HonorAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAcademicRecordAcademicHonor] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAcademicRecordAcademicHonor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAcademicRecordAcademicHonor] ADD CONSTRAINT [StudentAcademicRecordAcademicHonor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAcademicRecordAcademicHonor] ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_ParentTable] FOREIGN KEY ([tid_StudentAcademicRecord])
REFERENCES [t_edfi].[StudentAcademicRecord] ([tid_StudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAcademicRecordAcademicHonor] CHECK CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Academic distinctions earned by or awarded to the student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AcademicHonorCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the honor was awarded or earned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentAcademicRecordRecognition] ******/

CREATE TABLE [t_edfi].[StudentAcademicRecordRecognition]
(
	[tid_StudentAcademicRecordRecognition] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAcademicRecord] [INT] NOT NULL,
	[RecognitionType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[RecognitionDescription] [NVARCHAR](80) NULL,
	[RecognitionAwardDate] [DATE] NULL,
	[RecognitionAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAcademicRecordRecognition] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAcademicRecordRecognition] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAcademicRecordRecognition] ADD CONSTRAINT [StudentAcademicRecordRecognition_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAcademicRecordRecognition] ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_ParentTable] FOREIGN KEY ([tid_StudentAcademicRecord])
REFERENCES [t_edfi].[StudentAcademicRecord] ([tid_StudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAcademicRecordRecognition] CHECK CONSTRAINT [FK_StudentAcademicRecordRecognition_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the recognition was awarded or earned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentAcademicRecordDiploma] ******/

CREATE TABLE [t_edfi].[StudentAcademicRecordDiploma]
(
	[tid_StudentAcademicRecordDiploma] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAcademicRecord] [INT] NOT NULL,
	[DiplomaAwardDate] [DATE] NOT NULL,
	[DiplomaType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[DiplomaLevelType] [NVARCHAR](450) NULL,
	[CTECompleter] [BIT] NULL,
	[DiplomaDescription] [NVARCHAR](80) NULL,
	[DiplomaAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAcademicRecordDiploma] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAcademicRecordDiploma] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAcademicRecordDiploma] ADD CONSTRAINT [StudentAcademicRecordDiploma_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAcademicRecordDiploma] ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_ParentTable] FOREIGN KEY ([tid_StudentAcademicRecord])
REFERENCES [t_edfi].[StudentAcademicRecord] ([tid_StudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAcademicRecordDiploma] CHECK CONSTRAINT [FK_StudentAcademicRecordDiploma_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Diploma(s) earned by the student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the student met  graduation requirements and was awarded a diploma.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CTECompleter';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of diploma given to the student for accomplishments.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentAcademicRecordReportCard] ******/

CREATE TABLE [t_edfi].[StudentAcademicRecordReportCard]
(
	[tid_StudentAcademicRecordReportCard] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAcademicRecord] [INT] NOT NULL,
	[GradingPeriodBeginDate] [DATE] NOT NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAcademicRecordReportCard] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAcademicRecordReportCard] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAcademicRecordReportCard] ADD CONSTRAINT [StudentAcademicRecordReportCard_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAcademicRecordReportCard] ADD CONSTRAINT [FK_StudentAcademicRecordReportCard_ParentTable] FOREIGN KEY ([tid_StudentAcademicRecord])
REFERENCES [t_edfi].[StudentAcademicRecord] ([tid_StudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAcademicRecordReportCard] CHECK CONSTRAINT [FK_StudentAcademicRecordReportCard_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Report cards for the student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StudentAssessment] ******/

CREATE TABLE [t_edfi].[StudentAssessment]
(
    [tid_StudentAssessment] [INT] IDENTITY(1,1) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AdministrationDate] [DATE] NOT NULL,
	[AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[Version] [INT] NOT NULL,
	[AdministrationEndDate] [DATE] NULL,
	[SerialNumber] [NVARCHAR](60) NULL,
	[AdministrationLanguageDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AdministrationEnvironmentType] [NVARCHAR](450) NULL,
	[RetestIndicatorType] [NVARCHAR](450) NULL,
	[ReasonNotTestedType] [NVARCHAR](450) NULL,
	[WhenAssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[EventCircumstanceType] [NVARCHAR](450) NULL,
	[EventDescription] [NVARCHAR](1024) NULL,
	[WhenAssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AdministrationLanguageDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessment] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentAssessment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessment] ADD CONSTRAINT [StudentAssessment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessment] ADD CONSTRAINT [StudentAssessment_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentAssessment] ADD CONSTRAINT [StudentAssessment_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the analysis or scoring of a student''s response on an assessment. The analysis results in a value that represents a student''s performance on a set of items on a test.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'Version';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Assessment Administration End Date, if administered over multiple days.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationEndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique number for the assessment form or answer document.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'SerialNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationLanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'RetestIndicatorType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'ReasonNotTestedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'WhenAssessedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'EventCircumstanceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes special events that occur before during or after the assessment session that may impact use of results.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'EventDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'WhenAssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationLanguageDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentAssessment_Id ON [t_edfi].[StudentAssessment]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentAssessmentSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentAssessmentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentAssessment] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentAssessment], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentSnapshotRecord] ADD CONSTRAINT [FK_StudentAssessmentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentSnapshotRecord] CHECK CONSTRAINT [FK_StudentAssessmentSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentAssessmentSnapshotRecord] ADD CONSTRAINT [FK_StudentAssessmentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentAssessment])
REFERENCES [t_edfi].[StudentAssessment] ([tid_StudentAssessment]);
ALTER TABLE [t_edfi].[StudentAssessmentSnapshotRecord] CHECK CONSTRAINT [FK_StudentAssessmentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentAssessmentAccommodation] ******/

CREATE TABLE [t_edfi].[StudentAssessmentAccommodation]
(
	[tid_StudentAssessmentAccommodation] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAssessment] [INT] NOT NULL,
	[AccommodationDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AccommodationDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentAccommodation] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAssessmentAccommodation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentAccommodation] ADD CONSTRAINT [StudentAssessmentAccommodation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessmentAccommodation] ADD CONSTRAINT [FK_StudentAssessmentAccommodation_ParentTable] FOREIGN KEY ([tid_StudentAssessment])
REFERENCES [t_edfi].[StudentAssessment] ([tid_StudentAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentAccommodation] CHECK CONSTRAINT [FK_StudentAssessmentAccommodation_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examinationmeasures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:
        Braille
        Enlarged monitor view
        Extra time
        Large Print
        Setting
        Oral Administration
        ...', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'AccommodationDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'AccommodationDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentAssessmentScoreResult] ******/

CREATE TABLE [t_edfi].[StudentAssessmentScoreResult]
(
	[tid_StudentAssessmentScoreResult] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAssessment] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[Result] [NVARCHAR](35) NOT NULL,
	[ResultDatatypeType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentScoreResult] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAssessmentScoreResult] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentScoreResult] ADD CONSTRAINT [StudentAssessmentScoreResult_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentScoreResult_ParentTable] FOREIGN KEY ([tid_StudentAssessment])
REFERENCES [t_edfi].[StudentAssessment] ([tid_StudentAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentScoreResult] CHECK CONSTRAINT [FK_StudentAssessmentScoreResult_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'Result';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
GO

/****** TABLE: [t_edfi].[StudentAssessmentPerformanceLevel] ******/

CREATE TABLE [t_edfi].[StudentAssessmentPerformanceLevel]
(
	[tid_StudentAssessmentPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAssessment] [INT] NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceLevelMet] [BIT] NOT NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAssessmentPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentPerformanceLevel] ADD CONSTRAINT [StudentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_StudentAssessmentPerformanceLevel_ParentTable] FOREIGN KEY ([tid_StudentAssessment])
REFERENCES [t_edfi].[StudentAssessment] ([tid_StudentAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentPerformanceLevel] CHECK CONSTRAINT [FK_StudentAssessmentPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The performance level(s) achieved for the StudentAssessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional indicator of whether the performance level was met.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMet';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO

/****** TABLE: [t_edfi].[StudentAssessmentItem] ******/

CREATE TABLE [t_edfi].[StudentAssessmentItem]
(
	[tid_StudentAssessmentItem] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAssessment] [INT] NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[AssessmentResponse] [NVARCHAR](60) NULL,
	[DescriptiveFeedback] [NVARCHAR](1024) NULL,
	[ResponseIndicatorType] [NVARCHAR](450) NULL,
	[AssessmentItemResultType] [NVARCHAR](450) NOT NULL,
	[RawScoreResult] [INT] NULL,
	[TimeAssessed] [NVARCHAR](30) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentItem] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAssessmentItem] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentItem] ADD CONSTRAINT [StudentAssessmentItem_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessmentItem] ADD CONSTRAINT [FK_StudentAssessmentItem_ParentTable] FOREIGN KEY ([tid_StudentAssessment])
REFERENCES [t_edfi].[StudentAssessment] ([tid_StudentAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentItem] CHECK CONSTRAINT [FK_StudentAssessmentItem_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NEEDS DOCUMENTATION', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A student''s response to a stimulus on a test.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'DescriptiveFeedback';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'ResponseIndicatorType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentItemResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful raw score of the performance of an individual on an assessment item.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'RawScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The overall time a student actually spent during the AssessmentItem.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'TimeAssessed';
GO

/****** TABLE: [t_edfi].[StudentAssessmentStudentObjectiveAssessment] ******/

CREATE TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessment]
(
	[tid_StudentAssessmentStudentObjectiveAssessment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAssessment] [INT] NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentStudentObjectiveAssessment] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAssessmentStudentObjectiveAssessment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessment] ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessment] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_ParentTable] FOREIGN KEY ([tid_StudentAssessment])
REFERENCES [t_edfi].[StudentAssessment] ([tid_StudentAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessment] CHECK CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NEEDS DOCUMENTATION', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
GO

/****** TABLE: [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ******/

CREATE TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult]
(
	[tid_StudentAssessmentStudentObjectiveAssessmentScoreResult] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAssessmentStudentObjectiveAssessment] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[Result] [NVARCHAR](35) NOT NULL,
	[ResultDatatypeType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentStudentObjectiveAssessmentScoreResult] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAssessmentStudentObjectiveAssessmentScoreResult] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentScoreResult_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ParentTable] FOREIGN KEY ([tid_StudentAssessmentStudentObjectiveAssessment])
REFERENCES [t_edfi].[StudentAssessmentStudentObjectiveAssessment] ([tid_StudentAssessmentStudentObjectiveAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] CHECK CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'Result';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
GO

/****** TABLE: [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ******/

CREATE TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel]
(
	[tid_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentAssessmentStudentObjectiveAssessment] [INT] NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceLevelMet] [BIT] NOT NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_ParentTable] FOREIGN KEY ([tid_StudentAssessmentStudentObjectiveAssessment])
REFERENCES [t_edfi].[StudentAssessmentStudentObjectiveAssessment] ([tid_StudentAssessmentStudentObjectiveAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] CHECK CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The PerformanceLevel(s) achieved for the ObjectiveAssessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional indicator of whether the performance level was met.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMet';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StudentCharacteristicDescriptor] ******/

CREATE TABLE [t_edfi].[StudentCharacteristicDescriptor]
(
    [tid_StudentCharacteristicDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[StudentCharacteristicType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCharacteristicDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentCharacteristicDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCharacteristicDescriptor] ADD CONSTRAINT [StudentCharacteristicDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCharacteristicDescriptor] ADD CONSTRAINT [StudentCharacteristicDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentCharacteristicDescriptor] ADD CONSTRAINT [StudentCharacteristicDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the set of important characteristics of the student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentCharacteristicDescriptor_Id ON [t_edfi].[StudentCharacteristicDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentCharacteristicDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCharacteristicDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentCharacteristicDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StudentCharacteristicDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StudentCharacteristicDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StudentCharacteristicDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentCharacteristicDescriptor])
REFERENCES [t_edfi].[StudentCharacteristicDescriptor] ([tid_StudentCharacteristicDescriptor]);
ALTER TABLE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StudentCharacteristicDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentCharacteristicType] ******/

CREATE TABLE [t_edfi].[StudentCharacteristicType]
(
	[tid_StudentCharacteristicType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_StudentCharacteristicType] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentCharacteristicType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCharacteristicType] ADD CONSTRAINT [StudentCharacteristicType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCharacteristicType] ADD CONSTRAINT [StudentCharacteristicType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentCharacteristicType] ADD CONSTRAINT [StudentCharacteristicType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumeration items for the important characteristics of the student''s home situation: Displaced Homemaker, Homeless, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StudentCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StudentCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[StudentCohortAssociation] ******/

CREATE TABLE [t_edfi].[StudentCohortAssociation]
(
    [tid_StudentCohortAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[CohortIdentifier] [NVARCHAR](20) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCohortAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentCohortAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCohortAssociation] ADD CONSTRAINT [StudentCohortAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCohortAssociation] ADD CONSTRAINT [StudentCohortAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentCohortAssociation] ADD CONSTRAINT [StudentCohortAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the Cohort(s) for which a student is designated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student was first identified as part of the Cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'CohortIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student was removed as part of the Cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentCohortAssociation_Id ON [t_edfi].[StudentCohortAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentCohortAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentCohortAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentCohortAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCohortAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentCohortAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCohortAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentCohortAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCohortAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentCohortAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentCohortAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentCohortAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentCohortAssociation])
REFERENCES [t_edfi].[StudentCohortAssociation] ([tid_StudentCohortAssociation]);
ALTER TABLE [t_edfi].[StudentCohortAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentCohortAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentCohortAssociationSection] ******/

CREATE TABLE [t_edfi].[StudentCohortAssociationSection]
(
	[tid_StudentCohortAssociationSection] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentCohortAssociation] [INT] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCohortAssociationSection] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentCohortAssociationSection] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCohortAssociationSection] ADD CONSTRAINT [StudentCohortAssociationSection_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCohortAssociationSection] ADD CONSTRAINT [FK_StudentCohortAssociationSection_ParentTable] FOREIGN KEY ([tid_StudentCohortAssociation])
REFERENCES [t_edfi].[StudentCohortAssociation] ([tid_StudentCohortAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCohortAssociationSection] CHECK CONSTRAINT [FK_StudentCohortAssociationSection_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Cohort representing the subdivision of students within one or more sections. For example, a group of students may be given additional instruction and tracked as a cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StudentCompetencyObjective] ******/

CREATE TABLE [t_edfi].[StudentCompetencyObjective]
(
    [tid_StudentCompetencyObjective] [INT] IDENTITY(1,1) NOT NULL,
	[GradingPeriodBeginDate] [DATE] NOT NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveEducationOrganizationId] [INT] NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DiagnosticStatement] [NVARCHAR](1024) NULL,
	[UniqueSectionCode] [NVARCHAR](255) NULL,
	[SequenceOfCourse] [INT] NULL,
	[LocalCourseCode] [NVARCHAR](60) NULL,
	[SchoolYear] [SMALLINT] NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NULL,
	[ClassPeriodName] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[ProgramEducationOrganizationId] [INT] NULL,
	[ProgramName] [NVARCHAR](60) NULL,
	[ProgramType] [NVARCHAR](450) NULL,
	[EducationOrganizationId] [INT] NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCompetencyObjective] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentCompetencyObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCompetencyObjective] ADD CONSTRAINT [StudentCompetencyObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCompetencyObjective] ADD CONSTRAINT [StudentCompetencyObjective_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentCompetencyObjective] ADD CONSTRAINT [StudentCompetencyObjective_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the competency assessed or evaluated for the student against a specific learning  objective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentCompetencyObjective_Id ON [t_edfi].[StudentCompetencyObjective]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentCompetencyObjectiveSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentCompetencyObjective] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCompetencyObjectiveSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentCompetencyObjective], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord] ADD CONSTRAINT [FK_StudentCompetencyObjectiveSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_StudentCompetencyObjectiveSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord] ADD CONSTRAINT [FK_StudentCompetencyObjectiveSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentCompetencyObjective])
REFERENCES [t_edfi].[StudentCompetencyObjective] ([tid_StudentCompetencyObjective]);
ALTER TABLE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_StudentCompetencyObjectiveSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentCTEProgramAssociation] ******/

CREATE TABLE [t_edfi].[StudentCTEProgramAssociation]
(
    [tid_StudentCTEProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCTEProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentCTEProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCTEProgramAssociation] ADD CONSTRAINT [StudentCTEProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCTEProgramAssociation] ADD CONSTRAINT [StudentCTEProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentCTEProgramAssociation] ADD CONSTRAINT [StudentCTEProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the career and technical education (CTE) program that a student participates in. The association is an extension of the StudentProgramAssociation particular for CTE programs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentCTEProgramAssociation_Id ON [t_edfi].[StudentCTEProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentCTEProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentCTEProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCTEProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentCTEProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentCTEProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentCTEProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentCTEProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentCTEProgramAssociation])
REFERENCES [t_edfi].[StudentCTEProgramAssociation] ([tid_StudentCTEProgramAssociation]);
ALTER TABLE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentCTEProgramAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentCTEProgramAssociationCTEProgram] ******/

CREATE TABLE [t_edfi].[StudentCTEProgramAssociationCTEProgram]
(
	[tid_StudentCTEProgramAssociationCTEProgram] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentCTEProgramAssociation] [INT] NOT NULL,
	[CareerPathwayType] [NVARCHAR](450) NOT NULL,
	[CIPCode] [NVARCHAR](120) NULL,
	[PrimaryCTEProgramIndicator] [BIT] NULL,
	[CTEProgramCompletionIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentCTEProgramAssociationCTEProgram] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentCTEProgramAssociationCTEProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentCTEProgramAssociationCTEProgram] ADD CONSTRAINT [StudentCTEProgramAssociationCTEProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentCTEProgramAssociationCTEProgram] ADD CONSTRAINT [FK_StudentCTEProgramAssociationCTEProgram_ParentTable] FOREIGN KEY ([tid_StudentCTEProgramAssociation])
REFERENCES [t_edfi].[StudentCTEProgramAssociation] ([tid_StudentCTEProgramAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentCTEProgramAssociationCTEProgram] CHECK CONSTRAINT [FK_StudentCTEProgramAssociationCTEProgram_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The career cluster representing the career path of the Vocational/Career Tech concentrator.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'CareerPathwayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number and description of the CIP Code associated with the student''s CTEProgram.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'CIPCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A boolean indicator of whether this CTEProgram, is the student''s primary CTEProgram.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'PrimaryCTEProgramIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A boolean indicator of whether the Student has completed the CTEProgram.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'CTEProgramCompletionIndicator';
GO
/****** TABLE: [t_edfi].[StudentDisciplineIncidentAssociation] ******/

CREATE TABLE [t_edfi].[StudentDisciplineIncidentAssociation]
(
    [tid_StudentDisciplineIncidentAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[IncidentIdentifier] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[StudentParticipationCodeType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentDisciplineIncidentAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentDisciplineIncidentAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [StudentDisciplineIncidentAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [StudentDisciplineIncidentAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [StudentDisciplineIncidentAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates those students who were victims, perpetrators, witnesses, and reporters for a discipline incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'StudentParticipationCodeType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentDisciplineIncidentAssociation_Id ON [t_edfi].[StudentDisciplineIncidentAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentDisciplineIncidentAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentDisciplineIncidentAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentDisciplineIncidentAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentDisciplineIncidentAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentDisciplineIncidentAssociation])
REFERENCES [t_edfi].[StudentDisciplineIncidentAssociation] ([tid_StudentDisciplineIncidentAssociation]);
ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentDisciplineIncidentAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentDisciplineIncidentAssociationBehavior] ******/

CREATE TABLE [t_edfi].[StudentDisciplineIncidentAssociationBehavior]
(
	[tid_StudentDisciplineIncidentAssociationBehavior] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentDisciplineIncidentAssociation] [INT] NOT NULL,
	[BehaviorDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BehaviorDetailedDescription] [NVARCHAR](1024) NULL,
	[BehaviorDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentDisciplineIncidentAssociationBehavior] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentDisciplineIncidentAssociationBehavior] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociationBehavior] ADD CONSTRAINT [StudentDisciplineIncidentAssociationBehavior_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociationBehavior] ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociationBehavior_ParentTable] FOREIGN KEY ([tid_StudentDisciplineIncidentAssociation])
REFERENCES [t_edfi].[StudentDisciplineIncidentAssociation] ([tid_StudentDisciplineIncidentAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentDisciplineIncidentAssociationBehavior] CHECK CONSTRAINT [FK_StudentDisciplineIncidentAssociationBehavior_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes behavior by category and provides a detailed description.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociationBehavior';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies a more granular level of detail of a behavior involved in the incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDetailedDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StudentEducationOrganizationAssociation] ******/

CREATE TABLE [t_edfi].[StudentEducationOrganizationAssociation]
(
    [tid_StudentEducationOrganizationAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ResponsibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[ResponsibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentEducationOrganizationAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentEducationOrganizationAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [StudentEducationOrganizationAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [StudentEducationOrganizationAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [StudentEducationOrganizationAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates any relationship between a student and an education organization other than how the state views enrollment. Enrollment relationship semantics are covered by StudentSchoolAssociation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentEducationOrganizationAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'ResponsibilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'ResponsibilityDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentEducationOrganizationAssociation_Id ON [t_edfi].[StudentEducationOrganizationAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentEducationOrganizationAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentEducationOrganizationAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentEducationOrganizationAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentEducationOrganizationAssociation])
REFERENCES [t_edfi].[StudentEducationOrganizationAssociation] ([tid_StudentEducationOrganizationAssociation]);
ALTER TABLE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentGradebookEntry] ******/

CREATE TABLE [t_edfi].[StudentGradebookEntry]
(
    [tid_StudentGradebookEntry] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[DateAssigned] [DATE] NOT NULL,
	[GradebookEntryTitle] [NVARCHAR](60) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[DateFulfilled] [DATE] NULL,
	[LetterGradeEarned] [NVARCHAR](20) NULL,
	[NumericGradeEarned] [DECIMAL](9, 2) NULL,
	[CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[DiagnosticStatement] [NVARCHAR](1024) NULL,
	[CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentGradebookEntry] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentGradebookEntry] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentGradebookEntry] ADD CONSTRAINT [StudentGradebookEntry_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentGradebookEntry] ADD CONSTRAINT [StudentGradebookEntry_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentGradebookEntry] ADD CONSTRAINT [StudentGradebookEntry_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity holds a student''s grade or competency level for a gradebook entry.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the assignment, homework, or assessment was assigned or executed.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'DateAssigned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or title of the activity to be recorded in the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'GradebookEntryTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date an assignment was turned in or the date of an assessment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'DateFulfilled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'LetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'NumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentGradebookEntry_Id ON [t_edfi].[StudentGradebookEntry]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentGradebookEntrySnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentGradebookEntrySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentGradebookEntry] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentGradebookEntrySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentGradebookEntry], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentGradebookEntrySnapshotRecord] ADD CONSTRAINT [FK_StudentGradebookEntrySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentGradebookEntrySnapshotRecord] CHECK CONSTRAINT [FK_StudentGradebookEntrySnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentGradebookEntrySnapshotRecord] ADD CONSTRAINT [FK_StudentGradebookEntrySnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentGradebookEntry])
REFERENCES [t_edfi].[StudentGradebookEntry] ([tid_StudentGradebookEntry]);
ALTER TABLE [t_edfi].[StudentGradebookEntrySnapshotRecord] CHECK CONSTRAINT [FK_StudentGradebookEntrySnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[StudentGradebookEntryExtension] ******/

CREATE TABLE [t_extension].[StudentGradebookEntryExtension]
(
	[tid_StudentGradebookEntryExtension] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentGradebookEntry] [INT] NOT NULL,
	[DateCompleted] [DATE] NULL,
	[AssignmentPassed] [BIT] NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentGradebookEntryExtension] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentGradebookEntryExtension] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StudentGradebookEntryExtension] ADD CONSTRAINT [FK_StudentGradebookEntryExtension_ParentTable] FOREIGN KEY ([tid_StudentGradebookEntry])
REFERENCES [t_edfi].[StudentGradebookEntry] ([tid_StudentGradebookEntry]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StudentGradebookEntryExtension] CHECK CONSTRAINT [FK_StudentGradebookEntryExtension_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StudentGradebookEntryExtension';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date that the assignment was completed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGradebookEntryExtension', @level2type=N'COLUMN', @level2name=N'DateCompleted';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indication of whether the assignment was passed or not.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGradebookEntryExtension', @level2type=N'COLUMN', @level2name=N'AssignmentPassed';
GO
/****** TABLE: [t_edfi].[StudentIdentificationSystemDescriptor] ******/

CREATE TABLE [t_edfi].[StudentIdentificationSystemDescriptor]
(
    [tid_StudentIdentificationSystemDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[StudentIdentificationSystemType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentIdentificationSystemDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentIdentificationSystemDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentIdentificationSystemDescriptor] ADD CONSTRAINT [StudentIdentificationSystemDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentIdentificationSystemDescriptor] ADD CONSTRAINT [StudentIdentificationSystemDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentIdentificationSystemDescriptor] ADD CONSTRAINT [StudentIdentificationSystemDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the originating record system and code that is used for record-keeping purposes of the student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentIdentificationSystemDescriptor_Id ON [t_edfi].[StudentIdentificationSystemDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentIdentificationSystemDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentIdentificationSystemDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentIdentificationSystemDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StudentIdentificationSystemDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StudentIdentificationSystemDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StudentIdentificationSystemDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentIdentificationSystemDescriptor])
REFERENCES [t_edfi].[StudentIdentificationSystemDescriptor] ([tid_StudentIdentificationSystemDescriptor]);
ALTER TABLE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StudentIdentificationSystemDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentIdentificationSystemType] ******/

CREATE TABLE [t_edfi].[StudentIdentificationSystemType]
(
	[tid_StudentIdentificationSystemType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_StudentIdentificationSystemType] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentIdentificationSystemType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentIdentificationSystemType] ADD CONSTRAINT [StudentIdentificationSystemType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentIdentificationSystemType] ADD CONSTRAINT [StudentIdentificationSystemType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentIdentificationSystemType] ADD CONSTRAINT [StudentIdentificationSystemType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StudentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StudentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[StudentInterventionAssociation] ******/

CREATE TABLE [t_edfi].[StudentInterventionAssociation]
(
    [tid_StudentInterventionAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[CohortIdentifier] [NVARCHAR](20) NULL,
	[CohortEducationOrganizationId] [INT] NULL,
	[DiagnosticStatement] [NVARCHAR](1024) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentInterventionAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentInterventionAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentInterventionAssociation] ADD CONSTRAINT [StudentInterventionAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentInterventionAssociation] ADD CONSTRAINT [StudentInterventionAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentInterventionAssociation] ADD CONSTRAINT [StudentInterventionAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the students participating in an intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'CohortIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'CohortEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentInterventionAssociation_Id ON [t_edfi].[StudentInterventionAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentInterventionAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentInterventionAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentInterventionAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentInterventionAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentInterventionAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentInterventionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentInterventionAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentInterventionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentInterventionAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentInterventionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentInterventionAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentInterventionAssociation])
REFERENCES [t_edfi].[StudentInterventionAssociation] ([tid_StudentInterventionAssociation]);
ALTER TABLE [t_edfi].[StudentInterventionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentInterventionAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentInterventionAssociationInterventionEffectiveness] ******/

CREATE TABLE [t_edfi].[StudentInterventionAssociationInterventionEffectiveness]
(
	[tid_StudentInterventionAssociationInterventionEffectiveness] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentInterventionAssociation] [INT] NOT NULL,
	[DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PopulationServedType] [NVARCHAR](450) NOT NULL,
	[ImprovementIndex] [INT] NULL,
	[InterventionEffectivenessRatingType] [NVARCHAR](450) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentInterventionAssociationInterventionEffectiveness] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentInterventionAssociationInterventionEffectiveness] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [StudentInterventionAssociationInterventionEffectiveness_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_ParentTable] FOREIGN KEY ([tid_StudentInterventionAssociation])
REFERENCES [t_edfi].[StudentInterventionAssociation] ([tid_StudentInterventionAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentInterventionAssociationInterventionEffectiveness] CHECK CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'PopulationServedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Along a percentile distribution of students, the improvement index represents the change in an average student''s percentile rank that is considered to be due to the intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'ImprovementIndex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'InterventionEffectivenessRatingType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StudentInterventionAttendanceEvent] ******/

CREATE TABLE [t_edfi].[StudentInterventionAttendanceEvent]
(
    [tid_StudentInterventionAttendanceEvent] [INT] IDENTITY(1,1) NOT NULL,
	[AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[AttendanceEventReason] [NVARCHAR](40) NULL,
	[EducationalEnvironmentType] [NVARCHAR](450) NULL,
	[AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentInterventionAttendanceEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentInterventionAttendanceEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [StudentInterventionAttendanceEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [StudentInterventionAttendanceEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [StudentInterventionAttendanceEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance for an intervention service.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentInterventionAttendanceEvent_Id ON [t_edfi].[StudentInterventionAttendanceEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentInterventionAttendanceEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentInterventionAttendanceEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentInterventionAttendanceEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentInterventionAttendanceEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentInterventionAttendanceEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentInterventionAttendanceEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentInterventionAttendanceEvent])
REFERENCES [t_edfi].[StudentInterventionAttendanceEvent] ([tid_StudentInterventionAttendanceEvent]);
ALTER TABLE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentInterventionAttendanceEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentLearningObjective] ******/

CREATE TABLE [t_edfi].[StudentLearningObjective]
(
    [tid_StudentLearningObjective] [INT] IDENTITY(1,1) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradingPeriodBeginDate] [DATE] NOT NULL,
	[GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Objective] [NVARCHAR](60) NOT NULL,
	[ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DiagnosticStatement] [NVARCHAR](1024) NULL,
	[UniqueSectionCode] [NVARCHAR](255) NULL,
	[SequenceOfCourse] [INT] NULL,
	[LocalCourseCode] [NVARCHAR](60) NULL,
	[SchoolYear] [SMALLINT] NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NULL,
	[ClassPeriodName] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[ProgramEducationOrganizationId] [INT] NULL,
	[ProgramName] [NVARCHAR](60) NULL,
	[ProgramType] [NVARCHAR](450) NULL,
	[EducationOrganizationId] [INT] NULL,
	[StudentSectionAssociationBeginDate] [DATE] NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentLearningObjective] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentLearningObjective] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentLearningObjective] ADD CONSTRAINT [StudentLearningObjective_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentLearningObjective] ADD CONSTRAINT [StudentLearningObjective_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentLearningObjective] ADD CONSTRAINT [StudentLearningObjective_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the competency assessed or evaluated for the student against a specific LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'StudentSectionAssociationBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentLearningObjective_Id ON [t_edfi].[StudentLearningObjective]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentLearningObjectiveSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentLearningObjectiveSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentLearningObjective] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentLearningObjectiveSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentLearningObjective], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentLearningObjectiveSnapshotRecord] ADD CONSTRAINT [FK_StudentLearningObjectiveSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentLearningObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_StudentLearningObjectiveSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentLearningObjectiveSnapshotRecord] ADD CONSTRAINT [FK_StudentLearningObjectiveSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentLearningObjective])
REFERENCES [t_edfi].[StudentLearningObjective] ([tid_StudentLearningObjective]);
ALTER TABLE [t_edfi].[StudentLearningObjectiveSnapshotRecord] CHECK CONSTRAINT [FK_StudentLearningObjectiveSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentMigrantEducationProgramAssociation] ******/

CREATE TABLE [t_edfi].[StudentMigrantEducationProgramAssociation]
(
    [tid_StudentMigrantEducationProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[PriorityForServices] [BIT] NOT NULL,
	[LastQualifyingMove] [DATE] NOT NULL,
	[ContinuationOfServicesReasonDescriptorCodeValue] [NVARCHAR](50) NULL,
	[USInitialEntry] [DATE] NULL,
	[USMostRecentEntry] [DATE] NULL,
	[USInitialSchoolEntry] [DATE] NULL,
	[ContinuationOfServicesReasonDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentMigrantEducationProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentMigrantEducationProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentMigrantEducationProgramAssociation] ADD CONSTRAINT [StudentMigrantEducationProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentMigrantEducationProgramAssociation] ADD CONSTRAINT [StudentMigrantEducationProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentMigrantEducationProgramAssociation] ADD CONSTRAINT [StudentMigrantEducationProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the migrant education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation with added elements particular to migrant education programs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Report migratory children who are classified as having "priority for services" because they are failing, or most at risk of failing to meet the State''s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'PriorityForServices';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the last qualifying move occurred; used to compute MEP status.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'LastQualifyingMove';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ContinuationOfServicesReasonDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first entered the U.S.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'USInitialEntry';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the Student''s most recent entry into the U.S.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'USMostRecentEntry';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first entered a U.S. school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'USInitialSchoolEntry';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ContinuationOfServicesReasonDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentMigrantEducationProgramAssociation_Id ON [t_edfi].[StudentMigrantEducationProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentMigrantEducationProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentMigrantEducationProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentMigrantEducationProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentMigrantEducationProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentMigrantEducationProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentMigrantEducationProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentMigrantEducationProgramAssociation])
REFERENCES [t_edfi].[StudentMigrantEducationProgramAssociation] ([tid_StudentMigrantEducationProgramAssociation]);
ALTER TABLE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentMigrantEducationProgramAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentParentAssociation] ******/

CREATE TABLE [t_edfi].[StudentParentAssociation]
(
    [tid_StudentParentAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[ParentUniqueId] [NVARCHAR](32) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[RelationType] [NVARCHAR](450) NULL,
	[PrimaryContactStatus] [BIT] NULL,
	[LivesWith] [BIT] NULL,
	[EmergencyContactStatus] [BIT] NULL,
	[ContactPriority] [INT] NULL,
	[ContactRestrictions] [NVARCHAR](250) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentParentAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentParentAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentParentAssociation] ADD CONSTRAINT [StudentParentAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentParentAssociation] ADD CONSTRAINT [StudentParentAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentParentAssociation] ADD CONSTRAINT [StudentParentAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association relates students to their parents, guardians, or caretakers.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'ParentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'RelationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the person is a primary parental contact for the Student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'PrimaryContactStatus';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the Student lives with the associated parent.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'LivesWith';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the person is a designated emergency contact for the Student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'EmergencyContactStatus';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numeric order of the preferred sequence or priority of contact.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'ContactPriority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'ContactRestrictions';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentParentAssociation_Id ON [t_edfi].[StudentParentAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentParentAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentParentAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentParentAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentParentAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentParentAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentParentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentParentAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentParentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentParentAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentParentAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentParentAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentParentAssociation])
REFERENCES [t_edfi].[StudentParentAssociation] ([tid_StudentParentAssociation]);
ALTER TABLE [t_edfi].[StudentParentAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentParentAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentParticipationCodeType] ******/

CREATE TABLE [t_edfi].[StudentParticipationCodeType]
(
    [tid_StudentParticipationCodeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_StudentParticipationCodeType] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentParticipationCodeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentParticipationCodeType] ADD CONSTRAINT [StudentParticipationCodeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentParticipationCodeType] ADD CONSTRAINT [StudentParticipationCodeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentParticipationCodeType] ADD CONSTRAINT [StudentParticipationCodeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The role or type of participation of a student in a discipline incident; for example: Victim, Perpetrator, Witness, Reporter.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentParticipationCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParticipationCodeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StudentParticipationCode type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParticipationCodeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StudentParticipationCode type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentParticipationCodeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[StudentProgramAssociation] ******/

CREATE TABLE [t_edfi].[StudentProgramAssociation]
(
    [tid_StudentProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[EndDate] [DATE] NULL,
	[ReasonExitedDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ServedOutsideOfRegularSession] [BIT] NULL,
	[ReasonExitedDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentProgramAssociation] ADD CONSTRAINT [StudentProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentProgramAssociation] ADD CONSTRAINT [StudentProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentProgramAssociation] ADD CONSTRAINT [StudentProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the Program(s) that a student participates in or is served by.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student exited the Program or stopped receiving services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ReasonExitedDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether the Student received services during the summer session or between sessions.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ServedOutsideOfRegularSession';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ReasonExitedDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentProgramAssociation_Id ON [t_edfi].[StudentProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentProgramAssociation])
REFERENCES [t_edfi].[StudentProgramAssociation] ([tid_StudentProgramAssociation]);
ALTER TABLE [t_edfi].[StudentProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentProgramAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentProgramAssociationService] ******/

CREATE TABLE [t_edfi].[StudentProgramAssociationService]
(
	[tid_StudentProgramAssociationService] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentProgramAssociation] [INT] NOT NULL,
	[ServiceDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PrimaryIndicator] [BIT] NULL,
	[ServiceBeginDate] [DATE] NULL,
	[ServiceEndDate] [DATE] NULL,
	[ServiceDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentProgramAssociationService] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentProgramAssociationService] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentProgramAssociationService] ADD CONSTRAINT [StudentProgramAssociationService_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentProgramAssociationService] ADD CONSTRAINT [FK_StudentProgramAssociationService_ParentTable] FOREIGN KEY ([tid_StudentProgramAssociation])
REFERENCES [t_edfi].[StudentProgramAssociation] ([tid_StudentProgramAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentProgramAssociationService] CHECK CONSTRAINT [FK_StudentProgramAssociationService_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the Service(s) being provided to the Student by the Program.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ServiceDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'True if service is a primary service.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'PrimaryIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'First date the Student was in this option for the current school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ServiceBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Last date the Student was in this option for the current school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ServiceEndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ServiceDescriptorNamespace';
GO
/****** TABLE: [t_edfi].[StudentProgramAttendanceEvent] ******/

CREATE TABLE [t_edfi].[StudentProgramAttendanceEvent]
(
    [tid_StudentProgramAttendanceEvent] [INT] IDENTITY(1,1) NOT NULL,
	[AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[AttendanceEventReason] [NVARCHAR](40) NULL,
	[EducationalEnvironmentType] [NVARCHAR](450) NULL,
	[AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentProgramAttendanceEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentProgramAttendanceEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [StudentProgramAttendanceEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [StudentProgramAttendanceEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [StudentProgramAttendanceEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance to receive or participate in program services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentProgramAttendanceEvent_Id ON [t_edfi].[StudentProgramAttendanceEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentProgramAttendanceEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentProgramAttendanceEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentProgramAttendanceEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentProgramAttendanceEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentProgramAttendanceEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentProgramAttendanceEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentProgramAttendanceEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentProgramAttendanceEvent])
REFERENCES [t_edfi].[StudentProgramAttendanceEvent] ([tid_StudentProgramAttendanceEvent]);
ALTER TABLE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentProgramAttendanceEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentSchoolAssociation] ******/

CREATE TABLE [t_edfi].[StudentSchoolAssociation]
(
    [tid_StudentSchoolAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EntryDate] [DATE] NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[PrimarySchool] [BIT] NULL,
	[SchoolYear] [SMALLINT] NULL,
	[EntryGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[EntryGradeLevelReasonType] [NVARCHAR](450) NULL,
	[EntryTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[RepeatGradeIndicator] [BIT] NULL,
	[ClassOfSchoolYear] [SMALLINT] NULL,
	[SchoolChoiceTransfer] [BIT] NULL,
	[ExitWithdrawDate] [DATE] NULL,
	[ExitWithdrawTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ResidencyStatusDescriptorCodeValue] [NVARCHAR](50) NULL,
	[GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[EducationOrganizationId] [INT] NULL,
	[GraduationSchoolYear] [SMALLINT] NULL,
	[EmployedWhileEnrolled] [BIT] NULL,
	[GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[ResidencyStatusDescriptorNamespace] [NVARCHAR](255) NULL,
	[ExitWithdrawTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[EntryTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[EntryGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSchoolAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentSchoolAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSchoolAssociation] ADD CONSTRAINT [StudentSchoolAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentSchoolAssociation] ADD CONSTRAINT [StudentSchoolAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentSchoolAssociation] ADD CONSTRAINT [StudentSchoolAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual enters and begins to receive instructional services in a school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates if a given enrollment record should be considered the primary record for a student. If omitted, the default is true.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'PrimarySchool';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year associated with the student''s enrollment.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryGradeLevelReasonType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'RepeatGradeIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Projected High School graduation year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ClassOfSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolChoiceTransfer';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the first day after the date of an individual''s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ResidencyStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EmployedWhileEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ResidencyStatusDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryGradeLevelDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentSchoolAssociation_Id ON [t_edfi].[StudentSchoolAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentSchoolAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentSchoolAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentSchoolAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSchoolAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentSchoolAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSchoolAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentSchoolAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSchoolAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentSchoolAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentSchoolAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentSchoolAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentSchoolAssociation])
REFERENCES [t_edfi].[StudentSchoolAssociation] ([tid_StudentSchoolAssociation]);
ALTER TABLE [t_edfi].[StudentSchoolAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentSchoolAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentSchoolAssociationEducationPlan] ******/

CREATE TABLE [t_edfi].[StudentSchoolAssociationEducationPlan]
(
	[tid_StudentSchoolAssociationEducationPlan] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentSchoolAssociation] [INT] NOT NULL,
	[EducationPlanType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSchoolAssociationEducationPlan] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentSchoolAssociationEducationPlan] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSchoolAssociationEducationPlan] ADD CONSTRAINT [StudentSchoolAssociationEducationPlan_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentSchoolAssociationEducationPlan] ADD CONSTRAINT [FK_StudentSchoolAssociationEducationPlan_ParentTable] FOREIGN KEY ([tid_StudentSchoolAssociation])
REFERENCES [t_edfi].[StudentSchoolAssociation] ([tid_StudentSchoolAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSchoolAssociationEducationPlan] CHECK CONSTRAINT [FK_StudentSchoolAssociationEducationPlan_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of EducationPlan(s) the student is following, if appropriate. For example:
        Special education IEP
        Vocational.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociationEducationPlan';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAssociationEducationPlan', @level2type=N'COLUMN', @level2name=N'EducationPlanType';
GO
/****** TABLE: [t_edfi].[StudentSchoolAttendanceEvent] ******/

CREATE TABLE [t_edfi].[StudentSchoolAttendanceEvent]
(
    [tid_StudentSchoolAttendanceEvent] [INT] IDENTITY(1,1) NOT NULL,
	[AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AttendanceEventReason] [NVARCHAR](40) NULL,
	[EducationalEnvironmentType] [NVARCHAR](450) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSchoolAttendanceEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentSchoolAttendanceEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [StudentSchoolAttendanceEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [StudentSchoolAttendanceEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [StudentSchoolAttendanceEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance for a school day.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentSchoolAttendanceEvent_Id ON [t_edfi].[StudentSchoolAttendanceEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentSchoolAttendanceEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSchoolAttendanceEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentSchoolAttendanceEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentSchoolAttendanceEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentSchoolAttendanceEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentSchoolAttendanceEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentSchoolAttendanceEvent])
REFERENCES [t_edfi].[StudentSchoolAttendanceEvent] ([tid_StudentSchoolAttendanceEvent]);
ALTER TABLE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentSchoolAttendanceEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentSectionAssociation] ******/

CREATE TABLE [t_edfi].[StudentSectionAssociation]
(
    [tid_StudentSectionAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[EndDate] [DATE] NULL,
	[HomeroomIndicator] [BIT] NULL,
	[RepeatIdentifierType] [NVARCHAR](450) NULL,
	[TeacherStudentDataLinkExclusion] [BIT] NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSectionAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentSectionAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSectionAssociation] ADD CONSTRAINT [StudentSectionAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentSectionAssociation] ADD CONSTRAINT [StudentSectionAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentSectionAssociation] ADD CONSTRAINT [StudentSectionAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the course sections to which a student is assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the withdrawal or exit of the Student from the Section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the Section is the student''s homeroom. Homeroom period may the convention for taking daily attendance.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'HomeroomIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'RepeatIdentifierType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'TeacherStudentDataLinkExclusion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentSectionAssociation_Id ON [t_edfi].[StudentSectionAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentSectionAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentSectionAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentSectionAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSectionAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentSectionAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentSectionAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentSectionAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentSectionAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentSectionAssociation])
REFERENCES [t_edfi].[StudentSectionAssociation] ([tid_StudentSectionAssociation]);
ALTER TABLE [t_edfi].[StudentSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentSectionAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentSectionAttendanceEvent] ******/

CREATE TABLE [t_edfi].[StudentSectionAttendanceEvent]
(
    [tid_StudentSectionAttendanceEvent] [INT] IDENTITY(1,1) NOT NULL,
	[AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[AttendanceEventReason] [NVARCHAR](40) NULL,
	[EducationalEnvironmentType] [NVARCHAR](450) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSectionAttendanceEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentSectionAttendanceEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [StudentSectionAttendanceEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [StudentSectionAttendanceEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [StudentSectionAttendanceEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance for a section.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentSectionAttendanceEvent_Id ON [t_edfi].[StudentSectionAttendanceEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentSectionAttendanceEventSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentSectionAttendanceEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSectionAttendanceEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentSectionAttendanceEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentSectionAttendanceEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentSectionAttendanceEventSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord] ADD CONSTRAINT [FK_StudentSectionAttendanceEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentSectionAttendanceEvent])
REFERENCES [t_edfi].[StudentSectionAttendanceEvent] ([tid_StudentSectionAttendanceEvent]);
ALTER TABLE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord] CHECK CONSTRAINT [FK_StudentSectionAttendanceEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[StudentSpecialEducationProgramAssociation] ******/

CREATE TABLE [t_edfi].[StudentSpecialEducationProgramAssociation]
(
    [tid_StudentSpecialEducationProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[IdeaEligibility] [BIT] NULL,
	[SpecialEducationSettingDescriptorCodeValue] [NVARCHAR](50) NULL,
	[SpecialEducationHoursPerWeek] [DECIMAL](5, 2) NULL,
	[SchoolHoursPerWeek] [DECIMAL](5, 2) NULL,
	[MultiplyDisabled] [BIT] NULL,
	[MedicallyFragile] [BIT] NULL,
	[LastEvaluationDate] [DATE] NULL,
	[IEPReviewDate] [DATE] NULL,
	[IEPBeginDate] [DATE] NULL,
	[IEPEndDate] [DATE] NULL,
	[SpecialEducationSettingDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSpecialEducationProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentSpecialEducationProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociation] ADD CONSTRAINT [StudentSpecialEducationProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociation] ADD CONSTRAINT [StudentSpecialEducationProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociation] ADD CONSTRAINT [StudentSpecialEducationProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IdeaEligibility';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'SpecialEducationSettingDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of hours per week for special education instruction and therapy.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'SpecialEducationHoursPerWeek';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicate the total number of hours of instructional time per week for the school that the student attends.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'SchoolHoursPerWeek';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'MultiplyDisabled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether the Student receiving special education and related services is:
        1) in the age range of birth to 22 years, and
        2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and
        3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and
        4) lives with ongoing threat to his or her continued well-being.
        Aligns with federal requirements.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'MedicallyFragile';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the last special education evaluation.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'LastEvaluationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the last IEP review.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IEPReviewDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The effective date of the most recent IEP.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IEPBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the most recent IEP.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IEPEndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'SpecialEducationSettingDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentSpecialEducationProgramAssociation_Id ON [t_edfi].[StudentSpecialEducationProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentSpecialEducationProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSpecialEducationProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentSpecialEducationProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentSpecialEducationProgramAssociation])
REFERENCES [t_edfi].[StudentSpecialEducationProgramAssociation] ([tid_StudentSpecialEducationProgramAssociation]);
ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ******/

CREATE TABLE [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider]
(
	[tid_StudentSpecialEducationProgramAssociationServiceProvider] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StudentSpecialEducationProgramAssociation] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[PrimaryProvider] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentSpecialEducationProgramAssociationServiceProvider] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentSpecialEducationProgramAssociationServiceProvider] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ADD CONSTRAINT [StudentSpecialEducationProgramAssociationServiceProvider_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_ParentTable] FOREIGN KEY ([tid_StudentSpecialEducationProgramAssociation])
REFERENCES [t_edfi].[StudentSpecialEducationProgramAssociation] ([tid_StudentSpecialEducationProgramAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider] CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Staff providing special education services to the Student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Primary ServiceProvider.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'PrimaryProvider';
GO
/****** TABLE: [t_edfi].[StudentTitleIPartAProgramAssociation] ******/

CREATE TABLE [t_edfi].[StudentTitleIPartAProgramAssociation]
(
    [tid_StudentTitleIPartAProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramEducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[TitleIPartAParticipantType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentTitleIPartAProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentTitleIPartAProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentTitleIPartAProgramAssociation] ADD CONSTRAINT [StudentTitleIPartAProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[StudentTitleIPartAProgramAssociation] ADD CONSTRAINT [StudentTitleIPartAProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[StudentTitleIPartAProgramAssociation] ADD CONSTRAINT [StudentTitleIPartAProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the Title I Part A program(s) that a student participates in or from which the Student receives services. The association is an extension of the StudentProgramAssociation particular for Title I Part A programs.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'TitleIPartAParticipantType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentTitleIPartAProgramAssociation_Id ON [t_edfi].[StudentTitleIPartAProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentTitleIPartAProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentTitleIPartAProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentTitleIPartAProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentTitleIPartAProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentTitleIPartAProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StudentTitleIPartAProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentTitleIPartAProgramAssociation])
REFERENCES [t_edfi].[StudentTitleIPartAProgramAssociation] ([tid_StudentTitleIPartAProgramAssociation]);
ALTER TABLE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StudentTitleIPartAProgramAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_edfi].[TeachingCredentialBasisType] ******/

CREATE TABLE [t_edfi].[TeachingCredentialBasisType]
(
    [tid_TeachingCredentialBasisType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_TeachingCredentialBasisType] PRIMARY KEY NONCLUSTERED
(
    [tid_TeachingCredentialBasisType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TeachingCredentialBasisType] ADD CONSTRAINT [TeachingCredentialBasisType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TeachingCredentialBasisType] ADD CONSTRAINT [TeachingCredentialBasisType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TeachingCredentialBasisType] ADD CONSTRAINT [TeachingCredentialBasisType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the pre-determined criteria for granting the teaching credential that an individual holds.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialBasisType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialBasisType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TeachingCredentialBasis type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialBasisType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TeachingCredentialBasis type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialBasisType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[TeachingCredentialDescriptor] ******/

CREATE TABLE [t_edfi].[TeachingCredentialDescriptor]
(
    [tid_TeachingCredentialDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[TeachingCredentialType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeachingCredentialDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_TeachingCredentialDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TeachingCredentialDescriptor] ADD CONSTRAINT [TeachingCredentialDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TeachingCredentialDescriptor] ADD CONSTRAINT [TeachingCredentialDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TeachingCredentialDescriptor] ADD CONSTRAINT [TeachingCredentialDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines an indication of the category of a legal document giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN', @level2name=N'TeachingCredentialType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeachingCredentialDescriptor_Id ON [t_edfi].[TeachingCredentialDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[TeachingCredentialDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeachingCredentialDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeachingCredentialDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeachingCredentialDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TeachingCredentialDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TeachingCredentialDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TeachingCredentialDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeachingCredentialDescriptor])
REFERENCES [t_edfi].[TeachingCredentialDescriptor] ([tid_TeachingCredentialDescriptor]);
ALTER TABLE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TeachingCredentialDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[TeachingCredentialType] ******/

CREATE TABLE [t_edfi].[TeachingCredentialType]
(
	[tid_TeachingCredentialType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_TeachingCredentialType] PRIMARY KEY NONCLUSTERED
(
	[tid_TeachingCredentialType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TeachingCredentialType] ADD CONSTRAINT [TeachingCredentialType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TeachingCredentialType] ADD CONSTRAINT [TeachingCredentialType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TeachingCredentialType] ADD CONSTRAINT [TeachingCredentialType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the category of a legal document giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TeachingCredential type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TeachingCredential type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TeachingCredentialType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[TelephoneNumberType] ******/

CREATE TABLE [t_edfi].[TelephoneNumberType]
(
    [tid_TelephoneNumberType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_TelephoneNumberType] PRIMARY KEY NONCLUSTERED
(
    [tid_TelephoneNumberType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TelephoneNumberType] ADD CONSTRAINT [TelephoneNumberType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TelephoneNumberType] ADD CONSTRAINT [TelephoneNumberType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TelephoneNumberType] ADD CONSTRAINT [TelephoneNumberType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an individual.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TelephoneNumberType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TelephoneNumberType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TelephoneNumberType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[TermDescriptor] ******/

CREATE TABLE [t_edfi].[TermDescriptor]
(
    [tid_TermDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[TermType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TermDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_TermDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TermDescriptor] ADD CONSTRAINT [TermDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TermDescriptor] ADD CONSTRAINT [TermDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TermDescriptor] ADD CONSTRAINT [TermDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the term of a session during the school year (e.g., Fall Semester).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TermDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermDescriptor', @level2type=N'COLUMN', @level2name=N'TermType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTermDescriptor_Id ON [t_edfi].[TermDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[TermDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[TermDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TermDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TermDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TermDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TermDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TermDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[TermDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TermDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[TermDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TermDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TermDescriptor])
REFERENCES [t_edfi].[TermDescriptor] ([tid_TermDescriptor]);
ALTER TABLE [t_edfi].[TermDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TermDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[TermType] ******/

CREATE TABLE [t_edfi].[TermType]
(
	[tid_TermType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_TermType] PRIMARY KEY NONCLUSTERED
(
	[tid_TermType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TermType] ADD CONSTRAINT [TermType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TermType] ADD CONSTRAINT [TermType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TermType] ADD CONSTRAINT [TermType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the session during the school year (e.g., Fall Semester).', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TermType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Term type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Term type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TermType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[TitleIPartAParticipantType] ******/

CREATE TABLE [t_edfi].[TitleIPartAParticipantType]
(
    [tid_TitleIPartAParticipantType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_TitleIPartAParticipantType] PRIMARY KEY NONCLUSTERED
(
    [tid_TitleIPartAParticipantType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TitleIPartAParticipantType] ADD CONSTRAINT [TitleIPartAParticipantType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TitleIPartAParticipantType] ADD CONSTRAINT [TitleIPartAParticipantType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TitleIPartAParticipantType] ADD CONSTRAINT [TitleIPartAParticipantType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the type of Title I program, if any, in which the student is participating and served.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TitleIPartAParticipantType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TitleIPartAParticipantType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TitleIPartAParticipant type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TitleIPartAParticipantType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TitleIPartAParticipant type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TitleIPartAParticipantType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[TitleIPartASchoolDesignationType] ******/

CREATE TABLE [t_edfi].[TitleIPartASchoolDesignationType]
(
    [tid_TitleIPartASchoolDesignationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_TitleIPartASchoolDesignationType] PRIMARY KEY NONCLUSTERED
(
    [tid_TitleIPartASchoolDesignationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[TitleIPartASchoolDesignationType] ADD CONSTRAINT [TitleIPartASchoolDesignationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[TitleIPartASchoolDesignationType] ADD CONSTRAINT [TitleIPartASchoolDesignationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[TitleIPartASchoolDesignationType] ADD CONSTRAINT [TitleIPartASchoolDesignationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Denotes the Title I Part A designation for the school.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'TitleIPartASchoolDesignationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TitleIPartASchoolDesignationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TitleIPartASchoolDesignation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TitleIPartASchoolDesignationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TitleIPartASchoolDesignation type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'TitleIPartASchoolDesignationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[VisaType] ******/

CREATE TABLE [t_edfi].[VisaType]
(
    [tid_VisaType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_VisaType] PRIMARY KEY NONCLUSTERED
(
    [tid_VisaType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[VisaType] ADD CONSTRAINT [VisaType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[VisaType] ADD CONSTRAINT [VisaType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[VisaType] ADD CONSTRAINT [VisaType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-U.S. citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'VisaType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'VisaType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Visa type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'VisaType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Visa type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'VisaType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_edfi].[WeaponDescriptor] ******/

CREATE TABLE [t_edfi].[WeaponDescriptor]
(
    [tid_WeaponDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[WeaponType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_WeaponDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_WeaponDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[WeaponDescriptor] ADD CONSTRAINT [WeaponDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[WeaponDescriptor] ADD CONSTRAINT [WeaponDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[WeaponDescriptor] ADD CONSTRAINT [WeaponDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the types of weapon used during an incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'WeaponDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponDescriptor', @level2type=N'COLUMN', @level2name=N'WeaponType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TWeaponDescriptor_Id ON [t_edfi].[WeaponDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_edfi].[WeaponDescriptorSnapshotRecord] ******/

CREATE TABLE [t_edfi].[WeaponDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_WeaponDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_WeaponDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_WeaponDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[WeaponDescriptorSnapshotRecord] ADD CONSTRAINT [FK_WeaponDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_edfi].[WeaponDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_WeaponDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_edfi].[WeaponDescriptorSnapshotRecord] ADD CONSTRAINT [FK_WeaponDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_WeaponDescriptor])
REFERENCES [t_edfi].[WeaponDescriptor] ([tid_WeaponDescriptor]);
ALTER TABLE [t_edfi].[WeaponDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_WeaponDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_edfi].[WeaponType] ******/

CREATE TABLE [t_edfi].[WeaponType]
(
	[tid_WeaponType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_WeaponType] PRIMARY KEY NONCLUSTERED
(
	[tid_WeaponType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_edfi].[WeaponType] ADD CONSTRAINT [WeaponType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_edfi].[WeaponType] ADD CONSTRAINT [WeaponType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_edfi].[WeaponType] ADD CONSTRAINT [WeaponType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category for the types of weapon used during an incident.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE', @level1name=N'WeaponType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Weapon type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Weapon type.', @level0type=N'SCHEMA', @level0name=N't_edfi', @level1type=N'TABLE',@level1name=N'WeaponType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO


/****** PROCEDURE: [tods].[usp_CreateInitialPartitionScheme] ******/

IF OBJECT_ID('[tods].[usp_CreateInitialPartitionScheme]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_CreateInitialPartitionScheme];
GO

CREATE PROCEDURE [tods].[usp_CreateInitialPartitionScheme]
AS
BEGIN
    SET NOCOUNT ON;

    /*
    ASSUMPTIONS:
    1. dbo.PartitionYearConfig table has been loaded to reflect the SchoolYears (current, plus previous 11)
       with related BeginDate and EndDate
    */

    /*
    Step 0: Prep
        a. declare all variables used
        b. set up temp table of filegroup and files
    */
    DECLARE @DatabaseName NVARCHAR(128)
            , @FGDatabaseName NVARCHAR(128)
            , @SqlDirectory NVARCHAR(128)
            , @Id INT
            , @MaxId INT
            , @Sql NVARCHAR(4000)
            , @FileGroupName NVARCHAR(128)
            , @FileGroupFileName NVARCHAR(260)
            , @MinSchoolYear INT
            , @CheckSchoolYear INT
            , @Count INT = 1
            , @MaxCount INT = 11
            , @ErrMsg NVARCHAR(50)
            , @List NVARCHAR(4000);

    BEGIN TRY
        IF OBJECT_ID('tempdb..#TempFileGroup') IS NOT NULL
            DROP TABLE #TempFileGroup;

        CREATE TABLE #TempFileGroup
        (
            Id INT IDENTITY NOT NULL
            , FileGroupName NVARCHAR(128) NOT NULL
            , FileGroupFileName NVARCHAR(260) NOT NULL
        );

        SET @DatabaseName = DB_NAME();
        SET @FGDatabaseName = (SELECT SUBSTRING(DB_NAME(), 1, 120));
        SET @SqlDirectory = (SELECT SUBSTRING(physical_name, 1, CHARINDEX(N'master.mdf', LOWER(physical_name)) - 1) AS DataFileLocation
                            FROM master.sys.master_files AS M
                            WHERE M.database_id = 1
                            AND FILE_ID = 1);

        -- Process cannot continue without read permissions to master
        IF @SqlDirectory IS NULL
        RETURN 'Could not determine data directory, make sure that you have select permission on master'

        SET @Id = 1;
        SET @MaxId = 12;

        WHILE @Id <= @MaxId
            BEGIN
                -- Generating the FileGroupNames and FileGroupFileNames:
                SET NOCOUNT ON;
                INSERT INTO #TempFileGroup
                (FileGroupName, FileGroupFileName)
                SELECT
                    CASE
                        WHEN @Id < 10 THEN @FGDatabaseName + N'DP0' + CAST(@Id AS NVARCHAR(10))
                        ELSE @FGDatabaseName + N'DP' + CAST(@id AS NVARCHAR(10))
                    END AS FileGroupName
                  , CASE
                        WHEN @Id < 10 THEN @SqlDirectory + @FGDatabaseName + N'DP0' + CAST(@Id AS NVARCHAR(10)) + N'.ndf'
                        ELSE @SqlDirectory + @FGDatabaseName + N'DP' + CAST(@Id AS NVARCHAR(10)) + N'.ndf'
                    END AS FileGroupFileName;

                SET @Id = @Id + 1;
            END

        /*
        Step 1: create the filegroups required to create the partition scheme
                and add the database files to each filegroup:

                NOTE: creating file group files with properties:
                      SIZE = 750MB
                      MAXSIZE = 50000MB -> 50GB
                      FILEGROWTH = 500MB

            ASSUMPTION: the filegroup data base files will be housed in default SQL Server Data directory.

        */
        SET @Id = 1;
        SET @MaxId = 12;
        WHILE @Id <= @MaxId
            BEGIN
                SET @FileGroupName = (SELECT T.FileGroupName FROM #TempFileGroup T WHERE T.Id = @Id);

                SET @FileGroupFileName = (SELECT T.FileGroupFileName FROM #TempFileGroup T WHERE T.Id = @Id);

                SET @Id = @Id + 1;

                -- FIRST: add the filegroup:
                SET @Sql = N'ALTER DATABASE ' + @DatabaseName + CHAR(10)
                           + N'ADD FILEGROUP ' + @FileGroupName + N';' + CHAR(10);

                EXECUTE sp_executesql @sql;

                -- SECOND: add a database file to the filegroup just added:
                SET @Sql = N'ALTER DATABASE ' + @DatabaseName + CHAR(10)
                           + N'ADD FILE' + CHAR(10)
                           + N'(NAME = N' + '''' + @FileGroupName + '''' + CHAR(10)
                           + N'    , FILENAME = N' + '''' + @FileGroupFileName + '''' + CHAR(10)
                           + N'    , SIZE = 750MB' + CHAR(10)
                           + N'    , MAXSIZE = 10000MB' + CHAR(10)
                           + N'    , FILEGROWTH = 500MB )' + CHAR(10)
                           + N'TO FILEGROUP ' + @FileGroupName + N';' + CHAR(10);

                EXECUTE sp_executesql @Sql;
            END



        /*
        Step 2: setup tables that have the key column needed to partition on:
                for TODS it's the t_PartitionYearId column
                (see 01-CreateTables.sql script)

                By default, SQL Server allocates a single partition when the table is created -
                to view run the following code:
        --SELECT O.name AS ObjectName
        --    , I.name AS IndexName
        --    , P.partition_id
        --    , P.partition_number
        --    , P.[rows]
        --FROM sys.partitions AS P
        --INNER JOIN sys.objects O ON O.object_id = P.object_id
        --INNER JOIN sys.indexes I ON I.object_id = P.object_id
        --                        AND P.index_id = I.index_id
        --WHERE O.name = N'table name goes here';
        */


        /*
        Step 3: Create the partition range function: this defines the range of values that are to be
                stored in different partitions - basically defining the partitions that should
                have data - to create the partition function:

                # of partitions: 12 total
                    11 previous school-years (1 for catchall - 10 previous)
                     1 current

                LEFT results in:
                partition 1 <= min-school-year - this is the catch all default
                partition 2 = min-school-year + 1
                partition 3 = min-school-year + 2
                partition 4 = min-school-year + 3
                partition 5 = min-school-year + 4
                partition 6 = min-school-year + 5
                partition 7 = min-school-year + 6
                partition 8 = min-school-year + 7
                parititon 9 = min-school-year + 8
                partition 10 = min-school-year + 9
                partition 11 = min-school-year + 10
                partition 12 = max-school-year which is min-school-year + 11

            ASSUMPTION:
            Admin previously entered the required PartitionYearConfig table values before the "set up partitioning" script is executed.
        */

        -- NEXT STEP: need to generate a list of PartitionYear for the dynamic sql:
        SET @List = NULL;
        SELECT @List = COALESCE(@List + ', ', '') + CAST(P.PartitionYearConfigId AS NVARCHAR(10))
        FROM [tods].[PartitionYearConfig] AS P
        WHERE P.PartitionYearConfigId <> (SELECT MIN(P.PartitionYearConfigId) FROM [tods].[PartitionYearConfig] AS P)
        ORDER BY P.PartitionYearConfigId;

        SELECT @Sql = N'CREATE PARTITION FUNCTION [udf_PartitionYearRange] (SMALLINT) ' + CHAR(10)
                       + N'AS RANGE LEFT FOR VALUES (' + @List + N');' + CHAR(10);

        EXECUTE sp_executesql @sql;

        /*
        Step 4: Create the partition scheme for the partition range function created in Step 3:
        */
        ---- need to generate a list of FileGroups for the dynamic sql:
        SET @List = NULL;
        SELECT @List = COALESCE(@List + ', ', '') + T.FileGroupName
        FROM #TempFileGroup AS T
        ORDER BY FileGroupName;

        SET @Sql = N'CREATE PARTITION SCHEME PartitionYearScheme ' + CHAR(10)
                   + N'AS PARTITION [udf_PartitionYearRange] TO ' + CHAR(10)
                   + N'(' + @List + N');';

        EXECUTE sp_executesql @Sql;

        /*
        Step 5: to see the function boundary values - run the following:
        */
        --SELECT PF.name AS [Partition Function Name]
        --    , PRF.boundary_id
        --    , PRF.value
        --FROM sys.partition_functions AS PF
        --INNER JOIN sys.partition_range_values AS PRF ON PRF.function_id = PF.function_id;
        --GO

        /*
        Step 6:
        Note: Since the TODS tables have been created with PK NONCLUSTERED INDEX, no need to drop and recreate the PK INDEXes.
                Just need to create the CLUSTERED INDEX on the t_PartitionYearId column of the TODS tables (Snapshot, SnapshotCode
                all SnapshotRecord tables, all data tables);

        Step 6:
        Note: Since the TODS tables have been created with PK NONCLUSTERED INDEX, no need to drop and recreate the PK INDEXes.
                Just need to create the CLUSTERED INDEX on the t_PartitionYearId column of the TODS tables (Snapshot, SnapshotCode
                all SnapshotRecord tables, all data tables);
        */
        -- For [tods].[Snapshot]:
        CREATE CLUSTERED Index IX_Snapshot_PartitionYearId ON [tods].[Snapshot](t_PartitionYearId)
        WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
        ON PartitionYearScheme(t_PartitionYearId)

        -- For [tods].[SnapshotCode]:
        CREATE CLUSTERED Index IX_SnapshotCode_PartitionYearId ON [tods].[SnapshotCode](t_PartitionYearId)
        WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
        ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AcademicSubjectDescriptor_PartitionYearId ON [t_edfi].[AcademicSubjectDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AcademicSubjectDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AcademicSubjectDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AcademicWeek_PartitionYearId ON [t_edfi].[AcademicWeek](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AcademicWeekSnapshotRecord_PartitionYearId ON [t_edfi].[AcademicWeekSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AccommodationDescriptor_PartitionYearId ON [t_edfi].[AccommodationDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AccommodationDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AccommodationDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Account_PartitionYearId ON [t_edfi].[Account](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AccountSnapshotRecord_PartitionYearId ON [t_edfi].[AccountSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AccountCode_PartitionYearId ON [t_edfi].[AccountCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AccountExtension_PartitionYearId ON [t_extension].[AccountExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AccountabilityRating_PartitionYearId ON [t_edfi].[AccountabilityRating](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AccountabilityRatingSnapshotRecord_PartitionYearId ON [t_edfi].[AccountabilityRatingSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AccountCodeDescriptor_PartitionYearId ON [t_edfi].[AccountCodeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AccountCodeDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AccountCodeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AchievementCategoryDescriptor_PartitionYearId ON [t_edfi].[AchievementCategoryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AchievementCategoryDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AchievementCategoryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Actual_PartitionYearId ON [t_edfi].[Actual](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ActualSnapshotRecord_PartitionYearId ON [t_edfi].[ActualSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AdministrativeFundingControlDescriptor_PartitionYearId ON [t_edfi].[AdministrativeFundingControlDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AdministrativeFundingControlDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Assessment_PartitionYearId ON [t_edfi].[Assessment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentSnapshotRecord_PartitionYearId ON [t_edfi].[AssessmentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AssessmentIdentificationCode_PartitionYearId ON [t_edfi].[AssessmentIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentScore_PartitionYearId ON [t_edfi].[AssessmentScore](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentPerformanceLevel_PartitionYearId ON [t_edfi].[AssessmentPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentContentStandard_PartitionYearId ON [t_edfi].[AssessmentContentStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentContentStandardAuthor_PartitionYearId ON [t_edfi].[AssessmentContentStandardAuthor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentLanguage_PartitionYearId ON [t_edfi].[AssessmentLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentSection_PartitionYearId ON [t_edfi].[AssessmentSection](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentProgram_PartitionYearId ON [t_edfi].[AssessmentProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentExtension_PartitionYearId ON [t_extension].[AssessmentExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentCategoryDescriptor_PartitionYearId ON [t_edfi].[AssessmentCategoryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentCategoryDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AssessmentFamily_PartitionYearId ON [t_edfi].[AssessmentFamily](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentFamilySnapshotRecord_PartitionYearId ON [t_edfi].[AssessmentFamilySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AssessmentFamilyIdentificationCode_PartitionYearId ON [t_edfi].[AssessmentFamilyIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentFamilyContentStandard_PartitionYearId ON [t_edfi].[AssessmentFamilyContentStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentFamilyContentStandardAuthor_PartitionYearId ON [t_edfi].[AssessmentFamilyContentStandardAuthor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentFamilyLanguage_PartitionYearId ON [t_edfi].[AssessmentFamilyLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentFamilyAssessmentPeriod_PartitionYearId ON [t_edfi].[AssessmentFamilyAssessmentPeriod](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentIdentificationSystemDescriptor_PartitionYearId ON [t_edfi].[AssessmentIdentificationSystemDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentIdentificationSystemDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AssessmentItem_PartitionYearId ON [t_edfi].[AssessmentItem](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentItemSnapshotRecord_PartitionYearId ON [t_edfi].[AssessmentItemSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AssessmentItemLearningStandard_PartitionYearId ON [t_edfi].[AssessmentItemLearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentPeriodDescriptor_PartitionYearId ON [t_edfi].[AssessmentPeriodDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AssessmentPeriodDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AttendanceEventCategoryDescriptor_PartitionYearId ON [t_edfi].[AttendanceEventCategoryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AttendanceEventCategoryDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_BehaviorDescriptor_PartitionYearId ON [t_edfi].[BehaviorDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_BehaviorDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[BehaviorDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_BellSchedule_PartitionYearId ON [t_edfi].[BellSchedule](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_BellScheduleSnapshotRecord_PartitionYearId ON [t_edfi].[BellScheduleSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_BellScheduleMeetingTime_PartitionYearId ON [t_edfi].[BellScheduleMeetingTime](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_Budget_PartitionYearId ON [t_edfi].[Budget](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_BudgetSnapshotRecord_PartitionYearId ON [t_edfi].[BudgetSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CalendarDate_PartitionYearId ON [t_edfi].[CalendarDate](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CalendarDateSnapshotRecord_PartitionYearId ON [t_edfi].[CalendarDateSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CalendarDateCalendarEvent_PartitionYearId ON [t_edfi].[CalendarDateCalendarEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CalendarEventDescriptor_PartitionYearId ON [t_edfi].[CalendarEventDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CalendarEventDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[CalendarEventDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ClassPeriod_PartitionYearId ON [t_edfi].[ClassPeriod](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ClassPeriodSnapshotRecord_PartitionYearId ON [t_edfi].[ClassPeriodSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ClassroomPositionDescriptor_PartitionYearId ON [t_edfi].[ClassroomPositionDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ClassroomPositionDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ClassroomPositionDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Cohort_PartitionYearId ON [t_edfi].[Cohort](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CohortSnapshotRecord_PartitionYearId ON [t_edfi].[CohortSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CohortProgram_PartitionYearId ON [t_edfi].[CohortProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CompetencyLevelDescriptor_PartitionYearId ON [t_edfi].[CompetencyLevelDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CompetencyLevelDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[CompetencyLevelDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CompetencyObjective_PartitionYearId ON [t_edfi].[CompetencyObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CompetencyObjectiveSnapshotRecord_PartitionYearId ON [t_edfi].[CompetencyObjectiveSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ContinuationOfServicesReasonDescriptor_PartitionYearId ON [t_edfi].[ContinuationOfServicesReasonDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ContinuationOfServicesReasonDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ContractedStaff_PartitionYearId ON [t_edfi].[ContractedStaff](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ContractedStaffSnapshotRecord_PartitionYearId ON [t_edfi].[ContractedStaffSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CountryDescriptor_PartitionYearId ON [t_edfi].[CountryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CountryDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[CountryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Course_PartitionYearId ON [t_edfi].[Course](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseSnapshotRecord_PartitionYearId ON [t_edfi].[CourseSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseIdentificationCode_PartitionYearId ON [t_edfi].[CourseIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseLevelCharacteristic_PartitionYearId ON [t_edfi].[CourseLevelCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseOfferedGradeLevel_PartitionYearId ON [t_edfi].[CourseOfferedGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseCompetencyLevel_PartitionYearId ON [t_edfi].[CourseCompetencyLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseLearningStandard_PartitionYearId ON [t_edfi].[CourseLearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseLearningObjective_PartitionYearId ON [t_edfi].[CourseLearningObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseIdentificationSystemDescriptor_PartitionYearId ON [t_edfi].[CourseIdentificationSystemDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseIdentificationSystemDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseOffering_PartitionYearId ON [t_edfi].[CourseOffering](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseOfferingSnapshotRecord_PartitionYearId ON [t_edfi].[CourseOfferingSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseOfferingCurriculumUsed_PartitionYearId ON [t_edfi].[CourseOfferingCurriculumUsed](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseTranscript_PartitionYearId ON [t_edfi].[CourseTranscript](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseTranscriptSnapshotRecord_PartitionYearId ON [t_edfi].[CourseTranscriptSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseTranscriptEarnedAdditionalCredits_PartitionYearId ON [t_edfi].[CourseTranscriptEarnedAdditionalCredits](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_Credential_PartitionYearId ON [t_edfi].[Credential](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialSnapshotRecord_PartitionYearId ON [t_edfi].[CredentialSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CredentialEndorsement_PartitionYearId ON [t_edfi].[CredentialEndorsement](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialExtension_PartitionYearId ON [t_extension].[CredentialExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialBoardCertification_PartitionYearId ON [t_extension].[CredentialBoardCertification](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialCertificationExam_PartitionYearId ON [t_extension].[CredentialCertificationExam](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialRecommendation_PartitionYearId ON [t_extension].[CredentialRecommendation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialRecommendingInstitution_PartitionYearId ON [t_extension].[CredentialRecommendingInstitution](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialFieldDescriptor_PartitionYearId ON [t_edfi].[CredentialFieldDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CredentialFieldDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[CredentialFieldDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_DiagnosisDescriptor_PartitionYearId ON [t_edfi].[DiagnosisDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DiagnosisDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[DiagnosisDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_DisabilityDescriptor_PartitionYearId ON [t_edfi].[DisabilityDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisabilityDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[DisabilityDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_DisciplineAction_PartitionYearId ON [t_edfi].[DisciplineAction](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisciplineActionSnapshotRecord_PartitionYearId ON [t_edfi].[DisciplineActionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_DisciplineActionDiscipline_PartitionYearId ON [t_edfi].[DisciplineActionDiscipline](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisciplineActionDisciplineIncident_PartitionYearId ON [t_edfi].[DisciplineActionDisciplineIncident](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisciplineActionStaff_PartitionYearId ON [t_edfi].[DisciplineActionStaff](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisciplineDescriptor_PartitionYearId ON [t_edfi].[DisciplineDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisciplineDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[DisciplineDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_DisciplineIncident_PartitionYearId ON [t_edfi].[DisciplineIncident](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisciplineIncidentSnapshotRecord_PartitionYearId ON [t_edfi].[DisciplineIncidentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_DisciplineIncidentBehavior_PartitionYearId ON [t_edfi].[DisciplineIncidentBehavior](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_DisciplineIncidentWeapon_PartitionYearId ON [t_edfi].[DisciplineIncidentWeapon](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContent_PartitionYearId ON [t_edfi].[EducationContent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContentSnapshotRecord_PartitionYearId ON [t_edfi].[EducationContentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationContentAuthor_PartitionYearId ON [t_edfi].[EducationContentAuthor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContentDerivativeSourceEducationContent_PartitionYearId ON [t_edfi].[EducationContentDerivativeSourceEducationContent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContentDerivativeSourceLearningResourceMetadataURI_PartitionYearId ON [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContentDerivativeSourceURI_PartitionYearId ON [t_edfi].[EducationContentDerivativeSourceURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContentAppropriateSex_PartitionYearId ON [t_edfi].[EducationContentAppropriateSex](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContentAppropriateGradeLevel_PartitionYearId ON [t_edfi].[EducationContentAppropriateGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationContentLanguage_PartitionYearId ON [t_edfi].[EducationContentLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganization_PartitionYearId ON [t_edfi].[EducationOrganization](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationSnapshotRecord_PartitionYearId ON [t_edfi].[EducationOrganizationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationIdentificationCode_PartitionYearId ON [t_edfi].[EducationOrganizationIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationCategory_PartitionYearId ON [t_edfi].[EducationOrganizationCategory](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationAddress_PartitionYearId ON [t_edfi].[EducationOrganizationAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationInternationalAddress_PartitionYearId ON [t_edfi].[EducationOrganizationInternationalAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationInstitutionTelephone_PartitionYearId ON [t_edfi].[EducationOrganizationInstitutionTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationIdentificationSystemDescriptor_PartitionYearId ON [t_edfi].[EducationOrganizationIdentificationSystemDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationIdentificationSystemDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationInterventionPrescriptionAssociation_PartitionYearId ON [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationNetwork_PartitionYearId ON [t_edfi].[EducationOrganizationNetwork](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationNetworkSnapshotRecord_PartitionYearId ON [t_edfi].[EducationOrganizationNetworkSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationNetworkAssociation_PartitionYearId ON [t_edfi].[EducationOrganizationNetworkAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationNetworkAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationPeerAssociation_PartitionYearId ON [t_edfi].[EducationOrganizationPeerAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationPeerAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationServiceCenter_PartitionYearId ON [t_edfi].[EducationServiceCenter](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationServiceCenterSnapshotRecord_PartitionYearId ON [t_edfi].[EducationServiceCenterSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EmploymentStatusDescriptor_PartitionYearId ON [t_edfi].[EmploymentStatusDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EmploymentStatusDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[EmploymentStatusDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EntryTypeDescriptor_PartitionYearId ON [t_edfi].[EntryTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EntryTypeDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[EntryTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ExitWithdrawTypeDescriptor_PartitionYearId ON [t_edfi].[ExitWithdrawTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExitWithdrawTypeDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_FederalLocaleCodeDescriptor_PartitionYearId ON [t_edfi].[FederalLocaleCodeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_FederalLocaleCodeDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_FeederSchoolAssociation_PartitionYearId ON [t_edfi].[FeederSchoolAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_FeederSchoolAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[FeederSchoolAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Grade_PartitionYearId ON [t_edfi].[Grade](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradeSnapshotRecord_PartitionYearId ON [t_edfi].[GradeSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_GradebookEntry_PartitionYearId ON [t_edfi].[GradebookEntry](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradebookEntrySnapshotRecord_PartitionYearId ON [t_edfi].[GradebookEntrySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_GradebookEntryLearningStandard_PartitionYearId ON [t_edfi].[GradebookEntryLearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradebookEntryLearningObjective_PartitionYearId ON [t_edfi].[GradebookEntryLearningObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradebookEntryExtension_PartitionYearId ON [t_extension].[GradebookEntryExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradeLevelDescriptor_PartitionYearId ON [t_edfi].[GradeLevelDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradeLevelDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[GradeLevelDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_GradingPeriod_PartitionYearId ON [t_edfi].[GradingPeriod](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradingPeriodSnapshotRecord_PartitionYearId ON [t_edfi].[GradingPeriodSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_GradingPeriodDescriptor_PartitionYearId ON [t_edfi].[GradingPeriodDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GradingPeriodDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[GradingPeriodDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_GraduationPlan_PartitionYearId ON [t_edfi].[GraduationPlan](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanSnapshotRecord_PartitionYearId ON [t_edfi].[GraduationPlanSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_GraduationPlanCreditsBySubject_PartitionYearId ON [t_edfi].[GraduationPlanCreditsBySubject](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanCreditsByCourse_PartitionYearId ON [t_edfi].[GraduationPlanCreditsByCourse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanCreditsByCourseCourse_PartitionYearId ON [t_edfi].[GraduationPlanCreditsByCourseCourse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanRequiredAssessment_PartitionYearId ON [t_edfi].[GraduationPlanRequiredAssessment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanRequiredAssessmentScore_PartitionYearId ON [t_edfi].[GraduationPlanRequiredAssessmentScore](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PartitionYearId ON [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanTypeDescriptor_PartitionYearId ON [t_edfi].[GraduationPlanTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_GraduationPlanTypeDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Intervention_PartitionYearId ON [t_edfi].[Intervention](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionSnapshotRecord_PartitionYearId ON [t_edfi].[InterventionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_InterventionEducationContent_PartitionYearId ON [t_edfi].[InterventionEducationContent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionLearningResourceMetadataURI_PartitionYearId ON [t_edfi].[InterventionLearningResourceMetadataURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionURI_PartitionYearId ON [t_edfi].[InterventionURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionDiagnosis_PartitionYearId ON [t_edfi].[InterventionDiagnosis](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPopulationServed_PartitionYearId ON [t_edfi].[InterventionPopulationServed](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionAppropriateSex_PartitionYearId ON [t_edfi].[InterventionAppropriateSex](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionAppropriateGradeLevel_PartitionYearId ON [t_edfi].[InterventionAppropriateGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionInterventionPrescription_PartitionYearId ON [t_edfi].[InterventionInterventionPrescription](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionMeetingTime_PartitionYearId ON [t_edfi].[InterventionMeetingTime](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStaff_PartitionYearId ON [t_edfi].[InterventionStaff](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescription_PartitionYearId ON [t_edfi].[InterventionPrescription](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescriptionSnapshotRecord_PartitionYearId ON [t_edfi].[InterventionPrescriptionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_InterventionPrescriptionEducationContent_PartitionYearId ON [t_edfi].[InterventionPrescriptionEducationContent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescriptionLearningResourceMetadataURI_PartitionYearId ON [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescriptionURI_PartitionYearId ON [t_edfi].[InterventionPrescriptionURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescriptionDiagnosis_PartitionYearId ON [t_edfi].[InterventionPrescriptionDiagnosis](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescriptionPopulationServed_PartitionYearId ON [t_edfi].[InterventionPrescriptionPopulationServed](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescriptionAppropriateSex_PartitionYearId ON [t_edfi].[InterventionPrescriptionAppropriateSex](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionPrescriptionAppropriateGradeLevel_PartitionYearId ON [t_edfi].[InterventionPrescriptionAppropriateGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudy_PartitionYearId ON [t_edfi].[InterventionStudy](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudySnapshotRecord_PartitionYearId ON [t_edfi].[InterventionStudySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_InterventionStudyEducationContent_PartitionYearId ON [t_edfi].[InterventionStudyEducationContent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudyLearningResourceMetadataURI_PartitionYearId ON [t_edfi].[InterventionStudyLearningResourceMetadataURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudyURI_PartitionYearId ON [t_edfi].[InterventionStudyURI](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudyInterventionEffectiveness_PartitionYearId ON [t_edfi].[InterventionStudyInterventionEffectiveness](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudyAppropriateGradeLevel_PartitionYearId ON [t_edfi].[InterventionStudyAppropriateGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudyPopulationServed_PartitionYearId ON [t_edfi].[InterventionStudyPopulationServed](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudyAppropriateSex_PartitionYearId ON [t_edfi].[InterventionStudyAppropriateSex](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_InterventionStudyStateAbbreviation_PartitionYearId ON [t_edfi].[InterventionStudyStateAbbreviation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LanguageDescriptor_PartitionYearId ON [t_edfi].[LanguageDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LanguageDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[LanguageDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LearningObjective_PartitionYearId ON [t_edfi].[LearningObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningObjectiveSnapshotRecord_PartitionYearId ON [t_edfi].[LearningObjectiveSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LearningObjectiveContentStandard_PartitionYearId ON [t_edfi].[LearningObjectiveContentStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningObjectiveContentStandardAuthor_PartitionYearId ON [t_edfi].[LearningObjectiveContentStandardAuthor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningObjectiveLearningStandard_PartitionYearId ON [t_edfi].[LearningObjectiveLearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningStandard_PartitionYearId ON [t_edfi].[LearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningStandardSnapshotRecord_PartitionYearId ON [t_edfi].[LearningStandardSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LearningStandardIdentificationCode_PartitionYearId ON [t_edfi].[LearningStandardIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningStandardContentStandard_PartitionYearId ON [t_edfi].[LearningStandardContentStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningStandardContentStandardAuthor_PartitionYearId ON [t_edfi].[LearningStandardContentStandardAuthor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningStandardGradeLevel_PartitionYearId ON [t_edfi].[LearningStandardGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LearningStandardPrerequisiteLearningStandard_PartitionYearId ON [t_edfi].[LearningStandardPrerequisiteLearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LeaveEvent_PartitionYearId ON [t_edfi].[LeaveEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LeaveEventSnapshotRecord_PartitionYearId ON [t_edfi].[LeaveEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LeaveEventExtension_PartitionYearId ON [t_extension].[LeaveEventExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LevelDescriptor_PartitionYearId ON [t_edfi].[LevelDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LevelDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[LevelDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LevelDescriptorGradeLevel_PartitionYearId ON [t_edfi].[LevelDescriptorGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LevelOfEducationDescriptor_PartitionYearId ON [t_edfi].[LevelOfEducationDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LevelOfEducationDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[LevelOfEducationDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LimitedEnglishProficiencyDescriptor_PartitionYearId ON [t_edfi].[LimitedEnglishProficiencyDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LimitedEnglishProficiencyDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LocalEducationAgency_PartitionYearId ON [t_edfi].[LocalEducationAgency](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LocalEducationAgencySnapshotRecord_PartitionYearId ON [t_edfi].[LocalEducationAgencySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LocalEducationAgencyAccountability_PartitionYearId ON [t_edfi].[LocalEducationAgencyAccountability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LocalEducationAgencyFederalFunds_PartitionYearId ON [t_edfi].[LocalEducationAgencyFederalFunds](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_Location_PartitionYearId ON [t_edfi].[Location](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LocationSnapshotRecord_PartitionYearId ON [t_edfi].[LocationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ObjectiveAssessment_PartitionYearId ON [t_edfi].[ObjectiveAssessment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ObjectiveAssessmentSnapshotRecord_PartitionYearId ON [t_edfi].[ObjectiveAssessmentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ObjectiveAssessmentPerformanceLevel_PartitionYearId ON [t_edfi].[ObjectiveAssessmentPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ObjectiveAssessmentAssessmentItem_PartitionYearId ON [t_edfi].[ObjectiveAssessmentAssessmentItem](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ObjectiveAssessmentLearningObjective_PartitionYearId ON [t_edfi].[ObjectiveAssessmentLearningObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ObjectiveAssessmentLearningStandard_PartitionYearId ON [t_edfi].[ObjectiveAssessmentLearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_OpenStaffPosition_PartitionYearId ON [t_edfi].[OpenStaffPosition](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_OpenStaffPositionSnapshotRecord_PartitionYearId ON [t_edfi].[OpenStaffPositionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_OpenStaffPositionInstructionalGradeLevel_PartitionYearId ON [t_edfi].[OpenStaffPositionInstructionalGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_OpenStaffPositionAcademicSubject_PartitionYearId ON [t_edfi].[OpenStaffPositionAcademicSubject](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_Parent_PartitionYearId ON [t_edfi].[Parent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ParentSnapshotRecord_PartitionYearId ON [t_edfi].[ParentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ParentOtherName_PartitionYearId ON [t_edfi].[ParentOtherName](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ParentAddress_PartitionYearId ON [t_edfi].[ParentAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ParentInternationalAddress_PartitionYearId ON [t_edfi].[ParentInternationalAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ParentTelephone_PartitionYearId ON [t_edfi].[ParentTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ParentElectronicMail_PartitionYearId ON [t_edfi].[ParentElectronicMail](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ParentIdentificationDocument_PartitionYearId ON [t_edfi].[ParentIdentificationDocument](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_Payroll_PartitionYearId ON [t_edfi].[Payroll](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PayrollSnapshotRecord_PartitionYearId ON [t_edfi].[PayrollSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PerformanceLevelDescriptor_PartitionYearId ON [t_edfi].[PerformanceLevelDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceLevelDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[PerformanceLevelDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PostSecondaryEvent_PartitionYearId ON [t_edfi].[PostSecondaryEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PostSecondaryEventSnapshotRecord_PartitionYearId ON [t_edfi].[PostSecondaryEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PostSecondaryEventPostSecondaryInstitution_PartitionYearId ON [t_edfi].[PostSecondaryEventPostSecondaryInstitution](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PartitionYearId ON [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PartitionYearId ON [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_Program_PartitionYearId ON [t_edfi].[Program](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramSnapshotRecord_PartitionYearId ON [t_edfi].[ProgramSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ProgramCharacteristic_PartitionYearId ON [t_edfi].[ProgramCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramService_PartitionYearId ON [t_edfi].[ProgramService](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramLearningObjective_PartitionYearId ON [t_edfi].[ProgramLearningObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramLearningStandard_PartitionYearId ON [t_edfi].[ProgramLearningStandard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramAssignmentDescriptor_PartitionYearId ON [t_edfi].[ProgramAssignmentDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramAssignmentDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ProgramCharacteristicDescriptor_PartitionYearId ON [t_edfi].[ProgramCharacteristicDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramCharacteristicDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ReasonExitedDescriptor_PartitionYearId ON [t_edfi].[ReasonExitedDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ReasonExitedDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ReasonExitedDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ReportCard_PartitionYearId ON [t_edfi].[ReportCard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ReportCardSnapshotRecord_PartitionYearId ON [t_edfi].[ReportCardSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ReportCardGrade_PartitionYearId ON [t_edfi].[ReportCardGrade](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ReportCardStudentCompetencyObjective_PartitionYearId ON [t_edfi].[ReportCardStudentCompetencyObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ReportCardStudentLearningObjective_PartitionYearId ON [t_edfi].[ReportCardStudentLearningObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ReporterDescriptionDescriptor_PartitionYearId ON [t_edfi].[ReporterDescriptionDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ReporterDescriptionDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ResidencyStatusDescriptor_PartitionYearId ON [t_edfi].[ResidencyStatusDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ResidencyStatusDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ResidencyStatusDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ResponsibilityDescriptor_PartitionYearId ON [t_edfi].[ResponsibilityDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ResponsibilityDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ResponsibilityDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_RestraintEvent_PartitionYearId ON [t_edfi].[RestraintEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RestraintEventSnapshotRecord_PartitionYearId ON [t_edfi].[RestraintEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_RestraintEventReason_PartitionYearId ON [t_edfi].[RestraintEventReason](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RestraintEventProgram_PartitionYearId ON [t_edfi].[RestraintEventProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_School_PartitionYearId ON [t_edfi].[School](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolSnapshotRecord_PartitionYearId ON [t_edfi].[SchoolSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SchoolGradeLevel_PartitionYearId ON [t_edfi].[SchoolGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolCategory_PartitionYearId ON [t_edfi].[SchoolCategory](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolExtension_PartitionYearId ON [t_extension].[SchoolExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolFoodServicesEligibilityDescriptor_PartitionYearId ON [t_edfi].[SchoolFoodServicesEligibilityDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolFoodServicesEligibilityDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SchoolYearType_PartitionYearId ON [t_edfi].[SchoolYearType](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolYearTypeSnapshotRecord_PartitionYearId ON [t_edfi].[SchoolYearTypeSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Section_PartitionYearId ON [t_edfi].[Section](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionSnapshotRecord_PartitionYearId ON [t_edfi].[SectionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionCharacteristic_PartitionYearId ON [t_edfi].[SectionCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionProgram_PartitionYearId ON [t_edfi].[SectionProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionAttendanceTakenEvent_PartitionYearId ON [t_edfi].[SectionAttendanceTakenEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionAttendanceTakenEventSnapshotRecord_PartitionYearId ON [t_edfi].[SectionAttendanceTakenEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionCharacteristicDescriptor_PartitionYearId ON [t_edfi].[SectionCharacteristicDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionCharacteristicDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SeparationReasonDescriptor_PartitionYearId ON [t_edfi].[SeparationReasonDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SeparationReasonDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[SeparationReasonDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ServiceDescriptor_PartitionYearId ON [t_edfi].[ServiceDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ServiceDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[ServiceDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Session_PartitionYearId ON [t_edfi].[Session](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SessionSnapshotRecord_PartitionYearId ON [t_edfi].[SessionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SessionGradingPeriod_PartitionYearId ON [t_edfi].[SessionGradingPeriod](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SessionAcademicWeek_PartitionYearId ON [t_edfi].[SessionAcademicWeek](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SpecialEducationSettingDescriptor_PartitionYearId ON [t_edfi].[SpecialEducationSettingDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SpecialEducationSettingDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Staff_PartitionYearId ON [t_edfi].[Staff](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffSnapshotRecord_PartitionYearId ON [t_edfi].[StaffSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffIdentificationCode_PartitionYearId ON [t_edfi].[StaffIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffOtherName_PartitionYearId ON [t_edfi].[StaffOtherName](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffAddress_PartitionYearId ON [t_edfi].[StaffAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffInternationalAddress_PartitionYearId ON [t_edfi].[StaffInternationalAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTelephone_PartitionYearId ON [t_edfi].[StaffTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffElectronicMail_PartitionYearId ON [t_edfi].[StaffElectronicMail](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffRace_PartitionYearId ON [t_edfi].[StaffRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffVisa_PartitionYearId ON [t_edfi].[StaffVisa](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffLanguage_PartitionYearId ON [t_edfi].[StaffLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffLanguageUse_PartitionYearId ON [t_edfi].[StaffLanguageUse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffRecognition_PartitionYearId ON [t_edfi].[StaffRecognition](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffCredential_PartitionYearId ON [t_edfi].[StaffCredential](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffIdentificationDocument_PartitionYearId ON [t_edfi].[StaffIdentificationDocument](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffExtension_PartitionYearId ON [t_extension].[StaffExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffBackgroundCheck_PartitionYearId ON [t_extension].[StaffBackgroundCheck](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffHighlyQualifiedAcademicSubject_PartitionYearId ON [t_extension].[StaffHighlyQualifiedAcademicSubject](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffSeniority_PartitionYearId ON [t_extension].[StaffSeniority](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProgram_PartitionYearId ON [t_extension].[StaffTeacherPreparationProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProgramAddress_PartitionYearId ON [t_extension].[StaffTeacherPreparationProgramAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffApplicant_PartitionYearId ON [t_extension].[StaffApplicant](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffSalary_PartitionYearId ON [t_extension].[StaffSalary](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTeacherEducatorResearch_PartitionYearId ON [t_extension].[StaffTeacherEducatorResearch](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffClassificationDescriptor_PartitionYearId ON [t_edfi].[StaffClassificationDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffClassificationDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[StaffClassificationDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffCohortAssociation_PartitionYearId ON [t_edfi].[StaffCohortAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffCohortAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StaffCohortAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffEducationOrganizationAssignmentAssociation_PartitionYearId ON [t_edfi].[StaffEducationOrganizationAssignmentAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffEducationOrganizationAssignmentAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffEducationOrganizationAssignmentAssociationExtension_PartitionYearId ON [t_extension].[StaffEducationOrganizationAssignmentAssociationExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffEducationOrganizationEmploymentAssociation_PartitionYearId ON [t_edfi].[StaffEducationOrganizationEmploymentAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffEducationOrganizationEmploymentAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffIdentificationSystemDescriptor_PartitionYearId ON [t_edfi].[StaffIdentificationSystemDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffIdentificationSystemDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffProgramAssociation_PartitionYearId ON [t_edfi].[StaffProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffProgramAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StaffProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffSchoolAssociation_PartitionYearId ON [t_edfi].[StaffSchoolAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffSchoolAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StaffSchoolAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffSchoolAssociationGradeLevel_PartitionYearId ON [t_edfi].[StaffSchoolAssociationGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffSchoolAssociationAcademicSubject_PartitionYearId ON [t_edfi].[StaffSchoolAssociationAcademicSubject](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffSectionAssociation_PartitionYearId ON [t_edfi].[StaffSectionAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffSectionAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StaffSectionAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StateEducationAgency_PartitionYearId ON [t_edfi].[StateEducationAgency](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StateEducationAgencySnapshotRecord_PartitionYearId ON [t_edfi].[StateEducationAgencySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StateEducationAgencyAccountability_PartitionYearId ON [t_edfi].[StateEducationAgencyAccountability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StateEducationAgencyFederalFunds_PartitionYearId ON [t_edfi].[StateEducationAgencyFederalFunds](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_Student_PartitionYearId ON [t_edfi].[Student](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentSnapshotRecord_PartitionYearId ON [t_edfi].[StudentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentIdentificationCode_PartitionYearId ON [t_edfi].[StudentIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentOtherName_PartitionYearId ON [t_edfi].[StudentOtherName](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAddress_PartitionYearId ON [t_edfi].[StudentAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentInternationalAddress_PartitionYearId ON [t_edfi].[StudentInternationalAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentTelephone_PartitionYearId ON [t_edfi].[StudentTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentElectronicMail_PartitionYearId ON [t_edfi].[StudentElectronicMail](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentRace_PartitionYearId ON [t_edfi].[StudentRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentVisa_PartitionYearId ON [t_edfi].[StudentVisa](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCharacteristic_PartitionYearId ON [t_edfi].[StudentCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentLanguage_PartitionYearId ON [t_edfi].[StudentLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentLanguageUse_PartitionYearId ON [t_edfi].[StudentLanguageUse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentDisability_PartitionYearId ON [t_edfi].[StudentDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentProgramParticipation_PartitionYearId ON [t_edfi].[StudentProgramParticipation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentProgramParticipationProgramCharacteristic_PartitionYearId ON [t_edfi].[StudentProgramParticipationProgramCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentLearningStyle_PartitionYearId ON [t_edfi].[StudentLearningStyle](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCohortYear_PartitionYearId ON [t_edfi].[StudentCohortYear](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentIndicator_PartitionYearId ON [t_edfi].[StudentIndicator](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentIdentificationDocument_PartitionYearId ON [t_edfi].[StudentIdentificationDocument](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAcademicRecord_PartitionYearId ON [t_edfi].[StudentAcademicRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAcademicRecordSnapshotRecord_PartitionYearId ON [t_edfi].[StudentAcademicRecordSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentAcademicRecordClassRanking_PartitionYearId ON [t_edfi].[StudentAcademicRecordClassRanking](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAcademicRecordAcademicHonor_PartitionYearId ON [t_edfi].[StudentAcademicRecordAcademicHonor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAcademicRecordRecognition_PartitionYearId ON [t_edfi].[StudentAcademicRecordRecognition](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAcademicRecordDiploma_PartitionYearId ON [t_edfi].[StudentAcademicRecordDiploma](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAcademicRecordReportCard_PartitionYearId ON [t_edfi].[StudentAcademicRecordReportCard](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessment_PartitionYearId ON [t_edfi].[StudentAssessment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessmentSnapshotRecord_PartitionYearId ON [t_edfi].[StudentAssessmentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentAssessmentAccommodation_PartitionYearId ON [t_edfi].[StudentAssessmentAccommodation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessmentScoreResult_PartitionYearId ON [t_edfi].[StudentAssessmentScoreResult](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessmentPerformanceLevel_PartitionYearId ON [t_edfi].[StudentAssessmentPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessmentItem_PartitionYearId ON [t_edfi].[StudentAssessmentItem](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessmentStudentObjectiveAssessment_PartitionYearId ON [t_edfi].[StudentAssessmentStudentObjectiveAssessment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessmentStudentObjectiveAssessmentScoreResult_PartitionYearId ON [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PartitionYearId ON [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCharacteristicDescriptor_PartitionYearId ON [t_edfi].[StudentCharacteristicDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCharacteristicDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentCohortAssociation_PartitionYearId ON [t_edfi].[StudentCohortAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCohortAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentCohortAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentCohortAssociationSection_PartitionYearId ON [t_edfi].[StudentCohortAssociationSection](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCompetencyObjective_PartitionYearId ON [t_edfi].[StudentCompetencyObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCompetencyObjectiveSnapshotRecord_PartitionYearId ON [t_edfi].[StudentCompetencyObjectiveSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentCTEProgramAssociation_PartitionYearId ON [t_edfi].[StudentCTEProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentCTEProgramAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentCTEProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentCTEProgramAssociationCTEProgram_PartitionYearId ON [t_edfi].[StudentCTEProgramAssociationCTEProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentDisciplineIncidentAssociation_PartitionYearId ON [t_edfi].[StudentDisciplineIncidentAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentDisciplineIncidentAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentDisciplineIncidentAssociationBehavior_PartitionYearId ON [t_edfi].[StudentDisciplineIncidentAssociationBehavior](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentEducationOrganizationAssociation_PartitionYearId ON [t_edfi].[StudentEducationOrganizationAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentEducationOrganizationAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentGradebookEntry_PartitionYearId ON [t_edfi].[StudentGradebookEntry](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentGradebookEntrySnapshotRecord_PartitionYearId ON [t_edfi].[StudentGradebookEntrySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentGradebookEntryExtension_PartitionYearId ON [t_extension].[StudentGradebookEntryExtension](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentIdentificationSystemDescriptor_PartitionYearId ON [t_edfi].[StudentIdentificationSystemDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentIdentificationSystemDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentInterventionAssociation_PartitionYearId ON [t_edfi].[StudentInterventionAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentInterventionAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentInterventionAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentInterventionAssociationInterventionEffectiveness_PartitionYearId ON [t_edfi].[StudentInterventionAssociationInterventionEffectiveness](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentInterventionAttendanceEvent_PartitionYearId ON [t_edfi].[StudentInterventionAttendanceEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentInterventionAttendanceEventSnapshotRecord_PartitionYearId ON [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentLearningObjective_PartitionYearId ON [t_edfi].[StudentLearningObjective](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentLearningObjectiveSnapshotRecord_PartitionYearId ON [t_edfi].[StudentLearningObjectiveSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentMigrantEducationProgramAssociation_PartitionYearId ON [t_edfi].[StudentMigrantEducationProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentMigrantEducationProgramAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentParentAssociation_PartitionYearId ON [t_edfi].[StudentParentAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentParentAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentParentAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentProgramAssociation_PartitionYearId ON [t_edfi].[StudentProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentProgramAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentProgramAssociationService_PartitionYearId ON [t_edfi].[StudentProgramAssociationService](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentProgramAttendanceEvent_PartitionYearId ON [t_edfi].[StudentProgramAttendanceEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentProgramAttendanceEventSnapshotRecord_PartitionYearId ON [t_edfi].[StudentProgramAttendanceEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentSchoolAssociation_PartitionYearId ON [t_edfi].[StudentSchoolAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentSchoolAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentSchoolAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentSchoolAssociationEducationPlan_PartitionYearId ON [t_edfi].[StudentSchoolAssociationEducationPlan](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentSchoolAttendanceEvent_PartitionYearId ON [t_edfi].[StudentSchoolAttendanceEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentSchoolAttendanceEventSnapshotRecord_PartitionYearId ON [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentSectionAssociation_PartitionYearId ON [t_edfi].[StudentSectionAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentSectionAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentSectionAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentSectionAttendanceEvent_PartitionYearId ON [t_edfi].[StudentSectionAttendanceEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentSectionAttendanceEventSnapshotRecord_PartitionYearId ON [t_edfi].[StudentSectionAttendanceEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentSpecialEducationProgramAssociation_PartitionYearId ON [t_edfi].[StudentSpecialEducationProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentSpecialEducationProgramAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentSpecialEducationProgramAssociationServiceProvider_PartitionYearId ON [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentTitleIPartAProgramAssociation_PartitionYearId ON [t_edfi].[StudentTitleIPartAProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentTitleIPartAProgramAssociationSnapshotRecord_PartitionYearId ON [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeachingCredentialDescriptor_PartitionYearId ON [t_edfi].[TeachingCredentialDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeachingCredentialDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[TeachingCredentialDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TermDescriptor_PartitionYearId ON [t_edfi].[TermDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TermDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[TermDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_WeaponDescriptor_PartitionYearId ON [t_edfi].[WeaponDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_WeaponDescriptorSnapshotRecord_PartitionYearId ON [t_edfi].[WeaponDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    

        /*
        Step 7: view database files info to confirm partitioning file group files were added:
        --SELECT DB_NAME() AS Database_Name
        --    , DF.name as Logical_File_Name
        --    , DF.physical_name
        --    , ROUND(CAST((DF.size) AS FLOAT)/128,2) AS SizeMB
        --    , ROUND(CAST((FILEPROPERTY(DF.name,'SpaceUsed')) AS FLOAT)/128,2) AS SpaceUsedMB
        --    , ROUND((CAST((DF.size) AS FLOAT)/128)-(CAST((FILEPROPERTY(DF.name,'SpaceUsed'))AS FLOAT)/128),2) AS SpaceFreeMB
        --    , ROUND((((CAST((DF.size) AS FLOAT)/128)-(CAST((FILEPROPERTY(DF.name,'SpaceUsed'))AS FLOAT)/128)) / (CAST((DF.size) AS FLOAT)/128) * 100),4) AS PercentSpaceFree
        --FROM sys.database_files AS DF
        */

        /*
        Step 8: additional view into the partitioning
        --SELECT o.name objectname,i.name indexname, partition_id, partition_number, [rows]
        --FROM sys.partitions p
        --INNER JOIN sys.objects o ON o.object_id=p.object_id
        --INNER JOIN sys.indexes i ON i.object_id=p.object_id and p.index_id=i.index_id
        --WHERE o.name LIKE '%***tablename***%';

        --SELECT ps.name,pf.name,boundary_id,value
        --FROM sys.partition_schemes ps
        --INNER JOIN sys.partition_functions pf ON pf.function_id=ps.function_id
        --INNER JOIN sys.partition_range_values prf ON pf.function_id=prf.function_id
        */

    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

            BEGIN TRANSACTION
                INSERT INTO [tods].[AuditLog]
                (
                    ErrorNumber
                    , ErrorMessage
                    , ErrorSeverity
                    , ErrorState
                    , ErrorLine
                    , ErrorSproc
                )
                SELECT
                    (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                    , ERROR_MESSAGE()
                    , CAST(ERROR_SEVERITY() AS VARCHAR(10))
                    , CAST(ERROR_STATE() AS VARCHAR(10))
                    , CAST(ERROR_LINE() AS VARCHAR(10))
                    , COALESCE(ERROR_PROCEDURE(), 'error not within a sproc')
            COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO

/****** TYPE: [t_edfi].[udt_AcademicSubjectDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AcademicSubjectDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AcademicSubjectType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AcademicSubjectDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AcademicSubjectDescriptorKey] AS TABLE
(
    [tid_AcademicSubjectDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAcademicSubjectDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAcademicSubjectDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AcademicSubjectDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AcademicSubjectDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AcademicSubjectType].[ShortDescription] AS AcademicSubjectType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AcademicSubjectDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AcademicSubjectType] AS AcademicSubjectType
                    ON [AcademicSubjectType].[AcademicSubjectTypeId] = T.[AcademicSubjectTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AcademicSubjectType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AcademicSubjectType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AcademicSubjectDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AcademicSubjectDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AcademicSubjectDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AcademicSubjectDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AcademicSubjectDescriptor] AS S
                ON P.[DescriptorId] = S.[AcademicSubjectDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AcademicWeek] ******/

CREATE TYPE [t_edfi].[udt_AcademicWeek] AS TABLE
(
    [SchoolId] [INT] NOT NULL
    , [WeekIdentifier] [NVARCHAR](80) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EndDate] [DATE] NOT NULL
    , [TotalInstructionalDays] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AcademicWeekKey] ******/

CREATE TYPE [t_edfi].[udt_AcademicWeekKey] AS TABLE
(
    [tid_AcademicWeek] [INT] NOT NULL PRIMARY KEY
    , [SchoolId] [INT] NOT NULL
    , [WeekIdentifier] [NVARCHAR](80) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAcademicWeek] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAcademicWeek]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AcademicWeekKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AcademicWeek] AS T
            USING
            (
                SELECT T.[SchoolId]
                , T.[WeekIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[TotalInstructionalDays]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[AcademicWeek] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolId]
                    , [WeekIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [TotalInstructionalDays]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolId]
                    , S.[WeekIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TotalInstructionalDays]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AcademicWeek]
                , INSERTED.[SchoolId]
                , INSERTED.[WeekIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AcademicWeekSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AcademicWeek]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AcademicWeek]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AcademicWeek] AS T
            JOIN [Ods_Snapshot].[edfi].[AcademicWeek] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AccommodationDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AccommodationDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AccommodationType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AccommodationDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AccommodationDescriptorKey] AS TABLE
(
    [tid_AccommodationDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccommodationDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAccommodationDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccommodationDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AccommodationDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AccommodationType].[ShortDescription] AS AccommodationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AccommodationDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AccommodationDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[AccommodationType] AS AccommodationType
                    ON [AccommodationType].[AccommodationTypeId] = T.[AccommodationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AccommodationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AccommodationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AccommodationDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccommodationDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AccommodationDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AccommodationDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AccommodationDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AccommodationDescriptor] AS S
                ON P.[DescriptorId] = S.[AccommodationDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Account] ******/

CREATE TYPE [t_edfi].[udt_Account] AS TABLE
(
    [AccountNumber] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AccountKey] ******/

CREATE TYPE [t_edfi].[udt_AccountKey] AS TABLE
(
    [tid_Account] [INT] NOT NULL PRIMARY KEY
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccount] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAccount]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Account] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Account] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Account]
                , INSERTED.[AccountNumber]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccountSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Account]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Account]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Account] AS T
            JOIN [Ods_Snapshot].[edfi].[Account] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAccountCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAccountExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AccountCode] ******/

CREATE TYPE [t_edfi].[udt_AccountCode] AS TABLE
(
    [AccountCodeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [AccountCodeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AccountCodeKey] ******/

CREATE TYPE [t_edfi].[udt_AccountCodeKey] AS TABLE
(
    [tid_AccountCode] [INT] NOT NULL PRIMARY KEY
    , [AccountCodeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [AccountCodeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccountCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAccountCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AccountKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AccountCode]
            (
                [tid_Account]
                , [AccountCodeDescriptorCodeValue]
                , [AccountCodeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Account]
                , S.[AccountCodeDescriptorCodeValue]
                , S.[AccountCodeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AccountCodeDescriptor.[CodeValue] AS AccountCodeDescriptorCodeValue, T.[AccountNumber], T.[EducationOrganizationId], T.[FiscalYear], AccountCodeDescriptor.[Namespace] AS AccountCodeDescriptorNamespace
                , T.[CreateDate]
                , Account.[LastModifiedDate] AS ParentLastModifiedDate
                , Account.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AccountCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AccountCodeDescriptor
                    ON AccountCodeDescriptor.[DescriptorId] = T.[AccountCodeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Account] AS Account
                    ON Account.[AccountNumber] = T.[AccountNumber]
                    AND Account.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Account.[FiscalYear] = T.[FiscalYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AccountExtension] ******/

CREATE TYPE [t_extension].[udt_AccountExtension] AS TABLE
(
    [AccountNumber] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [ActualPurchaseOrderCarryForwardCurrentYear] [MONEY] NULL
    , [ActualCurrentYear] [MONEY] NULL
    , [CarryForwardCurrentYear] [MONEY] NULL
    , [CarryForwardTransferCurrentYear] [MONEY] NULL
    , [EncumbPurchaseOrderCarryForwardCurrentYear] [MONEY] NULL
    , [EncumbranceCurrentYear] [MONEY] NULL
    , [LongDescription] [NVARCHAR](30) NULL
    , [RequisitionCurrentYear] [MONEY] NULL
    , [RevisedCurrentYear] [MONEY] NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AccountExtensionKey] ******/

CREATE TYPE [t_extension].[udt_AccountExtensionKey] AS TABLE
(
    [tid_AccountExtension] [INT] NOT NULL PRIMARY KEY
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAccountExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbAccountExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AccountKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AccountExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AccountExtension]
            (
                [tid_Account]
                , [ActualPurchaseOrderCarryForwardCurrentYear]
                , [ActualCurrentYear]
                , [CarryForwardCurrentYear]
                , [CarryForwardTransferCurrentYear]
                , [EncumbPurchaseOrderCarryForwardCurrentYear]
                , [EncumbranceCurrentYear]
                , [LongDescription]
                , [RequisitionCurrentYear]
                , [RevisedCurrentYear]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Account]
                , S.[ActualPurchaseOrderCarryForwardCurrentYear]
                , S.[ActualCurrentYear]
                , S.[CarryForwardCurrentYear]
                , S.[CarryForwardTransferCurrentYear]
                , S.[EncumbPurchaseOrderCarryForwardCurrentYear]
                , S.[EncumbranceCurrentYear]
                , S.[LongDescription]
                , S.[RequisitionCurrentYear]
                , S.[RevisedCurrentYear]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AccountNumber], T.[EducationOrganizationId], T.[FiscalYear], T.[ActualPurchaseOrderCarryForwardCurrentYear], T.[ActualCurrentYear], T.[CarryForwardCurrentYear], T.[CarryForwardTransferCurrentYear], T.[EncumbPurchaseOrderCarryForwardCurrentYear], T.[EncumbranceCurrentYear], T.[LongDescription], T.[RequisitionCurrentYear], T.[RevisedCurrentYear]
                , Account.[LastModifiedDate] AS ParentLastModifiedDate
                , Account.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[AccountExtension] AS T 
                JOIN [Ods_Snapshot].[edfi].[Account] AS Account
                    ON Account.[AccountNumber] = T.[AccountNumber]
                    AND Account.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Account.[FiscalYear] = T.[FiscalYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AccountabilityRating] ******/

CREATE TYPE [t_edfi].[udt_AccountabilityRating] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [RatingTitle] [NVARCHAR](60) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [Rating] [NVARCHAR](35) NOT NULL
    , [RatingDate] [DATE] NULL
    , [RatingOrganization] [NVARCHAR](35) NULL
    , [RatingProgram] [NVARCHAR](30) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AccountabilityRatingKey] ******/

CREATE TYPE [t_edfi].[udt_AccountabilityRatingKey] AS TABLE
(
    [tid_AccountabilityRating] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [RatingTitle] [NVARCHAR](60) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccountabilityRating] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAccountabilityRating]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountabilityRatingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AccountabilityRating] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[RatingTitle]
                , T.[SchoolYear]
                , T.[Rating]
                , T.[RatingDate]
                , T.[RatingOrganization]
                , T.[RatingProgram]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[AccountabilityRating] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [RatingTitle]
                    , [SchoolYear]
                    , [Rating]
                    , [RatingDate]
                    , [RatingOrganization]
                    , [RatingProgram]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[RatingTitle]
                    , S.[SchoolYear]
                    , S.[Rating]
                    , S.[RatingDate]
                    , S.[RatingOrganization]
                    , S.[RatingProgram]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AccountabilityRating]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[RatingTitle]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccountabilityRatingSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AccountabilityRating]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AccountabilityRating]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AccountabilityRating] AS T
            JOIN [Ods_Snapshot].[edfi].[AccountabilityRating] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AccountCodeDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AccountCodeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AccountCodeCategory] [NVARCHAR](20) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AccountCodeDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AccountCodeDescriptorKey] AS TABLE
(
    [tid_AccountCodeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccountCodeDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAccountCodeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountCodeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AccountCodeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , T.[AccountCodeCategory]
                , T.[BeginDate]
                , T.[EndDate]
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AccountCodeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AccountCodeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AccountCodeCategory]
                    , [BeginDate]
                    , [EndDate]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AccountCodeCategory]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AccountCodeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccountCodeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AccountCodeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AccountCodeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AccountCodeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AccountCodeDescriptor] AS S
                ON P.[DescriptorId] = S.[AccountCodeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AchievementCategoryDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AchievementCategoryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AchievementCategoryType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AchievementCategoryDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AchievementCategoryDescriptorKey] AS TABLE
(
    [tid_AchievementCategoryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAchievementCategoryDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAchievementCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AchievementCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AchievementCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AchievementCategoryType].[ShortDescription] AS AchievementCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AchievementCategoryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[AchievementCategoryType] AS AchievementCategoryType
                    ON [AchievementCategoryType].[AchievementCategoryTypeId] = T.[AchievementCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AchievementCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AchievementCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AchievementCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AchievementCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AchievementCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AchievementCategoryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AchievementCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AchievementCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Actual] ******/

CREATE TYPE [t_edfi].[udt_Actual] AS TABLE
(
    [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [AmountToDate] [MONEY] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ActualKey] ******/

CREATE TYPE [t_edfi].[udt_ActualKey] AS TABLE
(
    [tid_Actual] [INT] NOT NULL PRIMARY KEY
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbActual] ******/

CREATE PROCEDURE [t_edfi].[usp_dbActual]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ActualKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Actual] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , T.[AmountToDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Actual] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [AmountToDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[AmountToDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Actual]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ActualSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Actual]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Actual]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Actual] AS T
            JOIN [Ods_Snapshot].[edfi].[Actual] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AdministrativeFundingControlDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AdministrativeFundingControlDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrativeFundingControlType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AdministrativeFundingControlDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AdministrativeFundingControlDescriptorKey] AS TABLE
(
    [tid_AdministrativeFundingControlDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAdministrativeFundingControlDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAdministrativeFundingControlDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AdministrativeFundingControlDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AdministrativeFundingControlDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AdministrativeFundingControlType].[ShortDescription] AS AdministrativeFundingControlType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AdministrativeFundingControlDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AdministrativeFundingControlDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[AdministrativeFundingControlType] AS AdministrativeFundingControlType
                    ON [AdministrativeFundingControlType].[AdministrativeFundingControlTypeId] = T.[AdministrativeFundingControlTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AdministrativeFundingControlType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AdministrativeFundingControlType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AdministrativeFundingControlDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AdministrativeFundingControlDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AdministrativeFundingControlDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AdministrativeFundingControlDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AdministrativeFundingControlDescriptor] AS S
                ON P.[DescriptorId] = S.[AdministrativeFundingControlDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Assessment] ******/

CREATE TYPE [t_edfi].[udt_Assessment] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [LowestAssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AssessmentForm] [NVARCHAR](60) NULL
    , [RevisionDate] [DATE] NULL
    , [MaxRawScore] [INT] NULL
    , [Nomenclature] [NVARCHAR](35) NULL
    , [AssessmentPeriodDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AssessmentFamilyTitle] [NVARCHAR](60) NULL
    , [Namespace] [NVARCHAR](255) NULL
    , [AssessmentPeriodDescriptorNamespace] [NVARCHAR](255) NULL
    , [LowestAssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentKey] AS TABLE
(
    [tid_Assessment] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessment] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Assessment] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , T.[Version]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , LowestAssessedGradeLevelDescriptor.[CodeValue] AS LowestAssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentForm]
                , T.[RevisionDate]
                , T.[MaxRawScore]
                , T.[Nomenclature]
                , AssessmentPeriodDescriptor.[CodeValue] AS AssessmentPeriodDescriptorCodeValue
                , T.[AssessmentFamilyTitle]
                , T.[Namespace]
                , AssessmentPeriodDescriptor.[Namespace] AS AssessmentPeriodDescriptorNamespace
                , LowestAssessedGradeLevelDescriptor.[Namespace] AS LowestAssessedGradeLevelDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Assessment] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LowestAssessedGradeLevelDescriptor
                    ON [LowestAssessedGradeLevelDescriptor].[DescriptorId] = T.[LowestAssessedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentPeriodDescriptor
                    ON [AssessmentPeriodDescriptor].[DescriptorId] = T.[AssessmentPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [Version]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [LowestAssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentForm]
                    , [RevisionDate]
                    , [MaxRawScore]
                    , [Nomenclature]
                    , [AssessmentPeriodDescriptorCodeValue]
                    , [AssessmentFamilyTitle]
                    , [Namespace]
                    , [AssessmentPeriodDescriptorNamespace]
                    , [LowestAssessedGradeLevelDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[Version]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[LowestAssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentForm]
                    , S.[RevisionDate]
                    , S.[MaxRawScore]
                    , S.[Nomenclature]
                    , S.[AssessmentPeriodDescriptorCodeValue]
                    , S.[AssessmentFamilyTitle]
                    , S.[Namespace]
                    , S.[AssessmentPeriodDescriptorNamespace]
                    , S.[LowestAssessedGradeLevelDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Assessment]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Assessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Assessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Assessment] AS T
            JOIN [Ods_Snapshot].[edfi].[Assessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentScore] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentSection] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAssessmentExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_AssessmentIdentificationCode] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL
    , [AssessmentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentIdentificationCodeKey] AS TABLE
(
    [tid_AssessmentIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessmentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentIdentificationCode]
            (
                [tid_Assessment]
                , [AssessmentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [AssessmentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[AssessmentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[AssessmentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentIdentificationSystemDescriptor.[CodeValue] AS AssessmentIdentificationSystemDescriptorCodeValue, T.[AssessmentTitle], T.[Version], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], AssessmentIdentificationSystemDescriptor.[Namespace] AS AssessmentIdentificationSystemDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentIdentificationSystemDescriptor
                    ON AssessmentIdentificationSystemDescriptor.[DescriptorId] = T.[AssessmentIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentScore] ******/

CREATE TYPE [t_edfi].[udt_AssessmentScore] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [MinimumScore] [NVARCHAR](35) NULL
    , [MaximumScore] [NVARCHAR](35) NULL
    , [ResultDatatypeType] [NVARCHAR](450) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentScoreKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentScoreKey] AS TABLE
(
    [tid_AssessmentScore] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentScore] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentScore]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentScoreKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentScore]
            (
                [tid_Assessment]
                , [AssessmentReportingMethodType]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[AssessmentReportingMethodType]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentScore] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentPerformanceLevel] ******/

CREATE TYPE [t_edfi].[udt_AssessmentPerformanceLevel] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Version] [INT] NOT NULL
    , [MinimumScore] [NVARCHAR](35) NULL
    , [MaximumScore] [NVARCHAR](35) NULL
    , [ResultDatatypeType] [NVARCHAR](450) NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentPerformanceLevelKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentPerformanceLevelKey] AS TABLE
(
    [tid_AssessmentPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Version] [INT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentPerformanceLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentPerformanceLevel]
            (
                [tid_Assessment]
                , [AssessmentReportingMethodType]
                , [PerformanceLevelDescriptorCodeValue]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[AssessmentReportingMethodType]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentContentStandard] ******/

CREATE TYPE [t_edfi].[udt_AssessmentContentStandard] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentVersion] [INT] NOT NULL
    , [Title] [NVARCHAR](75) NOT NULL
    , [Version] [NVARCHAR](50) NULL
    , [URI] [NVARCHAR](255) NULL
    , [PublicationDate] [DATE] NULL
    , [PublicationYear] [SMALLINT] NULL
    , [PublicationStatusType] [NVARCHAR](450) NULL
    , [MandatingEducationOrganizationId] [INT] NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentContentStandardKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentContentStandardKey] AS TABLE
(
    [tid_AssessmentContentStandard] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentVersion] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentContentStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentContentStandard]
            (
                [tid_Assessment]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_AssessmentContentStandard]
            INTO @Tids
            SELECT T.[tid_Assessment]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[AssessmentVersion], T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentContentStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[AssessmentVersion]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_AssessmentContentStandard]
                , T.[AcademicSubjectDescriptorCodeValue]
                , T.[AssessedGradeLevelDescriptorCodeValue]
                , T.[AssessmentTitle]
                , T.[Version]
                , T.[AssessedGradeLevelDescriptorNamespace]
                , T.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[AssessmentContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_Assessment] = T.[tid_Assessment]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_AssessmentContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentContentStandardAuthor] ******/

CREATE TYPE [t_edfi].[udt_AssessmentContentStandardAuthor] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentVersion] [INT] NOT NULL
    , [Author] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentContentStandardAuthorKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentContentStandardAuthorKey] AS TABLE
(
    [tid_AssessmentContentStandardAuthor] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentVersion] [INT] NOT NULL
    , [Author] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentContentStandardAuthor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentContentStandardAuthor]
            (
                [tid_AssessmentContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[AssessmentVersion], T.[Author], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[AssessmentContentStandardAuthor] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[AssessmentVersion] = S.[AssessmentVersion]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentLanguage] ******/

CREATE TYPE [t_edfi].[udt_AssessmentLanguage] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Version] [INT] NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentLanguageKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentLanguageKey] AS TABLE
(
    [tid_AssessmentLanguage] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Version] [INT] NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentLanguage] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentLanguage]
            (
                [tid_Assessment]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[Version], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentSection] ******/

CREATE TYPE [t_edfi].[udt_AssessmentSection] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [Version] [INT] NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentSectionKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentSectionKey] AS TABLE
(
    [tid_AssessmentSection] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [Version] [INT] NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentSection] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentSection]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentSectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentSection]
            (
                [tid_Assessment]
                , [ClassPeriodName]
                , [ClassroomIdentificationCode]
                , [LocalCourseCode]
                , [SchoolId]
                , [SchoolYear]
                , [SequenceOfCourse]
                , [TermDescriptorCodeValue]
                , [UniqueSectionCode]
                , [TermDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[ClassPeriodName]
                , S.[ClassroomIdentificationCode]
                , S.[LocalCourseCode]
                , S.[SchoolId]
                , S.[SchoolYear]
                , S.[SequenceOfCourse]
                , S.[TermDescriptorCodeValue]
                , S.[UniqueSectionCode]
                , S.[TermDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[Version], TermDescriptor.[Namespace] AS TermDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentSection] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentProgram] ******/

CREATE TYPE [t_edfi].[udt_AssessmentProgram] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentProgramKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentProgramKey] AS TABLE
(
    [tid_AssessmentProgram] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentProgram] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentProgram]
            (
                [tid_Assessment]
                , [EducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[EducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[EducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentProgram] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AssessmentExtension] ******/

CREATE TYPE [t_extension].[udt_AssessmentExtension] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AssessmentExtensionKey] ******/

CREATE TYPE [t_extension].[udt_AssessmentExtensionKey] AS TABLE
(
    [tid_AssessmentExtension] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAssessmentExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbAssessmentExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AssessmentExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AssessmentExtension]
            (
                [tid_Assessment]
                , [ProgramGatewayDescriptorCodeValue]
                , [ProgramGatewayDescriptorNamespace]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[ProgramGatewayDescriptorCodeValue]
                , S.[ProgramGatewayDescriptorNamespace]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[Version], ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue, ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[AssessmentExtension] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON ProgramGatewayDescriptor.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentCategoryDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AssessmentCategoryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentCategoryType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentCategoryDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentCategoryDescriptorKey] AS TABLE
(
    [tid_AssessmentCategoryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentCategoryDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AssessmentCategoryType].[ShortDescription] AS AssessmentCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AssessmentCategoryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[AssessmentCategoryType] AS AssessmentCategoryType
                    ON [AssessmentCategoryType].[AssessmentCategoryTypeId] = T.[AssessmentCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AssessmentCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AssessmentCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentCategoryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AssessmentCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AssessmentCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentFamily] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamily] AS TABLE
(
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [LowestAssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [Version] [INT] NULL
    , [RevisionDate] [DATE] NULL
    , [Nomenclature] [NVARCHAR](35) NULL
    , [ParentAssessmentFamilyTitle] [NVARCHAR](60) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LowestAssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentFamilyKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyKey] AS TABLE
(
    [tid_AssessmentFamily] [INT] NOT NULL PRIMARY KEY
    , [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamily] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamily]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentFamily] AS T
            USING
            (
                SELECT T.[AssessmentFamilyTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , LowestAssessedGradeLevelDescriptor.[CodeValue] AS LowestAssessedGradeLevelDescriptorCodeValue
                , T.[Version]
                , T.[RevisionDate]
                , T.[Nomenclature]
                , T.[ParentAssessmentFamilyTitle]
                , T.[Namespace]
                , LowestAssessedGradeLevelDescriptor.[Namespace] AS LowestAssessedGradeLevelDescriptorNamespace
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[AssessmentFamily] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LowestAssessedGradeLevelDescriptor
                    ON [LowestAssessedGradeLevelDescriptor].[DescriptorId] = T.[LowestAssessedGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AssessmentFamilyTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [LowestAssessedGradeLevelDescriptorCodeValue]
                    , [Version]
                    , [RevisionDate]
                    , [Nomenclature]
                    , [ParentAssessmentFamilyTitle]
                    , [Namespace]
                    , [LowestAssessedGradeLevelDescriptorNamespace]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AssessmentFamilyTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[LowestAssessedGradeLevelDescriptorCodeValue]
                    , S.[Version]
                    , S.[RevisionDate]
                    , S.[Nomenclature]
                    , S.[ParentAssessmentFamilyTitle]
                    , S.[Namespace]
                    , S.[LowestAssessedGradeLevelDescriptorNamespace]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentFamily]
                , INSERTED.[AssessmentFamilyTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentFamilySnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentFamily]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentFamily]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentFamily] AS T
            JOIN [Ods_Snapshot].[edfi].[AssessmentFamily] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentFamilyIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamilyContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamilyLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentFamilyIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyIdentificationCode] AS TABLE
(
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL
    , [AssessmentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentFamilyIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyIdentificationCodeKey] AS TABLE
(
    [tid_AssessmentFamilyIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyIdentificationCode]
            (
                [tid_AssessmentFamily]
                , [AssessmentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [AssessmentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamily]
                , S.[AssessmentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[AssessmentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], AssessmentIdentificationSystemDescriptor.[CodeValue] AS AssessmentIdentificationSystemDescriptorCodeValue, T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], AssessmentIdentificationSystemDescriptor.[Namespace] AS AssessmentIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentFamilyIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentIdentificationSystemDescriptor
                    ON AssessmentIdentificationSystemDescriptor.[DescriptorId] = T.[AssessmentIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentFamilyContentStandard] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyContentStandard] AS TABLE
(
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [Title] [NVARCHAR](75) NOT NULL
    , [Version] [NVARCHAR](50) NULL
    , [URI] [NVARCHAR](255) NULL
    , [PublicationDate] [DATE] NULL
    , [PublicationYear] [SMALLINT] NULL
    , [PublicationStatusType] [NVARCHAR](450) NULL
    , [MandatingEducationOrganizationId] [INT] NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentFamilyContentStandardKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyContentStandardKey] AS TABLE
(
    [tid_AssessmentFamilyContentStandard] [INT] NOT NULL PRIMARY KEY
    , [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyContentStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyContentStandard]
            (
                [tid_AssessmentFamily]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_AssessmentFamilyContentStandard]
            INTO @Tids
            SELECT T.[tid_AssessmentFamily]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentFamilyContentStandard] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_AssessmentFamilyContentStandard]
                , T.[AssessmentFamilyTitle]
            FROM [t_edfi].[AssessmentFamilyContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_AssessmentFamily] = T.[tid_AssessmentFamily]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_AssessmentFamilyContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentFamilyContentStandardAuthor] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyContentStandardAuthor] AS TABLE
(
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [Author] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentFamilyContentStandardAuthorKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyContentStandardAuthorKey] AS TABLE
(
    [tid_AssessmentFamilyContentStandardAuthor] [INT] NOT NULL PRIMARY KEY
    , [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [Author] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyContentStandardAuthor]
            (
                [tid_AssessmentFamilyContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamilyContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], T.[Author]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[AssessmentFamilyContentStandardAuthor] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[AssessmentFamilyTitle] = S.[AssessmentFamilyTitle];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentFamilyLanguage] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyLanguage] AS TABLE
(
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentFamilyLanguageKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyLanguageKey] AS TABLE
(
    [tid_AssessmentFamilyLanguage] [INT] NOT NULL PRIMARY KEY
    , [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyLanguage] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyLanguage]
            (
                [tid_AssessmentFamily]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamily]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentFamilyLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentFamilyAssessmentPeriod] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyAssessmentPeriod] AS TABLE
(
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentFamilyAssessmentPeriodKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentFamilyAssessmentPeriodKey] AS TABLE
(
    [tid_AssessmentFamilyAssessmentPeriod] [INT] NOT NULL PRIMARY KEY
    , [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL
    , [AssessmentPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyAssessmentPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyAssessmentPeriod]
            (
                [tid_AssessmentFamily]
                , [AssessmentPeriodDescriptorCodeValue]
                , [AssessmentPeriodDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamily]
                , S.[AssessmentPeriodDescriptorCodeValue]
                , S.[AssessmentPeriodDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], AssessmentPeriodDescriptor.[CodeValue] AS AssessmentPeriodDescriptorCodeValue, AssessmentPeriodDescriptor.[Namespace] AS AssessmentPeriodDescriptorNamespace
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentFamilyAssessmentPeriod] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentPeriodDescriptor
                    ON AssessmentPeriodDescriptor.[DescriptorId] = T.[AssessmentPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentIdentificationSystemDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AssessmentIdentificationSystemDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentIdentificationSystemType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentIdentificationSystemDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentIdentificationSystemDescriptorKey] AS TABLE
(
    [tid_AssessmentIdentificationSystemDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AssessmentIdentificationSystemType].[ShortDescription] AS AssessmentIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AssessmentIdentificationSystemDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AssessmentIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentIdentificationSystemType] AS AssessmentIdentificationSystemType
                    ON [AssessmentIdentificationSystemType].[AssessmentIdentificationSystemTypeId] = T.[AssessmentIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AssessmentIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AssessmentIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentIdentificationSystemDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AssessmentIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[AssessmentIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentItem] ******/

CREATE TYPE [t_edfi].[udt_AssessmentItem] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessmentItemCategoryType] [NVARCHAR](450) NULL
    , [MaxRawScore] [INT] NULL
    , [CorrectResponse] [NVARCHAR](20) NULL
    , [ExpectedTimeAssessed] [NVARCHAR](30) NULL
    , [Nomenclature] [NVARCHAR](35) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentItemKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentItemKey] AS TABLE
(
    [tid_AssessmentItem] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentItem] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentItem]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentItemKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentItem] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , T.[IdentificationCode]
                , T.[Version]
                , [AssessmentItemCategoryType].[ShortDescription] AS AssessmentItemCategoryType
                , T.[MaxRawScore]
                , T.[CorrectResponse]
                , T.[ExpectedTimeAssessed]
                , T.[Nomenclature]
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[AssessmentItem] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[AssessmentItemCategoryType] AS AssessmentItemCategoryType
                    ON [AssessmentItemCategoryType].[AssessmentItemCategoryTypeId] = T.[AssessmentItemCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [IdentificationCode]
                    , [Version]
                    , [AssessmentItemCategoryType]
                    , [MaxRawScore]
                    , [CorrectResponse]
                    , [ExpectedTimeAssessed]
                    , [Nomenclature]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[IdentificationCode]
                    , S.[Version]
                    , S.[AssessmentItemCategoryType]
                    , S.[MaxRawScore]
                    , S.[CorrectResponse]
                    , S.[ExpectedTimeAssessed]
                    , S.[Nomenclature]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentItem]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[IdentificationCode]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentItemSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentItem]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentItem]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentItem] AS T
            JOIN [Ods_Snapshot].[edfi].[AssessmentItem] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentItemLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentItemLearningStandard] ******/

CREATE TYPE [t_edfi].[udt_AssessmentItemLearningStandard] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentItemLearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentItemLearningStandardKey] AS TABLE
(
    [tid_AssessmentItemLearningStandard] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentItemLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentItemLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentItemKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentItemLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentItemLearningStandard]
            (
                [tid_AssessmentItem]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentItem]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], T.[LearningStandardId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , AssessmentItem.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentItem.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[AssessmentItemLearningStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentItem] AS AssessmentItem
                    ON AssessmentItem.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND AssessmentItem.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND AssessmentItem.[AssessmentTitle] = T.[AssessmentTitle]
                    AND AssessmentItem.[IdentificationCode] = T.[IdentificationCode]
                    AND AssessmentItem.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AssessmentPeriodDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AssessmentPeriodDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AssessmentPeriodDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AssessmentPeriodDescriptorKey] AS TABLE
(
    [tid_AssessmentPeriodDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentPeriodDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentPeriodDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentPeriodDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentPeriodDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , T.[BeginDate]
                , T.[EndDate]
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AssessmentPeriodDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AssessmentPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BeginDate]
                    , [EndDate]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentPeriodDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentPeriodDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentPeriodDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentPeriodDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AssessmentPeriodDescriptor] AS S
                ON P.[DescriptorId] = S.[AssessmentPeriodDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_AttendanceEventCategoryDescriptor] ******/

CREATE TYPE [t_edfi].[udt_AttendanceEventCategoryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AttendanceEventCategoryType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_AttendanceEventCategoryDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_AttendanceEventCategoryDescriptorKey] AS TABLE
(
    [tid_AttendanceEventCategoryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbAttendanceEventCategoryDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbAttendanceEventCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AttendanceEventCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AttendanceEventCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AttendanceEventCategoryType].[ShortDescription] AS AttendanceEventCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[AttendanceEventCategoryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AttendanceEventCategoryType] AS AttendanceEventCategoryType
                    ON [AttendanceEventCategoryType].[AttendanceEventCategoryTypeId] = T.[AttendanceEventCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AttendanceEventCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AttendanceEventCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AttendanceEventCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AttendanceEventCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AttendanceEventCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AttendanceEventCategoryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[AttendanceEventCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AttendanceEventCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_BehaviorDescriptor] ******/

CREATE TYPE [t_edfi].[udt_BehaviorDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [BehaviorType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_BehaviorDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_BehaviorDescriptorKey] AS TABLE
(
    [tid_BehaviorDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbBehaviorDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbBehaviorDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BehaviorDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[BehaviorDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BehaviorType].[ShortDescription] AS BehaviorType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[BehaviorDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BehaviorDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[BehaviorType] AS BehaviorType
                    ON [BehaviorType].[BehaviorTypeId] = T.[BehaviorTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BehaviorType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BehaviorType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BehaviorDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[BehaviorDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BehaviorDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BehaviorDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[BehaviorDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[BehaviorDescriptor] AS S
                ON P.[DescriptorId] = S.[BehaviorDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_BellSchedule] ******/

CREATE TYPE [t_edfi].[udt_BellSchedule] AS TABLE
(
    [BellScheduleName] [NVARCHAR](60) NOT NULL
    , [Date] [DATE] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_BellScheduleKey] ******/

CREATE TYPE [t_edfi].[udt_BellScheduleKey] AS TABLE
(
    [tid_BellSchedule] [INT] NOT NULL PRIMARY KEY
    , [BellScheduleName] [NVARCHAR](60) NOT NULL
    , [Date] [DATE] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbBellSchedule] ******/

CREATE PROCEDURE [t_edfi].[usp_dbBellSchedule]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BellScheduleKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[BellSchedule] AS T
            USING
            (
                SELECT T.[BellScheduleName]
                , T.[Date]
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[SchoolId]
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[BellSchedule] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BellScheduleName]
                    , [Date]
                    , [GradeLevelDescriptorCodeValue]
                    , [SchoolId]
                    , [GradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BellScheduleName]
                    , S.[Date]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BellSchedule]
                , INSERTED.[BellScheduleName]
                , INSERTED.[Date]
                , INSERTED.[GradeLevelDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[GradeLevelDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[BellScheduleSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BellSchedule]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BellSchedule]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[BellSchedule] AS T
            JOIN [Ods_Snapshot].[edfi].[BellSchedule] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbBellScheduleMeetingTime] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_BellScheduleMeetingTime] ******/

CREATE TYPE [t_edfi].[udt_BellScheduleMeetingTime] AS TABLE
(
    [BellScheduleName] [NVARCHAR](60) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [Date] [DATE] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StartTime] [TIME](7) NOT NULL
    , [AlternateDayName] [NVARCHAR](20) NULL
    , [EndTime] [TIME](7) NOT NULL
    , [OfficialAttendancePeriod] [BIT] NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_BellScheduleMeetingTimeKey] ******/

CREATE TYPE [t_edfi].[udt_BellScheduleMeetingTimeKey] AS TABLE
(
    [tid_BellScheduleMeetingTime] [INT] NOT NULL PRIMARY KEY
    , [BellScheduleName] [NVARCHAR](60) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [Date] [DATE] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StartTime] [TIME](7) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbBellScheduleMeetingTime] ******/

CREATE PROCEDURE [t_edfi].[usp_dbBellScheduleMeetingTime]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_BellScheduleKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BellScheduleMeetingTimeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[BellScheduleMeetingTime]
            (
                [tid_BellSchedule]
                , [ClassPeriodName]
                , [StartTime]
                , [AlternateDayName]
                , [EndTime]
                , [OfficialAttendancePeriod]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_BellSchedule]
                , S.[ClassPeriodName]
                , S.[StartTime]
                , S.[AlternateDayName]
                , S.[EndTime]
                , S.[OfficialAttendancePeriod]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BellScheduleName], T.[ClassPeriodName], T.[Date], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[SchoolId], T.[StartTime], T.[AlternateDayName], T.[EndTime], T.[OfficialAttendancePeriod], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , BellSchedule.[LastModifiedDate] AS ParentLastModifiedDate
                , BellSchedule.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[BellScheduleMeetingTime] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[BellSchedule] AS BellSchedule
                    ON BellSchedule.[BellScheduleName] = T.[BellScheduleName]
                    AND BellSchedule.[Date] = T.[Date]
                    AND BellSchedule.[GradeLevelDescriptorId] = T.[GradeLevelDescriptorId]
                    AND BellSchedule.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Budget] ******/

CREATE TYPE [t_edfi].[udt_Budget] AS TABLE
(
    [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [Amount] [MONEY] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_BudgetKey] ******/

CREATE TYPE [t_edfi].[udt_BudgetKey] AS TABLE
(
    [tid_Budget] [INT] NOT NULL PRIMARY KEY
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbBudget] ******/

CREATE PROCEDURE [t_edfi].[usp_dbBudget]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BudgetKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Budget] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , T.[Amount]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Budget] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [Amount]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[Amount]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Budget]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[BudgetSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Budget]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Budget]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Budget] AS T
            JOIN [Ods_Snapshot].[edfi].[Budget] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CalendarDate] ******/

CREATE TYPE [t_edfi].[udt_CalendarDate] AS TABLE
(
    [Date] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CalendarDateKey] ******/

CREATE TYPE [t_edfi].[udt_CalendarDateKey] AS TABLE
(
    [tid_CalendarDate] [INT] NOT NULL PRIMARY KEY
    , [Date] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCalendarDate] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCalendarDate]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CalendarDateKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CalendarDate] AS T
            USING
            (
                SELECT T.[Date]
                , T.[SchoolId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[CalendarDate] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [Date]
                    , [SchoolId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[Date]
                    , S.[SchoolId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CalendarDate]
                , INSERTED.[Date]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CalendarDateSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CalendarDate]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CalendarDate]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CalendarDate] AS T
            JOIN [Ods_Snapshot].[edfi].[CalendarDate] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCalendarDateCalendarEvent] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CalendarDateCalendarEvent] ******/

CREATE TYPE [t_edfi].[udt_CalendarDateCalendarEvent] AS TABLE
(
    [CalendarEventDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Date] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [EventDuration] [DECIMAL](3, 2) NOT NULL
    , [CalendarEventDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CalendarDateCalendarEventKey] ******/

CREATE TYPE [t_edfi].[udt_CalendarDateCalendarEventKey] AS TABLE
(
    [tid_CalendarDateCalendarEvent] [INT] NOT NULL PRIMARY KEY
    , [CalendarEventDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Date] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [CalendarEventDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCalendarDateCalendarEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCalendarDateCalendarEvent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CalendarDateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CalendarDateCalendarEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CalendarDateCalendarEvent]
            (
                [tid_CalendarDate]
                , [CalendarEventDescriptorCodeValue]
                , [EventDuration]
                , [CalendarEventDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CalendarDate]
                , S.[CalendarEventDescriptorCodeValue]
                , S.[EventDuration]
                , S.[CalendarEventDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CalendarEventDescriptor.[CodeValue] AS CalendarEventDescriptorCodeValue, T.[Date], T.[SchoolId], T.[EventDuration], CalendarEventDescriptor.[Namespace] AS CalendarEventDescriptorNamespace
                , T.[CreateDate]
                , CalendarDate.[LastModifiedDate] AS ParentLastModifiedDate
                , CalendarDate.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CalendarDateCalendarEvent] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CalendarEventDescriptor
                    ON CalendarEventDescriptor.[DescriptorId] = T.[CalendarEventDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[CalendarDate] AS CalendarDate
                    ON CalendarDate.[Date] = T.[Date]
                    AND CalendarDate.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CalendarEventDescriptor] ******/

CREATE TYPE [t_edfi].[udt_CalendarEventDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [CalendarEventType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CalendarEventDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_CalendarEventDescriptorKey] AS TABLE
(
    [tid_CalendarEventDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCalendarEventDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCalendarEventDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CalendarEventDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CalendarEventDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [CalendarEventType].[ShortDescription] AS CalendarEventType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[CalendarEventDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CalendarEventDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[CalendarEventType] AS CalendarEventType
                    ON [CalendarEventType].[CalendarEventTypeId] = T.[CalendarEventTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [CalendarEventType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[CalendarEventType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CalendarEventDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CalendarEventDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CalendarEventDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CalendarEventDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CalendarEventDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[CalendarEventDescriptor] AS S
                ON P.[DescriptorId] = S.[CalendarEventDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ClassPeriod] ******/

CREATE TYPE [t_edfi].[udt_ClassPeriod] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ClassPeriodKey] ******/

CREATE TYPE [t_edfi].[udt_ClassPeriodKey] AS TABLE
(
    [tid_ClassPeriod] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbClassPeriod] ******/

CREATE PROCEDURE [t_edfi].[usp_dbClassPeriod]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ClassPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ClassPeriod] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[SchoolId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[ClassPeriod] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [SchoolId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[SchoolId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ClassPeriod]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ClassPeriodSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ClassPeriod]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ClassPeriod]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ClassPeriod] AS T
            JOIN [Ods_Snapshot].[edfi].[ClassPeriod] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ClassroomPositionDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ClassroomPositionDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ClassroomPositionType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ClassroomPositionDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ClassroomPositionDescriptorKey] AS TABLE
(
    [tid_ClassroomPositionDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbClassroomPositionDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbClassroomPositionDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ClassroomPositionDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ClassroomPositionDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ClassroomPositionType].[ShortDescription] AS ClassroomPositionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ClassroomPositionDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ClassroomPositionDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ClassroomPositionType] AS ClassroomPositionType
                    ON [ClassroomPositionType].[ClassroomPositionTypeId] = T.[ClassroomPositionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ClassroomPositionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ClassroomPositionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ClassroomPositionDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ClassroomPositionDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ClassroomPositionDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ClassroomPositionDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ClassroomPositionDescriptor] AS S
                ON P.[DescriptorId] = S.[ClassroomPositionDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Cohort] ******/

CREATE TYPE [t_edfi].[udt_Cohort] AS TABLE
(
    [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [CohortDescription] [NVARCHAR](1024) NULL
    , [CohortType] [NVARCHAR](450) NOT NULL
    , [CohortScopeType] [NVARCHAR](450) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CohortKey] ******/

CREATE TYPE [t_edfi].[udt_CohortKey] AS TABLE
(
    [tid_Cohort] [INT] NOT NULL PRIMARY KEY
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCohort] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCohort]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CohortKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Cohort] AS T
            USING
            (
                SELECT T.[CohortIdentifier]
                , T.[EducationOrganizationId]
                , T.[CohortDescription]
                , [CohortType].[ShortDescription] AS CohortType
                , [CohortScopeType].[ShortDescription] AS CohortScopeType
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Cohort] AS T
                JOIN [Ods_Snapshot].[edfi].[CohortType] AS CohortType
                    ON [CohortType].[CohortTypeId] = T.[CohortTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CohortScopeType] AS CohortScopeType
                    ON [CohortScopeType].[CohortScopeTypeId] = T.[CohortScopeTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CohortIdentifier]
                    , [EducationOrganizationId]
                    , [CohortDescription]
                    , [CohortType]
                    , [CohortScopeType]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CohortIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[CohortDescription]
                    , S.[CohortType]
                    , S.[CohortScopeType]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Cohort]
                , INSERTED.[CohortIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CohortSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Cohort]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Cohort]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Cohort] AS T
            JOIN [Ods_Snapshot].[edfi].[Cohort] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCohortProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CohortProgram] ******/

CREATE TYPE [t_edfi].[udt_CohortProgram] AS TABLE
(
    [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CohortProgramKey] ******/

CREATE TYPE [t_edfi].[udt_CohortProgramKey] AS TABLE
(
    [tid_CohortProgram] [INT] NOT NULL PRIMARY KEY
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCohortProgram] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCohortProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CohortKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CohortProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CohortProgram]
            (
                [tid_Cohort]
                , [ProgramEducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Cohort]
                , S.[ProgramEducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CohortIdentifier], T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType
                , T.[CreateDate]
                , Cohort.[LastModifiedDate] AS ParentLastModifiedDate
                , Cohort.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CohortProgram] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Cohort] AS Cohort
                    ON Cohort.[CohortIdentifier] = T.[CohortIdentifier]
                    AND Cohort.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CompetencyLevelDescriptor] ******/

CREATE TYPE [t_edfi].[udt_CompetencyLevelDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [PerformanceBaseConversionType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CompetencyLevelDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_CompetencyLevelDescriptorKey] AS TABLE
(
    [tid_CompetencyLevelDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCompetencyLevelDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCompetencyLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CompetencyLevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CompetencyLevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PerformanceBaseConversionType].[ShortDescription] AS PerformanceBaseConversionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[CompetencyLevelDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CompetencyLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PerformanceBaseConversionType] AS PerformanceBaseConversionType
                    ON [PerformanceBaseConversionType].[PerformanceBaseConversionTypeId] = T.[PerformanceBaseConversionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PerformanceBaseConversionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PerformanceBaseConversionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CompetencyLevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CompetencyLevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CompetencyLevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CompetencyLevelDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[CompetencyLevelDescriptor] AS S
                ON P.[DescriptorId] = S.[CompetencyLevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CompetencyObjective] ******/

CREATE TYPE [t_edfi].[udt_CompetencyObjective] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CompetencyObjectiveId] [NVARCHAR](60) NULL
    , [Description] [NVARCHAR](1024) NULL
    , [SuccessCriteria] [NVARCHAR](150) NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CompetencyObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_CompetencyObjectiveKey] AS TABLE
(
    [tid_CompetencyObjective] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCompetencyObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCompetencyObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CompetencyObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CompetencyObjective] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[Objective]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[CompetencyObjectiveId]
                , T.[Description]
                , T.[SuccessCriteria]
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[CompetencyObjective] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [Objective]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [CompetencyObjectiveId]
                    , [Description]
                    , [SuccessCriteria]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[Objective]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[CompetencyObjectiveId]
                    , S.[Description]
                    , S.[SuccessCriteria]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CompetencyObjective]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CompetencyObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CompetencyObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CompetencyObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CompetencyObjective] AS T
            JOIN [Ods_Snapshot].[edfi].[CompetencyObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ContinuationOfServicesReasonDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ContinuationOfServicesReasonDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ContinuationOfServicesReasonType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ContinuationOfServicesReasonDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ContinuationOfServicesReasonDescriptorKey] AS TABLE
(
    [tid_ContinuationOfServicesReasonDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbContinuationOfServicesReasonDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbContinuationOfServicesReasonDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ContinuationOfServicesReasonDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ContinuationOfServicesReasonDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ContinuationOfServicesReasonType].[ShortDescription] AS ContinuationOfServicesReasonType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ContinuationOfServicesReasonDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ContinuationOfServicesReasonDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ContinuationOfServicesReasonType] AS ContinuationOfServicesReasonType
                    ON [ContinuationOfServicesReasonType].[ContinuationOfServicesReasonTypeId] = T.[ContinuationOfServicesReasonTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ContinuationOfServicesReasonType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ContinuationOfServicesReasonType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ContinuationOfServicesReasonDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ContinuationOfServicesReasonDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ContinuationOfServicesReasonDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ContinuationOfServicesReasonDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ContinuationOfServicesReasonDescriptor] AS S
                ON P.[DescriptorId] = S.[ContinuationOfServicesReasonDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ContractedStaff] ******/

CREATE TYPE [t_edfi].[udt_ContractedStaff] AS TABLE
(
    [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AmountToDate] [MONEY] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ContractedStaffKey] ******/

CREATE TYPE [t_edfi].[udt_ContractedStaffKey] AS TABLE
(
    [tid_ContractedStaff] [INT] NOT NULL PRIMARY KEY
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbContractedStaff] ******/

CREATE PROCEDURE [t_edfi].[usp_dbContractedStaff]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ContractedStaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ContractedStaff] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , [Staff].[StaffUniqueId]
                , T.[AmountToDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[ContractedStaff] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [StaffUniqueId]
                    , [AmountToDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[StaffUniqueId]
                    , S.[AmountToDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ContractedStaff]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ContractedStaffSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ContractedStaff]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ContractedStaff]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ContractedStaff] AS T
            JOIN [Ods_Snapshot].[edfi].[ContractedStaff] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CountryDescriptor] ******/

CREATE TYPE [t_edfi].[udt_CountryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CountryDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_CountryDescriptorKey] AS TABLE
(
    [tid_CountryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCountryDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCountryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CountryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CountryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[CountryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CountryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CountryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CountryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CountryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CountryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CountryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[CountryDescriptor] AS S
                ON P.[DescriptorId] = S.[CountryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Course] ******/

CREATE TYPE [t_edfi].[udt_Course] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [CourseTitle] [NVARCHAR](60) NOT NULL
    , [NumberOfParts] [INT] NOT NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [CourseDescription] [NVARCHAR](1024) NULL
    , [TimeRequiredForCompletion] [INT] NULL
    , [DateCourseAdopted] [DATE] NULL
    , [HighSchoolCourseRequirement] [BIT] NULL
    , [CourseGPAApplicabilityType] [NVARCHAR](450) NULL
    , [CourseDefinedByType] [NVARCHAR](450) NULL
    , [MinimumAvailableCredits] [DECIMAL](9, 2) NULL
    , [MinimumAvailableCreditType] [NVARCHAR](450) NULL
    , [MinimumAvailableCreditConversion] [DECIMAL](9, 2) NULL
    , [MaximumAvailableCredits] [DECIMAL](9, 2) NULL
    , [MaximumAvailableCreditType] [NVARCHAR](450) NULL
    , [MaximumAvailableCreditConversion] [DECIMAL](9, 2) NULL
    , [CareerPathwayType] [NVARCHAR](450) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseKey] ******/

CREATE TYPE [t_edfi].[udt_CourseKey] AS TABLE
(
    [tid_Course] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourse] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Course] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[CourseTitle]
                , T.[NumberOfParts]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[CourseDescription]
                , T.[TimeRequiredForCompletion]
                , T.[DateCourseAdopted]
                , T.[HighSchoolCourseRequirement]
                , [CourseGPAApplicabilityType].[ShortDescription] AS CourseGPAApplicabilityType
                , [CourseDefinedByType].[ShortDescription] AS CourseDefinedByType
                , T.[MinimumAvailableCredits]
                , [MinimumAvailableCreditType].[ShortDescription] AS MinimumAvailableCreditType
                , T.[MinimumAvailableCreditConversion]
                , T.[MaximumAvailableCredits]
                , [MaximumAvailableCreditType].[ShortDescription] AS MaximumAvailableCreditType
                , T.[MaximumAvailableCreditConversion]
                , [CareerPathwayType].[ShortDescription] AS CareerPathwayType
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Course] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CourseGPAApplicabilityType] AS CourseGPAApplicabilityType
                    ON [CourseGPAApplicabilityType].[CourseGPAApplicabilityTypeId] = T.[CourseGPAApplicabilityTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CourseDefinedByType] AS CourseDefinedByType
                    ON [CourseDefinedByType].[CourseDefinedByTypeId] = T.[CourseDefinedByTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS MinimumAvailableCreditType
                    ON [MinimumAvailableCreditType].[CreditTypeId] = T.[MinimumAvailableCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS MaximumAvailableCreditType
                    ON [MaximumAvailableCreditType].[CreditTypeId] = T.[MaximumAvailableCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CareerPathwayType] AS CareerPathwayType
                    ON [CareerPathwayType].[CareerPathwayTypeId] = T.[CareerPathwayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [CourseTitle]
                    , [NumberOfParts]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CourseDescription]
                    , [TimeRequiredForCompletion]
                    , [DateCourseAdopted]
                    , [HighSchoolCourseRequirement]
                    , [CourseGPAApplicabilityType]
                    , [CourseDefinedByType]
                    , [MinimumAvailableCredits]
                    , [MinimumAvailableCreditType]
                    , [MinimumAvailableCreditConversion]
                    , [MaximumAvailableCredits]
                    , [MaximumAvailableCreditType]
                    , [MaximumAvailableCreditConversion]
                    , [CareerPathwayType]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[CourseTitle]
                    , S.[NumberOfParts]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CourseDescription]
                    , S.[TimeRequiredForCompletion]
                    , S.[DateCourseAdopted]
                    , S.[HighSchoolCourseRequirement]
                    , S.[CourseGPAApplicabilityType]
                    , S.[CourseDefinedByType]
                    , S.[MinimumAvailableCredits]
                    , S.[MinimumAvailableCreditType]
                    , S.[MinimumAvailableCreditConversion]
                    , S.[MaximumAvailableCredits]
                    , S.[MaximumAvailableCreditType]
                    , S.[MaximumAvailableCreditConversion]
                    , S.[CareerPathwayType]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Course]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Course]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Course]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Course] AS T
            JOIN [Ods_Snapshot].[edfi].[Course] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCourseIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseLevelCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseOfferedGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseCompetencyLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_CourseIdentificationCode] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL
    , [CourseIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_CourseIdentificationCodeKey] AS TABLE
(
    [tid_CourseIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [CourseIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseIdentificationCode]
            (
                [tid_Course]
                , [CourseIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [CourseIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[CourseIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[CourseIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], CourseIdentificationSystemDescriptor.[CodeValue] AS CourseIdentificationSystemDescriptorCodeValue, T.[EducationOrganizationId], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], CourseIdentificationSystemDescriptor.[Namespace] AS CourseIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CourseIdentificationSystemDescriptor
                    ON CourseIdentificationSystemDescriptor.[DescriptorId] = T.[CourseIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseLevelCharacteristic] ******/

CREATE TYPE [t_edfi].[udt_CourseLevelCharacteristic] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseLevelCharacteristicType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseLevelCharacteristicKey] ******/

CREATE TYPE [t_edfi].[udt_CourseLevelCharacteristicKey] AS TABLE
(
    [tid_CourseLevelCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseLevelCharacteristicType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseLevelCharacteristic] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseLevelCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseLevelCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseLevelCharacteristic]
            (
                [tid_Course]
                , [CourseLevelCharacteristicType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[CourseLevelCharacteristicType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], CourseLevelCharacteristicType.[ShortDescription] AS CourseLevelCharacteristicType, T.[EducationOrganizationId]
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseLevelCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[CourseLevelCharacteristicType] AS CourseLevelCharacteristicType
                    ON CourseLevelCharacteristicType.[CourseLevelCharacteristicTypeId] = T.[CourseLevelCharacteristicTypeId]
                JOIN [Ods_Snapshot].[edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseOfferedGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_CourseOfferedGradeLevel] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseOfferedGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_CourseOfferedGradeLevelKey] AS TABLE
(
    [tid_CourseOfferedGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseOfferedGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseOfferedGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseOfferedGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseOfferedGradeLevel]
            (
                [tid_Course]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseOfferedGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseCompetencyLevel] ******/

CREATE TYPE [t_edfi].[udt_CourseCompetencyLevel] AS TABLE
(
    [CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseCompetencyLevelKey] ******/

CREATE TYPE [t_edfi].[udt_CourseCompetencyLevelKey] AS TABLE
(
    [tid_CourseCompetencyLevel] [INT] NOT NULL PRIMARY KEY
    , [CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseCompetencyLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseCompetencyLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseCompetencyLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseCompetencyLevel]
            (
                [tid_Course]
                , [CompetencyLevelDescriptorCodeValue]
                , [CompetencyLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[CompetencyLevelDescriptorCodeValue]
                , S.[CompetencyLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue, T.[CourseCode], T.[EducationOrganizationId], CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseCompetencyLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON CompetencyLevelDescriptor.[DescriptorId] = T.[CompetencyLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseLearningStandard] ******/

CREATE TYPE [t_edfi].[udt_CourseLearningStandard] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseLearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_CourseLearningStandardKey] AS TABLE
(
    [tid_CourseLearningStandard] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseLearningStandard]
            (
                [tid_Course]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[LearningStandardId]
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseLearningStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseLearningObjective] ******/

CREATE TYPE [t_edfi].[udt_CourseLearningObjective] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseLearningObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_CourseLearningObjectiveKey] AS TABLE
(
    [tid_CourseLearningObjective] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseLearningObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseLearningObjective]
            (
                [tid_Course]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[CourseCode], T.[EducationOrganizationId], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseLearningObjective] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseIdentificationSystemDescriptor] ******/

CREATE TYPE [t_edfi].[udt_CourseIdentificationSystemDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [CourseIdentificationSystemType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseIdentificationSystemDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_CourseIdentificationSystemDescriptorKey] AS TABLE
(
    [tid_CourseIdentificationSystemDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseIdentificationSystemDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CourseIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [CourseIdentificationSystemType].[ShortDescription] AS CourseIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[CourseIdentificationSystemDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CourseIdentificationSystemDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CourseIdentificationSystemType] AS CourseIdentificationSystemType
                    ON [CourseIdentificationSystemType].[CourseIdentificationSystemTypeId] = T.[CourseIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [CourseIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[CourseIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CourseIdentificationSystemDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[CourseIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[CourseIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseOffering] ******/

CREATE TYPE [t_edfi].[udt_CourseOffering] AS TABLE
(
    [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LocalCourseTitle] [NVARCHAR](60) NULL
    , [InstructionalTimePlanned] [INT] NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseOfferingKey] ******/

CREATE TYPE [t_edfi].[udt_CourseOfferingKey] AS TABLE
(
    [tid_CourseOffering] [INT] NOT NULL PRIMARY KEY
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseOffering] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseOffering]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseOfferingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CourseOffering] AS T
            USING
            (
                SELECT T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[LocalCourseTitle]
                , T.[InstructionalTimePlanned]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[CourseOffering] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [LocalCourseTitle]
                    , [InstructionalTimePlanned]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[LocalCourseTitle]
                    , S.[InstructionalTimePlanned]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseOffering]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseOfferingSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseOffering]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseOffering]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CourseOffering] AS T
            JOIN [Ods_Snapshot].[edfi].[CourseOffering] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCourseOfferingCurriculumUsed] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseOfferingCurriculumUsed] ******/

CREATE TYPE [t_edfi].[udt_CourseOfferingCurriculumUsed] AS TABLE
(
    [CurriculumUsedType] [NVARCHAR](450) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseOfferingCurriculumUsedKey] ******/

CREATE TYPE [t_edfi].[udt_CourseOfferingCurriculumUsedKey] AS TABLE
(
    [tid_CourseOfferingCurriculumUsed] [INT] NOT NULL PRIMARY KEY
    , [CurriculumUsedType] [NVARCHAR](450) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseOfferingCurriculumUsed] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseOfferingCurriculumUsed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseOfferingKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseOfferingCurriculumUsedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseOfferingCurriculumUsed]
            (
                [tid_CourseOffering]
                , [CurriculumUsedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseOffering]
                , S.[CurriculumUsedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CurriculumUsedType.[ShortDescription] AS CurriculumUsedType, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseOffering.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseOffering.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseOfferingCurriculumUsed] AS T 
                JOIN [Ods_Snapshot].[edfi].[CurriculumUsedType] AS CurriculumUsedType
                    ON CurriculumUsedType.[CurriculumUsedTypeId] = T.[CurriculumUsedTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[CourseOffering] AS CourseOffering
                    ON CourseOffering.[LocalCourseCode] = T.[LocalCourseCode]
                    AND CourseOffering.[SchoolId] = T.[SchoolId]
                    AND CourseOffering.[SchoolYear] = T.[SchoolYear]
                    AND CourseOffering.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseTranscript] ******/

CREATE TYPE [t_edfi].[udt_CourseTranscript] AS TABLE
(
    [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AttemptedCredits] [DECIMAL](9, 2) NULL
    , [AttemptedCreditType] [NVARCHAR](450) NULL
    , [AttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [EarnedCredits] [DECIMAL](9, 2) NOT NULL
    , [EarnedCreditType] [NVARCHAR](450) NULL
    , [EarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [MethodCreditEarnedType] [NVARCHAR](450) NULL
    , [FinalLetterGradeEarned] [NVARCHAR](20) NULL
    , [FinalNumericGradeEarned] [DECIMAL](9, 2) NULL
    , [CourseRepeatCodeType] [NVARCHAR](450) NULL
    , [SchoolId] [INT] NULL
    , [CourseTitle] [NVARCHAR](60) NULL
    , [AlternativeCourseTitle] [NVARCHAR](60) NULL
    , [AlternativeCourseCode] [NVARCHAR](60) NULL
    , [WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseTranscriptKey] ******/

CREATE TYPE [t_edfi].[udt_CourseTranscriptKey] AS TABLE
(
    [tid_CourseTranscript] [INT] NOT NULL PRIMARY KEY
    , [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseTranscript] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CourseTranscript] AS T
            USING
            (
                SELECT [CourseAttemptResultType].[ShortDescription] AS CourseAttemptResultType
                , T.[CourseCode]
                , T.[CourseEducationOrganizationId]
                , T.[EducationOrganizationId]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AttemptedCredits]
                , [AttemptedCreditType].[ShortDescription] AS AttemptedCreditType
                , T.[AttemptedCreditConversion]
                , T.[EarnedCredits]
                , [EarnedCreditType].[ShortDescription] AS EarnedCreditType
                , T.[EarnedCreditConversion]
                , WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue
                , [MethodCreditEarnedType].[ShortDescription] AS MethodCreditEarnedType
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[SchoolId]
                , T.[CourseTitle]
                , T.[AlternativeCourseTitle]
                , T.[AlternativeCourseCode]
                , WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[CourseTranscript] AS T
                JOIN [Ods_Snapshot].[edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON [CourseAttemptResultType].[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS AttemptedCreditType
                    ON [AttemptedCreditType].[CreditTypeId] = T.[AttemptedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS EarnedCreditType
                    ON [EarnedCreditType].[CreditTypeId] = T.[EarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON [WhenTakenGradeLevelDescriptor].[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[MethodCreditEarnedType] AS MethodCreditEarnedType
                    ON [MethodCreditEarnedType].[MethodCreditEarnedTypeId] = T.[MethodCreditEarnedTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseAttemptResultType]
                    , [CourseCode]
                    , [CourseEducationOrganizationId]
                    , [EducationOrganizationId]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [AttemptedCredits]
                    , [AttemptedCreditType]
                    , [AttemptedCreditConversion]
                    , [EarnedCredits]
                    , [EarnedCreditType]
                    , [EarnedCreditConversion]
                    , [WhenTakenGradeLevelDescriptorCodeValue]
                    , [MethodCreditEarnedType]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [SchoolId]
                    , [CourseTitle]
                    , [AlternativeCourseTitle]
                    , [AlternativeCourseCode]
                    , [WhenTakenGradeLevelDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseAttemptResultType]
                    , S.[CourseCode]
                    , S.[CourseEducationOrganizationId]
                    , S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[AttemptedCredits]
                    , S.[AttemptedCreditType]
                    , S.[AttemptedCreditConversion]
                    , S.[EarnedCredits]
                    , S.[EarnedCreditType]
                    , S.[EarnedCreditConversion]
                    , S.[WhenTakenGradeLevelDescriptorCodeValue]
                    , S.[MethodCreditEarnedType]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[SchoolId]
                    , S.[CourseTitle]
                    , S.[AlternativeCourseTitle]
                    , S.[AlternativeCourseCode]
                    , S.[WhenTakenGradeLevelDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseTranscript]
                , INSERTED.[CourseAttemptResultType]
                , INSERTED.[CourseCode]
                , INSERTED.[CourseEducationOrganizationId]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CourseTranscript] AS T
            JOIN [Ods_Snapshot].[edfi].[CourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CourseTranscriptEarnedAdditionalCredits] ******/

CREATE TYPE [t_edfi].[udt_CourseTranscriptEarnedAdditionalCredits] AS TABLE
(
    [AdditionalCreditType] [NVARCHAR](450) NOT NULL
    , [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Credits] [DECIMAL](9, 2) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CourseTranscriptEarnedAdditionalCreditsKey] ******/

CREATE TYPE [t_edfi].[udt_CourseTranscriptEarnedAdditionalCreditsKey] AS TABLE
(
    [tid_CourseTranscriptEarnedAdditionalCredits] [INT] NOT NULL PRIMARY KEY
    , [AdditionalCreditType] [NVARCHAR](450) NOT NULL
    , [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseTranscriptEarnedAdditionalCreditsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseTranscriptEarnedAdditionalCredits]
            (
                [tid_CourseTranscript]
                , [AdditionalCreditType]
                , [Credits]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseTranscript]
                , S.[AdditionalCreditType]
                , S.[Credits]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AdditionalCreditType.[ShortDescription] AS AdditionalCreditType, CourseAttemptResultType.[ShortDescription] AS CourseAttemptResultType, T.[CourseCode], T.[CourseEducationOrganizationId], T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[Credits], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseTranscript.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CourseTranscriptEarnedAdditionalCredits] AS T 
                JOIN [Ods_Snapshot].[edfi].[AdditionalCreditType] AS AdditionalCreditType
                    ON AdditionalCreditType.[AdditionalCreditTypeId] = T.[AdditionalCreditTypeId]
                JOIN [Ods_Snapshot].[edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON CourseAttemptResultType.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[CourseTranscript] AS CourseTranscript
                    ON CourseTranscript.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                    AND CourseTranscript.[CourseCode] = T.[CourseCode]
                    AND CourseTranscript.[CourseEducationOrganizationId] = T.[CourseEducationOrganizationId]
                    AND CourseTranscript.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND CourseTranscript.[StudentUSI] = T.[StudentUSI]
                    AND CourseTranscript.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Credential] ******/

CREATE TYPE [t_edfi].[udt_Credential] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [EffectiveDate] [DATE] NULL
    , [ExpirationDate] [DATE] NULL
    , [CredentialFieldDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IssuanceDate] [DATE] NOT NULL
    , [CredentialType] [NVARCHAR](450) NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeachingCredentialDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeachingCredentialBasisType] [NVARCHAR](450) NULL
    , [CurrentCredential] [BIT] NULL
    , [TeachingCredentialDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CredentialFieldDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CredentialKey] ******/

CREATE TYPE [t_edfi].[udt_CredentialKey] AS TABLE
(
    [tid_Credential] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCredential] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCredential]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Credential] AS T
            USING
            (
                SELECT T.[CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType].[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[EffectiveDate]
                , T.[ExpirationDate]
                , CredentialFieldDescriptor.[CodeValue] AS CredentialFieldDescriptorCodeValue
                , T.[IssuanceDate]
                , [CredentialType].[ShortDescription] AS CredentialType
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , TeachingCredentialDescriptor.[CodeValue] AS TeachingCredentialDescriptorCodeValue
                , [TeachingCredentialBasisType].[ShortDescription] AS TeachingCredentialBasisType
                , T.[CurrentCredential]
                , TeachingCredentialDescriptor.[Namespace] AS TeachingCredentialDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , CredentialFieldDescriptor.[Namespace] AS CredentialFieldDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Credential] AS T
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON [StateOfIssueStateAbbreviationType].[StateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CredentialFieldDescriptor
                    ON [CredentialFieldDescriptor].[DescriptorId] = T.[CredentialFieldDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[CredentialType] AS CredentialType
                    ON [CredentialType].[CredentialTypeId] = T.[CredentialTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TeachingCredentialDescriptor
                    ON [TeachingCredentialDescriptor].[DescriptorId] = T.[TeachingCredentialDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[TeachingCredentialBasisType] AS TeachingCredentialBasisType
                    ON [TeachingCredentialBasisType].[TeachingCredentialBasisTypeId] = T.[TeachingCredentialBasisTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CredentialIdentifier]
                    , [StateOfIssueStateAbbreviationType]
                    , [EffectiveDate]
                    , [ExpirationDate]
                    , [CredentialFieldDescriptorCodeValue]
                    , [IssuanceDate]
                    , [CredentialType]
                    , [GradeLevelDescriptorCodeValue]
                    , [TeachingCredentialDescriptorCodeValue]
                    , [TeachingCredentialBasisType]
                    , [CurrentCredential]
                    , [TeachingCredentialDescriptorNamespace]
                    , [GradeLevelDescriptorNamespace]
                    , [CredentialFieldDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CredentialIdentifier]
                    , S.[StateOfIssueStateAbbreviationType]
                    , S.[EffectiveDate]
                    , S.[ExpirationDate]
                    , S.[CredentialFieldDescriptorCodeValue]
                    , S.[IssuanceDate]
                    , S.[CredentialType]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[TeachingCredentialDescriptorCodeValue]
                    , S.[TeachingCredentialBasisType]
                    , S.[CurrentCredential]
                    , S.[TeachingCredentialDescriptorNamespace]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[CredentialFieldDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Credential]
                , INSERTED.[CredentialIdentifier]
                , INSERTED.[StateOfIssueStateAbbreviationType]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CredentialSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Credential]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Credential]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Credential] AS T
            JOIN [Ods_Snapshot].[edfi].[Credential] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCredentialEndorsement] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialBoardCertification] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialCertificationExam] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialRecommendation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialRecommendingInstitution] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CredentialEndorsement] ******/

CREATE TYPE [t_edfi].[udt_CredentialEndorsement] AS TABLE
(
    [CredentialEndorsement] [NVARCHAR](255) NOT NULL
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CredentialEndorsementKey] ******/

CREATE TYPE [t_edfi].[udt_CredentialEndorsementKey] AS TABLE
(
    [tid_CredentialEndorsement] [INT] NOT NULL PRIMARY KEY
    , [CredentialEndorsement] [NVARCHAR](255) NOT NULL
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCredentialEndorsement] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCredentialEndorsement]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CredentialEndorsementKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CredentialEndorsement]
            (
                [tid_Credential]
                , [CredentialEndorsement]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[CredentialEndorsement]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialEndorsement], T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[CredentialEndorsement] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CredentialExtension] ******/

CREATE TYPE [t_extension].[udt_CredentialExtension] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [RevocationDate] [DATE] NULL
    , [RevocationReason] [NVARCHAR](40) NULL
    , [SuspensionDate] [DATE] NULL
    , [SuspensionReason] [NVARCHAR](40) NULL
    , [ValueType] [NVARCHAR](450) NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CredentialExtensionKey] ******/

CREATE TYPE [t_extension].[udt_CredentialExtensionKey] AS TABLE
(
    [tid_CredentialExtension] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbCredentialExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialExtension]
            (
                [tid_Credential]
                , [RevocationDate]
                , [RevocationReason]
                , [SuspensionDate]
                , [SuspensionReason]
                , [ValueType]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[RevocationDate]
                , S.[RevocationReason]
                , S.[SuspensionDate]
                , S.[SuspensionReason]
                , S.[ValueType]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[RevocationDate], T.[RevocationReason], T.[SuspensionDate], T.[SuspensionReason], ValueType.[ShortDescription] AS ValueType
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CredentialExtension] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CredentialBoardCertification] ******/

CREATE TYPE [t_extension].[udt_CredentialBoardCertification] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [BoardCertification] [BIT] NULL
    , [BoardCertificationDate] [DATE] NULL
    , [BoardCertificationTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [BoardCertificationTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CredentialBoardCertificationKey] ******/

CREATE TYPE [t_extension].[udt_CredentialBoardCertificationKey] AS TABLE
(
    [tid_CredentialBoardCertification] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialBoardCertification] ******/

CREATE PROCEDURE [t_extension].[usp_dbCredentialBoardCertification]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialBoardCertificationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialBoardCertification]
            (
                [tid_Credential]
                , [BoardCertification]
                , [BoardCertificationDate]
                , [BoardCertificationTypeDescriptorCodeValue]
                , [BoardCertificationTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[BoardCertification]
                , S.[BoardCertificationDate]
                , S.[BoardCertificationTypeDescriptorCodeValue]
                , S.[BoardCertificationTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[BoardCertification], T.[BoardCertificationDate], BoardCertificationTypeDescriptor.[CodeValue] AS BoardCertificationTypeDescriptorCodeValue, BoardCertificationTypeDescriptor.[Namespace] AS BoardCertificationTypeDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CredentialBoardCertification] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BoardCertificationTypeDescriptor
                    ON BoardCertificationTypeDescriptor.[DescriptorId] = T.[BoardCertificationTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CredentialCertificationExam] ******/

CREATE TYPE [t_extension].[udt_CredentialCertificationExam] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [CertificationExamTitle] [NVARCHAR](60) NOT NULL
    , [CertificationExamTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [CertificationExamOverallScore] [INT] NOT NULL
    , [CertificationExamTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CredentialCertificationExamKey] ******/

CREATE TYPE [t_extension].[udt_CredentialCertificationExamKey] AS TABLE
(
    [tid_CredentialCertificationExam] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialCertificationExam] ******/

CREATE PROCEDURE [t_extension].[usp_dbCredentialCertificationExam]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialCertificationExamKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialCertificationExam]
            (
                [tid_Credential]
                , [CertificationExamTitle]
                , [CertificationExamTypeDescriptorCodeValue]
                , [CertificationExamOverallScore]
                , [CertificationExamTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[CertificationExamTitle]
                , S.[CertificationExamTypeDescriptorCodeValue]
                , S.[CertificationExamOverallScore]
                , S.[CertificationExamTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[CertificationExamTitle], CertificationExamTypeDescriptor.[CodeValue] AS CertificationExamTypeDescriptorCodeValue, T.[CertificationExamOverallScore], CertificationExamTypeDescriptor.[Namespace] AS CertificationExamTypeDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CredentialCertificationExam] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CertificationExamTypeDescriptor
                    ON CertificationExamTypeDescriptor.[DescriptorId] = T.[CertificationExamTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CredentialRecommendation] ******/

CREATE TYPE [t_extension].[udt_CredentialRecommendation] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [CredentialFieldDescriptorCodeValue] [NVARCHAR](50) NULL
    , [LevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeachingCredentialDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeachingCredentialDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CredentialFieldDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CredentialRecommendationKey] ******/

CREATE TYPE [t_extension].[udt_CredentialRecommendationKey] AS TABLE
(
    [tid_CredentialRecommendation] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialRecommendation] ******/

CREATE PROCEDURE [t_extension].[usp_dbCredentialRecommendation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialRecommendationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialRecommendation]
            (
                [tid_Credential]
                , [CredentialFieldDescriptorCodeValue]
                , [LevelDescriptorCodeValue]
                , [TeachingCredentialDescriptorCodeValue]
                , [TeachingCredentialDescriptorNamespace]
                , [LevelDescriptorNamespace]
                , [CredentialFieldDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[CredentialFieldDescriptorCodeValue]
                , S.[LevelDescriptorCodeValue]
                , S.[TeachingCredentialDescriptorCodeValue]
                , S.[TeachingCredentialDescriptorNamespace]
                , S.[LevelDescriptorNamespace]
                , S.[CredentialFieldDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, CredentialFieldDescriptor.[CodeValue] AS CredentialFieldDescriptorCodeValue, LevelDescriptor.[CodeValue] AS LevelDescriptorCodeValue, TeachingCredentialDescriptor.[CodeValue] AS TeachingCredentialDescriptorCodeValue, TeachingCredentialDescriptor.[Namespace] AS TeachingCredentialDescriptorNamespace, LevelDescriptor.[Namespace] AS LevelDescriptorNamespace, CredentialFieldDescriptor.[Namespace] AS CredentialFieldDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CredentialRecommendation] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CredentialFieldDescriptor
                    ON CredentialFieldDescriptor.[DescriptorId] = T.[CredentialFieldDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LevelDescriptor
                    ON LevelDescriptor.[DescriptorId] = T.[LevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TeachingCredentialDescriptor
                    ON TeachingCredentialDescriptor.[DescriptorId] = T.[TeachingCredentialDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CredentialRecommendingInstitution] ******/

CREATE TYPE [t_extension].[udt_CredentialRecommendingInstitution] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [RecommendingInstutionName] [NVARCHAR](75) NOT NULL
    , [RecommendingDate] [DATE] NULL
    , [RecommendingInstitutionCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [RecommendingInstitutionStateAbbreviationType] [NVARCHAR](450) NULL
    , [RecommendingInstitutionCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CredentialRecommendingInstitutionKey] ******/

CREATE TYPE [t_extension].[udt_CredentialRecommendingInstitutionKey] AS TABLE
(
    [tid_CredentialRecommendingInstitution] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialRecommendingInstitution] ******/

CREATE PROCEDURE [t_extension].[usp_dbCredentialRecommendingInstitution]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialRecommendingInstitutionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialRecommendingInstitution]
            (
                [tid_Credential]
                , [RecommendingInstutionName]
                , [RecommendingDate]
                , [RecommendingInstitutionCountryDescriptorCodeValue]
                , [RecommendingInstitutionStateAbbreviationType]
                , [RecommendingInstitutionCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[RecommendingInstutionName]
                , S.[RecommendingDate]
                , S.[RecommendingInstitutionCountryDescriptorCodeValue]
                , S.[RecommendingInstitutionStateAbbreviationType]
                , S.[RecommendingInstitutionCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[RecommendingInstutionName], T.[RecommendingDate], RecommendingInstitutionCountryDescriptor.[CodeValue] AS RecommendingInstitutionCountryDescriptorCodeValue, RecommendingInstitutionStateAbbreviationType.[ShortDescription] AS RecommendingInstitutionStateAbbreviationType, RecommendingInstitutionCountryDescriptor.[Namespace] AS RecommendingInstitutionCountryDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CredentialRecommendingInstitution] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RecommendingInstitutionCountryDescriptor
                    ON RecommendingInstitutionCountryDescriptor.[DescriptorId] = T.[RecommendingInstitutionCountryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS RecommendingInstitutionStateAbbreviationType
                    ON RecommendingInstitutionStateAbbreviationType.[StateAbbreviationTypeId] = T.[RecommendingInstitutionStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_CredentialFieldDescriptor] ******/

CREATE TYPE [t_edfi].[udt_CredentialFieldDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_CredentialFieldDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_CredentialFieldDescriptorKey] AS TABLE
(
    [tid_CredentialFieldDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbCredentialFieldDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbCredentialFieldDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CredentialFieldDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CredentialFieldDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[CredentialFieldDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CredentialFieldDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AcademicSubjectDescriptorNamespace]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CredentialFieldDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CredentialFieldDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CredentialFieldDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CredentialFieldDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[CredentialFieldDescriptor] AS S
                ON P.[DescriptorId] = S.[CredentialFieldDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DiagnosisDescriptor] ******/

CREATE TYPE [t_edfi].[udt_DiagnosisDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [DiagnosisType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DiagnosisDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_DiagnosisDescriptorKey] AS TABLE
(
    [tid_DiagnosisDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDiagnosisDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDiagnosisDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DiagnosisDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DiagnosisDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [DiagnosisType].[ShortDescription] AS DiagnosisType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[DiagnosisDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[DiagnosisDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DiagnosisType] AS DiagnosisType
                    ON [DiagnosisType].[DiagnosisTypeId] = T.[DiagnosisTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [DiagnosisType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[DiagnosisType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DiagnosisDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DiagnosisDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DiagnosisDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DiagnosisDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DiagnosisDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[DiagnosisDescriptor] AS S
                ON P.[DescriptorId] = S.[DiagnosisDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisabilityDescriptor] ******/

CREATE TYPE [t_edfi].[udt_DisabilityDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [DisabilityType] [NVARCHAR](450) NULL
    , [DisabilityCategoryType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisabilityDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_DisabilityDescriptorKey] AS TABLE
(
    [tid_DisabilityDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisabilityDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisabilityDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisabilityDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisabilityDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [DisabilityType].[ShortDescription] AS DisabilityType
                , [DisabilityCategoryType].[ShortDescription] AS DisabilityCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[DisabilityDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisabilityType] AS DisabilityType
                    ON [DisabilityType].[DisabilityTypeId] = T.[DisabilityTypeId]
                JOIN [Ods_Snapshot].[edfi].[DisabilityCategoryType] AS DisabilityCategoryType
                    ON [DisabilityCategoryType].[DisabilityCategoryTypeId] = T.[DisabilityCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [DisabilityType]
                    , [DisabilityCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[DisabilityType]
                    , S.[DisabilityCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisabilityDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisabilityDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisabilityDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisabilityDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisabilityDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[DisabilityDescriptor] AS S
                ON P.[DescriptorId] = S.[DisabilityDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineAction] ******/

CREATE TYPE [t_edfi].[udt_DisciplineAction] AS TABLE
(
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [DisciplineActionLength] [INT] NULL
    , [ActualDisciplineActionLength] [INT] NULL
    , [DisciplineActionLengthDifferenceReasonType] [NVARCHAR](450) NULL
    , [RelatedToZeroTolerancePolicy] [BIT] NULL
    , [ResponsibilitySchoolId] [INT] NOT NULL
    , [AssignmentSchoolId] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineActionKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineActionKey] AS TABLE
(
    [tid_DisciplineAction] [INT] NOT NULL PRIMARY KEY
    , [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineAction] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineAction]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisciplineAction] AS T
            USING
            (
                SELECT T.[DisciplineActionIdentifier]
                , T.[DisciplineDate]
                , [Student].[StudentUniqueId]
                , T.[DisciplineActionLength]
                , T.[ActualDisciplineActionLength]
                , [DisciplineActionLengthDifferenceReasonType].[ShortDescription] AS DisciplineActionLengthDifferenceReasonType
                , T.[RelatedToZeroTolerancePolicy]
                , T.[ResponsibilitySchoolId]
                , T.[AssignmentSchoolId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[DisciplineAction] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisciplineActionLengthDifferenceReasonType] AS DisciplineActionLengthDifferenceReasonType
                    ON [DisciplineActionLengthDifferenceReasonType].[DisciplineActionLengthDifferenceReasonTypeId] = T.[DisciplineActionLengthDifferenceReasonTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [DisciplineActionIdentifier]
                    , [DisciplineDate]
                    , [StudentUniqueId]
                    , [DisciplineActionLength]
                    , [ActualDisciplineActionLength]
                    , [DisciplineActionLengthDifferenceReasonType]
                    , [RelatedToZeroTolerancePolicy]
                    , [ResponsibilitySchoolId]
                    , [AssignmentSchoolId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[DisciplineActionIdentifier]
                    , S.[DisciplineDate]
                    , S.[StudentUniqueId]
                    , S.[DisciplineActionLength]
                    , S.[ActualDisciplineActionLength]
                    , S.[DisciplineActionLengthDifferenceReasonType]
                    , S.[RelatedToZeroTolerancePolicy]
                    , S.[ResponsibilitySchoolId]
                    , S.[AssignmentSchoolId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisciplineAction]
                , INSERTED.[DisciplineActionIdentifier]
                , INSERTED.[DisciplineDate]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisciplineActionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisciplineAction]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisciplineAction]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisciplineAction] AS T
            JOIN [Ods_Snapshot].[edfi].[DisciplineAction] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbDisciplineActionDiscipline] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineActionDisciplineIncident] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineActionStaff] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineActionDiscipline] ******/

CREATE TYPE [t_edfi].[udt_DisciplineActionDiscipline] AS TABLE
(
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [DisciplineDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [DisciplineDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineActionDisciplineKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineActionDisciplineKey] AS TABLE
(
    [tid_DisciplineActionDiscipline] [INT] NOT NULL PRIMARY KEY
    , [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [DisciplineDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [DisciplineDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineActionDiscipline] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineActionDiscipline]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineActionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionDisciplineKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineActionDiscipline]
            (
                [tid_DisciplineAction]
                , [DisciplineDescriptorCodeValue]
                , [DisciplineDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineAction]
                , S.[DisciplineDescriptorCodeValue]
                , S.[DisciplineDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DisciplineActionIdentifier], T.[DisciplineDate], DisciplineDescriptor.[CodeValue] AS DisciplineDescriptorCodeValue, [Student].[StudentUniqueId], DisciplineDescriptor.[Namespace] AS DisciplineDescriptorNamespace
                , T.[CreateDate]
                , DisciplineAction.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineAction.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[DisciplineActionDiscipline] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisciplineDescriptor
                    ON DisciplineDescriptor.[DescriptorId] = T.[DisciplineDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[DisciplineAction] AS DisciplineAction
                    ON DisciplineAction.[DisciplineActionIdentifier] = T.[DisciplineActionIdentifier]
                    AND DisciplineAction.[DisciplineDate] = T.[DisciplineDate]
                    AND DisciplineAction.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineActionDisciplineIncident] ******/

CREATE TYPE [t_edfi].[udt_DisciplineActionDisciplineIncident] AS TABLE
(
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineActionDisciplineIncidentKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineActionDisciplineIncidentKey] AS TABLE
(
    [tid_DisciplineActionDisciplineIncident] [INT] NOT NULL PRIMARY KEY
    , [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineActionDisciplineIncident] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineActionDisciplineIncident]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineActionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionDisciplineIncidentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineActionDisciplineIncident]
            (
                [tid_DisciplineAction]
                , [IncidentIdentifier]
                , [SchoolId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineAction]
                , S.[IncidentIdentifier]
                , S.[SchoolId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DisciplineActionIdentifier], T.[DisciplineDate], T.[IncidentIdentifier], T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , DisciplineAction.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineAction.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[DisciplineActionDisciplineIncident] AS T 
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[DisciplineAction] AS DisciplineAction
                    ON DisciplineAction.[DisciplineActionIdentifier] = T.[DisciplineActionIdentifier]
                    AND DisciplineAction.[DisciplineDate] = T.[DisciplineDate]
                    AND DisciplineAction.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineActionStaff] ******/

CREATE TYPE [t_edfi].[udt_DisciplineActionStaff] AS TABLE
(
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineActionStaffKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineActionStaffKey] AS TABLE
(
    [tid_DisciplineActionStaff] [INT] NOT NULL PRIMARY KEY
    , [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL
    , [DisciplineDate] [DATE] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineActionStaff] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineActionStaff]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineActionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionStaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineActionStaff]
            (
                [tid_DisciplineAction]
                , [StaffUniqueId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineAction]
                , S.[StaffUniqueId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DisciplineActionIdentifier], T.[DisciplineDate], [Staff].[StaffUniqueId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , DisciplineAction.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineAction.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[DisciplineActionStaff] AS T 
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[DisciplineAction] AS DisciplineAction
                    ON DisciplineAction.[DisciplineActionIdentifier] = T.[DisciplineActionIdentifier]
                    AND DisciplineAction.[DisciplineDate] = T.[DisciplineDate]
                    AND DisciplineAction.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineDescriptor] ******/

CREATE TYPE [t_edfi].[udt_DisciplineDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [DisciplineType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineDescriptorKey] AS TABLE
(
    [tid_DisciplineDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisciplineDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [DisciplineType].[ShortDescription] AS DisciplineType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[DisciplineDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[DisciplineDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisciplineType] AS DisciplineType
                    ON [DisciplineType].[DisciplineTypeId] = T.[DisciplineTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [DisciplineType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[DisciplineType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisciplineDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisciplineDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisciplineDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisciplineDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisciplineDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[DisciplineDescriptor] AS S
                ON P.[DescriptorId] = S.[DisciplineDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineIncident] ******/

CREATE TYPE [t_edfi].[udt_DisciplineIncident] AS TABLE
(
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [IncidentDate] [DATE] NOT NULL
    , [IncidentTime] [TIME](7) NULL
    , [IncidentLocationType] [NVARCHAR](450) NULL
    , [IncidentDescription] [NVARCHAR](1024) NULL
    , [ReporterDescriptionDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ReporterName] [NVARCHAR](75) NULL
    , [ReportedToLawEnforcement] [BIT] NULL
    , [CaseNumber] [NVARCHAR](20) NULL
    , [IncidentCost] [MONEY] NULL
    , [StaffUniqueId] [NVARCHAR](32) NULL
    , [ReporterDescriptionDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineIncidentKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineIncidentKey] AS TABLE
(
    [tid_DisciplineIncident] [INT] NOT NULL PRIMARY KEY
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineIncident] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineIncident]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineIncidentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisciplineIncident] AS T
            USING
            (
                SELECT T.[IncidentIdentifier]
                , T.[SchoolId]
                , T.[IncidentDate]
                , T.[IncidentTime]
                , [IncidentLocationType].[ShortDescription] AS IncidentLocationType
                , T.[IncidentDescription]
                , ReporterDescriptionDescriptor.[CodeValue] AS ReporterDescriptionDescriptorCodeValue
                , T.[ReporterName]
                , T.[ReportedToLawEnforcement]
                , T.[CaseNumber]
                , T.[IncidentCost]
                , [Staff].[StaffUniqueId]
                , ReporterDescriptionDescriptor.[Namespace] AS ReporterDescriptionDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[DisciplineIncident] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[IncidentLocationType] AS IncidentLocationType
                    ON [IncidentLocationType].[IncidentLocationTypeId] = T.[IncidentLocationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ReporterDescriptionDescriptor
                    ON [ReporterDescriptionDescriptor].[DescriptorId] = T.[ReporterDescriptionDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [IncidentIdentifier]
                    , [SchoolId]
                    , [IncidentDate]
                    , [IncidentTime]
                    , [IncidentLocationType]
                    , [IncidentDescription]
                    , [ReporterDescriptionDescriptorCodeValue]
                    , [ReporterName]
                    , [ReportedToLawEnforcement]
                    , [CaseNumber]
                    , [IncidentCost]
                    , [StaffUniqueId]
                    , [ReporterDescriptionDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[IncidentIdentifier]
                    , S.[SchoolId]
                    , S.[IncidentDate]
                    , S.[IncidentTime]
                    , S.[IncidentLocationType]
                    , S.[IncidentDescription]
                    , S.[ReporterDescriptionDescriptorCodeValue]
                    , S.[ReporterName]
                    , S.[ReportedToLawEnforcement]
                    , S.[CaseNumber]
                    , S.[IncidentCost]
                    , S.[StaffUniqueId]
                    , S.[ReporterDescriptionDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisciplineIncident]
                , INSERTED.[IncidentIdentifier]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisciplineIncidentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisciplineIncident]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisciplineIncident]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisciplineIncident] AS T
            JOIN [Ods_Snapshot].[edfi].[DisciplineIncident] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbDisciplineIncidentBehavior] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineIncidentWeapon] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineIncidentBehavior] ******/

CREATE TYPE [t_edfi].[udt_DisciplineIncidentBehavior] AS TABLE
(
    [BehaviorDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [BehaviorDetailedDescription] [NVARCHAR](1024) NULL
    , [BehaviorDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineIncidentBehaviorKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineIncidentBehaviorKey] AS TABLE
(
    [tid_DisciplineIncidentBehavior] [INT] NOT NULL PRIMARY KEY
    , [BehaviorDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [BehaviorDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineIncidentBehavior] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineIncidentBehavior]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineIncidentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineIncidentBehaviorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineIncidentBehavior]
            (
                [tid_DisciplineIncident]
                , [BehaviorDescriptorCodeValue]
                , [BehaviorDetailedDescription]
                , [BehaviorDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineIncident]
                , S.[BehaviorDescriptorCodeValue]
                , S.[BehaviorDetailedDescription]
                , S.[BehaviorDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT BehaviorDescriptor.[CodeValue] AS BehaviorDescriptorCodeValue, T.[IncidentIdentifier], T.[SchoolId], T.[BehaviorDetailedDescription], BehaviorDescriptor.[Namespace] AS BehaviorDescriptorNamespace
                , T.[CreateDate]
                , DisciplineIncident.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineIncident.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[DisciplineIncidentBehavior] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BehaviorDescriptor
                    ON BehaviorDescriptor.[DescriptorId] = T.[BehaviorDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[DisciplineIncident] AS DisciplineIncident
                    ON DisciplineIncident.[IncidentIdentifier] = T.[IncidentIdentifier]
                    AND DisciplineIncident.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_DisciplineIncidentWeapon] ******/

CREATE TYPE [t_edfi].[udt_DisciplineIncidentWeapon] AS TABLE
(
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [WeaponDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [WeaponDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_DisciplineIncidentWeaponKey] ******/

CREATE TYPE [t_edfi].[udt_DisciplineIncidentWeaponKey] AS TABLE
(
    [tid_DisciplineIncidentWeapon] [INT] NOT NULL PRIMARY KEY
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [WeaponDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [WeaponDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineIncidentWeapon] ******/

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineIncidentWeapon]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineIncidentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineIncidentWeaponKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineIncidentWeapon]
            (
                [tid_DisciplineIncident]
                , [WeaponDescriptorCodeValue]
                , [WeaponDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineIncident]
                , S.[WeaponDescriptorCodeValue]
                , S.[WeaponDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[IncidentIdentifier], T.[SchoolId], WeaponDescriptor.[CodeValue] AS WeaponDescriptorCodeValue, WeaponDescriptor.[Namespace] AS WeaponDescriptorNamespace
                , T.[CreateDate]
                , DisciplineIncident.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineIncident.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[DisciplineIncidentWeapon] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS WeaponDescriptor
                    ON WeaponDescriptor.[DescriptorId] = T.[WeaponDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[DisciplineIncident] AS DisciplineIncident
                    ON DisciplineIncident.[IncidentIdentifier] = T.[IncidentIdentifier]
                    AND DisciplineIncident.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContent] ******/

CREATE TYPE [t_edfi].[udt_EducationContent] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](255) NULL
    , [ShortDescription] [NVARCHAR](75) NULL
    , [Description] [NVARCHAR](1024) NULL
    , [AdditionalAuthorsIndicator] [BIT] NULL
    , [Publisher] [NVARCHAR](50) NULL
    , [TimeRequired] [NVARCHAR](30) NULL
    , [InteractivityStyleType] [NVARCHAR](450) NULL
    , [ContentClassType] [NVARCHAR](450) NULL
    , [UseRightsURL] [NVARCHAR](255) NULL
    , [PublicationDate] [DATE] NULL
    , [PublicationYear] [SMALLINT] NULL
    , [Version] [NVARCHAR](10) NULL
    , [LearningStandardId] [NVARCHAR](60) NULL
    , [Cost] [MONEY] NULL
    , [CostRateType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentKey] AS TABLE
(
    [tid_EducationContent] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationContent] AS T
            USING
            (
                SELECT T.[ContentIdentifier]
                , T.[LearningResourceMetadataURI]
                , T.[ShortDescription]
                , T.[Description]
                , T.[AdditionalAuthorsIndicator]
                , T.[Publisher]
                , T.[TimeRequired]
                , [InteractivityStyleType].[ShortDescription] AS InteractivityStyleType
                , [ContentClassType].[ShortDescription] AS ContentClassType
                , T.[UseRightsURL]
                , T.[PublicationDate]
                , T.[PublicationYear]
                , T.[Version]
                , T.[LearningStandardId]
                , T.[Cost]
                , [CostRateType].[ShortDescription] AS CostRateType
                , T.[Namespace]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationContent] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[InteractivityStyleType] AS InteractivityStyleType
                    ON [InteractivityStyleType].[InteractivityStyleTypeId] = T.[InteractivityStyleTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ContentClassType] AS ContentClassType
                    ON [ContentClassType].[ContentClassTypeId] = T.[ContentClassTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CostRateType] AS CostRateType
                    ON [CostRateType].[CostRateTypeId] = T.[CostRateTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ContentIdentifier]
                    , [LearningResourceMetadataURI]
                    , [ShortDescription]
                    , [Description]
                    , [AdditionalAuthorsIndicator]
                    , [Publisher]
                    , [TimeRequired]
                    , [InteractivityStyleType]
                    , [ContentClassType]
                    , [UseRightsURL]
                    , [PublicationDate]
                    , [PublicationYear]
                    , [Version]
                    , [LearningStandardId]
                    , [Cost]
                    , [CostRateType]
                    , [Namespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ContentIdentifier]
                    , S.[LearningResourceMetadataURI]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[AdditionalAuthorsIndicator]
                    , S.[Publisher]
                    , S.[TimeRequired]
                    , S.[InteractivityStyleType]
                    , S.[ContentClassType]
                    , S.[UseRightsURL]
                    , S.[PublicationDate]
                    , S.[PublicationYear]
                    , S.[Version]
                    , S.[LearningStandardId]
                    , S.[Cost]
                    , S.[CostRateType]
                    , S.[Namespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationContent]
                , INSERTED.[ContentIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationContentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationContent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationContent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationContent] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationContent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbEducationContentAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentDerivativeSourceURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContentAuthor] ******/

CREATE TYPE [t_edfi].[udt_EducationContentAuthor] AS TABLE
(
    [Author] [NVARCHAR](225) NOT NULL
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentAuthorKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentAuthorKey] AS TABLE
(
    [tid_EducationContentAuthor] [INT] NOT NULL PRIMARY KEY
    , [Author] [NVARCHAR](225) NOT NULL
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentAuthor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentAuthor]
            (
                [tid_EducationContent]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[Author], T.[ContentIdentifier]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationContentAuthor] AS T 
                JOIN [Ods_Snapshot].[edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContentDerivativeSourceEducationContent] ******/

CREATE TYPE [t_edfi].[udt_EducationContentDerivativeSourceEducationContent] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [DerivativeSourceContentIdentifier] [NVARCHAR](225) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentDerivativeSourceEducationContentKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentDerivativeSourceEducationContentKey] AS TABLE
(
    [tid_EducationContentDerivativeSourceEducationContent] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [DerivativeSourceContentIdentifier] [NVARCHAR](225) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentDerivativeSourceEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentDerivativeSourceEducationContent]
            (
                [tid_EducationContent]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[DerivativeSourceContentIdentifier]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationContentDerivativeSourceEducationContent] AS T 
                JOIN [Ods_Snapshot].[edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
                    AND EducationContent.[ContentIdentifier] = T.[DerivativeSourceContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContentDerivativeSourceLearningResourceMetadataURI] ******/

CREATE TYPE [t_edfi].[udt_EducationContentDerivativeSourceLearningResourceMetadataURI] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](225) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentDerivativeSourceLearningResourceMetadataURIKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentDerivativeSourceLearningResourceMetadataURIKey] AS TABLE
(
    [tid_EducationContentDerivativeSourceLearningResourceMetadataURI] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](225) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentDerivativeSourceLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI]
            (
                [tid_EducationContent]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContentDerivativeSourceURI] ******/

CREATE TYPE [t_edfi].[udt_EducationContentDerivativeSourceURI] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [URI] [NVARCHAR](225) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentDerivativeSourceURIKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentDerivativeSourceURIKey] AS TABLE
(
    [tid_EducationContentDerivativeSourceURI] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [URI] [NVARCHAR](225) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentDerivativeSourceURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentDerivativeSourceURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentDerivativeSourceURI]
            (
                [tid_EducationContent]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[URI]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationContentDerivativeSourceURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContentAppropriateSex] ******/

CREATE TYPE [t_edfi].[udt_EducationContentAppropriateSex] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentAppropriateSexKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentAppropriateSexKey] AS TABLE
(
    [tid_EducationContentAppropriateSex] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentAppropriateSex] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentAppropriateSex]
            (
                [tid_EducationContent]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationContentAppropriateSex] AS T 
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [Ods_Snapshot].[edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContentAppropriateGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_EducationContentAppropriateGradeLevel] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentAppropriateGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentAppropriateGradeLevelKey] AS TABLE
(
    [tid_EducationContentAppropriateGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentAppropriateGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentAppropriateGradeLevel]
            (
                [tid_EducationContent]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationContentAppropriateGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationContentLanguage] ******/

CREATE TYPE [t_edfi].[udt_EducationContentLanguage] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationContentLanguageKey] ******/

CREATE TYPE [t_edfi].[udt_EducationContentLanguageKey] AS TABLE
(
    [tid_EducationContentLanguage] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentLanguage] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentLanguage]
            (
                [tid_EducationContent]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationContentLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganization] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganization] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [StateOrganizationId] [NVARCHAR](60) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [ShortNameOfInstitution] [NVARCHAR](75) NULL
    , [WebSite] [NVARCHAR](255) NULL
    , [OperationalStatusType] [NVARCHAR](450) NULL
    , [FederalLocaleCodeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [FederalLocaleCodeDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationKey] AS TABLE
(
    [tid_EducationOrganization] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganization] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganization]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganization] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[StateOrganizationId]
                , T.[NameOfInstitution]
                , T.[ShortNameOfInstitution]
                , T.[WebSite]
                , [OperationalStatusType].[ShortDescription] AS OperationalStatusType
                , FederalLocaleCodeDescriptor.[CodeValue] AS FederalLocaleCodeDescriptorCodeValue
                , FederalLocaleCodeDescriptor.[Namespace] AS FederalLocaleCodeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationOrganization] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[OperationalStatusType] AS OperationalStatusType
                    ON [OperationalStatusType].[OperationalStatusTypeId] = T.[OperationalStatusTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS FederalLocaleCodeDescriptor
                    ON [FederalLocaleCodeDescriptor].[DescriptorId] = T.[FederalLocaleCodeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [StateOrganizationId]
                    , [NameOfInstitution]
                    , [ShortNameOfInstitution]
                    , [WebSite]
                    , [OperationalStatusType]
                    , [FederalLocaleCodeDescriptorCodeValue]
                    , [FederalLocaleCodeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[StateOrganizationId]
                    , S.[NameOfInstitution]
                    , S.[ShortNameOfInstitution]
                    , S.[WebSite]
                    , S.[OperationalStatusType]
                    , S.[FederalLocaleCodeDescriptorCodeValue]
                    , S.[FederalLocaleCodeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganization]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganization]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganization]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganization] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbEducationOrganizationIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationCategory] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationInstitutionTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationIdentificationCode] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationIdentificationCodeKey] AS TABLE
(
    [tid_EducationOrganizationIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationIdentificationCode]
            (
                [tid_EducationOrganization]
                , [EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [EducationOrganizationIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[EducationOrganizationIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], EducationOrganizationIdentificationSystemDescriptor.[CodeValue] AS EducationOrganizationIdentificationSystemDescriptorCodeValue, T.[IdentificationCode], EducationOrganizationIdentificationSystemDescriptor.[Namespace] AS EducationOrganizationIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EducationOrganizationIdentificationSystemDescriptor
                    ON EducationOrganizationIdentificationSystemDescriptor.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationCategory] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationCategory] AS TABLE
(
    [EducationOrganizationCategoryType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationCategoryKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationCategoryKey] AS TABLE
(
    [tid_EducationOrganizationCategory] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationCategoryType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationCategory] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationCategory]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationCategoryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationCategory]
            (
                [tid_EducationOrganization]
                , [EducationOrganizationCategoryType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[EducationOrganizationCategoryType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationCategoryType.[ShortDescription] AS EducationOrganizationCategoryType, T.[EducationOrganizationId]
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationCategory] AS T 
                JOIN [Ods_Snapshot].[edfi].[EducationOrganizationCategoryType] AS EducationOrganizationCategoryType
                    ON EducationOrganizationCategoryType.[EducationOrganizationCategoryTypeId] = T.[EducationOrganizationCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationAddress] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationAddressKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationAddressKey] AS TABLE
(
    [tid_EducationOrganizationAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationAddress]
            (
                [tid_EducationOrganization]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[EducationOrganizationId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationInternationalAddress] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationInternationalAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [AddressLine1] [NVARCHAR](150) NOT NULL
    , [AddressLine2] [NVARCHAR](150) NULL
    , [AddressLine3] [NVARCHAR](150) NULL
    , [AddressLine4] [NVARCHAR](150) NULL
    , [CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationInternationalAddressKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationInternationalAddressKey] AS TABLE
(
    [tid_EducationOrganizationInternationalAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationInternationalAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationInternationalAddress]
            (
                [tid_EducationOrganization]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[EducationOrganizationId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationInternationalAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationInstitutionTelephone] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationInstitutionTelephone] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InstitutionTelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationInstitutionTelephoneKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationInstitutionTelephoneKey] AS TABLE
(
    [tid_EducationOrganizationInstitutionTelephone] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InstitutionTelephoneNumberType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationInstitutionTelephone] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationInstitutionTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationInstitutionTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationInstitutionTelephone]
            (
                [tid_EducationOrganization]
                , [InstitutionTelephoneNumberType]
                , [TelephoneNumber]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[InstitutionTelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], InstitutionTelephoneNumberType.[ShortDescription] AS InstitutionTelephoneNumberType, T.[TelephoneNumber]
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationInstitutionTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[InstitutionTelephoneNumberType] AS InstitutionTelephoneNumberType
                    ON InstitutionTelephoneNumberType.[InstitutionTelephoneNumberTypeId] = T.[InstitutionTelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationIdentificationSystemDescriptor] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationIdentificationSystemDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationIdentificationSystemType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationIdentificationSystemDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationIdentificationSystemDescriptorKey] AS TABLE
(
    [tid_EducationOrganizationIdentificationSystemDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EducationOrganizationIdentificationSystemType].[ShortDescription] AS EducationOrganizationIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationIdentificationSystemDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[EducationOrganizationIdentificationSystemType] AS EducationOrganizationIdentificationSystemType
                    ON [EducationOrganizationIdentificationSystemType].[EducationOrganizationIdentificationSystemTypeId] = T.[EducationOrganizationIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EducationOrganizationIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EducationOrganizationIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[EducationOrganizationIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[EducationOrganizationIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationInterventionPrescriptionAssociation] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationInterventionPrescriptionAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationInterventionPrescriptionAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationInterventionPrescriptionAssociationKey] AS TABLE
(
    [tid_EducationOrganizationInterventionPrescriptionAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationInterventionPrescriptionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionPrescriptionEducationOrganizationId]
                , T.[InterventionPrescriptionIdentificationCode]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionPrescriptionEducationOrganizationId]
                    , [InterventionPrescriptionIdentificationCode]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionPrescriptionEducationOrganizationId]
                    , S.[InterventionPrescriptionIdentificationCode]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationInterventionPrescriptionAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionPrescriptionEducationOrganizationId]
                , INSERTED.[InterventionPrescriptionIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationInterventionPrescriptionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationInterventionPrescriptionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationNetwork] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationNetwork] AS TABLE
(
    [EducationOrganizationNetworkId] [INT] NOT NULL
    , [NetworkPurposeType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationNetworkKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationNetworkKey] AS TABLE
(
    [tid_EducationOrganizationNetwork] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationNetworkId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationNetwork] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationNetwork]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationNetworkKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationNetwork] AS T
            USING
            (
                SELECT T.[EducationOrganizationNetworkId]
                , [NetworkPurposeType].[ShortDescription] AS NetworkPurposeType
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationNetwork] AS T
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[EducationOrganizationNetworkId]
                JOIN [Ods_Snapshot].[edfi].[NetworkPurposeType] AS NetworkPurposeType
                    ON [NetworkPurposeType].[NetworkPurposeTypeId] = T.[NetworkPurposeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationNetworkId]
                    , [NetworkPurposeType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationNetworkId]
                    , S.[NetworkPurposeType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationNetwork]
                , INSERTED.[EducationOrganizationNetworkId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationNetwork]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationNetwork]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationNetwork] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[EducationOrganizationNetwork] AS S
                ON P.[EducationOrganizationId] = S.[EducationOrganizationNetworkId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationNetworkAssociation] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationNetworkAssociation] AS TABLE
(
    [EducationOrganizationNetworkId] [INT] NOT NULL
    , [MemberEducationOrganizationId] [INT] NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationNetworkAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationNetworkAssociationKey] AS TABLE
(
    [tid_EducationOrganizationNetworkAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationNetworkId] [INT] NOT NULL
    , [MemberEducationOrganizationId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationNetworkAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationNetworkAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationNetworkAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationNetworkAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationNetworkId]
                , T.[MemberEducationOrganizationId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationNetworkAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationNetworkId]
                    , [MemberEducationOrganizationId]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationNetworkId]
                    , S.[MemberEducationOrganizationId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationNetworkAssociation]
                , INSERTED.[EducationOrganizationNetworkId]
                , INSERTED.[MemberEducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationNetworkAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationNetworkAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationNetworkAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganizationNetworkAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationOrganizationPeerAssociation] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationPeerAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [PeerEducationOrganizationId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationOrganizationPeerAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_EducationOrganizationPeerAssociationKey] AS TABLE
(
    [tid_EducationOrganizationPeerAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [PeerEducationOrganizationId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationPeerAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationPeerAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationPeerAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationPeerAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[PeerEducationOrganizationId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationOrganizationPeerAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [PeerEducationOrganizationId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[PeerEducationOrganizationId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationPeerAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[PeerEducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationPeerAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationPeerAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationPeerAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganizationPeerAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EducationServiceCenter] ******/

CREATE TYPE [t_edfi].[udt_EducationServiceCenter] AS TABLE
(
    [EducationServiceCenterId] [INT] NOT NULL
    , [StateEducationAgencyId] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EducationServiceCenterKey] ******/

CREATE TYPE [t_edfi].[udt_EducationServiceCenterKey] AS TABLE
(
    [tid_EducationServiceCenter] [INT] NOT NULL PRIMARY KEY
    , [EducationServiceCenterId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationServiceCenter] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEducationServiceCenter]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationServiceCenterKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationServiceCenter] AS T
            USING
            (
                SELECT T.[EducationServiceCenterId]
                , T.[StateEducationAgencyId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[EducationServiceCenter] AS T
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[EducationServiceCenterId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationServiceCenterId]
                    , [StateEducationAgencyId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationServiceCenterId]
                    , S.[StateEducationAgencyId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationServiceCenter]
                , INSERTED.[EducationServiceCenterId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationServiceCenterSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationServiceCenter]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationServiceCenter]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationServiceCenter] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[EducationServiceCenter] AS S
                ON P.[EducationOrganizationId] = S.[EducationServiceCenterId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EmploymentStatusDescriptor] ******/

CREATE TYPE [t_edfi].[udt_EmploymentStatusDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [EmploymentStatusType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EmploymentStatusDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_EmploymentStatusDescriptorKey] AS TABLE
(
    [tid_EmploymentStatusDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEmploymentStatusDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEmploymentStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EmploymentStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EmploymentStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EmploymentStatusType].[ShortDescription] AS EmploymentStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[EmploymentStatusDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[EmploymentStatusType] AS EmploymentStatusType
                    ON [EmploymentStatusType].[EmploymentStatusTypeId] = T.[EmploymentStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EmploymentStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EmploymentStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EmploymentStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EmploymentStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EmploymentStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EmploymentStatusDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[EmploymentStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[EmploymentStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_EntryTypeDescriptor] ******/

CREATE TYPE [t_edfi].[udt_EntryTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [EntryType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_EntryTypeDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_EntryTypeDescriptorKey] AS TABLE
(
    [tid_EntryTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbEntryTypeDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbEntryTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EntryTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EntryTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EntryType].[ShortDescription] AS EntryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[EntryTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EntryTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[EntryType] AS EntryType
                    ON [EntryType].[EntryTypeId] = T.[EntryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EntryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EntryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EntryTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EntryTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EntryTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EntryTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EntryTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[EntryTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[EntryTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ExitWithdrawTypeDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ExitWithdrawTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ExitWithdrawType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ExitWithdrawTypeDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ExitWithdrawTypeDescriptorKey] AS TABLE
(
    [tid_ExitWithdrawTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbExitWithdrawTypeDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbExitWithdrawTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ExitWithdrawTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ExitWithdrawTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ExitWithdrawType].[ShortDescription] AS ExitWithdrawType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ExitWithdrawTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ExitWithdrawTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ExitWithdrawType] AS ExitWithdrawType
                    ON [ExitWithdrawType].[ExitWithdrawTypeId] = T.[ExitWithdrawTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ExitWithdrawType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ExitWithdrawType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExitWithdrawTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExitWithdrawTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExitWithdrawTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ExitWithdrawTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ExitWithdrawTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[ExitWithdrawTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_FederalLocaleCodeDescriptor] ******/

CREATE TYPE [t_edfi].[udt_FederalLocaleCodeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [FederalLocaleCodeType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_FederalLocaleCodeDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_FederalLocaleCodeDescriptorKey] AS TABLE
(
    [tid_FederalLocaleCodeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbFederalLocaleCodeDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbFederalLocaleCodeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_FederalLocaleCodeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[FederalLocaleCodeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [FederalLocaleCodeType].[ShortDescription] AS FederalLocaleCodeType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[FederalLocaleCodeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[FederalLocaleCodeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[FederalLocaleCodeType] AS FederalLocaleCodeType
                    ON [FederalLocaleCodeType].[FederalLocaleCodeTypeId] = T.[FederalLocaleCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [FederalLocaleCodeType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[FederalLocaleCodeType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_FederalLocaleCodeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_FederalLocaleCodeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_FederalLocaleCodeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[FederalLocaleCodeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[FederalLocaleCodeDescriptor] AS S
                ON P.[DescriptorId] = S.[FederalLocaleCodeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_FeederSchoolAssociation] ******/

CREATE TYPE [t_edfi].[udt_FeederSchoolAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [FeederSchoolId] [INT] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [EndDate] [DATE] NULL
    , [FeederRelationshipDescription] [NVARCHAR](1024) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_FeederSchoolAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_FeederSchoolAssociationKey] AS TABLE
(
    [tid_FeederSchoolAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [FeederSchoolId] [INT] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbFeederSchoolAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbFeederSchoolAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_FeederSchoolAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[FeederSchoolAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[FeederSchoolId]
                , T.[SchoolId]
                , T.[EndDate]
                , T.[FeederRelationshipDescription]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[FeederSchoolAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [FeederSchoolId]
                    , [SchoolId]
                    , [EndDate]
                    , [FeederRelationshipDescription]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[FeederSchoolId]
                    , S.[SchoolId]
                    , S.[EndDate]
                    , S.[FeederRelationshipDescription]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_FeederSchoolAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[FeederSchoolId]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[FeederSchoolAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_FeederSchoolAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_FeederSchoolAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[FeederSchoolAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[FeederSchoolAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Grade] ******/

CREATE TYPE [t_edfi].[udt_Grade] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [GradeType] [NVARCHAR](450) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [LetterGradeEarned] [NVARCHAR](20) NULL
    , [NumericGradeEarned] [DECIMAL](9, 2) NULL
    , [DiagnosticStatement] [NVARCHAR](1024) NULL
    , [PerformanceBaseConversionType] [NVARCHAR](450) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GradeKey] ******/

CREATE TYPE [t_edfi].[udt_GradeKey] AS TABLE
(
    [tid_Grade] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [GradeType] [NVARCHAR](450) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGrade] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGrade]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Grade] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , [GradeType].[ShortDescription] AS GradeType
                , T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[LetterGradeEarned]
                , T.[NumericGradeEarned]
                , T.[DiagnosticStatement]
                , [PerformanceBaseConversionType].[ShortDescription] AS PerformanceBaseConversionType
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Grade] AS T
                JOIN [Ods_Snapshot].[edfi].[GradeType] AS GradeType
                    ON [GradeType].[GradeTypeId] = T.[GradeTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PerformanceBaseConversionType] AS PerformanceBaseConversionType
                    ON [PerformanceBaseConversionType].[PerformanceBaseConversionTypeId] = T.[PerformanceBaseConversionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [GradeType]
                    , [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [LetterGradeEarned]
                    , [NumericGradeEarned]
                    , [DiagnosticStatement]
                    , [PerformanceBaseConversionType]
                    , [TermDescriptorNamespace]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[GradeType]
                    , S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[LetterGradeEarned]
                    , S.[NumericGradeEarned]
                    , S.[DiagnosticStatement]
                    , S.[PerformanceBaseConversionType]
                    , S.[TermDescriptorNamespace]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Grade]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[GradeType]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradeSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Grade]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Grade]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Grade] AS T
            JOIN [Ods_Snapshot].[edfi].[Grade] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GradebookEntry] ******/

CREATE TYPE [t_edfi].[udt_GradebookEntry] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [GradebookEntryType] [NVARCHAR](450) NULL
    , [Description] [NVARCHAR](1024) NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NULL
    , [BeginDate] [DATE] NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GradebookEntryKey] ******/

CREATE TYPE [t_edfi].[udt_GradebookEntryKey] AS TABLE
(
    [tid_GradebookEntry] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradebookEntry] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGradebookEntry]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradebookEntryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradebookEntry] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[DateAssigned]
                , T.[GradebookEntryTitle]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , [GradebookEntryType].[ShortDescription] AS GradebookEntryType
                , T.[Description]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[BeginDate]
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[GradebookEntry] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[GradebookEntryType] AS GradebookEntryType
                    ON [GradebookEntryType].[GradebookEntryTypeId] = T.[GradebookEntryTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [DateAssigned]
                    , [GradebookEntryTitle]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [GradebookEntryType]
                    , [Description]
                    , [GradingPeriodDescriptorCodeValue]
                    , [BeginDate]
                    , [GradingPeriodDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[DateAssigned]
                    , S.[GradebookEntryTitle]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[GradebookEntryType]
                    , S.[Description]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[BeginDate]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradebookEntry]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[DateAssigned]
                , INSERTED.[GradebookEntryTitle]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradebookEntrySnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradebookEntry]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradebookEntry]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradebookEntry] AS T
            JOIN [Ods_Snapshot].[edfi].[GradebookEntry] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbGradebookEntryLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGradebookEntryLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbGradebookEntryExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GradebookEntryLearningStandard] ******/

CREATE TYPE [t_edfi].[udt_GradebookEntryLearningStandard] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GradebookEntryLearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_GradebookEntryLearningStandardKey] AS TABLE
(
    [tid_GradebookEntryLearningStandard] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradebookEntryLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGradebookEntryLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradebookEntryLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GradebookEntryLearningStandard]
            (
                [tid_GradebookEntry]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GradebookEntry]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LearningStandardId], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , GradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , GradebookEntry.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[GradebookEntryLearningStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[GradebookEntry] AS GradebookEntry
                    ON GradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND GradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND GradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND GradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND GradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND GradebookEntry.[SchoolId] = T.[SchoolId]
                    AND GradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND GradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND GradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND GradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GradebookEntryLearningObjective] ******/

CREATE TYPE [t_edfi].[udt_GradebookEntryLearningObjective] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GradebookEntryLearningObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_GradebookEntryLearningObjectiveKey] AS TABLE
(
    [tid_GradebookEntryLearningObjective] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradebookEntryLearningObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGradebookEntryLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradebookEntryLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GradebookEntryLearningObjective]
            (
                [tid_GradebookEntry]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GradebookEntry]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LocalCourseCode], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , GradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , GradebookEntry.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[GradebookEntryLearningObjective] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[GradebookEntry] AS GradebookEntry
                    ON GradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND GradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND GradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND GradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND GradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND GradebookEntry.[SchoolId] = T.[SchoolId]
                    AND GradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND GradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND GradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND GradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_GradebookEntryExtension] ******/

CREATE TYPE [t_extension].[udt_GradebookEntryExtension] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [DueDate] [DATE] NULL
    , [ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_GradebookEntryExtensionKey] ******/

CREATE TYPE [t_extension].[udt_GradebookEntryExtensionKey] AS TABLE
(
    [tid_GradebookEntryExtension] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbGradebookEntryExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbGradebookEntryExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_GradebookEntryExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[GradebookEntryExtension]
            (
                [tid_GradebookEntry]
                , [DueDate]
                , [ProgramGatewayDescriptorCodeValue]
                , [ProgramGatewayDescriptorNamespace]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GradebookEntry]
                , S.[DueDate]
                , S.[ProgramGatewayDescriptorCodeValue]
                , S.[ProgramGatewayDescriptorNamespace]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[DueDate], ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue, ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , GradebookEntry.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[GradebookEntryExtension] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON ProgramGatewayDescriptor.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[GradebookEntry] AS GradebookEntry
                    ON GradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND GradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND GradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND GradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND GradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND GradebookEntry.[SchoolId] = T.[SchoolId]
                    AND GradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND GradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND GradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND GradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GradeLevelDescriptor] ******/

CREATE TYPE [t_edfi].[udt_GradeLevelDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [GradeLevelType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GradeLevelDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_GradeLevelDescriptorKey] AS TABLE
(
    [tid_GradeLevelDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradeLevelDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGradeLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradeLevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradeLevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [GradeLevelType].[ShortDescription] AS GradeLevelType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[GradeLevelDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[GradeLevelType] AS GradeLevelType
                    ON [GradeLevelType].[GradeLevelTypeId] = T.[GradeLevelTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [GradeLevelType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[GradeLevelType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradeLevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradeLevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradeLevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradeLevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradeLevelDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[GradeLevelDescriptor] AS S
                ON P.[DescriptorId] = S.[GradeLevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GradingPeriod] ******/

CREATE TYPE [t_edfi].[udt_GradingPeriod] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [EndDate] [DATE] NOT NULL
    , [TotalInstructionalDays] [INT] NOT NULL
    , [PeriodSequence] [INT] NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GradingPeriodKey] ******/

CREATE TYPE [t_edfi].[udt_GradingPeriodKey] AS TABLE
(
    [tid_GradingPeriod] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradingPeriod] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGradingPeriod]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradingPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradingPeriod] AS T
            USING
            (
                SELECT T.[BeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[SchoolId]
                , T.[EndDate]
                , T.[TotalInstructionalDays]
                , T.[PeriodSequence]
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[GradingPeriod] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [SchoolId]
                    , [EndDate]
                    , [TotalInstructionalDays]
                    , [PeriodSequence]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[EndDate]
                    , S.[TotalInstructionalDays]
                    , S.[PeriodSequence]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradingPeriod]
                , INSERTED.[BeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradingPeriodSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradingPeriod]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradingPeriod]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradingPeriod] AS T
            JOIN [Ods_Snapshot].[edfi].[GradingPeriod] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GradingPeriodDescriptor] ******/

CREATE TYPE [t_edfi].[udt_GradingPeriodDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [GradingPeriodType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GradingPeriodDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_GradingPeriodDescriptorKey] AS TABLE
(
    [tid_GradingPeriodDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradingPeriodDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGradingPeriodDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradingPeriodDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradingPeriodDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [GradingPeriodType].[ShortDescription] AS GradingPeriodType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[GradingPeriodDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[GradingPeriodType] AS GradingPeriodType
                    ON [GradingPeriodType].[GradingPeriodTypeId] = T.[GradingPeriodTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [GradingPeriodType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[GradingPeriodType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradingPeriodDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradingPeriodDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradingPeriodDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradingPeriodDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[GradingPeriodDescriptor] AS S
                ON P.[DescriptorId] = S.[GradingPeriodDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlan] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlan] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [IndividualPlan] [BIT] NULL
    , [TotalRequiredCredits] [DECIMAL](9, 2) NOT NULL
    , [TotalRequiredCreditType] [NVARCHAR](450) NULL
    , [TotalRequiredCreditConversion] [DECIMAL](9, 2) NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanKey] AS TABLE
(
    [tid_GraduationPlan] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlan] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlan]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GraduationPlan] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue
                , T.[GraduationSchoolYear]
                , T.[IndividualPlan]
                , T.[TotalRequiredCredits]
                , [TotalRequiredCreditType].[ShortDescription] AS TotalRequiredCreditType
                , T.[TotalRequiredCreditConversion]
                , GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[GraduationPlan] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON [GraduationPlanTypeDescriptor].[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS TotalRequiredCreditType
                    ON [TotalRequiredCreditType].[CreditTypeId] = T.[TotalRequiredCreditTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [GraduationPlanTypeDescriptorCodeValue]
                    , [GraduationSchoolYear]
                    , [IndividualPlan]
                    , [TotalRequiredCredits]
                    , [TotalRequiredCreditType]
                    , [TotalRequiredCreditConversion]
                    , [GraduationPlanTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[GraduationPlanTypeDescriptorCodeValue]
                    , S.[GraduationSchoolYear]
                    , S.[IndividualPlan]
                    , S.[TotalRequiredCredits]
                    , S.[TotalRequiredCreditType]
                    , S.[TotalRequiredCreditConversion]
                    , S.[GraduationPlanTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GraduationPlan]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[GraduationPlanTypeDescriptorCodeValue]
                , INSERTED.[GraduationSchoolYear]
                , INSERTED.[GraduationPlanTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GraduationPlanSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GraduationPlan]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GraduationPlan]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GraduationPlan] AS T
            JOIN [Ods_Snapshot].[edfi].[GraduationPlan] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbGraduationPlanCreditsBySubject] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanCreditsByCourse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanRequiredAssessment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlanCreditsBySubject] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanCreditsBySubject] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Credits] [DECIMAL](9, 2) NOT NULL
    , [CreditType] [NVARCHAR](450) NULL
    , [CreditConversion] [DECIMAL](9, 2) NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanCreditsBySubjectKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanCreditsBySubjectKey] AS TABLE
(
    [tid_GraduationPlanCreditsBySubject] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanCreditsBySubject] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsBySubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanCreditsBySubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanCreditsBySubject]
            (
                [tid_GraduationPlan]
                , [AcademicSubjectDescriptorCodeValue]
                , [Credits]
                , [CreditType]
                , [CreditConversion]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlan]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Credits]
                , S.[CreditType]
                , S.[CreditConversion]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Credits], CreditType.[ShortDescription] AS CreditType, T.[CreditConversion], GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , GraduationPlan.[LastModifiedDate] AS ParentLastModifiedDate
                , GraduationPlan.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[GraduationPlanCreditsBySubject] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CreditType
                    ON CreditType.[CreditTypeId] = T.[CreditTypeId]
                JOIN [Ods_Snapshot].[edfi].[GraduationPlan] AS GraduationPlan
                    ON GraduationPlan.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND GraduationPlan.[GraduationPlanTypeDescriptorId] = T.[GraduationPlanTypeDescriptorId]
                    AND GraduationPlan.[GraduationSchoolYear] = T.[GraduationSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlanCreditsByCourse] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanCreditsByCourse] AS TABLE
(
    [CourseSetName] [NVARCHAR](120) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Credits] [DECIMAL](9, 2) NOT NULL
    , [CreditType] [NVARCHAR](450) NULL
    , [CreditConversion] [DECIMAL](9, 2) NULL
    , [WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanCreditsByCourseKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanCreditsByCourseKey] AS TABLE
(
    [tid_GraduationPlanCreditsByCourse] [INT] NOT NULL PRIMARY KEY
    , [CourseSetName] [NVARCHAR](120) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanCreditsByCourse] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsByCourse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanCreditsByCourseKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanCreditsByCourse]
            (
                [tid_GraduationPlan]
                , [CourseSetName]
                , [Credits]
                , [CreditType]
                , [CreditConversion]
                , [WhenTakenGradeLevelDescriptorCodeValue]
                , [WhenTakenGradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_GraduationPlanCreditsByCourse]
            INTO @Tids
            SELECT T.[tid_GraduationPlan]
                , S.[CourseSetName]
                , S.[Credits]
                , S.[CreditType]
                , S.[CreditConversion]
                , S.[WhenTakenGradeLevelDescriptorCodeValue]
                , S.[WhenTakenGradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseSetName], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Credits], CreditType.[ShortDescription] AS CreditType, T.[CreditConversion], WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue, WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace, GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , T.[CreateDate]
                , GraduationPlan.[LastModifiedDate] AS ParentLastModifiedDate
                , GraduationPlan.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[GraduationPlanCreditsByCourse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CreditType
                    ON CreditType.[CreditTypeId] = T.[CreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON WhenTakenGradeLevelDescriptor.[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[GraduationPlan] AS GraduationPlan
                    ON GraduationPlan.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND GraduationPlan.[GraduationPlanTypeDescriptorId] = T.[GraduationPlanTypeDescriptorId]
                    AND GraduationPlan.[GraduationSchoolYear] = T.[GraduationSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_GraduationPlanCreditsByCourse]
                , S.[CourseSetName]
                , T.[EducationOrganizationId]
                , T.[GraduationPlanTypeDescriptorCodeValue]
                , T.[GraduationSchoolYear]
                , T.[GraduationPlanTypeDescriptorNamespace]
            FROM [t_edfi].[GraduationPlanCreditsByCourse] AS S
            JOIN @pTids AS T
                ON S.[tid_GraduationPlan] = T.[tid_GraduationPlan]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_GraduationPlanCreditsByCourse] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlanCreditsByCourseCourse] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanCreditsByCourseCourse] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [CourseSetName] [NVARCHAR](120) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanCreditsByCourseCourseKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanCreditsByCourseCourseKey] AS TABLE
(
    [tid_GraduationPlanCreditsByCourseCourse] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [CourseSetName] [NVARCHAR](120) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanCreditsByCourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanCreditsByCourseCourseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanCreditsByCourseCourse]
            (
                [tid_GraduationPlanCreditsByCourse]
                , [CourseCode]
                , [CourseEducationOrganizationId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlanCreditsByCourse]
                , S.[CourseCode]
                , S.[CourseEducationOrganizationId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[CourseEducationOrganizationId], T.[CourseSetName], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[GraduationPlanCreditsByCourseCourse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[CourseSetName] = S.[CourseSetName]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[GraduationPlanTypeDescriptorCodeValue] = S.[GraduationPlanTypeDescriptorCodeValue]
                AND T.[GraduationSchoolYear] = S.[GraduationSchoolYear]
                AND T.[GraduationPlanTypeDescriptorNamespace] = S.[GraduationPlanTypeDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlanRequiredAssessment] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanRequiredAssessment] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Version] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanRequiredAssessmentKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanRequiredAssessmentKey] AS TABLE
(
    [tid_GraduationPlanRequiredAssessment] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Version] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanRequiredAssessment] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessment]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanRequiredAssessmentKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanRequiredAssessment]
            (
                [tid_GraduationPlan]
                , [AcademicSubjectDescriptorCodeValue]
                , [AssessedGradeLevelDescriptorCodeValue]
                , [AssessmentTitle]
                , [Version]
                , [AssessedGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_GraduationPlanRequiredAssessment]
            INTO @Tids
            SELECT T.[tid_GraduationPlan]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AssessedGradeLevelDescriptorCodeValue]
                , S.[AssessmentTitle]
                , S.[Version]
                , S.[AssessedGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Version], GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , GraduationPlan.[LastModifiedDate] AS ParentLastModifiedDate
                , GraduationPlan.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[GraduationPlanRequiredAssessment] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[GraduationPlan] AS GraduationPlan
                    ON GraduationPlan.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND GraduationPlan.[GraduationPlanTypeDescriptorId] = T.[GraduationPlanTypeDescriptorId]
                    AND GraduationPlan.[GraduationSchoolYear] = T.[GraduationSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_GraduationPlanRequiredAssessment]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AssessedGradeLevelDescriptorCodeValue]
                , S.[AssessmentTitle]
                , T.[EducationOrganizationId]
                , T.[GraduationPlanTypeDescriptorCodeValue]
                , T.[GraduationSchoolYear]
                , S.[Version]
                , T.[GraduationPlanTypeDescriptorNamespace]
                , S.[AssessedGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[GraduationPlanRequiredAssessment] AS S
            JOIN @pTids AS T
                ON S.[tid_GraduationPlan] = T.[tid_GraduationPlan]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_GraduationPlanRequiredAssessment] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlanRequiredAssessmentScore] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanRequiredAssessmentScore] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Version] [INT] NOT NULL
    , [MinimumScore] [NVARCHAR](35) NULL
    , [MaximumScore] [NVARCHAR](35) NULL
    , [ResultDatatypeType] [NVARCHAR](450) NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanRequiredAssessmentScoreKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanRequiredAssessmentScoreKey] AS TABLE
(
    [tid_GraduationPlanRequiredAssessmentScore] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Version] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanRequiredAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanRequiredAssessmentScoreKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanRequiredAssessmentScore]
            (
                [tid_GraduationPlanRequiredAssessment]
                , [AssessmentReportingMethodType]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlanRequiredAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[GraduationPlanRequiredAssessmentScore] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[GraduationPlanTypeDescriptorCodeValue] = S.[GraduationPlanTypeDescriptorCodeValue]
                AND T.[GraduationSchoolYear] = S.[GraduationSchoolYear]
                AND T.[Version] = S.[Version]
                AND T.[GraduationPlanTypeDescriptorNamespace] = S.[GraduationPlanTypeDescriptorNamespace]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Version] [INT] NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [MinimumScore] [NVARCHAR](35) NULL
    , [MaximumScore] [NVARCHAR](35) NULL
    , [ResultDatatypeType] [NVARCHAR](450) NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanRequiredAssessmentAssessmentPerformanceLevelKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanRequiredAssessmentAssessmentPerformanceLevelKey] AS TABLE
(
    [tid_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationSchoolYear] [SMALLINT] NOT NULL
    , [Version] [INT] NOT NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanRequiredAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanRequiredAssessmentAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel]
            (
                [tid_GraduationPlanRequiredAssessment]
                , [PerformanceLevelDescriptorCodeValue]
                , [AssessmentReportingMethodType]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlanRequiredAssessment]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[AssessmentReportingMethodType]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Version], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[GraduationPlanTypeDescriptorCodeValue] = S.[GraduationPlanTypeDescriptorCodeValue]
                AND T.[GraduationSchoolYear] = S.[GraduationSchoolYear]
                AND T.[Version] = S.[Version]
                AND T.[GraduationPlanTypeDescriptorNamespace] = S.[GraduationPlanTypeDescriptorNamespace]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_GraduationPlanTypeDescriptor] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [GraduationPlanType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_GraduationPlanTypeDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_GraduationPlanTypeDescriptorKey] AS TABLE
(
    [tid_GraduationPlanTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanTypeDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GraduationPlanTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [GraduationPlanType].[ShortDescription] AS GraduationPlanType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[GraduationPlanTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[GraduationPlanType] AS GraduationPlanType
                    ON [GraduationPlanType].[GraduationPlanTypeId] = T.[GraduationPlanTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [GraduationPlanType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[GraduationPlanType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GraduationPlanTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GraduationPlanTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GraduationPlanTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GraduationPlanTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[GraduationPlanTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[GraduationPlanTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Intervention] ******/

CREATE TYPE [t_edfi].[udt_Intervention] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [InterventionClassType] [NVARCHAR](450) NOT NULL
    , [DeliveryMethodType] [NVARCHAR](450) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionKey] AS TABLE
(
    [tid_Intervention] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbIntervention] ******/

CREATE PROCEDURE [t_edfi].[usp_dbIntervention]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Intervention] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionIdentificationCode]
                , [InterventionClassType].[ShortDescription] AS InterventionClassType
                , [DeliveryMethodType].[ShortDescription] AS DeliveryMethodType
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Intervention] AS T
                JOIN [Ods_Snapshot].[edfi].[InterventionClassType] AS InterventionClassType
                    ON [InterventionClassType].[InterventionClassTypeId] = T.[InterventionClassTypeId]
                JOIN [Ods_Snapshot].[edfi].[DeliveryMethodType] AS DeliveryMethodType
                    ON [DeliveryMethodType].[DeliveryMethodTypeId] = T.[DeliveryMethodTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionIdentificationCode]
                    , [InterventionClassType]
                    , [DeliveryMethodType]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionIdentificationCode]
                    , S.[InterventionClassType]
                    , S.[DeliveryMethodType]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Intervention]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[InterventionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Intervention]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Intervention]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Intervention] AS T
            JOIN [Ods_Snapshot].[edfi].[Intervention] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbInterventionEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionDiagnosis] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPopulationServed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionInterventionPrescription] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionMeetingTime] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStaff] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionEducationContent] ******/

CREATE TYPE [t_edfi].[udt_InterventionEducationContent] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionEducationContentKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionEducationContentKey] AS TABLE
(
    [tid_InterventionEducationContent] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionEducationContent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionEducationContent]
            (
                [tid_Intervention]
                , [ContentIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[ContentIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[EducationOrganizationId], T.[InterventionIdentificationCode]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionEducationContent] AS T 
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionLearningResourceMetadataURI] ******/

CREATE TYPE [t_edfi].[udt_InterventionLearningResourceMetadataURI] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionLearningResourceMetadataURIKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionLearningResourceMetadataURIKey] AS TABLE
(
    [tid_InterventionLearningResourceMetadataURI] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionLearningResourceMetadataURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionLearningResourceMetadataURI]
            (
                [tid_Intervention]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionLearningResourceMetadataURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionURI] ******/

CREATE TYPE [t_edfi].[udt_InterventionURI] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [URI] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionURIKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionURIKey] AS TABLE
(
    [tid_InterventionURI] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [URI] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionURI]
            (
                [tid_Intervention]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[URI]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionDiagnosis] ******/

CREATE TYPE [t_edfi].[udt_InterventionDiagnosis] AS TABLE
(
    [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionDiagnosisKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionDiagnosisKey] AS TABLE
(
    [tid_InterventionDiagnosis] [INT] NOT NULL PRIMARY KEY
    , [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionDiagnosis] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionDiagnosis]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionDiagnosisKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionDiagnosis]
            (
                [tid_Intervention]
                , [DiagnosisDescriptorCodeValue]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], T.[InterventionIdentificationCode], DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionDiagnosis] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPopulationServed] ******/

CREATE TYPE [t_edfi].[udt_InterventionPopulationServed] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPopulationServedKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPopulationServedKey] AS TABLE
(
    [tid_InterventionPopulationServed] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPopulationServed] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPopulationServed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPopulationServedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPopulationServed]
            (
                [tid_Intervention]
                , [PopulationServedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[PopulationServedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPopulationServed] AS T 
                JOIN [Ods_Snapshot].[edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionAppropriateSex] ******/

CREATE TYPE [t_edfi].[udt_InterventionAppropriateSex] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionAppropriateSexKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionAppropriateSexKey] AS TABLE
(
    [tid_InterventionAppropriateSex] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionAppropriateSex] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionAppropriateSex]
            (
                [tid_Intervention]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionAppropriateSex] AS T 
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionAppropriateGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_InterventionAppropriateGradeLevel] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionAppropriateGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionAppropriateGradeLevelKey] AS TABLE
(
    [tid_InterventionAppropriateGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionAppropriateGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionAppropriateGradeLevel]
            (
                [tid_Intervention]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionIdentificationCode], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionAppropriateGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionInterventionPrescription] ******/

CREATE TYPE [t_edfi].[udt_InterventionInterventionPrescription] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionInterventionPrescriptionKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionInterventionPrescriptionKey] AS TABLE
(
    [tid_InterventionInterventionPrescription] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionInterventionPrescription] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionInterventionPrescription]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionInterventionPrescriptionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionInterventionPrescription]
            (
                [tid_Intervention]
                , [InterventionPrescriptionEducationOrganizationId]
                , [InterventionPrescriptionIdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[InterventionPrescriptionEducationOrganizationId]
                , S.[InterventionPrescriptionIdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[InterventionPrescriptionEducationOrganizationId], T.[InterventionPrescriptionIdentificationCode]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionInterventionPrescription] AS T 
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionMeetingTime] ******/

CREATE TYPE [t_edfi].[udt_InterventionMeetingTime] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [AlternateDayName] [NVARCHAR](20) NULL
    , [StartTime] [TIME](7) NOT NULL
    , [EndTime] [TIME](7) NOT NULL
    , [OfficialAttendancePeriod] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionMeetingTimeKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionMeetingTimeKey] AS TABLE
(
    [tid_InterventionMeetingTime] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionMeetingTime] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionMeetingTime]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionMeetingTimeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionMeetingTime]
            (
                [tid_Intervention]
                , [ClassPeriodName]
                , [SchoolId]
                , [AlternateDayName]
                , [StartTime]
                , [EndTime]
                , [OfficialAttendancePeriod]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[ClassPeriodName]
                , S.[SchoolId]
                , S.[AlternateDayName]
                , S.[StartTime]
                , S.[EndTime]
                , S.[OfficialAttendancePeriod]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[SchoolId], T.[AlternateDayName], T.[StartTime], T.[EndTime], T.[OfficialAttendancePeriod]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionMeetingTime] AS T 
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStaff] ******/

CREATE TYPE [t_edfi].[udt_InterventionStaff] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStaffKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStaffKey] AS TABLE
(
    [tid_InterventionStaff] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStaff] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStaff]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStaff]
            (
                [tid_Intervention]
                , [StaffUniqueId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[StaffUniqueId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], [Staff].[StaffUniqueId]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStaff] AS T 
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescription] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescription] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [InterventionClassType] [NVARCHAR](450) NOT NULL
    , [DeliveryMethodType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionKey] AS TABLE
(
    [tid_InterventionPrescription] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescription] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescription]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[InterventionPrescription] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionPrescriptionIdentificationCode]
                , [InterventionClassType].[ShortDescription] AS InterventionClassType
                , [DeliveryMethodType].[ShortDescription] AS DeliveryMethodType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[InterventionPrescription] AS T
                JOIN [Ods_Snapshot].[edfi].[InterventionClassType] AS InterventionClassType
                    ON [InterventionClassType].[InterventionClassTypeId] = T.[InterventionClassTypeId]
                JOIN [Ods_Snapshot].[edfi].[DeliveryMethodType] AS DeliveryMethodType
                    ON [DeliveryMethodType].[DeliveryMethodTypeId] = T.[DeliveryMethodTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionPrescriptionIdentificationCode]
                    , [InterventionClassType]
                    , [DeliveryMethodType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionPrescriptionIdentificationCode]
                    , S.[InterventionClassType]
                    , S.[DeliveryMethodType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_InterventionPrescription]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionPrescriptionIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[InterventionPrescriptionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_InterventionPrescription]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_InterventionPrescription]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[InterventionPrescription] AS T
            JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbInterventionPrescriptionEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionDiagnosis] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionPopulationServed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescriptionEducationContent] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionEducationContent] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionEducationContentKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionEducationContentKey] AS TABLE
(
    [tid_InterventionPrescriptionEducationContent] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionEducationContent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionEducationContent]
            (
                [tid_InterventionPrescription]
                , [ContentIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[ContentIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode]
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPrescriptionEducationContent] AS T 
                JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescriptionLearningResourceMetadataURI] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionLearningResourceMetadataURI] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionLearningResourceMetadataURIKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionLearningResourceMetadataURIKey] AS TABLE
(
    [tid_InterventionPrescriptionLearningResourceMetadataURI] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI]
            (
                [tid_InterventionPrescription]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPrescriptionLearningResourceMetadataURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescriptionURI] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionURI] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [URI] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionURIKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionURIKey] AS TABLE
(
    [tid_InterventionPrescriptionURI] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [URI] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionURI]
            (
                [tid_InterventionPrescription]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], T.[URI]
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPrescriptionURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescriptionDiagnosis] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionDiagnosis] AS TABLE
(
    [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionDiagnosisKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionDiagnosisKey] AS TABLE
(
    [tid_InterventionPrescriptionDiagnosis] [INT] NOT NULL PRIMARY KEY
    , [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionDiagnosis] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionDiagnosis]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionDiagnosisKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionDiagnosis]
            (
                [tid_InterventionPrescription]
                , [DiagnosisDescriptorCodeValue]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPrescriptionDiagnosis] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescriptionPopulationServed] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionPopulationServed] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionPopulationServedKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionPopulationServedKey] AS TABLE
(
    [tid_InterventionPrescriptionPopulationServed] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionPopulationServed] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionPopulationServed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionPopulationServedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionPopulationServed]
            (
                [tid_InterventionPrescription]
                , [PopulationServedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[PopulationServedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPrescriptionPopulationServed] AS T 
                JOIN [Ods_Snapshot].[edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescriptionAppropriateSex] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionAppropriateSex] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionAppropriateSexKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionAppropriateSexKey] AS TABLE
(
    [tid_InterventionPrescriptionAppropriateSex] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionAppropriateSex] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionAppropriateSex]
            (
                [tid_InterventionPrescription]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPrescriptionAppropriateSex] AS T 
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionPrescriptionAppropriateGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionAppropriateGradeLevel] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionPrescriptionAppropriateGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionPrescriptionAppropriateGradeLevelKey] AS TABLE
(
    [tid_InterventionPrescriptionAppropriateGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionAppropriateGradeLevel]
            (
                [tid_InterventionPrescription]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionPrescriptionIdentificationCode], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionPrescriptionAppropriateGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudy] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudy] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL
    , [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [Participants] [INT] NOT NULL
    , [DeliveryMethodType] [NVARCHAR](450) NOT NULL
    , [InterventionClassType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyKey] AS TABLE
(
    [tid_InterventionStudy] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudy] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudy]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[InterventionStudy] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionStudyIdentificationCode]
                , T.[InterventionPrescriptionEducationOrganizationId]
                , T.[InterventionPrescriptionIdentificationCode]
                , T.[Participants]
                , [DeliveryMethodType].[ShortDescription] AS DeliveryMethodType
                , [InterventionClassType].[ShortDescription] AS InterventionClassType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[InterventionStudy] AS T
                JOIN [Ods_Snapshot].[edfi].[DeliveryMethodType] AS DeliveryMethodType
                    ON [DeliveryMethodType].[DeliveryMethodTypeId] = T.[DeliveryMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionClassType] AS InterventionClassType
                    ON [InterventionClassType].[InterventionClassTypeId] = T.[InterventionClassTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionStudyIdentificationCode]
                    , [InterventionPrescriptionEducationOrganizationId]
                    , [InterventionPrescriptionIdentificationCode]
                    , [Participants]
                    , [DeliveryMethodType]
                    , [InterventionClassType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionStudyIdentificationCode]
                    , S.[InterventionPrescriptionEducationOrganizationId]
                    , S.[InterventionPrescriptionIdentificationCode]
                    , S.[Participants]
                    , S.[DeliveryMethodType]
                    , S.[InterventionClassType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_InterventionStudy]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionStudyIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[InterventionStudySnapshotRecord]
            (
                [SnapshotId]
                , [tid_InterventionStudy]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_InterventionStudy]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[InterventionStudy] AS T
            JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbInterventionStudyEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyInterventionEffectiveness] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyPopulationServed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyStateAbbreviation] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyEducationContent] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyEducationContent] AS TABLE
(
    [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyEducationContentKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyEducationContentKey] AS TABLE
(
    [tid_InterventionStudyEducationContent] [INT] NOT NULL PRIMARY KEY
    , [ContentIdentifier] [NVARCHAR](225) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyEducationContent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyEducationContent]
            (
                [tid_InterventionStudy]
                , [ContentIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[ContentIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode]
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyEducationContent] AS T 
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyLearningResourceMetadataURI] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyLearningResourceMetadataURI] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyLearningResourceMetadataURIKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyLearningResourceMetadataURIKey] AS TABLE
(
    [tid_InterventionStudyLearningResourceMetadataURI] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyLearningResourceMetadataURI]
            (
                [tid_InterventionStudy]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyLearningResourceMetadataURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyURI] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyURI] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [URI] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyURIKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyURIKey] AS TABLE
(
    [tid_InterventionStudyURI] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [URI] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyURI] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyURI]
            (
                [tid_InterventionStudy]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], T.[URI]
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyURI] AS T 
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyInterventionEffectiveness] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyInterventionEffectiveness] AS TABLE
(
    [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
    , [ImprovementIndex] [INT] NULL
    , [InterventionEffectivenessRatingType] [NVARCHAR](450) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyInterventionEffectivenessKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyInterventionEffectivenessKey] AS TABLE
(
    [tid_InterventionStudyInterventionEffectiveness] [INT] NOT NULL PRIMARY KEY
    , [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyInterventionEffectiveness] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyInterventionEffectiveness]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyInterventionEffectivenessKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyInterventionEffectiveness]
            (
                [tid_InterventionStudy]
                , [DiagnosisDescriptorCodeValue]
                , [GradeLevelDescriptorCodeValue]
                , [PopulationServedType]
                , [ImprovementIndex]
                , [InterventionEffectivenessRatingType]
                , [GradeLevelDescriptorNamespace]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[PopulationServedType]
                , S.[ImprovementIndex]
                , S.[InterventionEffectivenessRatingType]
                , S.[GradeLevelDescriptorNamespace]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionStudyIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType, T.[ImprovementIndex], InterventionEffectivenessRatingType.[ShortDescription] AS InterventionEffectivenessRatingType, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace, DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyInterventionEffectiveness] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionEffectivenessRatingType] AS InterventionEffectivenessRatingType
                    ON InterventionEffectivenessRatingType.[InterventionEffectivenessRatingTypeId] = T.[InterventionEffectivenessRatingTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyAppropriateGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyAppropriateGradeLevel] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyAppropriateGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyAppropriateGradeLevelKey] AS TABLE
(
    [tid_InterventionStudyAppropriateGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyAppropriateGradeLevel]
            (
                [tid_InterventionStudy]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionStudyIdentificationCode], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyAppropriateGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyPopulationServed] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyPopulationServed] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyPopulationServedKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyPopulationServedKey] AS TABLE
(
    [tid_InterventionStudyPopulationServed] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyPopulationServed] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyPopulationServed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyPopulationServedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyPopulationServed]
            (
                [tid_InterventionStudy]
                , [PopulationServedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[PopulationServedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyPopulationServed] AS T 
                JOIN [Ods_Snapshot].[edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyAppropriateSex] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyAppropriateSex] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyAppropriateSexKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyAppropriateSexKey] AS TABLE
(
    [tid_InterventionStudyAppropriateSex] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyAppropriateSex] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyAppropriateSex]
            (
                [tid_InterventionStudy]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyAppropriateSex] AS T 
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_InterventionStudyStateAbbreviation] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyStateAbbreviation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_InterventionStudyStateAbbreviationKey] ******/

CREATE TYPE [t_edfi].[udt_InterventionStudyStateAbbreviationKey] AS TABLE
(
    [tid_InterventionStudyStateAbbreviation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyStateAbbreviation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyStateAbbreviation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyStateAbbreviationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyStateAbbreviation]
            (
                [tid_InterventionStudy]
                , [StateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[StateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[InterventionStudyStateAbbreviation] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LanguageDescriptor] ******/

CREATE TYPE [t_edfi].[udt_LanguageDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LanguageDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_LanguageDescriptorKey] AS TABLE
(
    [tid_LanguageDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLanguageDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLanguageDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LanguageDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LanguageDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LanguageType].[ShortDescription] AS LanguageType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[LanguageDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LanguageDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[LanguageType] AS LanguageType
                    ON [LanguageType].[LanguageTypeId] = T.[LanguageTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LanguageType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LanguageType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LanguageDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LanguageDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LanguageDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LanguageDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LanguageDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[LanguageDescriptor] AS S
                ON P.[DescriptorId] = S.[LanguageDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningObjective] ******/

CREATE TYPE [t_edfi].[udt_LearningObjective] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LearningObjectiveId] [NVARCHAR](60) NULL
    , [Description] [NVARCHAR](1024) NULL
    , [Nomenclature] [NVARCHAR](35) NULL
    , [SuccessCriteria] [NVARCHAR](150) NULL
    , [ParentObjective] [NVARCHAR](60) NULL
    , [ParentAcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ParentObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ParentObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [ParentAcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_LearningObjectiveKey] AS TABLE
(
    [tid_LearningObjective] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LearningObjective] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[Objective]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[LearningObjectiveId]
                , T.[Description]
                , T.[Nomenclature]
                , T.[SuccessCriteria]
                , T.[ParentObjective]
                , ParentAcademicSubjectDescriptor.[CodeValue] AS ParentAcademicSubjectDescriptorCodeValue
                , ParentObjectiveGradeLevelDescriptor.[CodeValue] AS ParentObjectiveGradeLevelDescriptorCodeValue
                , T.[Namespace]
                , ParentObjectiveGradeLevelDescriptor.[Namespace] AS ParentObjectiveGradeLevelDescriptorNamespace
                , ParentAcademicSubjectDescriptor.[Namespace] AS ParentAcademicSubjectDescriptorNamespace
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[LearningObjective] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ParentAcademicSubjectDescriptor
                    ON [ParentAcademicSubjectDescriptor].[DescriptorId] = T.[ParentAcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ParentObjectiveGradeLevelDescriptor
                    ON [ParentObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ParentObjectiveGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [Objective]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [LearningObjectiveId]
                    , [Description]
                    , [Nomenclature]
                    , [SuccessCriteria]
                    , [ParentObjective]
                    , [ParentAcademicSubjectDescriptorCodeValue]
                    , [ParentObjectiveGradeLevelDescriptorCodeValue]
                    , [Namespace]
                    , [ParentObjectiveGradeLevelDescriptorNamespace]
                    , [ParentAcademicSubjectDescriptorNamespace]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[Objective]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[LearningObjectiveId]
                    , S.[Description]
                    , S.[Nomenclature]
                    , S.[SuccessCriteria]
                    , S.[ParentObjective]
                    , S.[ParentAcademicSubjectDescriptorCodeValue]
                    , S.[ParentObjectiveGradeLevelDescriptorCodeValue]
                    , S.[Namespace]
                    , S.[ParentObjectiveGradeLevelDescriptorNamespace]
                    , S.[ParentAcademicSubjectDescriptorNamespace]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LearningObjective]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LearningObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LearningObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LearningObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LearningObjective] AS T
            JOIN [Ods_Snapshot].[edfi].[LearningObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningObjectiveContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningObjectiveLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningObjectiveContentStandard] ******/

CREATE TYPE [t_edfi].[udt_LearningObjectiveContentStandard] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Title] [NVARCHAR](75) NOT NULL
    , [Version] [NVARCHAR](50) NULL
    , [URI] [NVARCHAR](255) NULL
    , [PublicationDate] [DATE] NULL
    , [PublicationYear] [SMALLINT] NULL
    , [PublicationStatusType] [NVARCHAR](450) NULL
    , [MandatingEducationOrganizationId] [INT] NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningObjectiveContentStandardKey] ******/

CREATE TYPE [t_edfi].[udt_LearningObjectiveContentStandardKey] AS TABLE
(
    [tid_LearningObjectiveContentStandard] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjectiveContentStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjectiveContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningObjectiveKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningObjectiveContentStandard]
            (
                [tid_LearningObjective]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_LearningObjectiveContentStandard]
            INTO @Tids
            SELECT T.[tid_LearningObjective]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate], ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , LearningObjective.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningObjective.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[LearningObjectiveContentStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [Ods_Snapshot].[edfi].[LearningObjective] AS LearningObjective
                    ON LearningObjective.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND LearningObjective.[Objective] = T.[Objective]
                    AND LearningObjective.[ObjectiveGradeLevelDescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_LearningObjectiveContentStandard]
                , T.[AcademicSubjectDescriptorCodeValue]
                , T.[Objective]
                , T.[ObjectiveGradeLevelDescriptorCodeValue]
                , T.[ObjectiveGradeLevelDescriptorNamespace]
                , T.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[LearningObjectiveContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_LearningObjective] = T.[tid_LearningObjective]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_LearningObjectiveContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningObjectiveContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningObjectiveContentStandardAuthor] ******/

CREATE TYPE [t_edfi].[udt_LearningObjectiveContentStandardAuthor] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Author] [NVARCHAR](255) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningObjectiveContentStandardAuthorKey] ******/

CREATE TYPE [t_edfi].[udt_LearningObjectiveContentStandardAuthorKey] AS TABLE
(
    [tid_LearningObjectiveContentStandardAuthor] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Author] [NVARCHAR](255) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjectiveContentStandardAuthor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjectiveContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningObjectiveContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningObjectiveContentStandardAuthor]
            (
                [tid_LearningObjectiveContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningObjectiveContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[Author], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[LearningObjectiveContentStandardAuthor] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[Objective] = S.[Objective]
                AND T.[ObjectiveGradeLevelDescriptorCodeValue] = S.[ObjectiveGradeLevelDescriptorCodeValue]
                AND T.[ObjectiveGradeLevelDescriptorNamespace] = S.[ObjectiveGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningObjectiveLearningStandard] ******/

CREATE TYPE [t_edfi].[udt_LearningObjectiveLearningStandard] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningObjectiveLearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_LearningObjectiveLearningStandardKey] AS TABLE
(
    [tid_LearningObjectiveLearningStandard] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjectiveLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjectiveLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningObjectiveKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningObjectiveLearningStandard]
            (
                [tid_LearningObjective]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningObjective]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[LearningStandardId], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , LearningObjective.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningObjective.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[LearningObjectiveLearningStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LearningObjective] AS LearningObjective
                    ON LearningObjective.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND LearningObjective.[Objective] = T.[Objective]
                    AND LearningObjective.[ObjectiveGradeLevelDescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningStandard] ******/

CREATE TYPE [t_edfi].[udt_LearningStandard] AS TABLE
(
    [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Description] [NVARCHAR](1024) NOT NULL
    , [LearningStandardItemCode] [NVARCHAR](60) NULL
    , [URI] [NVARCHAR](255) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CourseTitle] [NVARCHAR](60) NULL
    , [SuccessCriteria] [NVARCHAR](150) NULL
    , [ParentLearningStandardId] [NVARCHAR](60) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardKey] AS TABLE
(
    [tid_LearningStandard] [INT] NOT NULL PRIMARY KEY
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandard]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LearningStandard] AS T
            USING
            (
                SELECT T.[LearningStandardId]
                , T.[Description]
                , T.[LearningStandardItemCode]
                , T.[URI]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[CourseTitle]
                , T.[SuccessCriteria]
                , T.[ParentLearningStandardId]
                , T.[Namespace]
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[LearningStandard] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [LearningStandardId]
                    , [Description]
                    , [LearningStandardItemCode]
                    , [URI]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CourseTitle]
                    , [SuccessCriteria]
                    , [ParentLearningStandardId]
                    , [Namespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[LearningStandardId]
                    , S.[Description]
                    , S.[LearningStandardItemCode]
                    , S.[URI]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CourseTitle]
                    , S.[SuccessCriteria]
                    , S.[ParentLearningStandardId]
                    , S.[Namespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LearningStandard]
                , INSERTED.[LearningStandardId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LearningStandardSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LearningStandard]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LearningStandard]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LearningStandard] AS T
            JOIN [Ods_Snapshot].[edfi].[LearningStandard] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningStandardIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandardContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandardGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningStandardIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardIdentificationCode] AS TABLE
(
    [ContentStandardName] [NVARCHAR](65) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningStandardIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardIdentificationCodeKey] AS TABLE
(
    [tid_LearningStandardIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [ContentStandardName] [NVARCHAR](65) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardIdentificationCode]
            (
                [tid_LearningStandard]
                , [ContentStandardName]
                , [IdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandard]
                , S.[ContentStandardName]
                , S.[IdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentStandardName], T.[IdentificationCode], T.[LearningStandardId]
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[LearningStandardIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningStandardContentStandard] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardContentStandard] AS TABLE
(
    [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Title] [NVARCHAR](75) NOT NULL
    , [Version] [NVARCHAR](50) NULL
    , [URI] [NVARCHAR](255) NULL
    , [PublicationDate] [DATE] NULL
    , [PublicationYear] [SMALLINT] NULL
    , [PublicationStatusType] [NVARCHAR](450) NULL
    , [MandatingEducationOrganizationId] [INT] NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningStandardContentStandardKey] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardContentStandardKey] AS TABLE
(
    [tid_LearningStandardContentStandard] [INT] NOT NULL PRIMARY KEY
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardContentStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardContentStandard]
            (
                [tid_LearningStandard]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_LearningStandardContentStandard]
            INTO @Tids
            SELECT T.[tid_LearningStandard]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[LearningStandardId], T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[LearningStandardContentStandard] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [Ods_Snapshot].[edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_LearningStandardContentStandard]
                , T.[LearningStandardId]
            FROM [t_edfi].[LearningStandardContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_LearningStandard] = T.[tid_LearningStandard]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_LearningStandardContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningStandardContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningStandardContentStandardAuthor] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardContentStandardAuthor] AS TABLE
(
    [Author] [NVARCHAR](255) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningStandardContentStandardAuthorKey] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardContentStandardAuthorKey] AS TABLE
(
    [tid_LearningStandardContentStandardAuthor] [INT] NOT NULL PRIMARY KEY
    , [Author] [NVARCHAR](255) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardContentStandardAuthor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardContentStandardAuthor]
            (
                [tid_LearningStandardContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandardContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[Author], T.[LearningStandardId]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[LearningStandardContentStandardAuthor] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[LearningStandardId] = S.[LearningStandardId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningStandardGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardGradeLevel] AS TABLE
(
    [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningStandardGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardGradeLevelKey] AS TABLE
(
    [tid_LearningStandardGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardGradeLevel]
            (
                [tid_LearningStandard]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandard]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[LearningStandardId], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[LearningStandardGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LearningStandardPrerequisiteLearningStandard] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardPrerequisiteLearningStandard] AS TABLE
(
    [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [PrerequisiteLearningStandardId] [NVARCHAR](60) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LearningStandardPrerequisiteLearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_LearningStandardPrerequisiteLearningStandardKey] AS TABLE
(
    [tid_LearningStandardPrerequisiteLearningStandard] [INT] NOT NULL PRIMARY KEY
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [PrerequisiteLearningStandardId] [NVARCHAR](60) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardPrerequisiteLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardPrerequisiteLearningStandard]
            (
                [tid_LearningStandard]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandard]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[LearningStandardId], T.[PrerequisiteLearningStandardId]
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[LearningStandardPrerequisiteLearningStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
                    AND LearningStandard.[LearningStandardId] = T.[PrerequisiteLearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LeaveEvent] ******/

CREATE TYPE [t_edfi].[udt_LeaveEvent] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [LeaveEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LeaveEventReason] [NVARCHAR](40) NULL
    , [HoursOnLeave] [DECIMAL](18, 2) NULL
    , [SubstituteAssigned] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LeaveEventKey] ******/

CREATE TYPE [t_edfi].[udt_LeaveEventKey] AS TABLE
(
    [tid_LeaveEvent] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [LeaveEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLeaveEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLeaveEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LeaveEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LeaveEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , [LeaveEventCategoryType].[ShortDescription] AS LeaveEventCategoryType
                , [Staff].[StaffUniqueId]
                , T.[LeaveEventReason]
                , T.[HoursOnLeave]
                , T.[SubstituteAssigned]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[LeaveEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[LeaveEventCategoryType] AS LeaveEventCategoryType
                    ON [LeaveEventCategoryType].[LeaveEventCategoryTypeId] = T.[LeaveEventCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [LeaveEventCategoryType]
                    , [StaffUniqueId]
                    , [LeaveEventReason]
                    , [HoursOnLeave]
                    , [SubstituteAssigned]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[LeaveEventCategoryType]
                    , S.[StaffUniqueId]
                    , S.[LeaveEventReason]
                    , S.[HoursOnLeave]
                    , S.[SubstituteAssigned]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LeaveEvent]
                , INSERTED.[EventDate]
                , INSERTED.[LeaveEventCategoryType]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LeaveEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LeaveEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LeaveEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LeaveEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[LeaveEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbLeaveEventExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_LeaveEventExtension] ******/

CREATE TYPE [t_extension].[udt_LeaveEventExtension] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [LeaveEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [PayCodeID] [NVARCHAR](4) NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_LeaveEventExtensionKey] ******/

CREATE TYPE [t_extension].[udt_LeaveEventExtensionKey] AS TABLE
(
    [tid_LeaveEventExtension] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [LeaveEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbLeaveEventExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbLeaveEventExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LeaveEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_LeaveEventExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[LeaveEventExtension]
            (
                [tid_LeaveEvent]
                , [PayCodeID]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LeaveEvent]
                , S.[PayCodeID]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], LeaveEventCategoryType.[ShortDescription] AS LeaveEventCategoryType, [Staff].[StaffUniqueId], T.[PayCodeID]
                , LeaveEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , LeaveEvent.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[LeaveEventExtension] AS T 
                JOIN [Ods_Snapshot].[edfi].[LeaveEventCategoryType] AS LeaveEventCategoryType
                    ON LeaveEventCategoryType.[LeaveEventCategoryTypeId] = T.[LeaveEventCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[LeaveEvent] AS LeaveEvent
                    ON LeaveEvent.[EventDate] = T.[EventDate]
                    AND LeaveEvent.[LeaveEventCategoryTypeId] = T.[LeaveEventCategoryTypeId]
                    AND LeaveEvent.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LevelDescriptor] ******/

CREATE TYPE [t_edfi].[udt_LevelDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LevelDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_LevelDescriptorKey] AS TABLE
(
    [tid_LevelDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLevelDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[LevelDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LevelDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[LevelDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLevelDescriptorGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LevelDescriptorGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_LevelDescriptorGradeLevel] AS TABLE
(
    [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LevelDescriptorGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_LevelDescriptorGradeLevelKey] AS TABLE
(
    [tid_LevelDescriptorGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLevelDescriptorGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLevelDescriptorGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LevelDescriptorKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LevelDescriptorGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LevelDescriptorGradeLevel]
            (
                [tid_LevelDescriptor]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LevelDescriptor]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , LevelDescriptor.[CodeValue] AS LevelDescriptorCodeValue
                , LevelDescriptor.[Namespace] AS LevelDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[LevelDescriptorGradeLevel] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LevelDescriptor
                    ON LevelDescriptor.[DescriptorId] = T.[LevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[CodeValue] = S.[LevelDescriptorCodeValue]
                AND T.[Namespace] = S.[LevelDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LevelOfEducationDescriptor] ******/

CREATE TYPE [t_edfi].[udt_LevelOfEducationDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [LevelOfEducationType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LevelOfEducationDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_LevelOfEducationDescriptorKey] AS TABLE
(
    [tid_LevelOfEducationDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLevelOfEducationDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLevelOfEducationDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LevelOfEducationDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LevelOfEducationDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LevelOfEducationType].[ShortDescription] AS LevelOfEducationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[LevelOfEducationDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelOfEducationDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[LevelOfEducationType] AS LevelOfEducationType
                    ON [LevelOfEducationType].[LevelOfEducationTypeId] = T.[LevelOfEducationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LevelOfEducationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LevelOfEducationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelOfEducationDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelOfEducationDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelOfEducationDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LevelOfEducationDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[LevelOfEducationDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelOfEducationDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LimitedEnglishProficiencyDescriptor] ******/

CREATE TYPE [t_edfi].[udt_LimitedEnglishProficiencyDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [LimitedEnglishProficiencyType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LimitedEnglishProficiencyDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_LimitedEnglishProficiencyDescriptorKey] AS TABLE
(
    [tid_LimitedEnglishProficiencyDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LimitedEnglishProficiencyDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LimitedEnglishProficiencyDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LimitedEnglishProficiencyType].[ShortDescription] AS LimitedEnglishProficiencyType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[LimitedEnglishProficiencyDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LimitedEnglishProficiencyDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LimitedEnglishProficiencyType] AS LimitedEnglishProficiencyType
                    ON [LimitedEnglishProficiencyType].[LimitedEnglishProficiencyTypeId] = T.[LimitedEnglishProficiencyTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LimitedEnglishProficiencyType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LimitedEnglishProficiencyType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LimitedEnglishProficiencyDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LimitedEnglishProficiencyDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LimitedEnglishProficiencyDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LimitedEnglishProficiencyDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[LimitedEnglishProficiencyDescriptor] AS S
                ON P.[DescriptorId] = S.[LimitedEnglishProficiencyDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LocalEducationAgency] ******/

CREATE TYPE [t_edfi].[udt_LocalEducationAgency] AS TABLE
(
    [LocalEducationAgencyId] [INT] NOT NULL
    , [LocalEducationAgencyCategoryType] [NVARCHAR](450) NOT NULL
    , [CharterStatusType] [NVARCHAR](450) NULL
    , [ParentLocalEducationAgencyId] [INT] NULL
    , [EducationServiceCenterId] [INT] NULL
    , [StateEducationAgencyId] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LocalEducationAgencyKey] ******/

CREATE TYPE [t_edfi].[udt_LocalEducationAgencyKey] AS TABLE
(
    [tid_LocalEducationAgency] [INT] NOT NULL PRIMARY KEY
    , [LocalEducationAgencyId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocalEducationAgency] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLocalEducationAgency]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocalEducationAgencyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LocalEducationAgency] AS T
            USING
            (
                SELECT T.[LocalEducationAgencyId]
                , [LocalEducationAgencyCategoryType].[ShortDescription] AS LocalEducationAgencyCategoryType
                , [CharterStatusType].[ShortDescription] AS CharterStatusType
                , T.[ParentLocalEducationAgencyId]
                , T.[EducationServiceCenterId]
                , T.[StateEducationAgencyId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[LocalEducationAgency] AS T
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[LocalEducationAgencyId]
                JOIN [Ods_Snapshot].[edfi].[LocalEducationAgencyCategoryType] AS LocalEducationAgencyCategoryType
                    ON [LocalEducationAgencyCategoryType].[LocalEducationAgencyCategoryTypeId] = T.[LocalEducationAgencyCategoryTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CharterStatusType] AS CharterStatusType
                    ON [CharterStatusType].[CharterStatusTypeId] = T.[CharterStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [LocalEducationAgencyId]
                    , [LocalEducationAgencyCategoryType]
                    , [CharterStatusType]
                    , [ParentLocalEducationAgencyId]
                    , [EducationServiceCenterId]
                    , [StateEducationAgencyId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[LocalEducationAgencyId]
                    , S.[LocalEducationAgencyCategoryType]
                    , S.[CharterStatusType]
                    , S.[ParentLocalEducationAgencyId]
                    , S.[EducationServiceCenterId]
                    , S.[StateEducationAgencyId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LocalEducationAgency]
                , INSERTED.[LocalEducationAgencyId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LocalEducationAgencySnapshotRecord]
            (
                [SnapshotId]
                , [tid_LocalEducationAgency]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LocalEducationAgency]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LocalEducationAgency] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[LocalEducationAgency] AS S
                ON P.[EducationOrganizationId] = S.[LocalEducationAgencyId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLocalEducationAgencyAccountability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLocalEducationAgencyFederalFunds] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LocalEducationAgencyAccountability] ******/

CREATE TYPE [t_edfi].[udt_LocalEducationAgencyAccountability] AS TABLE
(
    [LocalEducationAgencyId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [GunFreeSchoolsActReportingStatusType] [NVARCHAR](450) NULL
    , [SchoolChoiceImplementStatusType] [NVARCHAR](450) NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LocalEducationAgencyAccountabilityKey] ******/

CREATE TYPE [t_edfi].[udt_LocalEducationAgencyAccountabilityKey] AS TABLE
(
    [tid_LocalEducationAgencyAccountability] [INT] NOT NULL PRIMARY KEY
    , [LocalEducationAgencyId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocalEducationAgencyAccountability] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLocalEducationAgencyAccountability]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LocalEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocalEducationAgencyAccountabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LocalEducationAgencyAccountability]
            (
                [tid_LocalEducationAgency]
                , [SchoolYear]
                , [GunFreeSchoolsActReportingStatusType]
                , [SchoolChoiceImplementStatusType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LocalEducationAgency]
                , S.[SchoolYear]
                , S.[GunFreeSchoolsActReportingStatusType]
                , S.[SchoolChoiceImplementStatusType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[LocalEducationAgencyId], T.[SchoolYear], GunFreeSchoolsActReportingStatusType.[ShortDescription] AS GunFreeSchoolsActReportingStatusType, SchoolChoiceImplementStatusType.[ShortDescription] AS SchoolChoiceImplementStatusType
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[LocalEducationAgencyAccountability] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[GunFreeSchoolsActReportingStatusType] AS GunFreeSchoolsActReportingStatusType
                    ON GunFreeSchoolsActReportingStatusType.[GunFreeSchoolsActReportingStatusTypeId] = T.[GunFreeSchoolsActReportingStatusTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SchoolChoiceImplementStatusType] AS SchoolChoiceImplementStatusType
                    ON SchoolChoiceImplementStatusType.[SchoolChoiceImplementStatusTypeId] = T.[SchoolChoiceImplementStatusTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LocalEducationAgencyId] = S.[LocalEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_LocalEducationAgencyFederalFunds] ******/

CREATE TYPE [t_edfi].[udt_LocalEducationAgencyFederalFunds] AS TABLE
(
    [FiscalYear] [INT] NOT NULL
    , [LocalEducationAgencyId] [INT] NOT NULL
    , [InnovativeDollarsSpent] [MONEY] NULL
    , [InnovativeDollarsSpentOnStrategicPriorities] [MONEY] NULL
    , [InnovativeProgramsFundsReceived] [MONEY] NULL
    , [SchoolImprovementAllocation] [MONEY] NULL
    , [SchoolImprovementReservedFundsPercentage] [DECIMAL](5, 4) NULL
    , [SupplementalEducationalServicesFundsSpent] [MONEY] NULL
    , [SupplementalEducationalServicesPerPupilExpenditure] [MONEY] NULL
    , [StateAssessmentAdministrationFunding] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LocalEducationAgencyFederalFundsKey] ******/

CREATE TYPE [t_edfi].[udt_LocalEducationAgencyFederalFundsKey] AS TABLE
(
    [tid_LocalEducationAgencyFederalFunds] [INT] NOT NULL PRIMARY KEY
    , [FiscalYear] [INT] NOT NULL
    , [LocalEducationAgencyId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocalEducationAgencyFederalFunds] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLocalEducationAgencyFederalFunds]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LocalEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocalEducationAgencyFederalFundsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LocalEducationAgencyFederalFunds]
            (
                [tid_LocalEducationAgency]
                , [FiscalYear]
                , [InnovativeDollarsSpent]
                , [InnovativeDollarsSpentOnStrategicPriorities]
                , [InnovativeProgramsFundsReceived]
                , [SchoolImprovementAllocation]
                , [SchoolImprovementReservedFundsPercentage]
                , [SupplementalEducationalServicesFundsSpent]
                , [SupplementalEducationalServicesPerPupilExpenditure]
                , [StateAssessmentAdministrationFunding]
                , [CreateDate]
                , [LastModifiedDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LocalEducationAgency]
                , S.[FiscalYear]
                , S.[InnovativeDollarsSpent]
                , S.[InnovativeDollarsSpentOnStrategicPriorities]
                , S.[InnovativeProgramsFundsReceived]
                , S.[SchoolImprovementAllocation]
                , S.[SchoolImprovementReservedFundsPercentage]
                , S.[SupplementalEducationalServicesFundsSpent]
                , S.[SupplementalEducationalServicesPerPupilExpenditure]
                , S.[StateAssessmentAdministrationFunding]
                , S.[CreateDate]
                , S.[LastModifiedDate]
                , S.[Id]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FiscalYear], T.[LocalEducationAgencyId], T.[InnovativeDollarsSpent], T.[InnovativeDollarsSpentOnStrategicPriorities], T.[InnovativeProgramsFundsReceived], T.[SchoolImprovementAllocation], T.[SchoolImprovementReservedFundsPercentage], T.[SupplementalEducationalServicesFundsSpent], T.[SupplementalEducationalServicesPerPupilExpenditure], T.[StateAssessmentAdministrationFunding]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[LocalEducationAgencyFederalFunds] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[LocalEducationAgencyId] = S.[LocalEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Location] ******/

CREATE TYPE [t_edfi].[udt_Location] AS TABLE
(
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [MaximumNumberOfSeats] [INT] NULL
    , [OptimalNumberOfSeats] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_LocationKey] ******/

CREATE TYPE [t_edfi].[udt_LocationKey] AS TABLE
(
    [tid_Location] [INT] NOT NULL PRIMARY KEY
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbLocation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Location] AS T
            USING
            (
                SELECT T.[ClassroomIdentificationCode]
                , T.[SchoolId]
                , T.[MaximumNumberOfSeats]
                , T.[OptimalNumberOfSeats]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Location] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassroomIdentificationCode]
                    , [SchoolId]
                    , [MaximumNumberOfSeats]
                    , [OptimalNumberOfSeats]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassroomIdentificationCode]
                    , S.[SchoolId]
                    , S.[MaximumNumberOfSeats]
                    , S.[OptimalNumberOfSeats]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Location]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LocationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Location]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Location]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Location] AS T
            JOIN [Ods_Snapshot].[edfi].[Location] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ObjectiveAssessment] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessment] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [MaxRawScore] [INT] NULL
    , [PercentOfAssessment] [DECIMAL](5, 4) NULL
    , [Nomenclature] [NVARCHAR](35) NULL
    , [Description] [NVARCHAR](1024) NULL
    , [ParentIdentificationCode] [NVARCHAR](60) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentKey] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentKey] AS TABLE
(
    [tid_ObjectiveAssessment] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessment] ******/

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ObjectiveAssessment] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , T.[IdentificationCode]
                , T.[Version]
                , T.[MaxRawScore]
                , T.[PercentOfAssessment]
                , T.[Nomenclature]
                , T.[Description]
                , T.[ParentIdentificationCode]
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[ObjectiveAssessment] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [IdentificationCode]
                    , [Version]
                    , [MaxRawScore]
                    , [PercentOfAssessment]
                    , [Nomenclature]
                    , [Description]
                    , [ParentIdentificationCode]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[IdentificationCode]
                    , S.[Version]
                    , S.[MaxRawScore]
                    , S.[PercentOfAssessment]
                    , S.[Nomenclature]
                    , S.[Description]
                    , S.[ParentIdentificationCode]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ObjectiveAssessment]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[IdentificationCode]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ObjectiveAssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ObjectiveAssessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ObjectiveAssessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ObjectiveAssessment] AS T
            JOIN [Ods_Snapshot].[edfi].[ObjectiveAssessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessmentAssessmentItem] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessmentLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessmentLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentPerformanceLevel] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentPerformanceLevel] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Version] [INT] NOT NULL
    , [MinimumScore] [NVARCHAR](35) NULL
    , [MaximumScore] [NVARCHAR](35) NULL
    , [ResultDatatypeType] [NVARCHAR](450) NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentPerformanceLevelKey] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentPerformanceLevelKey] AS TABLE
(
    [tid_ObjectiveAssessmentPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Version] [INT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentPerformanceLevel]
            (
                [tid_ObjectiveAssessment]
                , [AssessmentReportingMethodType]
                , [PerformanceLevelDescriptorCodeValue]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[IdentificationCode], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ObjectiveAssessmentPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentAssessmentItem] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentAssessmentItem] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentItemIdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentAssessmentItemKey] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentAssessmentItemKey] AS TABLE
(
    [tid_ObjectiveAssessmentAssessmentItem] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentItemIdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentAssessmentItem] ******/

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentAssessmentItem]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentAssessmentItemKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentAssessmentItem]
            (
                [tid_ObjectiveAssessment]
                , [AssessmentItemIdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[AssessmentItemIdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentItemIdentificationCode], T.[AssessmentTitle], T.[IdentificationCode], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ObjectiveAssessmentAssessmentItem] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentLearningObjective] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentLearningObjective] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentLearningObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentLearningObjectiveKey] AS TABLE
(
    [tid_ObjectiveAssessmentLearningObjective] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentLearningObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentLearningObjective]
            (
                [tid_ObjectiveAssessment]
                , [Objective]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[Objective]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], T.[Objective], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ObjectiveAssessmentLearningObjective] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentLearningStandard] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentLearningStandard] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ObjectiveAssessmentLearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_ObjectiveAssessmentLearningStandardKey] AS TABLE
(
    [tid_ObjectiveAssessmentLearningStandard] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentLearningStandard]
            (
                [tid_ObjectiveAssessment]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], T.[LearningStandardId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ObjectiveAssessmentLearningStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_OpenStaffPosition] ******/

CREATE TYPE [t_edfi].[udt_OpenStaffPosition] AS TABLE
(
    [DatePosted] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RequisitionNumber] [NVARCHAR](20) NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [PositionTitle] [NVARCHAR](100) NULL
    , [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NULL
    , [DatePostingRemoved] [DATE] NULL
    , [PostingResultType] [NVARCHAR](450) NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_OpenStaffPositionKey] ******/

CREATE TYPE [t_edfi].[udt_OpenStaffPositionKey] AS TABLE
(
    [tid_OpenStaffPosition] [INT] NOT NULL PRIMARY KEY
    , [DatePosted] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RequisitionNumber] [NVARCHAR](20) NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbOpenStaffPosition] ******/

CREATE PROCEDURE [t_edfi].[usp_dbOpenStaffPosition]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_OpenStaffPositionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[OpenStaffPosition] AS T
            USING
            (
                SELECT T.[DatePosted]
                , T.[EducationOrganizationId]
                , EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue
                , T.[RequisitionNumber]
                , StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue
                , T.[PositionTitle]
                , ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue
                , T.[DatePostingRemoved]
                , [PostingResultType].[ShortDescription] AS PostingResultType
                , ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace
                , StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace
                , EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[OpenStaffPosition] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON [EmploymentStatusDescriptor].[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON [StaffClassificationDescriptor].[DescriptorId] = T.[StaffClassificationDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON [ProgramAssignmentDescriptor].[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PostingResultType] AS PostingResultType
                    ON [PostingResultType].[PostingResultTypeId] = T.[PostingResultTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [DatePosted]
                    , [EducationOrganizationId]
                    , [EmploymentStatusDescriptorCodeValue]
                    , [RequisitionNumber]
                    , [StaffClassificationDescriptorCodeValue]
                    , [PositionTitle]
                    , [ProgramAssignmentDescriptorCodeValue]
                    , [DatePostingRemoved]
                    , [PostingResultType]
                    , [ProgramAssignmentDescriptorNamespace]
                    , [StaffClassificationDescriptorNamespace]
                    , [EmploymentStatusDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[DatePosted]
                    , S.[EducationOrganizationId]
                    , S.[EmploymentStatusDescriptorCodeValue]
                    , S.[RequisitionNumber]
                    , S.[StaffClassificationDescriptorCodeValue]
                    , S.[PositionTitle]
                    , S.[ProgramAssignmentDescriptorCodeValue]
                    , S.[DatePostingRemoved]
                    , S.[PostingResultType]
                    , S.[ProgramAssignmentDescriptorNamespace]
                    , S.[StaffClassificationDescriptorNamespace]
                    , S.[EmploymentStatusDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_OpenStaffPosition]
                , INSERTED.[DatePosted]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EmploymentStatusDescriptorCodeValue]
                , INSERTED.[RequisitionNumber]
                , INSERTED.[StaffClassificationDescriptorCodeValue]
                , INSERTED.[StaffClassificationDescriptorNamespace]
                , INSERTED.[EmploymentStatusDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[OpenStaffPositionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_OpenStaffPosition]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_OpenStaffPosition]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[OpenStaffPosition] AS T
            JOIN [Ods_Snapshot].[edfi].[OpenStaffPosition] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbOpenStaffPositionAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_OpenStaffPositionInstructionalGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_OpenStaffPositionInstructionalGradeLevel] AS TABLE
(
    [DatePosted] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RequisitionNumber] [NVARCHAR](20) NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_OpenStaffPositionInstructionalGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_OpenStaffPositionInstructionalGradeLevelKey] AS TABLE
(
    [tid_OpenStaffPositionInstructionalGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [DatePosted] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RequisitionNumber] [NVARCHAR](20) NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_OpenStaffPositionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_OpenStaffPositionInstructionalGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[OpenStaffPositionInstructionalGradeLevel]
            (
                [tid_OpenStaffPosition]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_OpenStaffPosition]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DatePosted], T.[EducationOrganizationId], EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue, GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[RequisitionNumber], StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue, StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace, EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , T.[CreateDate]
                , OpenStaffPosition.[LastModifiedDate] AS ParentLastModifiedDate
                , OpenStaffPosition.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[OpenStaffPositionInstructionalGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON EmploymentStatusDescriptor.[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON StaffClassificationDescriptor.[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[OpenStaffPosition] AS OpenStaffPosition
                    ON OpenStaffPosition.[DatePosted] = T.[DatePosted]
                    AND OpenStaffPosition.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND OpenStaffPosition.[EmploymentStatusDescriptorId] = T.[EmploymentStatusDescriptorId]
                    AND OpenStaffPosition.[RequisitionNumber] = T.[RequisitionNumber]
                    AND OpenStaffPosition.[StaffClassificationDescriptorId] = T.[StaffClassificationDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_OpenStaffPositionAcademicSubject] ******/

CREATE TYPE [t_edfi].[udt_OpenStaffPositionAcademicSubject] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [DatePosted] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RequisitionNumber] [NVARCHAR](20) NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_OpenStaffPositionAcademicSubjectKey] ******/

CREATE TYPE [t_edfi].[udt_OpenStaffPositionAcademicSubjectKey] AS TABLE
(
    [tid_OpenStaffPositionAcademicSubject] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [DatePosted] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RequisitionNumber] [NVARCHAR](20) NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbOpenStaffPositionAcademicSubject] ******/

CREATE PROCEDURE [t_edfi].[usp_dbOpenStaffPositionAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_OpenStaffPositionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_OpenStaffPositionAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[OpenStaffPositionAcademicSubject]
            (
                [tid_OpenStaffPosition]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_OpenStaffPosition]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[DatePosted], T.[EducationOrganizationId], EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue, T.[RequisitionNumber], StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue, StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace, EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , OpenStaffPosition.[LastModifiedDate] AS ParentLastModifiedDate
                , OpenStaffPosition.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[OpenStaffPositionAcademicSubject] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON EmploymentStatusDescriptor.[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON StaffClassificationDescriptor.[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[OpenStaffPosition] AS OpenStaffPosition
                    ON OpenStaffPosition.[DatePosted] = T.[DatePosted]
                    AND OpenStaffPosition.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND OpenStaffPosition.[EmploymentStatusDescriptorId] = T.[EmploymentStatusDescriptorId]
                    AND OpenStaffPosition.[RequisitionNumber] = T.[RequisitionNumber]
                    AND OpenStaffPosition.[StaffClassificationDescriptorId] = T.[StaffClassificationDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Parent] ******/

CREATE TYPE [t_edfi].[udt_Parent] AS TABLE
(
    [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [MaidenName] [NVARCHAR](75) NULL
    , [SexType] [NVARCHAR](450) NULL
    , [LoginId] [NVARCHAR](60) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ParentKey] ******/

CREATE TYPE [t_edfi].[udt_ParentKey] AS TABLE
(
    [tid_Parent] [INT] NOT NULL PRIMARY KEY
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbParent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbParent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Parent] AS T
            USING
            (
                SELECT T.[ParentUniqueId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[LoginId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Parent] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ParentUniqueId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [LoginId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ParentUniqueId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[LoginId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Parent]
                , INSERTED.[ParentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ParentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Parent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Parent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Parent] AS T
            JOIN [Ods_Snapshot].[edfi].[Parent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbParentOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ParentOtherName] ******/

CREATE TYPE [t_edfi].[udt_ParentOtherName] AS TABLE
(
    [OtherNameType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ParentOtherNameKey] ******/

CREATE TYPE [t_edfi].[udt_ParentOtherNameKey] AS TABLE
(
    [tid_ParentOtherName] [INT] NOT NULL PRIMARY KEY
    , [OtherNameType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentOtherName] ******/

CREATE PROCEDURE [t_edfi].[usp_dbParentOtherName]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentOtherName]
            (
                [tid_Parent]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, [Parent].[ParentUniqueId], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ParentOtherName] AS T 
                JOIN [Ods_Snapshot].[edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [Ods_Snapshot].[edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ParentAddress] ******/

CREATE TYPE [t_edfi].[udt_ParentAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ParentAddressKey] ******/

CREATE TYPE [t_edfi].[udt_ParentAddressKey] AS TABLE
(
    [tid_ParentAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbParentAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentAddress]
            (
                [tid_Parent]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Parent].[ParentUniqueId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ParentAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ParentInternationalAddress] ******/

CREATE TYPE [t_edfi].[udt_ParentInternationalAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [AddressLine1] [NVARCHAR](150) NOT NULL
    , [AddressLine2] [NVARCHAR](150) NULL
    , [AddressLine3] [NVARCHAR](150) NULL
    , [AddressLine4] [NVARCHAR](150) NULL
    , [CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ParentInternationalAddressKey] ******/

CREATE TYPE [t_edfi].[udt_ParentInternationalAddressKey] AS TABLE
(
    [tid_ParentInternationalAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentInternationalAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbParentInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentInternationalAddress]
            (
                [tid_Parent]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Parent].[ParentUniqueId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ParentInternationalAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ParentTelephone] ******/

CREATE TYPE [t_edfi].[udt_ParentTelephone] AS TABLE
(
    [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [OrderOfPriority] [INT] NULL
    , [TextMessageCapabilityIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ParentTelephoneKey] ******/

CREATE TYPE [t_edfi].[udt_ParentTelephoneKey] AS TABLE
(
    [tid_ParentTelephone] [INT] NOT NULL PRIMARY KEY
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentTelephone] ******/

CREATE PROCEDURE [t_edfi].[usp_dbParentTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentTelephone]
            (
                [tid_Parent]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Parent].[ParentUniqueId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ParentTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ParentElectronicMail] ******/

CREATE TYPE [t_edfi].[udt_ParentElectronicMail] AS TABLE
(
    [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [ElectronicMailAddress] [NVARCHAR](128) NOT NULL
    , [PrimaryEmailAddressIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ParentElectronicMailKey] ******/

CREATE TYPE [t_edfi].[udt_ParentElectronicMailKey] AS TABLE
(
    [tid_ParentElectronicMail] [INT] NOT NULL PRIMARY KEY
    , [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentElectronicMail] ******/

CREATE PROCEDURE [t_edfi].[usp_dbParentElectronicMail]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentElectronicMail]
            (
                [tid_Parent]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, [Parent].[ParentUniqueId], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ParentElectronicMail] AS T 
                JOIN [Ods_Snapshot].[edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [Ods_Snapshot].[edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ParentIdentificationDocument] ******/

CREATE TYPE [t_edfi].[udt_ParentIdentificationDocument] AS TABLE
(
    [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [DocumentTitle] [NVARCHAR](60) NULL
    , [DocumentExpirationDate] [DATE] NULL
    , [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ParentIdentificationDocumentKey] ******/

CREATE TYPE [t_edfi].[udt_ParentIdentificationDocumentKey] AS TABLE
(
    [tid_ParentIdentificationDocument] [INT] NOT NULL PRIMARY KEY
    , [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentIdentificationDocument] ******/

CREATE PROCEDURE [t_edfi].[usp_dbParentIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentIdentificationDocument]
            (
                [tid_Parent]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, [Parent].[ParentUniqueId], PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ParentIdentificationDocument] AS T 
                JOIN [Ods_Snapshot].[edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Payroll] ******/

CREATE TYPE [t_edfi].[udt_Payroll] AS TABLE
(
    [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AmountToDate] [MONEY] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_PayrollKey] ******/

CREATE TYPE [t_edfi].[udt_PayrollKey] AS TABLE
(
    [tid_Payroll] [INT] NOT NULL PRIMARY KEY
    , [AccountNumber] [NVARCHAR](50) NOT NULL
    , [AsOfDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FiscalYear] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbPayroll] ******/

CREATE PROCEDURE [t_edfi].[usp_dbPayroll]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PayrollKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Payroll] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , [Staff].[StaffUniqueId]
                , T.[AmountToDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Payroll] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [StaffUniqueId]
                    , [AmountToDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[StaffUniqueId]
                    , S.[AmountToDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Payroll]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[PayrollSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Payroll]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Payroll]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Payroll] AS T
            JOIN [Ods_Snapshot].[edfi].[Payroll] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_PerformanceLevelDescriptor] ******/

CREATE TYPE [t_edfi].[udt_PerformanceLevelDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [PerformanceBaseConversionType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_PerformanceLevelDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_PerformanceLevelDescriptorKey] AS TABLE
(
    [tid_PerformanceLevelDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbPerformanceLevelDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbPerformanceLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PerformanceLevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[PerformanceLevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PerformanceBaseConversionType].[ShortDescription] AS PerformanceBaseConversionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[PerformanceLevelDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PerformanceBaseConversionType] AS PerformanceBaseConversionType
                    ON [PerformanceBaseConversionType].[PerformanceBaseConversionTypeId] = T.[PerformanceBaseConversionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PerformanceBaseConversionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PerformanceBaseConversionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceLevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceLevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceLevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[PerformanceLevelDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[PerformanceLevelDescriptor] AS S
                ON P.[DescriptorId] = S.[PerformanceLevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_PostSecondaryEvent] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEvent] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_PostSecondaryEventKey] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEventKey] AS TABLE
(
    [tid_PostSecondaryEvent] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[PostSecondaryEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , [PostSecondaryEventCategoryType].[ShortDescription] AS PostSecondaryEventCategoryType
                , [Student].[StudentUniqueId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[PostSecondaryEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON [PostSecondaryEventCategoryType].[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [PostSecondaryEventCategoryType]
                    , [StudentUniqueId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[PostSecondaryEventCategoryType]
                    , S.[StudentUniqueId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PostSecondaryEvent]
                , INSERTED.[EventDate]
                , INSERTED.[PostSecondaryEventCategoryType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[PostSecondaryEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PostSecondaryEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PostSecondaryEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[PostSecondaryEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[PostSecondaryEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitution] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitution] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [PostSecondaryInstitutionId] [NVARCHAR](30) NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [PostSecondaryInstitutionLevelType] [NVARCHAR](450) NULL
    , [AdministrativeFundingControlDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AdministrativeFundingControlDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey] AS TABLE
(
    [tid_PostSecondaryEventPostSecondaryInstitution] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution] ******/

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_PostSecondaryEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[PostSecondaryEventPostSecondaryInstitution]
            (
                [tid_PostSecondaryEvent]
                , [PostSecondaryInstitutionId]
                , [NameOfInstitution]
                , [PostSecondaryInstitutionLevelType]
                , [AdministrativeFundingControlDescriptorCodeValue]
                , [AdministrativeFundingControlDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_PostSecondaryEventPostSecondaryInstitution]
            INTO @Tids
            SELECT T.[tid_PostSecondaryEvent]
                , S.[PostSecondaryInstitutionId]
                , S.[NameOfInstitution]
                , S.[PostSecondaryInstitutionLevelType]
                , S.[AdministrativeFundingControlDescriptorCodeValue]
                , S.[AdministrativeFundingControlDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], PostSecondaryEventCategoryType.[ShortDescription] AS PostSecondaryEventCategoryType, [Student].[StudentUniqueId], T.[PostSecondaryInstitutionId], T.[NameOfInstitution], PostSecondaryInstitutionLevelType.[ShortDescription] AS PostSecondaryInstitutionLevelType, AdministrativeFundingControlDescriptor.[CodeValue] AS AdministrativeFundingControlDescriptorCodeValue, AdministrativeFundingControlDescriptor.[Namespace] AS AdministrativeFundingControlDescriptorNamespace
                , T.[CreateDate]
                , PostSecondaryEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , PostSecondaryEvent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[PostSecondaryEventPostSecondaryInstitution] AS T 
                JOIN [Ods_Snapshot].[edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON PostSecondaryEventCategoryType.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[PostSecondaryInstitutionLevelType] AS PostSecondaryInstitutionLevelType
                    ON PostSecondaryInstitutionLevelType.[PostSecondaryInstitutionLevelTypeId] = T.[PostSecondaryInstitutionLevelTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AdministrativeFundingControlDescriptor
                    ON AdministrativeFundingControlDescriptor.[DescriptorId] = T.[AdministrativeFundingControlDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[PostSecondaryEvent] AS PostSecondaryEvent
                    ON PostSecondaryEvent.[EventDate] = T.[EventDate]
                    AND PostSecondaryEvent.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                    AND PostSecondaryEvent.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_PostSecondaryEventPostSecondaryInstitution]
                , T.[EventDate]
                , T.[PostSecondaryEventCategoryType]
                , T.[StudentUniqueId]
            FROM [t_edfi].[PostSecondaryEventPostSecondaryInstitution] AS S
            JOIN @pTids AS T
                ON S.[tid_PostSecondaryEvent] = T.[tid_PostSecondaryEvent]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_PostSecondaryEventPostSecondaryInstitution] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionIdentificationCode] AS TABLE
(
    [EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionIdentificationCodeKey] AS TABLE
(
    [tid_PostSecondaryEventPostSecondaryInstitutionIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode]
            (
                [tid_PostSecondaryEventPostSecondaryInstitution]
                , [EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [EducationOrganizationIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PostSecondaryEventPostSecondaryInstitution]
                , S.[EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[EducationOrganizationIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationIdentificationSystemDescriptor.[CodeValue] AS EducationOrganizationIdentificationSystemDescriptorCodeValue, T.[EventDate], PostSecondaryEventCategoryType.[ShortDescription] AS PostSecondaryEventCategoryType, [Student].[StudentUniqueId], T.[IdentificationCode], EducationOrganizationIdentificationSystemDescriptor.[Namespace] AS EducationOrganizationIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EducationOrganizationIdentificationSystemDescriptor
                    ON EducationOrganizationIdentificationSystemDescriptor.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON PostSecondaryEventCategoryType.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[EventDate] = S.[EventDate]
                AND T.[PostSecondaryEventCategoryType] = S.[PostSecondaryEventCategoryType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [MediumOfInstructionType] [NVARCHAR](450) NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionKey] ******/

CREATE TYPE [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionKey] AS TABLE
(
    [tid_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [MediumOfInstructionType] [NVARCHAR](450) NOT NULL
    , [PostSecondaryEventCategoryType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ******/

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]
            (
                [tid_PostSecondaryEventPostSecondaryInstitution]
                , [MediumOfInstructionType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PostSecondaryEventPostSecondaryInstitution]
                , S.[MediumOfInstructionType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], MediumOfInstructionType.[ShortDescription] AS MediumOfInstructionType, PostSecondaryEventCategoryType.[ShortDescription] AS PostSecondaryEventCategoryType, [Student].[StudentUniqueId]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] AS T 
                JOIN [Ods_Snapshot].[edfi].[MediumOfInstructionType] AS MediumOfInstructionType
                    ON MediumOfInstructionType.[MediumOfInstructionTypeId] = T.[MediumOfInstructionTypeId]
                JOIN [Ods_Snapshot].[edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON PostSecondaryEventCategoryType.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[EventDate] = S.[EventDate]
                AND T.[PostSecondaryEventCategoryType] = S.[PostSecondaryEventCategoryType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Program] ******/

CREATE TYPE [t_edfi].[udt_Program] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ProgramId] [NVARCHAR](20) NULL
    , [ProgramSponsorType] [NVARCHAR](450) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ProgramKey] ******/

CREATE TYPE [t_edfi].[udt_ProgramKey] AS TABLE
(
    [tid_Program] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgram] ******/

CREATE PROCEDURE [t_edfi].[usp_dbProgram]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Program] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[ProgramId]
                , [ProgramSponsorType].[ShortDescription] AS ProgramSponsorType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Program] AS T
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProgramSponsorType] AS ProgramSponsorType
                    ON [ProgramSponsorType].[ProgramSponsorTypeId] = T.[ProgramSponsorTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [ProgramId]
                    , [ProgramSponsorType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[ProgramId]
                    , S.[ProgramSponsorType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Program]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ProgramSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Program]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Program]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Program] AS T
            JOIN [Ods_Snapshot].[edfi].[Program] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbProgramCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbProgramService] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbProgramLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbProgramLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ProgramCharacteristic] ******/

CREATE TYPE [t_edfi].[udt_ProgramCharacteristic] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ProgramCharacteristicKey] ******/

CREATE TYPE [t_edfi].[udt_ProgramCharacteristicKey] AS TABLE
(
    [tid_ProgramCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramCharacteristic] ******/

CREATE PROCEDURE [t_edfi].[usp_dbProgramCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramCharacteristic]
            (
                [tid_Program]
                , [ProgramCharacteristicDescriptorCodeValue]
                , [ProgramCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[ProgramCharacteristicDescriptorCodeValue]
                , S.[ProgramCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], ProgramCharacteristicDescriptor.[CodeValue] AS ProgramCharacteristicDescriptorCodeValue, T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ProgramCharacteristicDescriptor.[Namespace] AS ProgramCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ProgramCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramCharacteristicDescriptor
                    ON ProgramCharacteristicDescriptor.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ProgramService] ******/

CREATE TYPE [t_edfi].[udt_ProgramService] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ServiceDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ServiceDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ProgramServiceKey] ******/

CREATE TYPE [t_edfi].[udt_ProgramServiceKey] AS TABLE
(
    [tid_ProgramService] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ServiceDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ServiceDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramService] ******/

CREATE PROCEDURE [t_edfi].[usp_dbProgramService]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramServiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramService]
            (
                [tid_Program]
                , [ServiceDescriptorCodeValue]
                , [ServiceDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[ServiceDescriptorCodeValue]
                , S.[ServiceDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ServiceDescriptor.[CodeValue] AS ServiceDescriptorCodeValue, ServiceDescriptor.[Namespace] AS ServiceDescriptorNamespace
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ProgramService] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ServiceDescriptor
                    ON ServiceDescriptor.[DescriptorId] = T.[ServiceDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ProgramLearningObjective] ******/

CREATE TYPE [t_edfi].[udt_ProgramLearningObjective] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ProgramLearningObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_ProgramLearningObjectiveKey] AS TABLE
(
    [tid_ProgramLearningObjective] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramLearningObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbProgramLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramLearningObjective]
            (
                [tid_Program]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[EducationOrganizationId], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ProgramLearningObjective] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ProgramLearningStandard] ******/

CREATE TYPE [t_edfi].[udt_ProgramLearningStandard] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ProgramLearningStandardKey] ******/

CREATE TYPE [t_edfi].[udt_ProgramLearningStandardKey] AS TABLE
(
    [tid_ProgramLearningStandard] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [LearningStandardId] [NVARCHAR](60) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramLearningStandard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbProgramLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramLearningStandard]
            (
                [tid_Program]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[LearningStandardId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ProgramLearningStandard] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ProgramAssignmentDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ProgramAssignmentDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramAssignmentType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ProgramAssignmentDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ProgramAssignmentDescriptorKey] AS TABLE
(
    [tid_ProgramAssignmentDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramAssignmentDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbProgramAssignmentDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramAssignmentDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ProgramAssignmentDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProgramAssignmentType].[ShortDescription] AS ProgramAssignmentType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ProgramAssignmentDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProgramAssignmentType] AS ProgramAssignmentType
                    ON [ProgramAssignmentType].[ProgramAssignmentTypeId] = T.[ProgramAssignmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProgramAssignmentType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProgramAssignmentType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProgramAssignmentDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProgramAssignmentDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProgramAssignmentDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ProgramAssignmentDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ProgramAssignmentDescriptor] AS S
                ON P.[DescriptorId] = S.[ProgramAssignmentDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ProgramCharacteristicDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ProgramCharacteristicDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramCharacteristicType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ProgramCharacteristicDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ProgramCharacteristicDescriptorKey] AS TABLE
(
    [tid_ProgramCharacteristicDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramCharacteristicDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbProgramCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ProgramCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProgramCharacteristicType].[ShortDescription] AS ProgramCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ProgramCharacteristicDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProgramCharacteristicType] AS ProgramCharacteristicType
                    ON [ProgramCharacteristicType].[ProgramCharacteristicTypeId] = T.[ProgramCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProgramCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProgramCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProgramCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProgramCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProgramCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ProgramCharacteristicDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ProgramCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[ProgramCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ReasonExitedDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ReasonExitedDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ReasonExitedType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ReasonExitedDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ReasonExitedDescriptorKey] AS TABLE
(
    [tid_ReasonExitedDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbReasonExitedDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbReasonExitedDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReasonExitedDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ReasonExitedDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ReasonExitedType].[ShortDescription] AS ReasonExitedType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ReasonExitedDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ReasonExitedDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ReasonExitedType] AS ReasonExitedType
                    ON [ReasonExitedType].[ReasonExitedTypeId] = T.[ReasonExitedTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ReasonExitedType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ReasonExitedType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ReasonExitedDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ReasonExitedDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ReasonExitedDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ReasonExitedDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ReasonExitedDescriptor] AS S
                ON P.[DescriptorId] = S.[ReasonExitedDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ReportCard] ******/

CREATE TYPE [t_edfi].[udt_ReportCard] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [GPAGivenGradingPeriod] [DECIMAL](18, 4) NULL
    , [GPACumulative] [DECIMAL](18, 4) NULL
    , [NumberOfDaysAbsent] [DECIMAL](18, 4) NULL
    , [NumberOfDaysInAttendance] [DECIMAL](18, 4) NULL
    , [NumberOfDaysTardy] [INT] NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ReportCardKey] ******/

CREATE TYPE [t_edfi].[udt_ReportCardKey] AS TABLE
(
    [tid_ReportCard] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbReportCard]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ReportCard] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , T.[GPAGivenGradingPeriod]
                , T.[GPACumulative]
                , T.[NumberOfDaysAbsent]
                , T.[NumberOfDaysInAttendance]
                , T.[NumberOfDaysTardy]
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[ReportCard] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [GPAGivenGradingPeriod]
                    , [GPACumulative]
                    , [NumberOfDaysAbsent]
                    , [NumberOfDaysInAttendance]
                    , [NumberOfDaysTardy]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[GPAGivenGradingPeriod]
                    , S.[GPACumulative]
                    , S.[NumberOfDaysAbsent]
                    , S.[NumberOfDaysInAttendance]
                    , S.[NumberOfDaysTardy]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ReportCard]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ReportCardSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ReportCard]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ReportCard]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ReportCard] AS T
            JOIN [Ods_Snapshot].[edfi].[ReportCard] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbReportCardGrade] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbReportCardStudentCompetencyObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbReportCardStudentLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ReportCardGrade] ******/

CREATE TYPE [t_edfi].[udt_ReportCardGrade] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeType] [NVARCHAR](450) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ReportCardGradeKey] ******/

CREATE TYPE [t_edfi].[udt_ReportCardGradeKey] AS TABLE
(
    [tid_ReportCardGrade] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeType] [NVARCHAR](450) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCardGrade] ******/

CREATE PROCEDURE [t_edfi].[usp_dbReportCardGrade]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ReportCardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardGradeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ReportCardGrade]
            (
                [tid_ReportCard]
                , [BeginDate]
                , [ClassPeriodName]
                , [ClassroomIdentificationCode]
                , [GradeType]
                , [LocalCourseCode]
                , [SchoolYear]
                , [SequenceOfCourse]
                , [TermDescriptorCodeValue]
                , [UniqueSectionCode]
                , [TermDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ReportCard]
                , S.[BeginDate]
                , S.[ClassPeriodName]
                , S.[ClassroomIdentificationCode]
                , S.[GradeType]
                , S.[LocalCourseCode]
                , S.[SchoolYear]
                , S.[SequenceOfCourse]
                , S.[TermDescriptorCodeValue]
                , S.[UniqueSectionCode]
                , S.[TermDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[EducationOrganizationId], GradeType.[ShortDescription] AS GradeType, T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , ReportCard.[LastModifiedDate] AS ParentLastModifiedDate
                , ReportCard.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ReportCardGrade] AS T 
                JOIN [Ods_Snapshot].[edfi].[GradeType] AS GradeType
                    ON GradeType.[GradeTypeId] = T.[GradeTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ReportCard] AS ReportCard
                    ON ReportCard.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND ReportCard.[GradingPeriodBeginDate] = T.[GradingPeriodBeginDate]
                    AND ReportCard.[GradingPeriodDescriptorId] = T.[GradingPeriodDescriptorId]
                    AND ReportCard.[SchoolId] = T.[SchoolId]
                    AND ReportCard.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ReportCardStudentCompetencyObjective] ******/

CREATE TYPE [t_edfi].[udt_ReportCardStudentCompetencyObjective] AS TABLE
(
    [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveEducationOrganizationId] [INT] NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ReportCardEducationOrganizationId] [INT] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ReportCardStudentCompetencyObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_ReportCardStudentCompetencyObjectiveKey] AS TABLE
(
    [tid_ReportCardStudentCompetencyObjective] [INT] NOT NULL PRIMARY KEY
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveEducationOrganizationId] [INT] NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ReportCardEducationOrganizationId] [INT] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCardStudentCompetencyObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbReportCardStudentCompetencyObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ReportCardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardStudentCompetencyObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ReportCardStudentCompetencyObjective]
            (
                [tid_ReportCard]
                , [Objective]
                , [ObjectiveEducationOrganizationId]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ReportCard]
                , S.[Objective]
                , S.[ObjectiveEducationOrganizationId]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[Objective], T.[ObjectiveEducationOrganizationId], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[ReportCardEducationOrganizationId], T.[SchoolId], [Student].[StudentUniqueId], ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , ReportCard.[LastModifiedDate] AS ParentLastModifiedDate
                , ReportCard.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ReportCardStudentCompetencyObjective] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ReportCard] AS ReportCard
                    ON ReportCard.[GradingPeriodBeginDate] = T.[GradingPeriodBeginDate]
                    AND ReportCard.[GradingPeriodDescriptorId] = T.[GradingPeriodDescriptorId]
                    AND ReportCard.[EducationOrganizationId] = T.[ReportCardEducationOrganizationId]
                    AND ReportCard.[SchoolId] = T.[SchoolId]
                    AND ReportCard.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ReportCardStudentLearningObjective] ******/

CREATE TYPE [t_edfi].[udt_ReportCardStudentLearningObjective] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ReportCardEducationOrganizationId] [INT] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ReportCardStudentLearningObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_ReportCardStudentLearningObjectiveKey] AS TABLE
(
    [tid_ReportCardStudentLearningObjective] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ReportCardEducationOrganizationId] [INT] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCardStudentLearningObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbReportCardStudentLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ReportCardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardStudentLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ReportCardStudentLearningObjective]
            (
                [tid_ReportCard]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ReportCard]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[ReportCardEducationOrganizationId], T.[SchoolId], [Student].[StudentUniqueId], ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ReportCard.[LastModifiedDate] AS ParentLastModifiedDate
                , ReportCard.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[ReportCardStudentLearningObjective] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ReportCard] AS ReportCard
                    ON ReportCard.[GradingPeriodBeginDate] = T.[GradingPeriodBeginDate]
                    AND ReportCard.[GradingPeriodDescriptorId] = T.[GradingPeriodDescriptorId]
                    AND ReportCard.[EducationOrganizationId] = T.[ReportCardEducationOrganizationId]
                    AND ReportCard.[SchoolId] = T.[SchoolId]
                    AND ReportCard.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ReporterDescriptionDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ReporterDescriptionDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ReporterDescriptionType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ReporterDescriptionDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ReporterDescriptionDescriptorKey] AS TABLE
(
    [tid_ReporterDescriptionDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbReporterDescriptionDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbReporterDescriptionDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReporterDescriptionDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ReporterDescriptionDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ReporterDescriptionType].[ShortDescription] AS ReporterDescriptionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ReporterDescriptionDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ReporterDescriptionDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ReporterDescriptionType] AS ReporterDescriptionType
                    ON [ReporterDescriptionType].[ReporterDescriptionTypeId] = T.[ReporterDescriptionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ReporterDescriptionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ReporterDescriptionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ReporterDescriptionDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ReporterDescriptionDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ReporterDescriptionDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ReporterDescriptionDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ReporterDescriptionDescriptor] AS S
                ON P.[DescriptorId] = S.[ReporterDescriptionDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ResidencyStatusDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ResidencyStatusDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ResidencyStatusType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ResidencyStatusDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ResidencyStatusDescriptorKey] AS TABLE
(
    [tid_ResidencyStatusDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbResidencyStatusDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbResidencyStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ResidencyStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ResidencyStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ResidencyStatusType].[ShortDescription] AS ResidencyStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ResidencyStatusDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ResidencyStatusDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResidencyStatusType] AS ResidencyStatusType
                    ON [ResidencyStatusType].[ResidencyStatusTypeId] = T.[ResidencyStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ResidencyStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ResidencyStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ResidencyStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ResidencyStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ResidencyStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ResidencyStatusDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ResidencyStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[ResidencyStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ResponsibilityDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ResponsibilityDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ResponsibilityType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ResponsibilityDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ResponsibilityDescriptorKey] AS TABLE
(
    [tid_ResponsibilityDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbResponsibilityDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbResponsibilityDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ResponsibilityDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ResponsibilityDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ResponsibilityType].[ShortDescription] AS ResponsibilityType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ResponsibilityDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ResponsibilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResponsibilityType] AS ResponsibilityType
                    ON [ResponsibilityType].[ResponsibilityTypeId] = T.[ResponsibilityTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ResponsibilityType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ResponsibilityType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ResponsibilityDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ResponsibilityDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ResponsibilityDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ResponsibilityDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ResponsibilityDescriptor] AS S
                ON P.[DescriptorId] = S.[ResponsibilityDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_RestraintEvent] ******/

CREATE TYPE [t_edfi].[udt_RestraintEvent] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [EducationalEnvironmentType] [NVARCHAR](450) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_RestraintEventKey] ******/

CREATE TYPE [t_edfi].[udt_RestraintEventKey] AS TABLE
(
    [tid_RestraintEvent] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbRestraintEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbRestraintEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_RestraintEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[RestraintEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , T.[RestraintEventIdentifier]
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[RestraintEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [RestraintEventIdentifier]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [EducationalEnvironmentType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[RestraintEventIdentifier]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[EducationalEnvironmentType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RestraintEvent]
                , INSERTED.[EventDate]
                , INSERTED.[RestraintEventIdentifier]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[RestraintEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RestraintEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RestraintEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[RestraintEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[RestraintEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbRestraintEventReason] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbRestraintEventProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_RestraintEventReason] ******/

CREATE TYPE [t_edfi].[udt_RestraintEventReason] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL
    , [RestraintEventReasonType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_RestraintEventReasonKey] ******/

CREATE TYPE [t_edfi].[udt_RestraintEventReasonKey] AS TABLE
(
    [tid_RestraintEventReason] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL
    , [RestraintEventReasonType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbRestraintEventReason] ******/

CREATE PROCEDURE [t_edfi].[usp_dbRestraintEventReason]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_RestraintEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_RestraintEventReasonKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[RestraintEventReason]
            (
                [tid_RestraintEvent]
                , [RestraintEventReasonType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RestraintEvent]
                , S.[RestraintEventReasonType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], T.[RestraintEventIdentifier], RestraintEventReasonType.[ShortDescription] AS RestraintEventReasonType, T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , RestraintEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , RestraintEvent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[RestraintEventReason] AS T 
                JOIN [Ods_Snapshot].[edfi].[RestraintEventReasonType] AS RestraintEventReasonType
                    ON RestraintEventReasonType.[RestraintEventReasonTypeId] = T.[RestraintEventReasonTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[RestraintEvent] AS RestraintEvent
                    ON RestraintEvent.[EventDate] = T.[EventDate]
                    AND RestraintEvent.[RestraintEventIdentifier] = T.[RestraintEventIdentifier]
                    AND RestraintEvent.[SchoolId] = T.[SchoolId]
                    AND RestraintEvent.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_RestraintEventProgram] ******/

CREATE TYPE [t_edfi].[udt_RestraintEventProgram] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_RestraintEventProgramKey] ******/

CREATE TYPE [t_edfi].[udt_RestraintEventProgramKey] AS TABLE
(
    [tid_RestraintEventProgram] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbRestraintEventProgram] ******/

CREATE PROCEDURE [t_edfi].[usp_dbRestraintEventProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_RestraintEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_RestraintEventProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[RestraintEventProgram]
            (
                [tid_RestraintEvent]
                , [EducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RestraintEvent]
                , S.[EducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[EventDate], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, T.[RestraintEventIdentifier], T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , RestraintEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , RestraintEvent.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[RestraintEventProgram] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[RestraintEvent] AS RestraintEvent
                    ON RestraintEvent.[EventDate] = T.[EventDate]
                    AND RestraintEvent.[RestraintEventIdentifier] = T.[RestraintEventIdentifier]
                    AND RestraintEvent.[SchoolId] = T.[SchoolId]
                    AND RestraintEvent.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_School] ******/

CREATE TYPE [t_edfi].[udt_School] AS TABLE
(
    [SchoolId] [INT] NOT NULL
    , [SchoolType] [NVARCHAR](450) NULL
    , [CharterStatusType] [NVARCHAR](450) NULL
    , [TitleIPartASchoolDesignationType] [NVARCHAR](450) NULL
    , [MagnetSpecialProgramEmphasisSchoolType] [NVARCHAR](450) NULL
    , [AdministrativeFundingControlDescriptorCodeValue] [NVARCHAR](50) NULL
    , [InternetAccessType] [NVARCHAR](450) NULL
    , [LocalEducationAgencyId] [INT] NULL
    , [CharterApprovalAgencyType] [NVARCHAR](450) NULL
    , [CharterApprovalSchoolYear] [SMALLINT] NULL
    , [AdministrativeFundingControlDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SchoolKey] ******/

CREATE TYPE [t_edfi].[udt_SchoolKey] AS TABLE
(
    [tid_School] [INT] NOT NULL PRIMARY KEY
    , [SchoolId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchool] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSchool]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[School] AS T
            USING
            (
                SELECT T.[SchoolId]
                , [SchoolType].[ShortDescription] AS SchoolType
                , [CharterStatusType].[ShortDescription] AS CharterStatusType
                , [TitleIPartASchoolDesignationType].[ShortDescription] AS TitleIPartASchoolDesignationType
                , [MagnetSpecialProgramEmphasisSchoolType].[ShortDescription] AS MagnetSpecialProgramEmphasisSchoolType
                , AdministrativeFundingControlDescriptor.[CodeValue] AS AdministrativeFundingControlDescriptorCodeValue
                , [InternetAccessType].[ShortDescription] AS InternetAccessType
                , T.[LocalEducationAgencyId]
                , [CharterApprovalAgencyType].[ShortDescription] AS CharterApprovalAgencyType
                , T.[CharterApprovalSchoolYear]
                , AdministrativeFundingControlDescriptor.[Namespace] AS AdministrativeFundingControlDescriptorNamespace
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[School] AS T
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[SchoolId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SchoolType] AS SchoolType
                    ON [SchoolType].[SchoolTypeId] = T.[SchoolTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CharterStatusType] AS CharterStatusType
                    ON [CharterStatusType].[CharterStatusTypeId] = T.[CharterStatusTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[TitleIPartASchoolDesignationType] AS TitleIPartASchoolDesignationType
                    ON [TitleIPartASchoolDesignationType].[TitleIPartASchoolDesignationTypeId] = T.[TitleIPartASchoolDesignationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[MagnetSpecialProgramEmphasisSchoolType] AS MagnetSpecialProgramEmphasisSchoolType
                    ON [MagnetSpecialProgramEmphasisSchoolType].[MagnetSpecialProgramEmphasisSchoolTypeId] = T.[MagnetSpecialProgramEmphasisSchoolTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AdministrativeFundingControlDescriptor
                    ON [AdministrativeFundingControlDescriptor].[DescriptorId] = T.[AdministrativeFundingControlDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[InternetAccessType] AS InternetAccessType
                    ON [InternetAccessType].[InternetAccessTypeId] = T.[InternetAccessTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CharterApprovalAgencyType] AS CharterApprovalAgencyType
                    ON [CharterApprovalAgencyType].[CharterApprovalAgencyTypeId] = T.[CharterApprovalAgencyTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolId]
                    , [SchoolType]
                    , [CharterStatusType]
                    , [TitleIPartASchoolDesignationType]
                    , [MagnetSpecialProgramEmphasisSchoolType]
                    , [AdministrativeFundingControlDescriptorCodeValue]
                    , [InternetAccessType]
                    , [LocalEducationAgencyId]
                    , [CharterApprovalAgencyType]
                    , [CharterApprovalSchoolYear]
                    , [AdministrativeFundingControlDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolId]
                    , S.[SchoolType]
                    , S.[CharterStatusType]
                    , S.[TitleIPartASchoolDesignationType]
                    , S.[MagnetSpecialProgramEmphasisSchoolType]
                    , S.[AdministrativeFundingControlDescriptorCodeValue]
                    , S.[InternetAccessType]
                    , S.[LocalEducationAgencyId]
                    , S.[CharterApprovalAgencyType]
                    , S.[CharterApprovalSchoolYear]
                    , S.[AdministrativeFundingControlDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_School]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SchoolSnapshotRecord]
            (
                [SnapshotId]
                , [tid_School]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_School]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[School] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[School] AS S
                ON P.[EducationOrganizationId] = S.[SchoolId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbSchoolGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbSchoolCategory] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSchoolExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SchoolGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_SchoolGradeLevel] AS TABLE
(
    [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SchoolGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_SchoolGradeLevelKey] AS TABLE
(
    [tid_SchoolGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSchoolGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SchoolKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SchoolGradeLevel]
            (
                [tid_School]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_School]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[SchoolId], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[SchoolGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[SchoolId] = S.[SchoolId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SchoolCategory] ******/

CREATE TYPE [t_edfi].[udt_SchoolCategory] AS TABLE
(
    [SchoolCategoryType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SchoolCategoryKey] ******/

CREATE TYPE [t_edfi].[udt_SchoolCategoryKey] AS TABLE
(
    [tid_SchoolCategory] [INT] NOT NULL PRIMARY KEY
    , [SchoolCategoryType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolCategory] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSchoolCategory]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SchoolKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolCategoryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SchoolCategory]
            (
                [tid_School]
                , [SchoolCategoryType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_School]
                , S.[SchoolCategoryType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT SchoolCategoryType.[ShortDescription] AS SchoolCategoryType, T.[SchoolId]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[SchoolCategory] AS T 
                JOIN [Ods_Snapshot].[edfi].[SchoolCategoryType] AS SchoolCategoryType
                    ON SchoolCategoryType.[SchoolCategoryTypeId] = T.[SchoolCategoryTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[SchoolId] = S.[SchoolId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SchoolExtension] ******/

CREATE TYPE [t_extension].[udt_SchoolExtension] AS TABLE
(
    [SchoolId] [INT] NOT NULL
    , [SchoolStatusDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ImprovingSchool] [BIT] NULL
    , [SchoolStatusDescriptorNamespace] [NVARCHAR](255) NULL
);
GO

/****** TYPE: [t_extension].[udt_SchoolExtensionKey] ******/

CREATE TYPE [t_extension].[udt_SchoolExtensionKey] AS TABLE
(
    [tid_SchoolExtension] [INT] NOT NULL PRIMARY KEY
    , [SchoolId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSchoolExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbSchoolExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SchoolKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SchoolExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SchoolExtension]
            (
                [tid_School]
                , [SchoolStatusDescriptorCodeValue]
                , [ImprovingSchool]
                , [SchoolStatusDescriptorNamespace]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_School]
                , S.[SchoolStatusDescriptorCodeValue]
                , S.[ImprovingSchool]
                , S.[SchoolStatusDescriptorNamespace]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SchoolId], SchoolStatusDescriptor.[CodeValue] AS SchoolStatusDescriptorCodeValue, T.[ImprovingSchool], SchoolStatusDescriptor.[Namespace] AS SchoolStatusDescriptorNamespace
                FROM [Ods_Snapshot].[extension].[SchoolExtension] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SchoolStatusDescriptor
                    ON SchoolStatusDescriptor.[DescriptorId] = T.[SchoolStatusDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[SchoolId] = S.[SchoolId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SchoolFoodServicesEligibilityDescriptor] ******/

CREATE TYPE [t_edfi].[udt_SchoolFoodServicesEligibilityDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolFoodServicesEligibilityType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SchoolFoodServicesEligibilityDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_SchoolFoodServicesEligibilityDescriptorKey] AS TABLE
(
    [tid_SchoolFoodServicesEligibilityDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolFoodServicesEligibilityDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SchoolFoodServicesEligibilityDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SchoolFoodServicesEligibilityType].[ShortDescription] AS SchoolFoodServicesEligibilityType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[SchoolFoodServicesEligibilityDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SchoolFoodServicesEligibilityType] AS SchoolFoodServicesEligibilityType
                    ON [SchoolFoodServicesEligibilityType].[SchoolFoodServicesEligibilityTypeId] = T.[SchoolFoodServicesEligibilityTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SchoolFoodServicesEligibilityType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SchoolFoodServicesEligibilityType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolFoodServicesEligibilityDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolFoodServicesEligibilityDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolFoodServicesEligibilityDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SchoolFoodServicesEligibilityDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[SchoolFoodServicesEligibilityDescriptor] AS S
                ON P.[DescriptorId] = S.[SchoolFoodServicesEligibilityDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SchoolYearType] ******/

CREATE TYPE [t_edfi].[udt_SchoolYearType] AS TABLE
(
    [SchoolYear] [SMALLINT] NOT NULL
    , [SchoolYearDescription] [NVARCHAR](50) NOT NULL
    , [CurrentSchoolYear] [BIT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SchoolYearTypeKey] ******/

CREATE TYPE [t_edfi].[udt_SchoolYearTypeKey] AS TABLE
(
    [tid_SchoolYearType] [INT] NOT NULL PRIMARY KEY
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolYearType] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSchoolYearType]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolYearTypeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SchoolYearType] AS T
            USING
            (
                SELECT T.[SchoolYear]
                , T.[SchoolYearDescription]
                , T.[CurrentSchoolYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[SchoolYearType] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolYear]
                    , [SchoolYearDescription]
                    , [CurrentSchoolYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolYear]
                    , S.[SchoolYearDescription]
                    , S.[CurrentSchoolYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolYearType]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SchoolYearTypeSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolYearType]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolYearType]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SchoolYearType] AS T
            JOIN [Ods_Snapshot].[edfi].[SchoolYearType] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Section] ******/

CREATE TYPE [t_edfi].[udt_Section] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [EducationalEnvironmentType] [NVARCHAR](450) NULL
    , [MediumOfInstructionType] [NVARCHAR](450) NULL
    , [PopulationServedType] [NVARCHAR](450) NULL
    , [AvailableCredits] [DECIMAL](9, 2) NULL
    , [AvailableCreditType] [NVARCHAR](450) NULL
    , [AvailableCreditConversion] [DECIMAL](9, 2) NULL
    , [InstructionLanguageDescriptorCodeValue] [NVARCHAR](50) NULL
    , [InstructionLanguageDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SectionKey] ******/

CREATE TYPE [t_edfi].[udt_SectionKey] AS TABLE
(
    [tid_Section] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSection] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSection]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Section] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , [MediumOfInstructionType].[ShortDescription] AS MediumOfInstructionType
                , [PopulationServedType].[ShortDescription] AS PopulationServedType
                , T.[AvailableCredits]
                , [AvailableCreditType].[ShortDescription] AS AvailableCreditType
                , T.[AvailableCreditConversion]
                , InstructionLanguageDescriptor.[CodeValue] AS InstructionLanguageDescriptorCodeValue
                , InstructionLanguageDescriptor.[Namespace] AS InstructionLanguageDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Section] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[MediumOfInstructionType] AS MediumOfInstructionType
                    ON [MediumOfInstructionType].[MediumOfInstructionTypeId] = T.[MediumOfInstructionTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PopulationServedType] AS PopulationServedType
                    ON [PopulationServedType].[PopulationServedTypeId] = T.[PopulationServedTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS AvailableCreditType
                    ON [AvailableCreditType].[CreditTypeId] = T.[AvailableCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS InstructionLanguageDescriptor
                    ON [InstructionLanguageDescriptor].[DescriptorId] = T.[InstructionLanguageDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EducationalEnvironmentType]
                    , [MediumOfInstructionType]
                    , [PopulationServedType]
                    , [AvailableCredits]
                    , [AvailableCreditType]
                    , [AvailableCreditConversion]
                    , [InstructionLanguageDescriptorCodeValue]
                    , [InstructionLanguageDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EducationalEnvironmentType]
                    , S.[MediumOfInstructionType]
                    , S.[PopulationServedType]
                    , S.[AvailableCredits]
                    , S.[AvailableCreditType]
                    , S.[AvailableCreditConversion]
                    , S.[InstructionLanguageDescriptorCodeValue]
                    , S.[InstructionLanguageDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Section]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SectionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Section]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Section]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Section] AS T
            JOIN [Ods_Snapshot].[edfi].[Section] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbSectionCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbSectionProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SectionCharacteristic] ******/

CREATE TYPE [t_edfi].[udt_SectionCharacteristic] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SectionCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [SectionCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SectionCharacteristicKey] ******/

CREATE TYPE [t_edfi].[udt_SectionCharacteristicKey] AS TABLE
(
    [tid_SectionCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SectionCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [SectionCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionCharacteristic] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSectionCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SectionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SectionCharacteristic]
            (
                [tid_Section]
                , [SectionCharacteristicDescriptorCodeValue]
                , [SectionCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Section]
                , S.[SectionCharacteristicDescriptorCodeValue]
                , S.[SectionCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], SectionCharacteristicDescriptor.[CodeValue] AS SectionCharacteristicDescriptorCodeValue, T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace, SectionCharacteristicDescriptor.[Namespace] AS SectionCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , Section.[LastModifiedDate] AS ParentLastModifiedDate
                , Section.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[SectionCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SectionCharacteristicDescriptor
                    ON SectionCharacteristicDescriptor.[DescriptorId] = T.[SectionCharacteristicDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Section] AS Section
                    ON Section.[ClassPeriodName] = T.[ClassPeriodName]
                    AND Section.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND Section.[LocalCourseCode] = T.[LocalCourseCode]
                    AND Section.[SchoolId] = T.[SchoolId]
                    AND Section.[SchoolYear] = T.[SchoolYear]
                    AND Section.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND Section.[TermDescriptorId] = T.[TermDescriptorId]
                    AND Section.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SectionProgram] ******/

CREATE TYPE [t_edfi].[udt_SectionProgram] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SectionProgramKey] ******/

CREATE TYPE [t_edfi].[udt_SectionProgramKey] AS TABLE
(
    [tid_SectionProgram] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionProgram] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSectionProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SectionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SectionProgram]
            (
                [tid_Section]
                , [EducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Section]
                , S.[EducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[EducationOrganizationId], T.[LocalCourseCode], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , Section.[LastModifiedDate] AS ParentLastModifiedDate
                , Section.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[SectionProgram] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Section] AS Section
                    ON Section.[ClassPeriodName] = T.[ClassPeriodName]
                    AND Section.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND Section.[LocalCourseCode] = T.[LocalCourseCode]
                    AND Section.[SchoolId] = T.[SchoolId]
                    AND Section.[SchoolYear] = T.[SchoolYear]
                    AND Section.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND Section.[TermDescriptorId] = T.[TermDescriptorId]
                    AND Section.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SectionAttendanceTakenEvent] ******/

CREATE TYPE [t_edfi].[udt_SectionAttendanceTakenEvent] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [Date] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SectionAttendanceTakenEventKey] ******/

CREATE TYPE [t_edfi].[udt_SectionAttendanceTakenEventKey] AS TABLE
(
    [tid_SectionAttendanceTakenEvent] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [Date] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionAttendanceTakenEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSectionAttendanceTakenEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionAttendanceTakenEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SectionAttendanceTakenEvent] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[Date]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[EventDate]
                , [Staff].[StaffUniqueId]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[SectionAttendanceTakenEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [Date]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EventDate]
                    , [StaffUniqueId]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[Date]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EventDate]
                    , S.[StaffUniqueId]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionAttendanceTakenEvent]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[Date]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionAttendanceTakenEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionAttendanceTakenEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SectionAttendanceTakenEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[SectionAttendanceTakenEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SectionCharacteristicDescriptor] ******/

CREATE TYPE [t_edfi].[udt_SectionCharacteristicDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [SectionCharacteristicType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SectionCharacteristicDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_SectionCharacteristicDescriptorKey] AS TABLE
(
    [tid_SectionCharacteristicDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionCharacteristicDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSectionCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SectionCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SectionCharacteristicType].[ShortDescription] AS SectionCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[SectionCharacteristicDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SectionCharacteristicDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SectionCharacteristicType] AS SectionCharacteristicType
                    ON [SectionCharacteristicType].[SectionCharacteristicTypeId] = T.[SectionCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SectionCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SectionCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SectionCharacteristicDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[SectionCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[SectionCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SeparationReasonDescriptor] ******/

CREATE TYPE [t_edfi].[udt_SeparationReasonDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [SeparationReasonType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SeparationReasonDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_SeparationReasonDescriptorKey] AS TABLE
(
    [tid_SeparationReasonDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSeparationReasonDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSeparationReasonDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SeparationReasonDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SeparationReasonDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SeparationReasonType].[ShortDescription] AS SeparationReasonType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[SeparationReasonDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SeparationReasonDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SeparationReasonType] AS SeparationReasonType
                    ON [SeparationReasonType].[SeparationReasonTypeId] = T.[SeparationReasonTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SeparationReasonType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SeparationReasonType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SeparationReasonDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SeparationReasonDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SeparationReasonDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SeparationReasonDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[SeparationReasonDescriptor] AS S
                ON P.[DescriptorId] = S.[SeparationReasonDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_ServiceDescriptor] ******/

CREATE TYPE [t_edfi].[udt_ServiceDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ServiceCategory] [NVARCHAR](50) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_ServiceDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_ServiceDescriptorKey] AS TABLE
(
    [tid_ServiceDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbServiceDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbServiceDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ServiceDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ServiceDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , T.[ServiceCategory]
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[ServiceDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ServiceDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ServiceCategory]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ServiceCategory]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ServiceDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ServiceDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ServiceDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ServiceDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ServiceDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[ServiceDescriptor] AS S
                ON P.[DescriptorId] = S.[ServiceDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Session] ******/

CREATE TYPE [t_edfi].[udt_Session] AS TABLE
(
    [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SessionName] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EndDate] [DATE] NOT NULL
    , [TotalInstructionalDays] [INT] NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SessionKey] ******/

CREATE TYPE [t_edfi].[udt_SessionKey] AS TABLE
(
    [tid_Session] [INT] NOT NULL PRIMARY KEY
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSession] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSession]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SessionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Session] AS T
            USING
            (
                SELECT T.[SchoolId]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SessionName]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[TotalInstructionalDays]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Session] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolId]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SessionName]
                    , [BeginDate]
                    , [EndDate]
                    , [TotalInstructionalDays]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SessionName]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TotalInstructionalDays]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Session]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SessionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Session]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Session]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Session] AS T
            JOIN [Ods_Snapshot].[edfi].[Session] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbSessionGradingPeriod] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbSessionAcademicWeek] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SessionGradingPeriod] ******/

CREATE TYPE [t_edfi].[udt_SessionGradingPeriod] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SessionGradingPeriodKey] ******/

CREATE TYPE [t_edfi].[udt_SessionGradingPeriodKey] AS TABLE
(
    [tid_SessionGradingPeriod] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSessionGradingPeriod] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSessionGradingPeriod]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SessionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SessionGradingPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SessionGradingPeriod]
            (
                [tid_Session]
                , [BeginDate]
                , [GradingPeriodDescriptorCodeValue]
                , [GradingPeriodDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Session]
                , S.[BeginDate]
                , S.[GradingPeriodDescriptorCodeValue]
                , S.[GradingPeriodDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, TermDescriptor.[Namespace] AS TermDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , Session.[LastModifiedDate] AS ParentLastModifiedDate
                , Session.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[SessionGradingPeriod] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Session] AS Session
                    ON Session.[SchoolId] = T.[SchoolId]
                    AND Session.[SchoolYear] = T.[SchoolYear]
                    AND Session.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SessionAcademicWeek] ******/

CREATE TYPE [t_edfi].[udt_SessionAcademicWeek] AS TABLE
(
    [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [WeekIdentifier] [NVARCHAR](80) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SessionAcademicWeekKey] ******/

CREATE TYPE [t_edfi].[udt_SessionAcademicWeekKey] AS TABLE
(
    [tid_SessionAcademicWeek] [INT] NOT NULL PRIMARY KEY
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [WeekIdentifier] [NVARCHAR](80) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSessionAcademicWeek] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSessionAcademicWeek]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SessionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SessionAcademicWeekKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SessionAcademicWeek]
            (
                [tid_Session]
                , [WeekIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Session]
                , S.[WeekIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SchoolId], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[WeekIdentifier], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , Session.[LastModifiedDate] AS ParentLastModifiedDate
                , Session.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[SessionAcademicWeek] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Session] AS Session
                    ON Session.[SchoolId] = T.[SchoolId]
                    AND Session.[SchoolYear] = T.[SchoolYear]
                    AND Session.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_SpecialEducationSettingDescriptor] ******/

CREATE TYPE [t_edfi].[udt_SpecialEducationSettingDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [SpecialEducationSettingType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_SpecialEducationSettingDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_SpecialEducationSettingDescriptorKey] AS TABLE
(
    [tid_SpecialEducationSettingDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbSpecialEducationSettingDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbSpecialEducationSettingDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SpecialEducationSettingDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SpecialEducationSettingDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SpecialEducationSettingType].[ShortDescription] AS SpecialEducationSettingType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[SpecialEducationSettingDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SpecialEducationSettingDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SpecialEducationSettingType] AS SpecialEducationSettingType
                    ON [SpecialEducationSettingType].[SpecialEducationSettingTypeId] = T.[SpecialEducationSettingTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SpecialEducationSettingType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SpecialEducationSettingType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SpecialEducationSettingDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SpecialEducationSettingDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SpecialEducationSettingDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SpecialEducationSettingDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[SpecialEducationSettingDescriptor] AS S
                ON P.[DescriptorId] = S.[SpecialEducationSettingDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Staff] ******/

CREATE TYPE [t_edfi].[udt_Staff] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [MaidenName] [NVARCHAR](75) NULL
    , [SexType] [NVARCHAR](450) NULL
    , [BirthDate] [DATE] NULL
    , [HispanicLatinoEthnicity] [BIT] NULL
    , [OldEthnicityType] [NVARCHAR](450) NULL
    , [CitizenshipStatusType] [NVARCHAR](450) NULL
    , [HighestCompletedLevelOfEducationDescriptorCodeValue] [NVARCHAR](50) NULL
    , [YearsOfPriorProfessionalExperience] [DECIMAL](5, 2) NULL
    , [YearsOfPriorTeachingExperience] [DECIMAL](5, 2) NULL
    , [LoginId] [NVARCHAR](60) NULL
    , [HighlyQualifiedTeacher] [BIT] NULL
    , [HighestCompletedLevelOfEducationDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffKey] ******/

CREATE TYPE [t_edfi].[udt_StaffKey] AS TABLE
(
    [tid_Staff] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaff] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaff]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Staff] AS T
            USING
            (
                SELECT T.[StaffUniqueId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[HispanicLatinoEthnicity]
                , [OldEthnicityType].[ShortDescription] AS OldEthnicityType
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , HighestCompletedLevelOfEducationDescriptor.[CodeValue] AS HighestCompletedLevelOfEducationDescriptorCodeValue
                , T.[YearsOfPriorProfessionalExperience]
                , T.[YearsOfPriorTeachingExperience]
                , T.[LoginId]
                , T.[HighlyQualifiedTeacher]
                , HighestCompletedLevelOfEducationDescriptor.[Namespace] AS HighestCompletedLevelOfEducationDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Staff] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[OldEthnicityType] AS OldEthnicityType
                    ON [OldEthnicityType].[OldEthnicityTypeId] = T.[OldEthnicityTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS HighestCompletedLevelOfEducationDescriptor
                    ON [HighestCompletedLevelOfEducationDescriptor].[DescriptorId] = T.[HighestCompletedLevelOfEducationDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StaffUniqueId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [HispanicLatinoEthnicity]
                    , [OldEthnicityType]
                    , [CitizenshipStatusType]
                    , [HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , [YearsOfPriorProfessionalExperience]
                    , [YearsOfPriorTeachingExperience]
                    , [LoginId]
                    , [HighlyQualifiedTeacher]
                    , [HighestCompletedLevelOfEducationDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StaffUniqueId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[HispanicLatinoEthnicity]
                    , S.[OldEthnicityType]
                    , S.[CitizenshipStatusType]
                    , S.[HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , S.[YearsOfPriorProfessionalExperience]
                    , S.[YearsOfPriorTeachingExperience]
                    , S.[LoginId]
                    , S.[HighlyQualifiedTeacher]
                    , S.[HighestCompletedLevelOfEducationDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Staff]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Staff]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Staff]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Staff] AS T
            JOIN [Ods_Snapshot].[edfi].[Staff] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStaffIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffBackgroundCheck] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffSeniority] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffApplicant] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffSalary] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherEducatorResearch] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_StaffIdentificationCode] AS TABLE
(
    [StaffIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL
    , [StaffIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_StaffIdentificationCodeKey] AS TABLE
(
    [tid_StaffIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [StaffIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StaffIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffIdentificationCode]
            (
                [tid_Staff]
                , [StaffIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [StaffIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[StaffIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StaffIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT StaffIdentificationSystemDescriptor.[CodeValue] AS StaffIdentificationSystemDescriptorCodeValue, [Staff].[StaffUniqueId], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], StaffIdentificationSystemDescriptor.[Namespace] AS StaffIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StaffIdentificationSystemDescriptor
                    ON StaffIdentificationSystemDescriptor.[DescriptorId] = T.[StaffIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffOtherName] ******/

CREATE TYPE [t_edfi].[udt_StaffOtherName] AS TABLE
(
    [OtherNameType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffOtherNameKey] ******/

CREATE TYPE [t_edfi].[udt_StaffOtherNameKey] AS TABLE
(
    [tid_StaffOtherName] [INT] NOT NULL PRIMARY KEY
    , [OtherNameType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffOtherName] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffOtherName]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffOtherName]
            (
                [tid_Staff]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, [Staff].[StaffUniqueId], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffOtherName] AS T 
                JOIN [Ods_Snapshot].[edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffAddress] ******/

CREATE TYPE [t_edfi].[udt_StaffAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffAddressKey] ******/

CREATE TYPE [t_edfi].[udt_StaffAddressKey] AS TABLE
(
    [tid_StaffAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffAddress]
            (
                [tid_Staff]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Staff].[StaffUniqueId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffInternationalAddress] ******/

CREATE TYPE [t_edfi].[udt_StaffInternationalAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AddressLine1] [NVARCHAR](150) NOT NULL
    , [AddressLine2] [NVARCHAR](150) NULL
    , [AddressLine3] [NVARCHAR](150) NULL
    , [AddressLine4] [NVARCHAR](150) NULL
    , [CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffInternationalAddressKey] ******/

CREATE TYPE [t_edfi].[udt_StaffInternationalAddressKey] AS TABLE
(
    [tid_StaffInternationalAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffInternationalAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffInternationalAddress]
            (
                [tid_Staff]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Staff].[StaffUniqueId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffInternationalAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffTelephone] ******/

CREATE TYPE [t_edfi].[udt_StaffTelephone] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [OrderOfPriority] [INT] NULL
    , [TextMessageCapabilityIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffTelephoneKey] ******/

CREATE TYPE [t_edfi].[udt_StaffTelephoneKey] AS TABLE
(
    [tid_StaffTelephone] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffTelephone] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffTelephone]
            (
                [tid_Staff]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffElectronicMail] ******/

CREATE TYPE [t_edfi].[udt_StaffElectronicMail] AS TABLE
(
    [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ElectronicMailAddress] [NVARCHAR](128) NOT NULL
    , [PrimaryEmailAddressIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffElectronicMailKey] ******/

CREATE TYPE [t_edfi].[udt_StaffElectronicMailKey] AS TABLE
(
    [tid_StaffElectronicMail] [INT] NOT NULL PRIMARY KEY
    , [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffElectronicMail] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffElectronicMail]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffElectronicMail]
            (
                [tid_Staff]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, [Staff].[StaffUniqueId], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffElectronicMail] AS T 
                JOIN [Ods_Snapshot].[edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffRace] ******/

CREATE TYPE [t_edfi].[udt_StaffRace] AS TABLE
(
    [RaceType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffRaceKey] ******/

CREATE TYPE [t_edfi].[udt_StaffRaceKey] AS TABLE
(
    [tid_StaffRace] [INT] NOT NULL PRIMARY KEY
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffRace] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffRace]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffRace]
            (
                [tid_Staff]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RaceType.[ShortDescription] AS RaceType, [Staff].[StaffUniqueId]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffVisa] ******/

CREATE TYPE [t_edfi].[udt_StaffVisa] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffVisaKey] ******/

CREATE TYPE [t_edfi].[udt_StaffVisaKey] AS TABLE
(
    [tid_StaffVisa] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffVisa] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffVisa]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffVisa]
            (
                [tid_Staff]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffVisa] AS T 
                JOIN [Ods_Snapshot].[edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffLanguage] ******/

CREATE TYPE [t_edfi].[udt_StaffLanguage] AS TABLE
(
    [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffLanguageKey] ******/

CREATE TYPE [t_edfi].[udt_StaffLanguageKey] AS TABLE
(
    [tid_StaffLanguage] [INT] NOT NULL PRIMARY KEY
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffLanguage] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffLanguage]
            (
                [tid_Staff]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StaffLanguage]
            INTO @Tids
            SELECT T.[tid_Staff]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, [Staff].[StaffUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StaffLanguage]
                , S.[LanguageDescriptorCodeValue]
                , T.[StaffUniqueId]
                , S.[LanguageDescriptorNamespace]
            FROM [t_edfi].[StaffLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_Staff] = T.[tid_Staff]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StaffLanguage] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStaffLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffLanguageUse] ******/

CREATE TYPE [t_edfi].[udt_StaffLanguageUse] AS TABLE
(
    [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffLanguageUseKey] ******/

CREATE TYPE [t_edfi].[udt_StaffLanguageUseKey] AS TABLE
(
    [tid_StaffLanguageUse] [INT] NOT NULL PRIMARY KEY
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffLanguageUse] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffLanguageUse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffLanguageUse]
            (
                [tid_StaffLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, [Staff].[StaffUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StaffLanguageUse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[StaffUniqueId] = S.[StaffUniqueId]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffRecognition] ******/

CREATE TYPE [t_edfi].[udt_StaffRecognition] AS TABLE
(
    [RecognitionType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [RecognitionDescription] [NVARCHAR](80) NULL
    , [RecognitionAwardDate] [DATE] NULL
    , [RecognitionAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffRecognitionKey] ******/

CREATE TYPE [t_edfi].[udt_StaffRecognitionKey] AS TABLE
(
    [tid_StaffRecognition] [INT] NOT NULL PRIMARY KEY
    , [RecognitionType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffRecognition] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffRecognition]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffRecognition]
            (
                [tid_Staff]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RecognitionType.[ShortDescription] AS RecognitionType, [Staff].[StaffUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffRecognition] AS T 
                JOIN [Ods_Snapshot].[edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffCredential] ******/

CREATE TYPE [t_edfi].[udt_StaffCredential] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffCredentialKey] ******/

CREATE TYPE [t_edfi].[udt_StaffCredentialKey] AS TABLE
(
    [tid_StaffCredential] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffCredential] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffCredential]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffCredential]
            (
                [tid_Staff]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], [Staff].[StaffUniqueId], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffCredential] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffIdentificationDocument] ******/

CREATE TYPE [t_edfi].[udt_StaffIdentificationDocument] AS TABLE
(
    [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [DocumentTitle] [NVARCHAR](60) NULL
    , [DocumentExpirationDate] [DATE] NULL
    , [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffIdentificationDocumentKey] ******/

CREATE TYPE [t_edfi].[udt_StaffIdentificationDocumentKey] AS TABLE
(
    [tid_StaffIdentificationDocument] [INT] NOT NULL PRIMARY KEY
    , [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffIdentificationDocument] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffIdentificationDocument]
            (
                [tid_Staff]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, [Staff].[StaffUniqueId], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffIdentificationDocument] AS T 
                JOIN [Ods_Snapshot].[edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffExtension] ******/

CREATE TYPE [t_extension].[udt_StaffExtension] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ProbationCompleteDate] [DATE] NULL
    , [Tenured] [BIT] NULL
    , [GenderType] [NVARCHAR](450) NULL
    , [TenureTrack] [BIT] NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffExtensionKey] ******/

CREATE TYPE [t_extension].[udt_StaffExtensionKey] AS TABLE
(
    [tid_StaffExtension] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffExtension]
            (
                [tid_Staff]
                , [ProbationCompleteDate]
                , [Tenured]
                , [GenderType]
                , [TenureTrack]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ProbationCompleteDate]
                , S.[Tenured]
                , S.[GenderType]
                , S.[TenureTrack]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[ProbationCompleteDate], T.[Tenured], GenderType.[ShortDescription] AS GenderType, T.[TenureTrack]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffExtension] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffBackgroundCheck] ******/

CREATE TYPE [t_extension].[udt_StaffBackgroundCheck] AS TABLE
(
    [BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [BackgroundCheckRequestedDate] [DATE] NOT NULL
    , [BackgroundCheckStatusDescriptorCodeValue] [NVARCHAR](50) NULL
    , [BackgroundCheckCompletedDate] [DATE] NULL
    , [Fingerprint] [BIT] NULL
    , [BackgroundCheckStatusDescriptorNamespace] [NVARCHAR](255) NULL
    , [BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffBackgroundCheckKey] ******/

CREATE TYPE [t_extension].[udt_StaffBackgroundCheckKey] AS TABLE
(
    [tid_StaffBackgroundCheck] [INT] NOT NULL PRIMARY KEY
    , [BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffBackgroundCheck] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffBackgroundCheck]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffBackgroundCheckKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffBackgroundCheck]
            (
                [tid_Staff]
                , [BackgroundCheckTypeDescriptorCodeValue]
                , [BackgroundCheckRequestedDate]
                , [BackgroundCheckStatusDescriptorCodeValue]
                , [BackgroundCheckCompletedDate]
                , [Fingerprint]
                , [BackgroundCheckStatusDescriptorNamespace]
                , [BackgroundCheckTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[BackgroundCheckTypeDescriptorCodeValue]
                , S.[BackgroundCheckRequestedDate]
                , S.[BackgroundCheckStatusDescriptorCodeValue]
                , S.[BackgroundCheckCompletedDate]
                , S.[Fingerprint]
                , S.[BackgroundCheckStatusDescriptorNamespace]
                , S.[BackgroundCheckTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT BackgroundCheckTypeDescriptor.[CodeValue] AS BackgroundCheckTypeDescriptorCodeValue, [Staff].[StaffUniqueId], T.[BackgroundCheckRequestedDate], BackgroundCheckStatusDescriptor.[CodeValue] AS BackgroundCheckStatusDescriptorCodeValue, T.[BackgroundCheckCompletedDate], T.[Fingerprint], BackgroundCheckStatusDescriptor.[Namespace] AS BackgroundCheckStatusDescriptorNamespace, BackgroundCheckTypeDescriptor.[Namespace] AS BackgroundCheckTypeDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffBackgroundCheck] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BackgroundCheckTypeDescriptor
                    ON BackgroundCheckTypeDescriptor.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BackgroundCheckStatusDescriptor
                    ON BackgroundCheckStatusDescriptor.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffHighlyQualifiedAcademicSubject] ******/

CREATE TYPE [t_extension].[udt_StaffHighlyQualifiedAcademicSubject] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffHighlyQualifiedAcademicSubjectKey] ******/

CREATE TYPE [t_extension].[udt_StaffHighlyQualifiedAcademicSubjectKey] AS TABLE
(
    [tid_StaffHighlyQualifiedAcademicSubject] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffHighlyQualifiedAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffHighlyQualifiedAcademicSubject]
            (
                [tid_Staff]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, [Staff].[StaffUniqueId], AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffHighlyQualifiedAcademicSubject] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffSeniority] ******/

CREATE TYPE [t_extension].[udt_StaffSeniority] AS TABLE
(
    [CredentialFieldDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [YearsExperience] [DECIMAL](5, 2) NOT NULL
    , [CredentialFieldDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffSeniorityKey] ******/

CREATE TYPE [t_extension].[udt_StaffSeniorityKey] AS TABLE
(
    [tid_StaffSeniority] [INT] NOT NULL PRIMARY KEY
    , [CredentialFieldDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [CredentialFieldDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffSeniority] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffSeniority]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffSeniorityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffSeniority]
            (
                [tid_Staff]
                , [CredentialFieldDescriptorCodeValue]
                , [NameOfInstitution]
                , [YearsExperience]
                , [CredentialFieldDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[CredentialFieldDescriptorCodeValue]
                , S.[NameOfInstitution]
                , S.[YearsExperience]
                , S.[CredentialFieldDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CredentialFieldDescriptor.[CodeValue] AS CredentialFieldDescriptorCodeValue, T.[NameOfInstitution], [Staff].[StaffUniqueId], T.[YearsExperience], CredentialFieldDescriptor.[Namespace] AS CredentialFieldDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffSeniority] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CredentialFieldDescriptor
                    ON CredentialFieldDescriptor.[DescriptorId] = T.[CredentialFieldDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProgram] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProgram] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
    , [TeacherPreparationProgramIdentifier] [NVARCHAR](75) NULL
    , [TeacherPreparationProgramTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [MajorSpecialization] [NVARCHAR](75) NOT NULL
    , [GPA] [DECIMAL](18, 4) NULL
    , [LevelOfDegreeAwardedDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelOfDegreeAwardedDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [TeacherPreparationProgramTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProgramKey] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProgramKey] AS TABLE
(
    [tid_StaffTeacherPreparationProgram] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProgram] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProgramKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProgram]
            (
                [tid_Staff]
                , [TeacherPreparationProgramName]
                , [TeacherPreparationProgramIdentifier]
                , [TeacherPreparationProgramTypeDescriptorCodeValue]
                , [NameOfInstitution]
                , [MajorSpecialization]
                , [GPA]
                , [LevelOfDegreeAwardedDescriptorCodeValue]
                , [LevelOfDegreeAwardedDescriptorNamespace]
                , [TeacherPreparationProgramTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StaffTeacherPreparationProgram]
            INTO @Tids
            SELECT T.[tid_Staff]
                , S.[TeacherPreparationProgramName]
                , S.[TeacherPreparationProgramIdentifier]
                , S.[TeacherPreparationProgramTypeDescriptorCodeValue]
                , S.[NameOfInstitution]
                , S.[MajorSpecialization]
                , S.[GPA]
                , S.[LevelOfDegreeAwardedDescriptorCodeValue]
                , S.[LevelOfDegreeAwardedDescriptorNamespace]
                , S.[TeacherPreparationProgramTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[TeacherPreparationProgramName], T.[TeacherPreparationProgramIdentifier], TeacherPreparationProgramTypeDescriptor.[CodeValue] AS TeacherPreparationProgramTypeDescriptorCodeValue, T.[NameOfInstitution], T.[MajorSpecialization], T.[GPA], LevelOfDegreeAwardedDescriptor.[CodeValue] AS LevelOfDegreeAwardedDescriptorCodeValue, LevelOfDegreeAwardedDescriptor.[Namespace] AS LevelOfDegreeAwardedDescriptorNamespace, TeacherPreparationProgramTypeDescriptor.[Namespace] AS TeacherPreparationProgramTypeDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffTeacherPreparationProgram] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TeacherPreparationProgramTypeDescriptor
                    ON TeacherPreparationProgramTypeDescriptor.[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LevelOfDegreeAwardedDescriptor
                    ON LevelOfDegreeAwardedDescriptor.[DescriptorId] = T.[LevelOfDegreeAwardedDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StaffTeacherPreparationProgram]
                , T.[StaffUniqueId]
                , S.[TeacherPreparationProgramName]
            FROM [t_extension].[StaffTeacherPreparationProgram] AS S
            JOIN @pTids AS T
                ON S.[tid_Staff] = T.[tid_Staff]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StaffTeacherPreparationProgram] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProgramAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProgramAddress] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProgramAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProgramAddressKey] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProgramAddressKey] AS TABLE
(
    [tid_StaffTeacherPreparationProgramAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProgramAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProgramAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffTeacherPreparationProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProgramAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProgramAddress]
            (
                [tid_StaffTeacherPreparationProgram]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffTeacherPreparationProgram]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Staff].[StaffUniqueId], T.[TeacherPreparationProgramName], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[StaffTeacherPreparationProgramAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[StaffUniqueId] = S.[StaffUniqueId]
                AND T.[TeacherPreparationProgramName] = S.[TeacherPreparationProgramName];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffApplicant] ******/

CREATE TYPE [t_extension].[udt_StaffApplicant] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffApplicantKey] ******/

CREATE TYPE [t_extension].[udt_StaffApplicantKey] AS TABLE
(
    [tid_StaffApplicant] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffApplicant] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffApplicant]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffApplicantKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffApplicant]
            (
                [tid_Staff]
                , [ApplicantIdentifier]
                , [EducationOrganizationId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ApplicantIdentifier]
                , S.[EducationOrganizationId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], [Staff].[StaffUniqueId]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffApplicant] AS T 
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffSalary] ******/

CREATE TYPE [t_extension].[udt_StaffSalary] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [SalaryMinRange] [INT] NULL
    , [SalaryMaxRange] [INT] NULL
    , [SalaryTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [SalaryAmount] [MONEY] NULL
    , [SalaryTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffSalaryKey] ******/

CREATE TYPE [t_extension].[udt_StaffSalaryKey] AS TABLE
(
    [tid_StaffSalary] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffSalary] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffSalary]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffSalaryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffSalary]
            (
                [tid_Staff]
                , [SalaryMinRange]
                , [SalaryMaxRange]
                , [SalaryTypeDescriptorCodeValue]
                , [SalaryAmount]
                , [SalaryTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[SalaryMinRange]
                , S.[SalaryMaxRange]
                , S.[SalaryTypeDescriptorCodeValue]
                , S.[SalaryAmount]
                , S.[SalaryTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[SalaryMinRange], T.[SalaryMaxRange], SalaryTypeDescriptor.[CodeValue] AS SalaryTypeDescriptorCodeValue, T.[SalaryAmount], SalaryTypeDescriptor.[Namespace] AS SalaryTypeDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffSalary] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SalaryTypeDescriptor
                    ON SalaryTypeDescriptor.[DescriptorId] = T.[SalaryTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffTeacherEducatorResearch] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherEducatorResearch] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ResearchExperienceDate] [DATE] NOT NULL
    , [ResearchExperienceTitle] [NVARCHAR](60) NULL
    , [ResearchExperienceDescription] [NVARCHAR](1024) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffTeacherEducatorResearchKey] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherEducatorResearchKey] AS TABLE
(
    [tid_StaffTeacherEducatorResearch] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherEducatorResearch] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherEducatorResearch]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherEducatorResearchKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherEducatorResearch]
            (
                [tid_Staff]
                , [ResearchExperienceDate]
                , [ResearchExperienceTitle]
                , [ResearchExperienceDescription]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ResearchExperienceDate]
                , S.[ResearchExperienceTitle]
                , S.[ResearchExperienceDescription]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[ResearchExperienceDate], T.[ResearchExperienceTitle], T.[ResearchExperienceDescription]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffTeacherEducatorResearch] AS T 
                JOIN [Ods_Snapshot].[edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffClassificationDescriptor] ******/

CREATE TYPE [t_edfi].[udt_StaffClassificationDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [StaffClassificationType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffClassificationDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_StaffClassificationDescriptorKey] AS TABLE
(
    [tid_StaffClassificationDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffClassificationDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffClassificationDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffClassificationDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffClassificationDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StaffClassificationType].[ShortDescription] AS StaffClassificationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffClassificationDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StaffClassificationDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[StaffClassificationType] AS StaffClassificationType
                    ON [StaffClassificationType].[StaffClassificationTypeId] = T.[StaffClassificationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StaffClassificationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StaffClassificationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffClassificationDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffClassificationDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffClassificationDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffClassificationDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StaffClassificationDescriptor] AS S
                ON P.[DescriptorId] = S.[StaffClassificationDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffCohortAssociation] ******/

CREATE TYPE [t_edfi].[udt_StaffCohortAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [EndDate] [DATE] NULL
    , [StudentRecordAccess] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffCohortAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StaffCohortAssociationKey] AS TABLE
(
    [tid_StaffCohortAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffCohortAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffCohortAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffCohortAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffCohortAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[CohortIdentifier]
                , T.[EducationOrganizationId]
                , [Staff].[StaffUniqueId]
                , T.[EndDate]
                , T.[StudentRecordAccess]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffCohortAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [CohortIdentifier]
                    , [EducationOrganizationId]
                    , [StaffUniqueId]
                    , [EndDate]
                    , [StudentRecordAccess]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[CohortIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[StaffUniqueId]
                    , S.[EndDate]
                    , S.[StudentRecordAccess]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffCohortAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[CohortIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffCohortAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffCohortAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffCohortAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffCohortAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StaffCohortAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociation] ******/

CREATE TYPE [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [PositionTitle] [NVARCHAR](100) NULL
    , [EndDate] [DATE] NULL
    , [OrderOfAssignment] [INT] NULL
    , [EmploymentEducationOrganizationId] [INT] NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NULL
    , [EmploymentHireDate] [DATE] NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociationKey] AS TABLE
(
    [tid_StaffEducationOrganizationAssignmentAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffEducationOrganizationAssignmentAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue
                , [Staff].[StaffUniqueId]
                , T.[PositionTitle]
                , T.[EndDate]
                , T.[OrderOfAssignment]
                , T.[EmploymentEducationOrganizationId]
                , EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue
                , T.[EmploymentHireDate]
                , EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffEducationOrganizationAssignmentAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON [StaffClassificationDescriptor].[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON [EmploymentStatusDescriptor].[DescriptorId] = T.[EmploymentStatusDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [StaffClassificationDescriptorCodeValue]
                    , [StaffUniqueId]
                    , [PositionTitle]
                    , [EndDate]
                    , [OrderOfAssignment]
                    , [EmploymentEducationOrganizationId]
                    , [EmploymentStatusDescriptorCodeValue]
                    , [EmploymentHireDate]
                    , [EmploymentStatusDescriptorNamespace]
                    , [StaffClassificationDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[StaffClassificationDescriptorCodeValue]
                    , S.[StaffUniqueId]
                    , S.[PositionTitle]
                    , S.[EndDate]
                    , S.[OrderOfAssignment]
                    , S.[EmploymentEducationOrganizationId]
                    , S.[EmploymentStatusDescriptorCodeValue]
                    , S.[EmploymentHireDate]
                    , S.[EmploymentStatusDescriptorNamespace]
                    , S.[StaffClassificationDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffEducationOrganizationAssignmentAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[StaffClassificationDescriptorCodeValue]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[StaffClassificationDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffEducationOrganizationAssignmentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffEducationOrganizationAssignmentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffEducationOrganizationAssignmentAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StaffEducationOrganizationAssignmentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffEducationOrganizationAssignmentAssociationExtension] ******/

CREATE TYPE [t_extension].[udt_StaffEducationOrganizationAssignmentAssociationExtension] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [YearsOfExperienceAtCurrentEducationOrganization] [DECIMAL](5, 2) NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffEducationOrganizationAssignmentAssociationExtensionKey] ******/

CREATE TYPE [t_extension].[udt_StaffEducationOrganizationAssignmentAssociationExtensionKey] AS TABLE
(
    [tid_StaffEducationOrganizationAssignmentAssociationExtension] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffClassificationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StaffClassificationDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffEducationOrganizationAssignmentAssociationExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffEducationOrganizationAssignmentAssociationExtension]
            (
                [tid_StaffEducationOrganizationAssignmentAssociation]
                , [YearsOfExperienceAtCurrentEducationOrganization]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffEducationOrganizationAssignmentAssociation]
                , S.[YearsOfExperienceAtCurrentEducationOrganization]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[EducationOrganizationId], StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue, [Staff].[StaffUniqueId], T.[YearsOfExperienceAtCurrentEducationOrganization], StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace
                , StaffEducationOrganizationAssignmentAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffEducationOrganizationAssignmentAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffEducationOrganizationAssignmentAssociationExtension] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON StaffClassificationDescriptor.[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[StaffEducationOrganizationAssignmentAssociation] AS StaffEducationOrganizationAssignmentAssociation
                    ON StaffEducationOrganizationAssignmentAssociation.[BeginDate] = T.[BeginDate]
                    AND StaffEducationOrganizationAssignmentAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StaffEducationOrganizationAssignmentAssociation.[StaffClassificationDescriptorId] = T.[StaffClassificationDescriptorId]
                    AND StaffEducationOrganizationAssignmentAssociation.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffEducationOrganizationEmploymentAssociation] ******/

CREATE TYPE [t_edfi].[udt_StaffEducationOrganizationEmploymentAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [HireDate] [DATE] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [EndDate] [DATE] NULL
    , [SeparationType] [NVARCHAR](450) NULL
    , [SeparationReasonDescriptorCodeValue] [NVARCHAR](50) NULL
    , [Department] [NVARCHAR](3) NULL
    , [FullTimeEquivalency] [DECIMAL](5, 4) NULL
    , [OfferDate] [DATE] NULL
    , [HourlyWage] [MONEY] NULL
    , [SeparationReasonDescriptorNamespace] [NVARCHAR](255) NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffEducationOrganizationEmploymentAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StaffEducationOrganizationEmploymentAssociationKey] AS TABLE
(
    [tid_StaffEducationOrganizationEmploymentAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [EmploymentStatusDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [HireDate] [DATE] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [EmploymentStatusDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffEducationOrganizationEmploymentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffEducationOrganizationEmploymentAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue
                , T.[HireDate]
                , [Staff].[StaffUniqueId]
                , T.[EndDate]
                , [SeparationType].[ShortDescription] AS SeparationType
                , SeparationReasonDescriptor.[CodeValue] AS SeparationReasonDescriptorCodeValue
                , T.[Department]
                , T.[FullTimeEquivalency]
                , T.[OfferDate]
                , T.[HourlyWage]
                , SeparationReasonDescriptor.[Namespace] AS SeparationReasonDescriptorNamespace
                , EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffEducationOrganizationEmploymentAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON [EmploymentStatusDescriptor].[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[SeparationType] AS SeparationType
                    ON [SeparationType].[SeparationTypeId] = T.[SeparationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SeparationReasonDescriptor
                    ON [SeparationReasonDescriptor].[DescriptorId] = T.[SeparationReasonDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [EmploymentStatusDescriptorCodeValue]
                    , [HireDate]
                    , [StaffUniqueId]
                    , [EndDate]
                    , [SeparationType]
                    , [SeparationReasonDescriptorCodeValue]
                    , [Department]
                    , [FullTimeEquivalency]
                    , [OfferDate]
                    , [HourlyWage]
                    , [SeparationReasonDescriptorNamespace]
                    , [EmploymentStatusDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[EmploymentStatusDescriptorCodeValue]
                    , S.[HireDate]
                    , S.[StaffUniqueId]
                    , S.[EndDate]
                    , S.[SeparationType]
                    , S.[SeparationReasonDescriptorCodeValue]
                    , S.[Department]
                    , S.[FullTimeEquivalency]
                    , S.[OfferDate]
                    , S.[HourlyWage]
                    , S.[SeparationReasonDescriptorNamespace]
                    , S.[EmploymentStatusDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffEducationOrganizationEmploymentAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EmploymentStatusDescriptorCodeValue]
                , INSERTED.[HireDate]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[EmploymentStatusDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffEducationOrganizationEmploymentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffEducationOrganizationEmploymentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffEducationOrganizationEmploymentAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StaffEducationOrganizationEmploymentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffIdentificationSystemDescriptor] ******/

CREATE TYPE [t_edfi].[udt_StaffIdentificationSystemDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [StaffIdentificationSystemType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffIdentificationSystemDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_StaffIdentificationSystemDescriptorKey] AS TABLE
(
    [tid_StaffIdentificationSystemDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffIdentificationSystemDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StaffIdentificationSystemType].[ShortDescription] AS StaffIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffIdentificationSystemDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StaffIdentificationSystemDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[StaffIdentificationSystemType] AS StaffIdentificationSystemType
                    ON [StaffIdentificationSystemType].[StaffIdentificationSystemTypeId] = T.[StaffIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StaffIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StaffIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffIdentificationSystemDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StaffIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[StaffIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffProgramAssociation] ******/

CREATE TYPE [t_edfi].[udt_StaffProgramAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [EndDate] [DATE] NULL
    , [StudentRecordAccess] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffProgramAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StaffProgramAssociationKey] AS TABLE
(
    [tid_StaffProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffProgramAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Staff].[StaffUniqueId]
                , T.[EndDate]
                , T.[StudentRecordAccess]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StaffUniqueId]
                    , [EndDate]
                    , [StudentRecordAccess]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StaffUniqueId]
                    , S.[EndDate]
                    , S.[StudentRecordAccess]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffProgramAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StaffProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffSchoolAssociation] ******/

CREATE TYPE [t_edfi].[udt_StaffSchoolAssociation] AS TABLE
(
    [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [SchoolYear] [SMALLINT] NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffSchoolAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StaffSchoolAssociationKey] AS TABLE
(
    [tid_StaffSchoolAssociation] [INT] NOT NULL PRIMARY KEY
    , [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSchoolAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSchoolAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffSchoolAssociation] AS T
            USING
            (
                SELECT ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue
                , T.[SchoolId]
                , [Staff].[StaffUniqueId]
                , T.[SchoolYear]
                , ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffSchoolAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON [ProgramAssignmentDescriptor].[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ProgramAssignmentDescriptorCodeValue]
                    , [SchoolId]
                    , [StaffUniqueId]
                    , [SchoolYear]
                    , [ProgramAssignmentDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ProgramAssignmentDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StaffUniqueId]
                    , S.[SchoolYear]
                    , S.[ProgramAssignmentDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffSchoolAssociation]
                , INSERTED.[ProgramAssignmentDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[ProgramAssignmentDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffSchoolAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffSchoolAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffSchoolAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffSchoolAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StaffSchoolAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStaffSchoolAssociationGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffSchoolAssociationGradeLevel] ******/

CREATE TYPE [t_edfi].[udt_StaffSchoolAssociationGradeLevel] AS TABLE
(
    [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffSchoolAssociationGradeLevelKey] ******/

CREATE TYPE [t_edfi].[udt_StaffSchoolAssociationGradeLevelKey] AS TABLE
(
    [tid_StaffSchoolAssociationGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSchoolAssociationGradeLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociationGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffSchoolAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSchoolAssociationGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffSchoolAssociationGradeLevel]
            (
                [tid_StaffSchoolAssociation]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffSchoolAssociation]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue, T.[SchoolId], [Staff].[StaffUniqueId], ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , StaffSchoolAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffSchoolAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffSchoolAssociationGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON ProgramAssignmentDescriptor.[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[StaffSchoolAssociation] AS StaffSchoolAssociation
                    ON StaffSchoolAssociation.[ProgramAssignmentDescriptorId] = T.[ProgramAssignmentDescriptorId]
                    AND StaffSchoolAssociation.[SchoolId] = T.[SchoolId]
                    AND StaffSchoolAssociation.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffSchoolAssociationAcademicSubject] ******/

CREATE TYPE [t_edfi].[udt_StaffSchoolAssociationAcademicSubject] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffSchoolAssociationAcademicSubjectKey] ******/

CREATE TYPE [t_edfi].[udt_StaffSchoolAssociationAcademicSubjectKey] AS TABLE
(
    [tid_StaffSchoolAssociationAcademicSubject] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffSchoolAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSchoolAssociationAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffSchoolAssociationAcademicSubject]
            (
                [tid_StaffSchoolAssociation]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffSchoolAssociation]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue, T.[SchoolId], [Staff].[StaffUniqueId], ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StaffSchoolAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffSchoolAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StaffSchoolAssociationAcademicSubject] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON ProgramAssignmentDescriptor.[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[StaffSchoolAssociation] AS StaffSchoolAssociation
                    ON StaffSchoolAssociation.[ProgramAssignmentDescriptorId] = T.[ProgramAssignmentDescriptorId]
                    AND StaffSchoolAssociation.[SchoolId] = T.[SchoolId]
                    AND StaffSchoolAssociation.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StaffSectionAssociation] ******/

CREATE TYPE [t_edfi].[udt_StaffSectionAssociation] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ClassroomPositionDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [HighlyQualifiedTeacher] [BIT] NULL
    , [TeacherStudentDataLinkExclusion] [BIT] NULL
    , [PercentageContribution] [DECIMAL](5, 4) NULL
    , [ClassroomPositionDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StaffSectionAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StaffSectionAssociationKey] AS TABLE
(
    [tid_StaffSectionAssociation] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSectionAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStaffSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffSectionAssociation] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Staff].[StaffUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , ClassroomPositionDescriptor.[CodeValue] AS ClassroomPositionDescriptorCodeValue
                , T.[BeginDate]
                , T.[EndDate]
                , T.[HighlyQualifiedTeacher]
                , T.[TeacherStudentDataLinkExclusion]
                , T.[PercentageContribution]
                , ClassroomPositionDescriptor.[Namespace] AS ClassroomPositionDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StaffSectionAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ClassroomPositionDescriptor
                    ON [ClassroomPositionDescriptor].[DescriptorId] = T.[ClassroomPositionDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StaffUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [ClassroomPositionDescriptorCodeValue]
                    , [BeginDate]
                    , [EndDate]
                    , [HighlyQualifiedTeacher]
                    , [TeacherStudentDataLinkExclusion]
                    , [PercentageContribution]
                    , [ClassroomPositionDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StaffUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[ClassroomPositionDescriptorCodeValue]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[HighlyQualifiedTeacher]
                    , S.[TeacherStudentDataLinkExclusion]
                    , S.[PercentageContribution]
                    , S.[ClassroomPositionDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffSectionAssociation]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffSectionAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StaffSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StateEducationAgency] ******/

CREATE TYPE [t_edfi].[udt_StateEducationAgency] AS TABLE
(
    [StateEducationAgencyId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StateEducationAgencyKey] ******/

CREATE TYPE [t_edfi].[udt_StateEducationAgencyKey] AS TABLE
(
    [tid_StateEducationAgency] [INT] NOT NULL PRIMARY KEY
    , [StateEducationAgencyId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStateEducationAgency] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStateEducationAgency]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StateEducationAgencyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StateEducationAgency] AS T
            USING
            (
                SELECT T.[StateEducationAgencyId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StateEducationAgency] AS T
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[StateEducationAgencyId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StateEducationAgencyId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StateEducationAgencyId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StateEducationAgency]
                , INSERTED.[StateEducationAgencyId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StateEducationAgencySnapshotRecord]
            (
                [SnapshotId]
                , [tid_StateEducationAgency]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StateEducationAgency]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StateEducationAgency] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StateEducationAgency] AS S
                ON P.[EducationOrganizationId] = S.[StateEducationAgencyId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStateEducationAgencyAccountability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStateEducationAgencyFederalFunds] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StateEducationAgencyAccountability] ******/

CREATE TYPE [t_edfi].[udt_StateEducationAgencyAccountability] AS TABLE
(
    [SchoolYear] [SMALLINT] NOT NULL
    , [StateEducationAgencyId] [INT] NOT NULL
    , [CTEGraduationRateInclusion] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StateEducationAgencyAccountabilityKey] ******/

CREATE TYPE [t_edfi].[udt_StateEducationAgencyAccountabilityKey] AS TABLE
(
    [tid_StateEducationAgencyAccountability] [INT] NOT NULL PRIMARY KEY
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StateEducationAgencyId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStateEducationAgencyAccountability] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStateEducationAgencyAccountability]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StateEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StateEducationAgencyAccountabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StateEducationAgencyAccountability]
            (
                [tid_StateEducationAgency]
                , [SchoolYear]
                , [CTEGraduationRateInclusion]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StateEducationAgency]
                , S.[SchoolYear]
                , S.[CTEGraduationRateInclusion]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SchoolYear], T.[StateEducationAgencyId], T.[CTEGraduationRateInclusion]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StateEducationAgencyAccountability] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[StateEducationAgencyId] = S.[StateEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StateEducationAgencyFederalFunds] ******/

CREATE TYPE [t_edfi].[udt_StateEducationAgencyFederalFunds] AS TABLE
(
    [FiscalYear] [INT] NOT NULL
    , [StateEducationAgencyId] [INT] NOT NULL
    , [FederalProgramsFundingAllocation] [MONEY] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StateEducationAgencyFederalFundsKey] ******/

CREATE TYPE [t_edfi].[udt_StateEducationAgencyFederalFundsKey] AS TABLE
(
    [tid_StateEducationAgencyFederalFunds] [INT] NOT NULL PRIMARY KEY
    , [FiscalYear] [INT] NOT NULL
    , [StateEducationAgencyId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStateEducationAgencyFederalFunds] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStateEducationAgencyFederalFunds]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StateEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StateEducationAgencyFederalFundsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StateEducationAgencyFederalFunds]
            (
                [tid_StateEducationAgency]
                , [FiscalYear]
                , [FederalProgramsFundingAllocation]
                , [CreateDate]
                , [LastModifiedDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StateEducationAgency]
                , S.[FiscalYear]
                , S.[FederalProgramsFundingAllocation]
                , S.[CreateDate]
                , S.[LastModifiedDate]
                , S.[Id]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FiscalYear], T.[StateEducationAgencyId], T.[FederalProgramsFundingAllocation]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StateEducationAgencyFederalFunds] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[StateEducationAgencyId] = S.[StateEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_Student] ******/

CREATE TYPE [t_edfi].[udt_Student] AS TABLE
(
    [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [MaidenName] [NVARCHAR](75) NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [BirthDate] [DATE] NOT NULL
    , [BirthCity] [NVARCHAR](30) NULL
    , [BirthStateAbbreviationType] [NVARCHAR](450) NULL
    , [BirthInternationalProvince] [NVARCHAR](150) NULL
    , [BirthCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [DateEnteredUS] [DATE] NULL
    , [MultipleBirthStatus] [BIT] NULL
    , [ProfileThumbnail] [NVARCHAR](59) NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
    , [OldEthnicityType] [NVARCHAR](450) NULL
    , [CitizenshipStatusType] [NVARCHAR](450) NULL
    , [EconomicDisadvantaged] [BIT] NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NULL
    , [LimitedEnglishProficiencyDescriptorCodeValue] [NVARCHAR](50) NULL
    , [DisplacementStatus] [NVARCHAR](30) NULL
    , [LoginId] [NVARCHAR](60) NULL
    , [LimitedEnglishProficiencyDescriptorNamespace] [NVARCHAR](255) NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NULL
    , [BirthCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentKey] ******/

CREATE TYPE [t_edfi].[udt_StudentKey] AS TABLE
(
    [tid_Student] [INT] NOT NULL PRIMARY KEY
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Student] AS T
            USING
            (
                SELECT T.[StudentUniqueId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[BirthCity]
                , [BirthStateAbbreviationType].[ShortDescription] AS BirthStateAbbreviationType
                , T.[BirthInternationalProvince]
                , BirthCountryDescriptor.[CodeValue] AS BirthCountryDescriptorCodeValue
                , T.[DateEnteredUS]
                , T.[MultipleBirthStatus]
                , T.[ProfileThumbnail]
                , T.[HispanicLatinoEthnicity]
                , [OldEthnicityType].[ShortDescription] AS OldEthnicityType
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , T.[EconomicDisadvantaged]
                , SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue
                , LimitedEnglishProficiencyDescriptor.[CodeValue] AS LimitedEnglishProficiencyDescriptorCodeValue
                , T.[DisplacementStatus]
                , T.[LoginId]
                , LimitedEnglishProficiencyDescriptor.[Namespace] AS LimitedEnglishProficiencyDescriptorNamespace
                , SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , BirthCountryDescriptor.[Namespace] AS BirthCountryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[Student] AS T
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS BirthStateAbbreviationType
                    ON [BirthStateAbbreviationType].[StateAbbreviationTypeId] = T.[BirthStateAbbreviationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BirthCountryDescriptor
                    ON [BirthCountryDescriptor].[DescriptorId] = T.[BirthCountryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[OldEthnicityType] AS OldEthnicityType
                    ON [OldEthnicityType].[OldEthnicityTypeId] = T.[OldEthnicityTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON [SchoolFoodServicesEligibilityDescriptor].[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LimitedEnglishProficiencyDescriptor
                    ON [LimitedEnglishProficiencyDescriptor].[DescriptorId] = T.[LimitedEnglishProficiencyDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StudentUniqueId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [BirthCity]
                    , [BirthStateAbbreviationType]
                    , [BirthInternationalProvince]
                    , [BirthCountryDescriptorCodeValue]
                    , [DateEnteredUS]
                    , [MultipleBirthStatus]
                    , [ProfileThumbnail]
                    , [HispanicLatinoEthnicity]
                    , [OldEthnicityType]
                    , [CitizenshipStatusType]
                    , [EconomicDisadvantaged]
                    , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , [LimitedEnglishProficiencyDescriptorCodeValue]
                    , [DisplacementStatus]
                    , [LoginId]
                    , [LimitedEnglishProficiencyDescriptorNamespace]
                    , [SchoolFoodServicesEligibilityDescriptorNamespace]
                    , [BirthCountryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StudentUniqueId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[BirthCity]
                    , S.[BirthStateAbbreviationType]
                    , S.[BirthInternationalProvince]
                    , S.[BirthCountryDescriptorCodeValue]
                    , S.[DateEnteredUS]
                    , S.[MultipleBirthStatus]
                    , S.[ProfileThumbnail]
                    , S.[HispanicLatinoEthnicity]
                    , S.[OldEthnicityType]
                    , S.[CitizenshipStatusType]
                    , S.[EconomicDisadvantaged]
                    , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , S.[LimitedEnglishProficiencyDescriptorCodeValue]
                    , S.[DisplacementStatus]
                    , S.[LoginId]
                    , S.[LimitedEnglishProficiencyDescriptorNamespace]
                    , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                    , S.[BirthCountryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Student]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Student]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Student]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Student] AS T
            JOIN [Ods_Snapshot].[edfi].[Student] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentProgramParticipation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentLearningStyle] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCohortYear] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentIndicator] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentIdentificationCode] ******/

CREATE TYPE [t_edfi].[udt_StudentIdentificationCode] AS TABLE
(
    [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentIdentificationCodeKey] ******/

CREATE TYPE [t_edfi].[udt_StudentIdentificationCodeKey] AS TABLE
(
    [tid_StudentIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIdentificationCode] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentIdentificationCode]
            (
                [tid_Student]
                , [AssigningOrganizationIdentificationCode]
                , [StudentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [StudentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StudentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[StudentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssigningOrganizationIdentificationCode], StudentIdentificationSystemDescriptor.[CodeValue] AS StudentIdentificationSystemDescriptorCodeValue, [Student].[StudentUniqueId], T.[IdentificationCode], StudentIdentificationSystemDescriptor.[Namespace] AS StudentIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StudentIdentificationSystemDescriptor
                    ON StudentIdentificationSystemDescriptor.[DescriptorId] = T.[StudentIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentOtherName] ******/

CREATE TYPE [t_edfi].[udt_StudentOtherName] AS TABLE
(
    [OtherNameType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentOtherNameKey] ******/

CREATE TYPE [t_edfi].[udt_StudentOtherNameKey] AS TABLE
(
    [tid_StudentOtherName] [INT] NOT NULL PRIMARY KEY
    , [OtherNameType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentOtherName] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentOtherName]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentOtherName]
            (
                [tid_Student]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, [Student].[StudentUniqueId], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentOtherName] AS T 
                JOIN [Ods_Snapshot].[edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAddress] ******/

CREATE TYPE [t_edfi].[udt_StudentAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAddressKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAddressKey] AS TABLE
(
    [tid_StudentAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAddress]
            (
                [tid_Student]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Student].[StudentUniqueId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentInternationalAddress] ******/

CREATE TYPE [t_edfi].[udt_StudentInternationalAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AddressLine1] [NVARCHAR](150) NOT NULL
    , [AddressLine2] [NVARCHAR](150) NULL
    , [AddressLine3] [NVARCHAR](150) NULL
    , [AddressLine4] [NVARCHAR](150) NULL
    , [CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentInternationalAddressKey] ******/

CREATE TYPE [t_edfi].[udt_StudentInternationalAddressKey] AS TABLE
(
    [tid_StudentInternationalAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInternationalAddress] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentInternationalAddress]
            (
                [tid_Student]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Student].[StudentUniqueId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentInternationalAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentTelephone] ******/

CREATE TYPE [t_edfi].[udt_StudentTelephone] AS TABLE
(
    [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [OrderOfPriority] [INT] NULL
    , [TextMessageCapabilityIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentTelephoneKey] ******/

CREATE TYPE [t_edfi].[udt_StudentTelephoneKey] AS TABLE
(
    [tid_StudentTelephone] [INT] NOT NULL PRIMARY KEY
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentTelephone] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentTelephone]
            (
                [tid_Student]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Student].[StudentUniqueId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentElectronicMail] ******/

CREATE TYPE [t_edfi].[udt_StudentElectronicMail] AS TABLE
(
    [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ElectronicMailAddress] [NVARCHAR](128) NOT NULL
    , [PrimaryEmailAddressIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentElectronicMailKey] ******/

CREATE TYPE [t_edfi].[udt_StudentElectronicMailKey] AS TABLE
(
    [tid_StudentElectronicMail] [INT] NOT NULL PRIMARY KEY
    , [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentElectronicMail] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentElectronicMail]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentElectronicMail]
            (
                [tid_Student]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, [Student].[StudentUniqueId], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentElectronicMail] AS T 
                JOIN [Ods_Snapshot].[edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentRace] ******/

CREATE TYPE [t_edfi].[udt_StudentRace] AS TABLE
(
    [RaceType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentRaceKey] ******/

CREATE TYPE [t_edfi].[udt_StudentRaceKey] AS TABLE
(
    [tid_StudentRace] [INT] NOT NULL PRIMARY KEY
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentRace] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentRace]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentRace]
            (
                [tid_Student]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RaceType.[ShortDescription] AS RaceType, [Student].[StudentUniqueId]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentVisa] ******/

CREATE TYPE [t_edfi].[udt_StudentVisa] AS TABLE
(
    [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentVisaKey] ******/

CREATE TYPE [t_edfi].[udt_StudentVisaKey] AS TABLE
(
    [tid_StudentVisa] [INT] NOT NULL PRIMARY KEY
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentVisa] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentVisa]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentVisa]
            (
                [tid_Student]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Student].[StudentUniqueId], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentVisa] AS T 
                JOIN [Ods_Snapshot].[edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCharacteristic] ******/

CREATE TYPE [t_edfi].[udt_StudentCharacteristic] AS TABLE
(
    [StudentCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [DesignatedBy] [NVARCHAR](60) NULL
    , [StudentCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCharacteristicKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCharacteristicKey] AS TABLE
(
    [tid_StudentCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [StudentCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCharacteristic] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCharacteristic]
            (
                [tid_Student]
                , [StudentCharacteristicDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [StudentCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[StudentCharacteristicDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[StudentCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT StudentCharacteristicDescriptor.[CodeValue] AS StudentCharacteristicDescriptorCodeValue, [Student].[StudentUniqueId], T.[BeginDate], T.[EndDate], T.[DesignatedBy], StudentCharacteristicDescriptor.[Namespace] AS StudentCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StudentCharacteristicDescriptor
                    ON StudentCharacteristicDescriptor.[DescriptorId] = T.[StudentCharacteristicDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentLanguage] ******/

CREATE TYPE [t_edfi].[udt_StudentLanguage] AS TABLE
(
    [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentLanguageKey] ******/

CREATE TYPE [t_edfi].[udt_StudentLanguageKey] AS TABLE
(
    [tid_StudentLanguage] [INT] NOT NULL PRIMARY KEY
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLanguage] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentLanguage]
            (
                [tid_Student]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StudentLanguage]
            INTO @Tids
            SELECT T.[tid_Student]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, [Student].[StudentUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StudentLanguage]
                , S.[LanguageDescriptorCodeValue]
                , T.[StudentUniqueId]
                , S.[LanguageDescriptorNamespace]
            FROM [t_edfi].[StudentLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_Student] = T.[tid_Student]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StudentLanguage] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentLanguageUse] ******/

CREATE TYPE [t_edfi].[udt_StudentLanguageUse] AS TABLE
(
    [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentLanguageUseKey] ******/

CREATE TYPE [t_edfi].[udt_StudentLanguageUseKey] AS TABLE
(
    [tid_StudentLanguageUse] [INT] NOT NULL PRIMARY KEY
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLanguageUse] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentLanguageUse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentLanguageUse]
            (
                [tid_StudentLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, [Student].[StudentUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StudentLanguageUse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[StudentUniqueId] = S.[StudentUniqueId]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentDisability] ******/

CREATE TYPE [t_edfi].[udt_StudentDisability] AS TABLE
(
    [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [DisabilityDiagnosis] [NVARCHAR](80) NULL
    , [OrderOfDisability] [INT] NULL
    , [DisabilityDeterminationSourceType] [NVARCHAR](450) NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentDisabilityKey] ******/

CREATE TYPE [t_edfi].[udt_StudentDisabilityKey] AS TABLE
(
    [tid_StudentDisability] [INT] NOT NULL PRIMARY KEY
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentDisability] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentDisability]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentDisability]
            (
                [tid_Student]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, [Student].[StudentUniqueId], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentProgramParticipation] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramParticipation] AS TABLE
(
    [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATETIME] NULL
    , [EndDate] [DATETIME] NULL
    , [DesignatedBy] [NVARCHAR](60) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentProgramParticipationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramParticipationKey] AS TABLE
(
    [tid_StudentProgramParticipation] [INT] NOT NULL PRIMARY KEY
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramParticipation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramParticipation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramParticipationKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentProgramParticipation]
            (
                [tid_Student]
                , [ProgramType]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StudentProgramParticipation]
            INTO @Tids
            SELECT T.[tid_Student]
                , S.[ProgramType]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramType.[ShortDescription] AS ProgramType, [Student].[StudentUniqueId], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentProgramParticipation] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StudentProgramParticipation]
                , S.[ProgramType]
                , T.[StudentUniqueId]
            FROM [t_edfi].[StudentProgramParticipation] AS S
            JOIN @pTids AS T
                ON S.[tid_Student] = T.[tid_Student]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StudentProgramParticipation] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentProgramParticipationProgramCharacteristic] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramParticipationProgramCharacteristic] AS TABLE
(
    [ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentProgramParticipationProgramCharacteristicKey] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramParticipationProgramCharacteristicKey] AS TABLE
(
    [tid_StudentProgramParticipationProgramCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentProgramParticipationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramParticipationProgramCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentProgramParticipationProgramCharacteristic]
            (
                [tid_StudentProgramParticipation]
                , [ProgramCharacteristicDescriptorCodeValue]
                , [ProgramCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentProgramParticipation]
                , S.[ProgramCharacteristicDescriptorCodeValue]
                , S.[ProgramCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramCharacteristicDescriptor.[CodeValue] AS ProgramCharacteristicDescriptorCodeValue, ProgramType.[ShortDescription] AS ProgramType, [Student].[StudentUniqueId], ProgramCharacteristicDescriptor.[Namespace] AS ProgramCharacteristicDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StudentProgramParticipationProgramCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramCharacteristicDescriptor
                    ON ProgramCharacteristicDescriptor.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[ProgramType] = S.[ProgramType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentLearningStyle] ******/

CREATE TYPE [t_edfi].[udt_StudentLearningStyle] AS TABLE
(
    [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [VisualLearning] [DECIMAL](5, 4) NOT NULL
    , [AuditoryLearning] [DECIMAL](5, 4) NOT NULL
    , [TactileLearning] [DECIMAL](5, 4) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentLearningStyleKey] ******/

CREATE TYPE [t_edfi].[udt_StudentLearningStyleKey] AS TABLE
(
    [tid_StudentLearningStyle] [INT] NOT NULL PRIMARY KEY
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLearningStyle] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentLearningStyle]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLearningStyleKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentLearningStyle]
            (
                [tid_Student]
                , [VisualLearning]
                , [AuditoryLearning]
                , [TactileLearning]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[VisualLearning]
                , S.[AuditoryLearning]
                , S.[TactileLearning]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Student].[StudentUniqueId], T.[VisualLearning], T.[AuditoryLearning], T.[TactileLearning]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentLearningStyle] AS T 
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCohortYear] ******/

CREATE TYPE [t_edfi].[udt_StudentCohortYear] AS TABLE
(
    [CohortYearType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCohortYearKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCohortYearKey] AS TABLE
(
    [tid_StudentCohortYear] [INT] NOT NULL PRIMARY KEY
    , [CohortYearType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCohortYear] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCohortYear]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCohortYearKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCohortYear]
            (
                [tid_Student]
                , [CohortYearType]
                , [SchoolYear]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[CohortYearType]
                , S.[SchoolYear]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CohortYearType.[ShortDescription] AS CohortYearType, T.[SchoolYear], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentCohortYear] AS T 
                JOIN [Ods_Snapshot].[edfi].[CohortYearType] AS CohortYearType
                    ON CohortYearType.[CohortYearTypeId] = T.[CohortYearTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentIndicator] ******/

CREATE TYPE [t_edfi].[udt_StudentIndicator] AS TABLE
(
    [IndicatorName] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [IndicatorGroup] [NVARCHAR](60) NULL
    , [Indicator] [NVARCHAR](35) NOT NULL
    , [BeginDate] [DATETIME] NULL
    , [EndDate] [DATETIME] NULL
    , [DesignatedBy] [NVARCHAR](60) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentIndicatorKey] ******/

CREATE TYPE [t_edfi].[udt_StudentIndicatorKey] AS TABLE
(
    [tid_StudentIndicator] [INT] NOT NULL PRIMARY KEY
    , [IndicatorName] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIndicator] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentIndicator]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIndicatorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentIndicator]
            (
                [tid_Student]
                , [IndicatorName]
                , [IndicatorGroup]
                , [Indicator]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[IndicatorName]
                , S.[IndicatorGroup]
                , S.[Indicator]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[IndicatorName], [Student].[StudentUniqueId], T.[IndicatorGroup], T.[Indicator], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentIndicator] AS T 
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentIdentificationDocument] ******/

CREATE TYPE [t_edfi].[udt_StudentIdentificationDocument] AS TABLE
(
    [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [DocumentTitle] [NVARCHAR](60) NULL
    , [DocumentExpirationDate] [DATE] NULL
    , [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentIdentificationDocumentKey] ******/

CREATE TYPE [t_edfi].[udt_StudentIdentificationDocumentKey] AS TABLE
(
    [tid_StudentIdentificationDocument] [INT] NOT NULL PRIMARY KEY
    , [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIdentificationDocument] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentIdentificationDocument]
            (
                [tid_Student]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, [Student].[StudentUniqueId], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentIdentificationDocument] AS T 
                JOIN [Ods_Snapshot].[edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAcademicRecord] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecord] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CumulativeEarnedCredits] [DECIMAL](9, 2) NULL
    , [CumulativeEarnedCreditType] [NVARCHAR](450) NULL
    , [CumulativeEarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [CumulativeAttemptedCredits] [DECIMAL](9, 2) NULL
    , [CumulativeAttemptedCreditType] [NVARCHAR](450) NULL
    , [CumulativeAttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [CumulativeGradePointsEarned] [DECIMAL](18, 4) NULL
    , [CumulativeGradePointAverage] [DECIMAL](18, 4) NULL
    , [GradeValueQualifier] [NVARCHAR](80) NULL
    , [ProjectedGraduationDate] [DATE] NULL
    , [SessionEarnedCredits] [DECIMAL](9, 2) NULL
    , [SessionEarnedCreditType] [NVARCHAR](450) NULL
    , [SessionEarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [SessionAttemptedCredits] [DECIMAL](9, 2) NULL
    , [SessionAttemptedCreditType] [NVARCHAR](450) NULL
    , [SessionAttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [SessionGradePointsEarned] [DECIMAL](18, 4) NULL
    , [SessionGradePointAverage] [DECIMAL](18, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAcademicRecordKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordKey] AS TABLE
(
    [tid_StudentAcademicRecord] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecord] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentAcademicRecord] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CumulativeEarnedCredits]
                , [CumulativeEarnedCreditType].[ShortDescription] AS CumulativeEarnedCreditType
                , T.[CumulativeEarnedCreditConversion]
                , T.[CumulativeAttemptedCredits]
                , [CumulativeAttemptedCreditType].[ShortDescription] AS CumulativeAttemptedCreditType
                , T.[CumulativeAttemptedCreditConversion]
                , T.[CumulativeGradePointsEarned]
                , T.[CumulativeGradePointAverage]
                , T.[GradeValueQualifier]
                , T.[ProjectedGraduationDate]
                , T.[SessionEarnedCredits]
                , [SessionEarnedCreditType].[ShortDescription] AS SessionEarnedCreditType
                , T.[SessionEarnedCreditConversion]
                , T.[SessionAttemptedCredits]
                , [SessionAttemptedCreditType].[ShortDescription] AS SessionAttemptedCreditType
                , T.[SessionAttemptedCreditConversion]
                , T.[SessionGradePointsEarned]
                , T.[SessionGradePointAverage]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentAcademicRecord] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CumulativeEarnedCreditType
                    ON [CumulativeEarnedCreditType].[CreditTypeId] = T.[CumulativeEarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CumulativeAttemptedCreditType
                    ON [CumulativeAttemptedCreditType].[CreditTypeId] = T.[CumulativeAttemptedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS SessionEarnedCreditType
                    ON [SessionEarnedCreditType].[CreditTypeId] = T.[SessionEarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS SessionAttemptedCreditType
                    ON [SessionAttemptedCreditType].[CreditTypeId] = T.[SessionAttemptedCreditTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [CumulativeEarnedCredits]
                    , [CumulativeEarnedCreditType]
                    , [CumulativeEarnedCreditConversion]
                    , [CumulativeAttemptedCredits]
                    , [CumulativeAttemptedCreditType]
                    , [CumulativeAttemptedCreditConversion]
                    , [CumulativeGradePointsEarned]
                    , [CumulativeGradePointAverage]
                    , [GradeValueQualifier]
                    , [ProjectedGraduationDate]
                    , [SessionEarnedCredits]
                    , [SessionEarnedCreditType]
                    , [SessionEarnedCreditConversion]
                    , [SessionAttemptedCredits]
                    , [SessionAttemptedCreditType]
                    , [SessionAttemptedCreditConversion]
                    , [SessionGradePointsEarned]
                    , [SessionGradePointAverage]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[CumulativeEarnedCredits]
                    , S.[CumulativeEarnedCreditType]
                    , S.[CumulativeEarnedCreditConversion]
                    , S.[CumulativeAttemptedCredits]
                    , S.[CumulativeAttemptedCreditType]
                    , S.[CumulativeAttemptedCreditConversion]
                    , S.[CumulativeGradePointsEarned]
                    , S.[CumulativeGradePointAverage]
                    , S.[GradeValueQualifier]
                    , S.[ProjectedGraduationDate]
                    , S.[SessionEarnedCredits]
                    , S.[SessionEarnedCreditType]
                    , S.[SessionEarnedCreditConversion]
                    , S.[SessionAttemptedCredits]
                    , S.[SessionAttemptedCreditType]
                    , S.[SessionAttemptedCreditConversion]
                    , S.[SessionGradePointsEarned]
                    , S.[SessionGradePointAverage]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentAcademicRecord]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentAcademicRecord] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentAcademicRecordClassRanking] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordAcademicHonor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordDiploma] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordReportCard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAcademicRecordClassRanking] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordClassRanking] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ClassRank] [INT] NOT NULL
    , [TotalNumberInClass] [INT] NOT NULL
    , [PercentageRanking] [INT] NULL
    , [ClassRankingDate] [DATE] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAcademicRecordClassRankingKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordClassRankingKey] AS TABLE
(
    [tid_StudentAcademicRecordClassRanking] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordClassRanking] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordClassRanking]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordClassRankingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordClassRanking]
            (
                [tid_StudentAcademicRecord]
                , [ClassRank]
                , [TotalNumberInClass]
                , [PercentageRanking]
                , [ClassRankingDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[ClassRank]
                , S.[TotalNumberInClass]
                , S.[PercentageRanking]
                , S.[ClassRankingDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[ClassRank], T.[TotalNumberInClass], T.[PercentageRanking], T.[ClassRankingDate], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAcademicRecordClassRanking] AS T 
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAcademicRecordAcademicHonor] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordAcademicHonor] AS TABLE
(
    [AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [HonorDescription] [NVARCHAR](80) NULL
    , [HonorAwardDate] [DATE] NULL
    , [HonorAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAcademicRecordAcademicHonorKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordAcademicHonorKey] AS TABLE
(
    [tid_StudentAcademicRecordAcademicHonor] [INT] NOT NULL PRIMARY KEY
    , [AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordAcademicHonor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordAcademicHonor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordAcademicHonorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordAcademicHonor]
            (
                [tid_StudentAcademicRecord]
                , [AcademicHonorCategoryType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [HonorDescription]
                , [HonorAwardDate]
                , [HonorAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[AcademicHonorCategoryType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[HonorDescription]
                , S.[HonorAwardDate]
                , S.[HonorAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicHonorCategoryType.[ShortDescription] AS AcademicHonorCategoryType, T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[HonorDescription], T.[HonorAwardDate], T.[HonorAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAcademicRecordAcademicHonor] AS T 
                JOIN [Ods_Snapshot].[edfi].[AcademicHonorCategoryType] AS AcademicHonorCategoryType
                    ON AcademicHonorCategoryType.[AcademicHonorCategoryTypeId] = T.[AcademicHonorCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAcademicRecordRecognition] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordRecognition] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [RecognitionType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [RecognitionDescription] [NVARCHAR](80) NULL
    , [RecognitionAwardDate] [DATE] NULL
    , [RecognitionAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAcademicRecordRecognitionKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordRecognitionKey] AS TABLE
(
    [tid_StudentAcademicRecordRecognition] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [RecognitionType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordRecognition] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordRecognition]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordRecognition]
            (
                [tid_StudentAcademicRecord]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], RecognitionType.[ShortDescription] AS RecognitionType, T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAcademicRecordRecognition] AS T 
                JOIN [Ods_Snapshot].[edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAcademicRecordDiploma] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordDiploma] AS TABLE
(
    [DiplomaAwardDate] [DATE] NOT NULL
    , [DiplomaType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [DiplomaLevelType] [NVARCHAR](450) NULL
    , [CTECompleter] [BIT] NULL
    , [DiplomaDescription] [NVARCHAR](80) NULL
    , [DiplomaAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAcademicRecordDiplomaKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordDiplomaKey] AS TABLE
(
    [tid_StudentAcademicRecordDiploma] [INT] NOT NULL PRIMARY KEY
    , [DiplomaAwardDate] [DATE] NOT NULL
    , [DiplomaType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordDiploma] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordDiploma]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordDiplomaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordDiploma]
            (
                [tid_StudentAcademicRecord]
                , [DiplomaAwardDate]
                , [DiplomaType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [DiplomaLevelType]
                , [CTECompleter]
                , [DiplomaDescription]
                , [DiplomaAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[DiplomaAwardDate]
                , S.[DiplomaType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[DiplomaLevelType]
                , S.[CTECompleter]
                , S.[DiplomaDescription]
                , S.[DiplomaAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DiplomaAwardDate], DiplomaType.[ShortDescription] AS DiplomaType, T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], DiplomaLevelType.[ShortDescription] AS DiplomaLevelType, T.[CTECompleter], T.[DiplomaDescription], T.[DiplomaAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAcademicRecordDiploma] AS T 
                JOIN [Ods_Snapshot].[edfi].[DiplomaType] AS DiplomaType
                    ON DiplomaType.[DiplomaTypeId] = T.[DiplomaTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DiplomaLevelType] AS DiplomaLevelType
                    ON DiplomaLevelType.[DiplomaLevelTypeId] = T.[DiplomaLevelTypeId]
                JOIN [Ods_Snapshot].[edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAcademicRecordReportCard] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordReportCard] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAcademicRecordReportCardKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAcademicRecordReportCardKey] AS TABLE
(
    [tid_StudentAcademicRecordReportCard] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordReportCard] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordReportCard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordReportCardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordReportCard]
            (
                [tid_StudentAcademicRecord]
                , [GradingPeriodBeginDate]
                , [GradingPeriodDescriptorCodeValue]
                , [SchoolId]
                , [GradingPeriodDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[GradingPeriodBeginDate]
                , S.[GradingPeriodDescriptorCodeValue]
                , S.[SchoolId]
                , S.[GradingPeriodDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, TermDescriptor.[Namespace] AS TermDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAcademicRecordReportCard] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessment] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessment] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AdministrationEndDate] [DATE] NULL
    , [SerialNumber] [NVARCHAR](60) NULL
    , [AdministrationLanguageDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AdministrationEnvironmentType] [NVARCHAR](450) NULL
    , [RetestIndicatorType] [NVARCHAR](450) NULL
    , [ReasonNotTestedType] [NVARCHAR](450) NULL
    , [WhenAssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [EventCircumstanceType] [NVARCHAR](450) NULL
    , [EventDescription] [NVARCHAR](1024) NULL
    , [WhenAssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AdministrationLanguageDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentKey] AS TABLE
(
    [tid_StudentAssessment] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessment] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentAssessment] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[AdministrationDate]
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , [Student].[StudentUniqueId]
                , T.[Version]
                , T.[AdministrationEndDate]
                , T.[SerialNumber]
                , AdministrationLanguageDescriptor.[CodeValue] AS AdministrationLanguageDescriptorCodeValue
                , [AdministrationEnvironmentType].[ShortDescription] AS AdministrationEnvironmentType
                , [RetestIndicatorType].[ShortDescription] AS RetestIndicatorType
                , [ReasonNotTestedType].[ShortDescription] AS ReasonNotTestedType
                , WhenAssessedGradeLevelDescriptor.[CodeValue] AS WhenAssessedGradeLevelDescriptorCodeValue
                , [EventCircumstanceType].[ShortDescription] AS EventCircumstanceType
                , T.[EventDescription]
                , WhenAssessedGradeLevelDescriptor.[Namespace] AS WhenAssessedGradeLevelDescriptorNamespace
                , AdministrationLanguageDescriptor.[Namespace] AS AdministrationLanguageDescriptorNamespace
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentAssessment] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AdministrationLanguageDescriptor
                    ON [AdministrationLanguageDescriptor].[DescriptorId] = T.[AdministrationLanguageDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[AdministrationEnvironmentType] AS AdministrationEnvironmentType
                    ON [AdministrationEnvironmentType].[AdministrationEnvironmentTypeId] = T.[AdministrationEnvironmentTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[RetestIndicatorType] AS RetestIndicatorType
                    ON [RetestIndicatorType].[RetestIndicatorTypeId] = T.[RetestIndicatorTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ReasonNotTestedType] AS ReasonNotTestedType
                    ON [ReasonNotTestedType].[ReasonNotTestedTypeId] = T.[ReasonNotTestedTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS WhenAssessedGradeLevelDescriptor
                    ON [WhenAssessedGradeLevelDescriptor].[DescriptorId] = T.[WhenAssessedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[EventCircumstanceType] AS EventCircumstanceType
                    ON [EventCircumstanceType].[EventCircumstanceTypeId] = T.[EventCircumstanceTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AdministrationDate]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [StudentUniqueId]
                    , [Version]
                    , [AdministrationEndDate]
                    , [SerialNumber]
                    , [AdministrationLanguageDescriptorCodeValue]
                    , [AdministrationEnvironmentType]
                    , [RetestIndicatorType]
                    , [ReasonNotTestedType]
                    , [WhenAssessedGradeLevelDescriptorCodeValue]
                    , [EventCircumstanceType]
                    , [EventDescription]
                    , [WhenAssessedGradeLevelDescriptorNamespace]
                    , [AdministrationLanguageDescriptorNamespace]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[StudentUniqueId]
                    , S.[Version]
                    , S.[AdministrationEndDate]
                    , S.[SerialNumber]
                    , S.[AdministrationLanguageDescriptorCodeValue]
                    , S.[AdministrationEnvironmentType]
                    , S.[RetestIndicatorType]
                    , S.[ReasonNotTestedType]
                    , S.[WhenAssessedGradeLevelDescriptorCodeValue]
                    , S.[EventCircumstanceType]
                    , S.[EventDescription]
                    , S.[WhenAssessedGradeLevelDescriptorNamespace]
                    , S.[AdministrationLanguageDescriptorNamespace]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentAssessment]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AdministrationDate]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentAssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentAssessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentAssessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentAssessment] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentAssessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentAssessmentAccommodation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentItem] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessmentAccommodation] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentAccommodation] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AccommodationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AccommodationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentAccommodationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentAccommodationKey] AS TABLE
(
    [tid_StudentAssessmentAccommodation] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AccommodationDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AccommodationDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentAccommodation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentAccommodation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentAccommodationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentAccommodation]
            (
                [tid_StudentAssessment]
                , [AccommodationDescriptorCodeValue]
                , [AccommodationDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[AccommodationDescriptorCodeValue]
                , S.[AccommodationDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AccommodationDescriptor.[CodeValue] AS AccommodationDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], [Student].[StudentUniqueId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AccommodationDescriptor.[Namespace] AS AccommodationDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAssessmentAccommodation] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AccommodationDescriptor
                    ON AccommodationDescriptor.[DescriptorId] = T.[AccommodationDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessmentScoreResult] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentScoreResult] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [Result] [NVARCHAR](35) NOT NULL
    , [ResultDatatypeType] [NVARCHAR](450) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentScoreResultKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentScoreResultKey] AS TABLE
(
    [tid_StudentAssessmentScoreResult] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentScoreResult] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentScoreResult]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentScoreResult]
            (
                [tid_StudentAssessment]
                , [AssessmentReportingMethodType]
                , [Result]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], [Student].[StudentUniqueId], T.[Version], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAssessmentScoreResult] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessmentPerformanceLevel] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentPerformanceLevel] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [PerformanceLevelMet] [BIT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentPerformanceLevelKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentPerformanceLevelKey] AS TABLE
(
    [tid_StudentAssessmentPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentPerformanceLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentPerformanceLevel]
            (
                [tid_StudentAssessment]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMet]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMet]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, [Student].[StudentUniqueId], T.[Version], T.[PerformanceLevelMet], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAssessmentPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessmentItem] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentItem] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessmentResponse] [NVARCHAR](60) NULL
    , [DescriptiveFeedback] [NVARCHAR](1024) NULL
    , [ResponseIndicatorType] [NVARCHAR](450) NULL
    , [AssessmentItemResultType] [NVARCHAR](450) NOT NULL
    , [RawScoreResult] [INT] NULL
    , [TimeAssessed] [NVARCHAR](30) NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentItemKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentItemKey] AS TABLE
(
    [tid_StudentAssessmentItem] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentItem] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentItem]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentItemKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentItem]
            (
                [tid_StudentAssessment]
                , [IdentificationCode]
                , [AssessmentResponse]
                , [DescriptiveFeedback]
                , [ResponseIndicatorType]
                , [AssessmentItemResultType]
                , [RawScoreResult]
                , [TimeAssessed]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[IdentificationCode]
                , S.[AssessmentResponse]
                , S.[DescriptiveFeedback]
                , S.[ResponseIndicatorType]
                , S.[AssessmentItemResultType]
                , S.[RawScoreResult]
                , S.[TimeAssessed]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], [Student].[StudentUniqueId], T.[Version], T.[AssessmentResponse], T.[DescriptiveFeedback], ResponseIndicatorType.[ShortDescription] AS ResponseIndicatorType, AssessmentItemResultType.[ShortDescription] AS AssessmentItemResultType, T.[RawScoreResult], T.[TimeAssessed], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAssessmentItem] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResponseIndicatorType] AS ResponseIndicatorType
                    ON ResponseIndicatorType.[ResponseIndicatorTypeId] = T.[ResponseIndicatorTypeId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentItemResultType] AS AssessmentItemResultType
                    ON AssessmentItemResultType.[AssessmentItemResultTypeId] = T.[AssessmentItemResultTypeId]
                JOIN [Ods_Snapshot].[edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessment] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessment] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey] AS TABLE
(
    [tid_StudentAssessmentStudentObjectiveAssessment] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentStudentObjectiveAssessment]
            (
                [tid_StudentAssessment]
                , [IdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StudentAssessmentStudentObjectiveAssessment]
            INTO @Tids
            SELECT T.[tid_StudentAssessment]
                , S.[IdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], [Student].[StudentUniqueId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentAssessmentStudentObjectiveAssessment] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StudentAssessmentStudentObjectiveAssessment]
                , T.[AcademicSubjectDescriptorCodeValue]
                , T.[AdministrationDate]
                , T.[AssessedGradeLevelDescriptorCodeValue]
                , T.[AssessmentTitle]
                , S.[IdentificationCode]
                , T.[StudentUniqueId]
                , T.[Version]
                , T.[AssessedGradeLevelDescriptorNamespace]
                , T.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[StudentAssessmentStudentObjectiveAssessment] AS S
            JOIN @pTids AS T
                ON S.[tid_StudentAssessment] = T.[tid_StudentAssessment]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StudentAssessmentStudentObjectiveAssessment] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentScoreResult] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentScoreResult] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [Result] [NVARCHAR](35) NOT NULL
    , [ResultDatatypeType] [NVARCHAR](450) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentScoreResultKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentScoreResultKey] AS TABLE
(
    [tid_StudentAssessmentStudentObjectiveAssessmentScoreResult] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult]
            (
                [tid_StudentAssessmentStudentObjectiveAssessment]
                , [AssessmentReportingMethodType]
                , [Result]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessmentStudentObjectiveAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[IdentificationCode], [Student].[StudentUniqueId], T.[Version], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AdministrationDate] = S.[AdministrationDate]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[IdentificationCode] = S.[IdentificationCode]
                AND T.[StudentUniqueId] = S.[StudentUniqueId]
                AND T.[Version] = S.[Version]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [PerformanceLevelMet] [BIT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentPerformanceLevelKey] ******/

CREATE TYPE [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentPerformanceLevelKey] AS TABLE
(
    [tid_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AdministrationDate] [DATE] NOT NULL
    , [AssessedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Version] [INT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AssessedGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel]
            (
                [tid_StudentAssessmentStudentObjectiveAssessment]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMet]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessmentStudentObjectiveAssessment]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMet]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, [Student].[StudentUniqueId], T.[Version], T.[PerformanceLevelMet], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AdministrationDate] = S.[AdministrationDate]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[IdentificationCode] = S.[IdentificationCode]
                AND T.[StudentUniqueId] = S.[StudentUniqueId]
                AND T.[Version] = S.[Version]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCharacteristicDescriptor] ******/

CREATE TYPE [t_edfi].[udt_StudentCharacteristicDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [StudentCharacteristicType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCharacteristicDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCharacteristicDescriptorKey] AS TABLE
(
    [tid_StudentCharacteristicDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCharacteristicDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StudentCharacteristicType].[ShortDescription] AS StudentCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentCharacteristicDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StudentCharacteristicDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[StudentCharacteristicType] AS StudentCharacteristicType
                    ON [StudentCharacteristicType].[StudentCharacteristicTypeId] = T.[StudentCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StudentCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StudentCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCharacteristicDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StudentCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[StudentCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCohortAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentCohortAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCohortAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCohortAssociationKey] AS TABLE
(
    [tid_StudentCohortAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCohortAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCohortAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCohortAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCohortAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[CohortIdentifier]
                , T.[EducationOrganizationId]
                , [Student].[StudentUniqueId]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentCohortAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [CohortIdentifier]
                    , [EducationOrganizationId]
                    , [StudentUniqueId]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[CohortIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[StudentUniqueId]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCohortAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[CohortIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCohortAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCohortAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCohortAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCohortAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentCohortAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentCohortAssociationSection] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCohortAssociationSection] ******/

CREATE TYPE [t_edfi].[udt_StudentCohortAssociationSection] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCohortAssociationSectionKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCohortAssociationSectionKey] AS TABLE
(
    [tid_StudentCohortAssociationSection] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [CohortIdentifier] [NVARCHAR](20) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCohortAssociationSection] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCohortAssociationSection]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentCohortAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCohortAssociationSectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCohortAssociationSection]
            (
                [tid_StudentCohortAssociation]
                , [ClassPeriodName]
                , [ClassroomIdentificationCode]
                , [LocalCourseCode]
                , [SchoolId]
                , [SchoolYear]
                , [SequenceOfCourse]
                , [TermDescriptorCodeValue]
                , [UniqueSectionCode]
                , [TermDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentCohortAssociation]
                , S.[ClassPeriodName]
                , S.[ClassroomIdentificationCode]
                , S.[LocalCourseCode]
                , S.[SchoolId]
                , S.[SchoolYear]
                , S.[SequenceOfCourse]
                , S.[TermDescriptorCodeValue]
                , S.[UniqueSectionCode]
                , S.[TermDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[CohortIdentifier], T.[EducationOrganizationId], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentCohortAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentCohortAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentCohortAssociationSection] AS T 
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[StudentCohortAssociation] AS StudentCohortAssociation
                    ON StudentCohortAssociation.[BeginDate] = T.[BeginDate]
                    AND StudentCohortAssociation.[CohortIdentifier] = T.[CohortIdentifier]
                    AND StudentCohortAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentCohortAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCompetencyObjective] ******/

CREATE TYPE [t_edfi].[udt_StudentCompetencyObjective] AS TABLE
(
    [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveEducationOrganizationId] [INT] NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [DiagnosticStatement] [NVARCHAR](1024) NULL
    , [UniqueSectionCode] [NVARCHAR](255) NULL
    , [SequenceOfCourse] [INT] NULL
    , [LocalCourseCode] [NVARCHAR](60) NULL
    , [SchoolYear] [SMALLINT] NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NULL
    , [ClassPeriodName] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [ProgramEducationOrganizationId] [INT] NULL
    , [ProgramName] [NVARCHAR](60) NULL
    , [ProgramType] [NVARCHAR](450) NULL
    , [EducationOrganizationId] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCompetencyObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCompetencyObjectiveKey] AS TABLE
(
    [tid_StudentCompetencyObjective] [INT] NOT NULL PRIMARY KEY
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveEducationOrganizationId] [INT] NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCompetencyObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCompetencyObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCompetencyObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCompetencyObjective] AS T
            USING
            (
                SELECT T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[Objective]
                , T.[ObjectiveEducationOrganizationId]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue
                , T.[DiagnosticStatement]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , T.[BeginDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[EducationOrganizationId]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentCompetencyObjective] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON [CompetencyLevelDescriptor].[DescriptorId] = T.[CompetencyLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [Objective]
                    , [ObjectiveEducationOrganizationId]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [CompetencyLevelDescriptorCodeValue]
                    , [DiagnosticStatement]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [BeginDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [EducationOrganizationId]
                    , [TermDescriptorNamespace]
                    , [CompetencyLevelDescriptorNamespace]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[Objective]
                    , S.[ObjectiveEducationOrganizationId]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[CompetencyLevelDescriptorCodeValue]
                    , S.[DiagnosticStatement]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[BeginDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[EducationOrganizationId]
                    , S.[TermDescriptorNamespace]
                    , S.[CompetencyLevelDescriptorNamespace]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCompetencyObjective]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveEducationOrganizationId]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCompetencyObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCompetencyObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCompetencyObjective] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentCompetencyObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCTEProgramAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentCTEProgramAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCTEProgramAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCTEProgramAssociationKey] AS TABLE
(
    [tid_StudentCTEProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCTEProgramAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCTEProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCTEProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCTEProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentCTEProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCTEProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCTEProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCTEProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCTEProgramAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StudentCTEProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentCTEProgramAssociationCTEProgram] ******/

CREATE TYPE [t_edfi].[udt_StudentCTEProgramAssociationCTEProgram] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [CareerPathwayType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CIPCode] [NVARCHAR](120) NULL
    , [PrimaryCTEProgramIndicator] [BIT] NULL
    , [CTEProgramCompletionIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentCTEProgramAssociationCTEProgramKey] ******/

CREATE TYPE [t_edfi].[udt_StudentCTEProgramAssociationCTEProgramKey] AS TABLE
(
    [tid_StudentCTEProgramAssociationCTEProgram] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [CareerPathwayType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentCTEProgramAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCTEProgramAssociationCTEProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCTEProgramAssociationCTEProgram]
            (
                [tid_StudentCTEProgramAssociation]
                , [CareerPathwayType]
                , [CIPCode]
                , [PrimaryCTEProgramIndicator]
                , [CTEProgramCompletionIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentCTEProgramAssociation]
                , S.[CareerPathwayType]
                , S.[CIPCode]
                , S.[PrimaryCTEProgramIndicator]
                , S.[CTEProgramCompletionIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], CareerPathwayType.[ShortDescription] AS CareerPathwayType, T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, [Student].[StudentUniqueId], T.[CIPCode], T.[PrimaryCTEProgramIndicator], T.[CTEProgramCompletionIndicator]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StudentCTEProgramAssociationCTEProgram] AS T 
                JOIN [Ods_Snapshot].[edfi].[CareerPathwayType] AS CareerPathwayType
                    ON CareerPathwayType.[CareerPathwayTypeId] = T.[CareerPathwayTypeId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[BeginDate] = S.[BeginDate]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND T.[ProgramName] = S.[ProgramName]
                AND T.[ProgramType] = S.[ProgramType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentDisciplineIncidentAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentDisciplineIncidentAssociation] AS TABLE
(
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentParticipationCodeType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentDisciplineIncidentAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentDisciplineIncidentAssociationKey] AS TABLE
(
    [tid_StudentDisciplineIncidentAssociation] [INT] NOT NULL PRIMARY KEY
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentDisciplineIncidentAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentDisciplineIncidentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentDisciplineIncidentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentDisciplineIncidentAssociation] AS T
            USING
            (
                SELECT T.[IncidentIdentifier]
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , [StudentParticipationCodeType].[ShortDescription] AS StudentParticipationCodeType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentDisciplineIncidentAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[StudentParticipationCodeType] AS StudentParticipationCodeType
                    ON [StudentParticipationCodeType].[StudentParticipationCodeTypeId] = T.[StudentParticipationCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [IncidentIdentifier]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [StudentParticipationCodeType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[IncidentIdentifier]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[StudentParticipationCodeType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentDisciplineIncidentAssociation]
                , INSERTED.[IncidentIdentifier]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentDisciplineIncidentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentDisciplineIncidentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentDisciplineIncidentAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentDisciplineIncidentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentDisciplineIncidentAssociationBehavior] ******/

CREATE TYPE [t_edfi].[udt_StudentDisciplineIncidentAssociationBehavior] AS TABLE
(
    [BehaviorDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [BehaviorDetailedDescription] [NVARCHAR](1024) NULL
    , [BehaviorDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentDisciplineIncidentAssociationBehaviorKey] ******/

CREATE TYPE [t_edfi].[udt_StudentDisciplineIncidentAssociationBehaviorKey] AS TABLE
(
    [tid_StudentDisciplineIncidentAssociationBehavior] [INT] NOT NULL PRIMARY KEY
    , [BehaviorDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IncidentIdentifier] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [BehaviorDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentDisciplineIncidentAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentDisciplineIncidentAssociationBehaviorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentDisciplineIncidentAssociationBehavior]
            (
                [tid_StudentDisciplineIncidentAssociation]
                , [BehaviorDescriptorCodeValue]
                , [BehaviorDetailedDescription]
                , [BehaviorDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentDisciplineIncidentAssociation]
                , S.[BehaviorDescriptorCodeValue]
                , S.[BehaviorDetailedDescription]
                , S.[BehaviorDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT BehaviorDescriptor.[CodeValue] AS BehaviorDescriptorCodeValue, T.[IncidentIdentifier], T.[SchoolId], [Student].[StudentUniqueId], T.[BehaviorDetailedDescription], BehaviorDescriptor.[Namespace] AS BehaviorDescriptorNamespace
                , T.[CreateDate]
                , StudentDisciplineIncidentAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentDisciplineIncidentAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentDisciplineIncidentAssociationBehavior] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BehaviorDescriptor
                    ON BehaviorDescriptor.[DescriptorId] = T.[BehaviorDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[StudentDisciplineIncidentAssociation] AS StudentDisciplineIncidentAssociation
                    ON StudentDisciplineIncidentAssociation.[IncidentIdentifier] = T.[IncidentIdentifier]
                    AND StudentDisciplineIncidentAssociation.[SchoolId] = T.[SchoolId]
                    AND StudentDisciplineIncidentAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentEducationOrganizationAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentEducationOrganizationAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [ResponsibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ResponsibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentEducationOrganizationAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentEducationOrganizationAssociationKey] AS TABLE
(
    [tid_StudentEducationOrganizationAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [ResponsibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ResponsibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentEducationOrganizationAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , ResponsibilityDescriptor.[CodeValue] AS ResponsibilityDescriptorCodeValue
                , [Student].[StudentUniqueId]
                , ResponsibilityDescriptor.[Namespace] AS ResponsibilityDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentEducationOrganizationAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ResponsibilityDescriptor
                    ON [ResponsibilityDescriptor].[DescriptorId] = T.[ResponsibilityDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ResponsibilityDescriptorCodeValue]
                    , [StudentUniqueId]
                    , [ResponsibilityDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ResponsibilityDescriptorCodeValue]
                    , S.[StudentUniqueId]
                    , S.[ResponsibilityDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentEducationOrganizationAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ResponsibilityDescriptorCodeValue]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[ResponsibilityDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentEducationOrganizationAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentGradebookEntry] ******/

CREATE TYPE [t_edfi].[udt_StudentGradebookEntry] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [DateFulfilled] [DATE] NULL
    , [LetterGradeEarned] [NVARCHAR](20) NULL
    , [NumericGradeEarned] [DECIMAL](9, 2) NULL
    , [CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [DiagnosticStatement] [NVARCHAR](1024) NULL
    , [CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentGradebookEntryKey] ******/

CREATE TYPE [t_edfi].[udt_StudentGradebookEntryKey] AS TABLE
(
    [tid_StudentGradebookEntry] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentGradebookEntry] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentGradebookEntry]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentGradebookEntryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentGradebookEntry] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[DateAssigned]
                , T.[GradebookEntryTitle]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[DateFulfilled]
                , T.[LetterGradeEarned]
                , T.[NumericGradeEarned]
                , CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue
                , T.[DiagnosticStatement]
                , CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentGradebookEntry] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON [CompetencyLevelDescriptor].[DescriptorId] = T.[CompetencyLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [DateAssigned]
                    , [GradebookEntryTitle]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [DateFulfilled]
                    , [LetterGradeEarned]
                    , [NumericGradeEarned]
                    , [CompetencyLevelDescriptorCodeValue]
                    , [DiagnosticStatement]
                    , [CompetencyLevelDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[DateAssigned]
                    , S.[GradebookEntryTitle]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[DateFulfilled]
                    , S.[LetterGradeEarned]
                    , S.[NumericGradeEarned]
                    , S.[CompetencyLevelDescriptorCodeValue]
                    , S.[DiagnosticStatement]
                    , S.[CompetencyLevelDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentGradebookEntry]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[DateAssigned]
                , INSERTED.[GradebookEntryTitle]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentGradebookEntrySnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentGradebookEntry]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentGradebookEntry]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentGradebookEntry] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentGradebookEntry] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStudentGradebookEntryExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StudentGradebookEntryExtension] ******/

CREATE TYPE [t_extension].[udt_StudentGradebookEntryExtension] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [DateCompleted] [DATE] NULL
    , [AssignmentPassed] [BIT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StudentGradebookEntryExtensionKey] ******/

CREATE TYPE [t_extension].[udt_StudentGradebookEntryExtensionKey] AS TABLE
(
    [tid_StudentGradebookEntryExtension] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DateAssigned] [DATE] NOT NULL
    , [GradebookEntryTitle] [NVARCHAR](60) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStudentGradebookEntryExtension] ******/

CREATE PROCEDURE [t_extension].[usp_dbStudentGradebookEntryExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentGradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StudentGradebookEntryExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StudentGradebookEntryExtension]
            (
                [tid_StudentGradebookEntry]
                , [DateCompleted]
                , [AssignmentPassed]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentGradebookEntry]
                , S.[DateCompleted]
                , S.[AssignmentPassed]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[DateCompleted], T.[AssignmentPassed], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , StudentGradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentGradebookEntry.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StudentGradebookEntryExtension] AS T 
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[StudentGradebookEntry] AS StudentGradebookEntry
                    ON StudentGradebookEntry.[BeginDate] = T.[BeginDate]
                    AND StudentGradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND StudentGradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND StudentGradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND StudentGradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND StudentGradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND StudentGradebookEntry.[SchoolId] = T.[SchoolId]
                    AND StudentGradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND StudentGradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND StudentGradebookEntry.[StudentUSI] = T.[StudentUSI]
                    AND StudentGradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND StudentGradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentIdentificationSystemDescriptor] ******/

CREATE TYPE [t_edfi].[udt_StudentIdentificationSystemDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [StudentIdentificationSystemType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentIdentificationSystemDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_StudentIdentificationSystemDescriptorKey] AS TABLE
(
    [tid_StudentIdentificationSystemDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIdentificationSystemDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StudentIdentificationSystemType].[ShortDescription] AS StudentIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentIdentificationSystemDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StudentIdentificationSystemDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[StudentIdentificationSystemType] AS StudentIdentificationSystemType
                    ON [StudentIdentificationSystemType].[StudentIdentificationSystemTypeId] = T.[StudentIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StudentIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StudentIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentIdentificationSystemDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StudentIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[StudentIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentInterventionAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentInterventionAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CohortIdentifier] [NVARCHAR](20) NULL
    , [CohortEducationOrganizationId] [INT] NULL
    , [DiagnosticStatement] [NVARCHAR](1024) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentInterventionAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentInterventionAssociationKey] AS TABLE
(
    [tid_StudentInterventionAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInterventionAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentInterventionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInterventionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentInterventionAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionIdentificationCode]
                , [Student].[StudentUniqueId]
                , T.[CohortIdentifier]
                , T.[CohortEducationOrganizationId]
                , T.[DiagnosticStatement]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentInterventionAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionIdentificationCode]
                    , [StudentUniqueId]
                    , [CohortIdentifier]
                    , [CohortEducationOrganizationId]
                    , [DiagnosticStatement]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionIdentificationCode]
                    , S.[StudentUniqueId]
                    , S.[CohortIdentifier]
                    , S.[CohortEducationOrganizationId]
                    , S.[DiagnosticStatement]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentInterventionAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionIdentificationCode]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentInterventionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentInterventionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentInterventionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentInterventionAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentInterventionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentInterventionAssociationInterventionEffectiveness] ******/

CREATE TYPE [t_edfi].[udt_StudentInterventionAssociationInterventionEffectiveness] AS TABLE
(
    [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ImprovementIndex] [INT] NULL
    , [InterventionEffectivenessRatingType] [NVARCHAR](450) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentInterventionAssociationInterventionEffectivenessKey] ******/

CREATE TYPE [t_edfi].[udt_StudentInterventionAssociationInterventionEffectivenessKey] AS TABLE
(
    [tid_StudentInterventionAssociationInterventionEffectiveness] [INT] NOT NULL PRIMARY KEY
    , [DiagnosisDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [PopulationServedType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [DiagnosisDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentInterventionAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInterventionAssociationInterventionEffectivenessKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentInterventionAssociationInterventionEffectiveness]
            (
                [tid_StudentInterventionAssociation]
                , [DiagnosisDescriptorCodeValue]
                , [GradeLevelDescriptorCodeValue]
                , [PopulationServedType]
                , [ImprovementIndex]
                , [InterventionEffectivenessRatingType]
                , [GradeLevelDescriptorNamespace]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentInterventionAssociation]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[PopulationServedType]
                , S.[ImprovementIndex]
                , S.[InterventionEffectivenessRatingType]
                , S.[GradeLevelDescriptorNamespace]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType, [Student].[StudentUniqueId], T.[ImprovementIndex], InterventionEffectivenessRatingType.[ShortDescription] AS InterventionEffectivenessRatingType, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace, DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , StudentInterventionAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentInterventionAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentInterventionAssociationInterventionEffectiveness] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[InterventionEffectivenessRatingType] AS InterventionEffectivenessRatingType
                    ON InterventionEffectivenessRatingType.[InterventionEffectivenessRatingTypeId] = T.[InterventionEffectivenessRatingTypeId]
                JOIN [Ods_Snapshot].[edfi].[StudentInterventionAssociation] AS StudentInterventionAssociation
                    ON StudentInterventionAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentInterventionAssociation.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
                    AND StudentInterventionAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentInterventionAttendanceEvent] ******/

CREATE TYPE [t_edfi].[udt_StudentInterventionAttendanceEvent] AS TABLE
(
    [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AttendanceEventReason] [NVARCHAR](40) NULL
    , [EducationalEnvironmentType] [NVARCHAR](450) NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentInterventionAttendanceEventKey] ******/

CREATE TYPE [t_edfi].[udt_StudentInterventionAttendanceEventKey] AS TABLE
(
    [tid_StudentInterventionAttendanceEvent] [INT] NOT NULL PRIMARY KEY
    , [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInterventionAttendanceEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentInterventionAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInterventionAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentInterventionAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[EducationOrganizationId]
                , T.[EventDate]
                , T.[InterventionIdentificationCode]
                , [Student].[StudentUniqueId]
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentInterventionAttendanceEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [EducationOrganizationId]
                    , [EventDate]
                    , [InterventionIdentificationCode]
                    , [StudentUniqueId]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[EducationOrganizationId]
                    , S.[EventDate]
                    , S.[InterventionIdentificationCode]
                    , S.[StudentUniqueId]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentInterventionAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EventDate]
                , INSERTED.[InterventionIdentificationCode]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentInterventionAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentInterventionAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentInterventionAttendanceEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentInterventionAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentLearningObjective] ******/

CREATE TYPE [t_edfi].[udt_StudentLearningObjective] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CompetencyLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [DiagnosticStatement] [NVARCHAR](1024) NULL
    , [UniqueSectionCode] [NVARCHAR](255) NULL
    , [SequenceOfCourse] [INT] NULL
    , [LocalCourseCode] [NVARCHAR](60) NULL
    , [SchoolYear] [SMALLINT] NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NULL
    , [ClassPeriodName] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [ProgramEducationOrganizationId] [INT] NULL
    , [ProgramName] [NVARCHAR](60) NULL
    , [ProgramType] [NVARCHAR](450) NULL
    , [EducationOrganizationId] [INT] NULL
    , [StudentSectionAssociationBeginDate] [DATE] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [CompetencyLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentLearningObjectiveKey] ******/

CREATE TYPE [t_edfi].[udt_StudentLearningObjectiveKey] AS TABLE
(
    [tid_StudentLearningObjective] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradingPeriodBeginDate] [DATE] NOT NULL
    , [GradingPeriodDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Objective] [NVARCHAR](60) NOT NULL
    , [ObjectiveGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ObjectiveGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradingPeriodDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLearningObjective] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentLearningObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentLearningObjective] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[Objective]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue
                , T.[DiagnosticStatement]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , T.[BeginDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[EducationOrganizationId]
                , T.[StudentSectionAssociationBeginDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentLearningObjective] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON [CompetencyLevelDescriptor].[DescriptorId] = T.[CompetencyLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [Objective]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [CompetencyLevelDescriptorCodeValue]
                    , [DiagnosticStatement]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [BeginDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [EducationOrganizationId]
                    , [StudentSectionAssociationBeginDate]
                    , [TermDescriptorNamespace]
                    , [CompetencyLevelDescriptorNamespace]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [GradingPeriodDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[Objective]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[CompetencyLevelDescriptorCodeValue]
                    , S.[DiagnosticStatement]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[BeginDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[EducationOrganizationId]
                    , S.[StudentSectionAssociationBeginDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CompetencyLevelDescriptorNamespace]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentLearningObjective]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentLearningObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentLearningObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentLearningObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentLearningObjective] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentLearningObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentMigrantEducationProgramAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentMigrantEducationProgramAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [PriorityForServices] [BIT] NOT NULL
    , [LastQualifyingMove] [DATE] NOT NULL
    , [ContinuationOfServicesReasonDescriptorCodeValue] [NVARCHAR](50) NULL
    , [USInitialEntry] [DATE] NULL
    , [USMostRecentEntry] [DATE] NULL
    , [USInitialSchoolEntry] [DATE] NULL
    , [ContinuationOfServicesReasonDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentMigrantEducationProgramAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentMigrantEducationProgramAssociationKey] AS TABLE
(
    [tid_StudentMigrantEducationProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentMigrantEducationProgramAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentMigrantEducationProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentMigrantEducationProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentMigrantEducationProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[PriorityForServices]
                , T.[LastQualifyingMove]
                , ContinuationOfServicesReasonDescriptor.[CodeValue] AS ContinuationOfServicesReasonDescriptorCodeValue
                , T.[USInitialEntry]
                , T.[USMostRecentEntry]
                , T.[USInitialSchoolEntry]
                , ContinuationOfServicesReasonDescriptor.[Namespace] AS ContinuationOfServicesReasonDescriptorNamespace
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentMigrantEducationProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ContinuationOfServicesReasonDescriptor
                    ON [ContinuationOfServicesReasonDescriptor].[DescriptorId] = T.[ContinuationOfServicesReasonDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [PriorityForServices]
                    , [LastQualifyingMove]
                    , [ContinuationOfServicesReasonDescriptorCodeValue]
                    , [USInitialEntry]
                    , [USMostRecentEntry]
                    , [USInitialSchoolEntry]
                    , [ContinuationOfServicesReasonDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[PriorityForServices]
                    , S.[LastQualifyingMove]
                    , S.[ContinuationOfServicesReasonDescriptorCodeValue]
                    , S.[USInitialEntry]
                    , S.[USMostRecentEntry]
                    , S.[USInitialSchoolEntry]
                    , S.[ContinuationOfServicesReasonDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentMigrantEducationProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentMigrantEducationProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentMigrantEducationProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentMigrantEducationProgramAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StudentMigrantEducationProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentParentAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentParentAssociation] AS TABLE
(
    [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [RelationType] [NVARCHAR](450) NULL
    , [PrimaryContactStatus] [BIT] NULL
    , [LivesWith] [BIT] NULL
    , [EmergencyContactStatus] [BIT] NULL
    , [ContactPriority] [INT] NULL
    , [ContactRestrictions] [NVARCHAR](250) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentParentAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentParentAssociationKey] AS TABLE
(
    [tid_StudentParentAssociation] [INT] NOT NULL PRIMARY KEY
    , [ParentUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentParentAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentParentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentParentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentParentAssociation] AS T
            USING
            (
                SELECT [Parent].[ParentUniqueId]
                , [Student].[StudentUniqueId]
                , [RelationType].[ShortDescription] AS RelationType
                , T.[PrimaryContactStatus]
                , T.[LivesWith]
                , T.[EmergencyContactStatus]
                , T.[ContactPriority]
                , T.[ContactRestrictions]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentParentAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Parent]
                    ON [Parent].[ParentUSI] = T.[ParentUSI]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[RelationType] AS RelationType
                    ON [RelationType].[RelationTypeId] = T.[RelationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ParentUniqueId]
                    , [StudentUniqueId]
                    , [RelationType]
                    , [PrimaryContactStatus]
                    , [LivesWith]
                    , [EmergencyContactStatus]
                    , [ContactPriority]
                    , [ContactRestrictions]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ParentUniqueId]
                    , S.[StudentUniqueId]
                    , S.[RelationType]
                    , S.[PrimaryContactStatus]
                    , S.[LivesWith]
                    , S.[EmergencyContactStatus]
                    , S.[ContactPriority]
                    , S.[ContactRestrictions]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentParentAssociation]
                , INSERTED.[ParentUniqueId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentParentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentParentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentParentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentParentAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentParentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentProgramAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [EndDate] [DATE] NULL
    , [ReasonExitedDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ServedOutsideOfRegularSession] [BIT] NULL
    , [ReasonExitedDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentProgramAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramAssociationKey] AS TABLE
(
    [tid_StudentProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[EndDate]
                , ReasonExitedDescriptor.[CodeValue] AS ReasonExitedDescriptorCodeValue
                , T.[ServedOutsideOfRegularSession]
                , ReasonExitedDescriptor.[Namespace] AS ReasonExitedDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ReasonExitedDescriptor
                    ON [ReasonExitedDescriptor].[DescriptorId] = T.[ReasonExitedDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [EndDate]
                    , [ReasonExitedDescriptorCodeValue]
                    , [ServedOutsideOfRegularSession]
                    , [ReasonExitedDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[EndDate]
                    , S.[ReasonExitedDescriptorCodeValue]
                    , S.[ServedOutsideOfRegularSession]
                    , S.[ReasonExitedDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentProgramAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentProgramAssociationService] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentProgramAssociationService] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramAssociationService] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ServiceDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [PrimaryIndicator] [BIT] NULL
    , [ServiceBeginDate] [DATE] NULL
    , [ServiceEndDate] [DATE] NULL
    , [ServiceDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentProgramAssociationServiceKey] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramAssociationServiceKey] AS TABLE
(
    [tid_StudentProgramAssociationService] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ServiceDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ServiceDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramAssociationService] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramAssociationService]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentProgramAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramAssociationServiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentProgramAssociationService]
            (
                [tid_StudentProgramAssociation]
                , [ServiceDescriptorCodeValue]
                , [PrimaryIndicator]
                , [ServiceBeginDate]
                , [ServiceEndDate]
                , [ServiceDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentProgramAssociation]
                , S.[ServiceDescriptorCodeValue]
                , S.[PrimaryIndicator]
                , S.[ServiceBeginDate]
                , S.[ServiceEndDate]
                , S.[ServiceDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ServiceDescriptor.[CodeValue] AS ServiceDescriptorCodeValue, [Student].[StudentUniqueId], T.[PrimaryIndicator], T.[ServiceBeginDate], T.[ServiceEndDate], ServiceDescriptor.[Namespace] AS ServiceDescriptorNamespace
                , T.[CreateDate]
                , StudentProgramAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentProgramAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentProgramAssociationService] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ServiceDescriptor
                    ON ServiceDescriptor.[DescriptorId] = T.[ServiceDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS StudentProgramAssociation
                    ON StudentProgramAssociation.[BeginDate] = T.[BeginDate]
                    AND StudentProgramAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentProgramAssociation.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND StudentProgramAssociation.[ProgramName] = T.[ProgramName]
                    AND StudentProgramAssociation.[ProgramTypeId] = T.[ProgramTypeId]
                    AND StudentProgramAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentProgramAttendanceEvent] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramAttendanceEvent] AS TABLE
(
    [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AttendanceEventReason] [NVARCHAR](40) NULL
    , [EducationalEnvironmentType] [NVARCHAR](450) NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentProgramAttendanceEventKey] ******/

CREATE TYPE [t_edfi].[udt_StudentProgramAttendanceEventKey] AS TABLE
(
    [tid_StudentProgramAttendanceEvent] [INT] NOT NULL PRIMARY KEY
    , [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramAttendanceEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentProgramAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[EducationOrganizationId]
                , T.[EventDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentProgramAttendanceEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [EducationOrganizationId]
                    , [EventDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[EducationOrganizationId]
                    , S.[EventDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentProgramAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EventDate]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentProgramAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentProgramAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentProgramAttendanceEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentProgramAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentSchoolAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentSchoolAssociation] AS TABLE
(
    [EntryDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [PrimarySchool] [BIT] NULL
    , [SchoolYear] [SMALLINT] NULL
    , [EntryGradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EntryGradeLevelReasonType] [NVARCHAR](450) NULL
    , [EntryTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [RepeatGradeIndicator] [BIT] NULL
    , [ClassOfSchoolYear] [SMALLINT] NULL
    , [SchoolChoiceTransfer] [BIT] NULL
    , [ExitWithdrawDate] [DATE] NULL
    , [ExitWithdrawTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ResidencyStatusDescriptorCodeValue] [NVARCHAR](50) NULL
    , [GraduationPlanTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [EducationOrganizationId] [INT] NULL
    , [GraduationSchoolYear] [SMALLINT] NULL
    , [EmployedWhileEnrolled] [BIT] NULL
    , [GraduationPlanTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [ResidencyStatusDescriptorNamespace] [NVARCHAR](255) NULL
    , [ExitWithdrawTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [EntryTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [EntryGradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentSchoolAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentSchoolAssociationKey] AS TABLE
(
    [tid_StudentSchoolAssociation] [INT] NOT NULL PRIMARY KEY
    , [EntryDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSchoolAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentSchoolAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSchoolAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSchoolAssociation] AS T
            USING
            (
                SELECT T.[EntryDate]
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , T.[PrimarySchool]
                , T.[SchoolYear]
                , EntryGradeLevelDescriptor.[CodeValue] AS EntryGradeLevelDescriptorCodeValue
                , [EntryGradeLevelReasonType].[ShortDescription] AS EntryGradeLevelReasonType
                , EntryTypeDescriptor.[CodeValue] AS EntryTypeDescriptorCodeValue
                , T.[RepeatGradeIndicator]
                , T.[ClassOfSchoolYear]
                , T.[SchoolChoiceTransfer]
                , T.[ExitWithdrawDate]
                , ExitWithdrawTypeDescriptor.[CodeValue] AS ExitWithdrawTypeDescriptorCodeValue
                , ResidencyStatusDescriptor.[CodeValue] AS ResidencyStatusDescriptorCodeValue
                , GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue
                , T.[EducationOrganizationId]
                , T.[GraduationSchoolYear]
                , T.[EmployedWhileEnrolled]
                , GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , ResidencyStatusDescriptor.[Namespace] AS ResidencyStatusDescriptorNamespace
                , ExitWithdrawTypeDescriptor.[Namespace] AS ExitWithdrawTypeDescriptorNamespace
                , EntryTypeDescriptor.[Namespace] AS EntryTypeDescriptorNamespace
                , EntryGradeLevelDescriptor.[Namespace] AS EntryGradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentSchoolAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EntryGradeLevelDescriptor
                    ON [EntryGradeLevelDescriptor].[DescriptorId] = T.[EntryGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[EntryGradeLevelReasonType] AS EntryGradeLevelReasonType
                    ON [EntryGradeLevelReasonType].[EntryGradeLevelReasonTypeId] = T.[EntryGradeLevelReasonTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EntryTypeDescriptor
                    ON [EntryTypeDescriptor].[DescriptorId] = T.[EntryTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ExitWithdrawTypeDescriptor
                    ON [ExitWithdrawTypeDescriptor].[DescriptorId] = T.[ExitWithdrawTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ResidencyStatusDescriptor
                    ON [ResidencyStatusDescriptor].[DescriptorId] = T.[ResidencyStatusDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON [GraduationPlanTypeDescriptor].[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EntryDate]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [PrimarySchool]
                    , [SchoolYear]
                    , [EntryGradeLevelDescriptorCodeValue]
                    , [EntryGradeLevelReasonType]
                    , [EntryTypeDescriptorCodeValue]
                    , [RepeatGradeIndicator]
                    , [ClassOfSchoolYear]
                    , [SchoolChoiceTransfer]
                    , [ExitWithdrawDate]
                    , [ExitWithdrawTypeDescriptorCodeValue]
                    , [ResidencyStatusDescriptorCodeValue]
                    , [GraduationPlanTypeDescriptorCodeValue]
                    , [EducationOrganizationId]
                    , [GraduationSchoolYear]
                    , [EmployedWhileEnrolled]
                    , [GraduationPlanTypeDescriptorNamespace]
                    , [ResidencyStatusDescriptorNamespace]
                    , [ExitWithdrawTypeDescriptorNamespace]
                    , [EntryTypeDescriptorNamespace]
                    , [EntryGradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EntryDate]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[PrimarySchool]
                    , S.[SchoolYear]
                    , S.[EntryGradeLevelDescriptorCodeValue]
                    , S.[EntryGradeLevelReasonType]
                    , S.[EntryTypeDescriptorCodeValue]
                    , S.[RepeatGradeIndicator]
                    , S.[ClassOfSchoolYear]
                    , S.[SchoolChoiceTransfer]
                    , S.[ExitWithdrawDate]
                    , S.[ExitWithdrawTypeDescriptorCodeValue]
                    , S.[ResidencyStatusDescriptorCodeValue]
                    , S.[GraduationPlanTypeDescriptorCodeValue]
                    , S.[EducationOrganizationId]
                    , S.[GraduationSchoolYear]
                    , S.[EmployedWhileEnrolled]
                    , S.[GraduationPlanTypeDescriptorNamespace]
                    , S.[ResidencyStatusDescriptorNamespace]
                    , S.[ExitWithdrawTypeDescriptorNamespace]
                    , S.[EntryTypeDescriptorNamespace]
                    , S.[EntryGradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSchoolAssociation]
                , INSERTED.[EntryDate]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSchoolAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSchoolAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSchoolAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSchoolAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentSchoolAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentSchoolAssociationEducationPlan] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentSchoolAssociationEducationPlan] ******/

CREATE TYPE [t_edfi].[udt_StudentSchoolAssociationEducationPlan] AS TABLE
(
    [EducationPlanType] [NVARCHAR](450) NOT NULL
    , [EntryDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentSchoolAssociationEducationPlanKey] ******/

CREATE TYPE [t_edfi].[udt_StudentSchoolAssociationEducationPlanKey] AS TABLE
(
    [tid_StudentSchoolAssociationEducationPlan] [INT] NOT NULL PRIMARY KEY
    , [EducationPlanType] [NVARCHAR](450) NOT NULL
    , [EntryDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSchoolAssociationEducationPlan] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentSchoolAssociationEducationPlan]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentSchoolAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSchoolAssociationEducationPlanKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentSchoolAssociationEducationPlan]
            (
                [tid_StudentSchoolAssociation]
                , [EducationPlanType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentSchoolAssociation]
                , S.[EducationPlanType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationPlanType.[ShortDescription] AS EducationPlanType, T.[EntryDate], T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , StudentSchoolAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentSchoolAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[edfi].[StudentSchoolAssociationEducationPlan] AS T 
                JOIN [Ods_Snapshot].[edfi].[EducationPlanType] AS EducationPlanType
                    ON EducationPlanType.[EducationPlanTypeId] = T.[EducationPlanTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[StudentSchoolAssociation] AS StudentSchoolAssociation
                    ON StudentSchoolAssociation.[EntryDate] = T.[EntryDate]
                    AND StudentSchoolAssociation.[SchoolId] = T.[SchoolId]
                    AND StudentSchoolAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentSchoolAttendanceEvent] ******/

CREATE TYPE [t_edfi].[udt_StudentSchoolAttendanceEvent] AS TABLE
(
    [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AttendanceEventReason] [NVARCHAR](40) NULL
    , [EducationalEnvironmentType] [NVARCHAR](450) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentSchoolAttendanceEventKey] ******/

CREATE TYPE [t_edfi].[udt_StudentSchoolAttendanceEventKey] AS TABLE
(
    [tid_StudentSchoolAttendanceEvent] [INT] NOT NULL PRIMARY KEY
    , [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSchoolAttendanceEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentSchoolAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSchoolAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSchoolAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[EventDate]
                , T.[SchoolId]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentSchoolAttendanceEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [EventDate]
                    , [SchoolId]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [TermDescriptorNamespace]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[EventDate]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[TermDescriptorNamespace]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSchoolAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[EventDate]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSchoolAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSchoolAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSchoolAttendanceEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentSchoolAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentSectionAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentSectionAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [EndDate] [DATE] NULL
    , [HomeroomIndicator] [BIT] NULL
    , [RepeatIdentifierType] [NVARCHAR](450) NULL
    , [TeacherStudentDataLinkExclusion] [BIT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentSectionAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentSectionAssociationKey] AS TABLE
(
    [tid_StudentSectionAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSectionAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSectionAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[EndDate]
                , T.[HomeroomIndicator]
                , [RepeatIdentifierType].[ShortDescription] AS RepeatIdentifierType
                , T.[TeacherStudentDataLinkExclusion]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentSectionAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[RepeatIdentifierType] AS RepeatIdentifierType
                    ON [RepeatIdentifierType].[RepeatIdentifierTypeId] = T.[RepeatIdentifierTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EndDate]
                    , [HomeroomIndicator]
                    , [RepeatIdentifierType]
                    , [TeacherStudentDataLinkExclusion]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EndDate]
                    , S.[HomeroomIndicator]
                    , S.[RepeatIdentifierType]
                    , S.[TeacherStudentDataLinkExclusion]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSectionAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSectionAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentSectionAttendanceEvent] ******/

CREATE TYPE [t_edfi].[udt_StudentSectionAttendanceEvent] AS TABLE
(
    [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [AttendanceEventReason] [NVARCHAR](40) NULL
    , [EducationalEnvironmentType] [NVARCHAR](450) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentSectionAttendanceEventKey] ******/

CREATE TYPE [t_edfi].[udt_StudentSectionAttendanceEventKey] AS TABLE
(
    [tid_StudentSectionAttendanceEvent] [INT] NOT NULL PRIMARY KEY
    , [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSectionAttendanceEvent] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentSectionAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSectionAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSectionAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[EventDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentSectionAttendanceEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [EventDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [TermDescriptorNamespace]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[EventDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[TermDescriptorNamespace]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSectionAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[EventDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSectionAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSectionAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSectionAttendanceEvent] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentSectionAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentSpecialEducationProgramAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentSpecialEducationProgramAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [IdeaEligibility] [BIT] NULL
    , [SpecialEducationSettingDescriptorCodeValue] [NVARCHAR](50) NULL
    , [SpecialEducationHoursPerWeek] [DECIMAL](5, 2) NULL
    , [SchoolHoursPerWeek] [DECIMAL](5, 2) NULL
    , [MultiplyDisabled] [BIT] NULL
    , [MedicallyFragile] [BIT] NULL
    , [LastEvaluationDate] [DATE] NULL
    , [IEPReviewDate] [DATE] NULL
    , [IEPBeginDate] [DATE] NULL
    , [IEPEndDate] [DATE] NULL
    , [SpecialEducationSettingDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentSpecialEducationProgramAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentSpecialEducationProgramAssociationKey] AS TABLE
(
    [tid_StudentSpecialEducationProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSpecialEducationProgramAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentSpecialEducationProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSpecialEducationProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSpecialEducationProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[IdeaEligibility]
                , SpecialEducationSettingDescriptor.[CodeValue] AS SpecialEducationSettingDescriptorCodeValue
                , T.[SpecialEducationHoursPerWeek]
                , T.[SchoolHoursPerWeek]
                , T.[MultiplyDisabled]
                , T.[MedicallyFragile]
                , T.[LastEvaluationDate]
                , T.[IEPReviewDate]
                , T.[IEPBeginDate]
                , T.[IEPEndDate]
                , SpecialEducationSettingDescriptor.[Namespace] AS SpecialEducationSettingDescriptorNamespace
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentSpecialEducationProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SpecialEducationSettingDescriptor
                    ON [SpecialEducationSettingDescriptor].[DescriptorId] = T.[SpecialEducationSettingDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [IdeaEligibility]
                    , [SpecialEducationSettingDescriptorCodeValue]
                    , [SpecialEducationHoursPerWeek]
                    , [SchoolHoursPerWeek]
                    , [MultiplyDisabled]
                    , [MedicallyFragile]
                    , [LastEvaluationDate]
                    , [IEPReviewDate]
                    , [IEPBeginDate]
                    , [IEPEndDate]
                    , [SpecialEducationSettingDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[IdeaEligibility]
                    , S.[SpecialEducationSettingDescriptorCodeValue]
                    , S.[SpecialEducationHoursPerWeek]
                    , S.[SchoolHoursPerWeek]
                    , S.[MultiplyDisabled]
                    , S.[MedicallyFragile]
                    , S.[LastEvaluationDate]
                    , S.[IEPReviewDate]
                    , S.[IEPBeginDate]
                    , S.[IEPEndDate]
                    , S.[SpecialEducationSettingDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSpecialEducationProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSpecialEducationProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSpecialEducationProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSpecialEducationProgramAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StudentSpecialEducationProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentSpecialEducationProgramAssociationServiceProvider] ******/

CREATE TYPE [t_edfi].[udt_StudentSpecialEducationProgramAssociationServiceProvider] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [PrimaryProvider] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentSpecialEducationProgramAssociationServiceProviderKey] ******/

CREATE TYPE [t_edfi].[udt_StudentSpecialEducationProgramAssociationServiceProviderKey] AS TABLE
(
    [tid_StudentSpecialEducationProgramAssociationServiceProvider] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentSpecialEducationProgramAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSpecialEducationProgramAssociationServiceProviderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider]
            (
                [tid_StudentSpecialEducationProgramAssociation]
                , [StaffUniqueId]
                , [PrimaryProvider]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentSpecialEducationProgramAssociation]
                , S.[StaffUniqueId]
                , S.[PrimaryProvider]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, [Staff].[StaffUniqueId], [Student].[StudentUniqueId], T.[PrimaryProvider]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[edfi].[StudentSpecialEducationProgramAssociationServiceProvider] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[BeginDate] = S.[BeginDate]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND T.[ProgramName] = S.[ProgramName]
                AND T.[ProgramType] = S.[ProgramType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_StudentTitleIPartAProgramAssociation] ******/

CREATE TYPE [t_edfi].[udt_StudentTitleIPartAProgramAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [TitleIPartAParticipantType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_StudentTitleIPartAProgramAssociationKey] ******/

CREATE TYPE [t_edfi].[udt_StudentTitleIPartAProgramAssociationKey] AS TABLE
(
    [tid_StudentTitleIPartAProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramEducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentTitleIPartAProgramAssociation] ******/

CREATE PROCEDURE [t_edfi].[usp_dbStudentTitleIPartAProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentTitleIPartAProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentTitleIPartAProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , [TitleIPartAParticipantType].[ShortDescription] AS TitleIPartAParticipantType
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[StudentTitleIPartAProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[TitleIPartAParticipantType] AS TitleIPartAParticipantType
                    ON [TitleIPartAParticipantType].[TitleIPartAParticipantTypeId] = T.[TitleIPartAParticipantTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [TitleIPartAParticipantType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[TitleIPartAParticipantType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentTitleIPartAProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentTitleIPartAProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentTitleIPartAProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentTitleIPartAProgramAssociation] AS T
            JOIN [Ods_Snapshot].[edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[StudentTitleIPartAProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_TeachingCredentialDescriptor] ******/

CREATE TYPE [t_edfi].[udt_TeachingCredentialDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [TeachingCredentialType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_TeachingCredentialDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_TeachingCredentialDescriptorKey] AS TABLE
(
    [tid_TeachingCredentialDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbTeachingCredentialDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbTeachingCredentialDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_TeachingCredentialDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[TeachingCredentialDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TeachingCredentialType].[ShortDescription] AS TeachingCredentialType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[TeachingCredentialDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TeachingCredentialDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[TeachingCredentialType] AS TeachingCredentialType
                    ON [TeachingCredentialType].[TeachingCredentialTypeId] = T.[TeachingCredentialTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TeachingCredentialType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TeachingCredentialType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeachingCredentialDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeachingCredentialDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeachingCredentialDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[TeachingCredentialDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[TeachingCredentialDescriptor] AS S
                ON P.[DescriptorId] = S.[TeachingCredentialDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_TermDescriptor] ******/

CREATE TYPE [t_edfi].[udt_TermDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [TermType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_TermDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_TermDescriptorKey] AS TABLE
(
    [tid_TermDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbTermDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbTermDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_TermDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[TermDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TermType].[ShortDescription] AS TermType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[TermDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[TermType] AS TermType
                    ON [TermType].[TermTypeId] = T.[TermTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TermType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TermType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TermDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[TermDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TermDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TermDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[TermDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[TermDescriptor] AS S
                ON P.[DescriptorId] = S.[TermDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_edfi].[udt_WeaponDescriptor] ******/

CREATE TYPE [t_edfi].[udt_WeaponDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [WeaponType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_edfi].[udt_WeaponDescriptorKey] ******/

CREATE TYPE [t_edfi].[udt_WeaponDescriptorKey] AS TABLE
(
    [tid_WeaponDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_edfi].[usp_dbWeaponDescriptor] ******/

CREATE PROCEDURE [t_edfi].[usp_dbWeaponDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_WeaponDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[WeaponDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [WeaponType].[ShortDescription] AS WeaponType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[edfi].[WeaponDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[WeaponDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[WeaponType] AS WeaponType
                    ON [WeaponType].[WeaponTypeId] = T.[WeaponTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [WeaponType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[WeaponType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_WeaponDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[WeaponDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_WeaponDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_WeaponDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[WeaponDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[edfi].[WeaponDescriptor] AS S
                ON P.[DescriptorId] = S.[WeaponDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
IF OBJECT_ID('[tods].[usp_CopySnapshot]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_CopySnapshot];
GO

/****** PROCEDURE: [tods].[usp_CopySnapshot] ******/

CREATE PROCEDURE [tods].[usp_CopySnapshot]
    @pExistingSnapshotCode NVARCHAR(50)
    , @pNewSnapshotCode NVARCHAR(50)
    , @pSnapshotName NVARCHAR(1024)
    , @pDescription NVARCHAR(1024) = NULL
    , @pSnapshotDate DATE = NULL
    , @pBeginDate DATE = NULL
    , @pEndDate DATE = NULL
    , @Id UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SnapshotId INT;
    DECLARE @ExistingSnapshotId INT;
    DECLARE @ExistingLoadStartTime DATETIME;
    DECLARE @ExistingLoadEndTime DATETIME;
    DECLARE @Message NVARCHAR(2048);

    SELECT @pSnapshotDate = COALESCE(@pSnapshotDate, @pBeginDate, GETDATE());
    SELECT @pBeginDate = COALESCE(@pBeginDate, @pSnapshotDate);

    BEGIN TRANSACTION
        -- ERROR CONDITIONS

        -- existing snapshot code does not exist
        IF NOT EXISTS
        (
            SELECT [Code]
            FROM [tods].[SnapshotCode]
            WHERE [Code] = @pExistingSnapshotCode
            GROUP BY [Code]
        )
            THROW 50001, N'existing snapshot code does not exist', 1;

        -- new snapshot code includes invalid characters
        IF (@pNewSnapshotCode LIKE '%[^-A-Za-z0-9_()]%') BEGIN
            SET @Message = FORMATMESSAGE(50002, @pNewSnapshotCode);
            THROW 50002, @Message, 1;
        END

        -- new snapshot code matches existing one in tods.snapshotcode table
        IF @pNewSnapshotCode =
        (
            SELECT [Code]
            FROM [tods].[SnapshotCode]
            WHERE [Code] = @pNewSnapshotCode
            GROUP BY [Code]
        ) BEGIN
            SET @Message = FORMATMESSAGE(50003, @pNewSnapshotCode);
            THROW 50003, @Message, 1;
        END

        -- snapshot name matches existing one in tods.snapshot table
        IF EXISTS
        (
            SELECT [SnapshotName]
            FROM [tods].[Snapshot]
            WHERE [SnapshotName] = @pSnapshotName
            GROUP BY [SnapshotName]
        ) BEGIN
            SET @Message = FORMATMESSAGE(50003, @pSnapshotName);
            THROW 50004, @Message, 1;
        END

        -- snapshot date is before begin date
        IF @pSnapshotDate < @pBeginDate BEGIN
            SET @Message = FORMATMESSAGE(50005, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50005, @Message, 1;
        END;

        -- snapshot date is on or after end date
        IF @pSnapshotDate >= @pEndDate BEGIN
            SET @Message = FORMATMESSAGE(50006, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
            THROW 50006, @Message, 1;
        END;

        -- begin date is in the future
        IF @pBeginDate > GETDATE() BEGIN
            SET @Message = FORMATMESSAGE(50007, CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50007, @Message, 1;
        END;

         -- begin date overlaps another snapshot
        IF EXISTS
        (
            SELECT [SnapshotId]
            FROM [tods].[Snapshot]
            WHERE [EffectiveBeginDate] <= @pBeginDate
                AND @pBeginDate < COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
        ) BEGIN
            SET @Message = FORMATMESSAGE(50008, CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50008, @Message, 1;
        END;

        -- end date is before begin date
        IF @pBeginDate >= @pEndDate BEGIN
            SET @Message = FORMATMESSAGE(50009, CAST(@pEndDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50009, @Message, 1;
        END;

        -- end date overlaps other snapshot
        IF EXISTS
        (
            SELECT [SnapshotId]
            FROM [tods].[Snapshot]
            WHERE @pEndDate > [EffectiveBeginDate]
                AND (
                       @pEndDate <= COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                       OR
                       (@pBegindate < [EffectiveBeginDate]
                        AND [EffectiveEndDate] IS NULL AND @pEndDate IS NULL)
                    )
        ) BEGIN
            SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
            THROW 50010, @Message, 1;
        END;

        IF @pEndDate IS NULL AND EXISTS
        (
            SELECT [SnapshotId]
            FROM [tods].[Snapshot]
            WHERE [EffectiveBeginDate] > @pBeginDate
        )
        SET @pEndDate =
        (
            SELECT MIN([EffectiveBeginDate])
            FROM [tods].[Snapshot]
            WHERE [EffectiveBeginDate] > @pBeginDate
        );

        UPDATE [tods].[Snapshot]
        SET [EffectiveEndDate] = @pBeginDate
        WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        SET @ExistingSnapshotId =
        (
             SELECT [SnapshotId]
             FROM [tods].[SnapshotCode]
             WHERE [Code] = @pExistingSnapshotCode
        );

        SET @ExistingLoadStartTime =
        (
            SELECT [LoadStartTime]
            FROM [tods].[Snapshot]
            WHERE SnapshotId = @ExistingSnapshotId
        );

        SET @ExistingLoadEndTime =
        (
             SELECT [LoadEndTime]
             FROM [tods].[Snapshot]
             WHERE SnapshotId = @ExistingSnapshotId
        );

        INSERT INTO [tods].[Snapshot]
        (
            [SnapshotDate]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [SnapshotName]
            , [Description]
            , [IsLockedForProcessing]
            , [IsLocked]
            , [Status]
            , [LoadStartTime]
            , [LoadEndTime]
        )
        VALUES
        (
            @pSnapshotDate
            , @pBeginDate
            , @pEndDate
            , @pSnapshotName
            , @pDescription
            , 0
            , 0
            , 'ACTIVE'
            , @ExistingLoadStartTime
            , @ExistingLoadEndTime
        );

        SET @SnapshotId = SCOPE_IDENTITY();

        SET @Id =
        (
             SELECT [Id]
             FROM [tods].[Snapshot]
             WHERE [SnapshotId] = @SnapshotId
        );

        INSERT INTO [tods].[SnapshotCode]
        (
            [SnapshotId]
            , [Code]
        )
        VALUES
        (
            @SnapshotId
            , @pNewSnapshotCode
        );

        UPDATE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AcademicSubjectDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AcademicSubjectDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
        WHERE [tid_AcademicSubjectDescriptor] IN
        (
            SELECT [tid_AcademicSubjectDescriptor]
            FROM [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AcademicWeekSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AcademicWeekSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AcademicWeek]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AcademicWeek]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AcademicWeekSnapshotRecord]
        WHERE [tid_AcademicWeek] IN
        (
            SELECT [tid_AcademicWeek]
            FROM [t_edfi].[AcademicWeekSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AccommodationDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AccommodationDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AccommodationDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AccommodationDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AccommodationDescriptorSnapshotRecord]
        WHERE [tid_AccommodationDescriptor] IN
        (
            SELECT [tid_AccommodationDescriptor]
            FROM [t_edfi].[AccommodationDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AccountSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AccountSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Account]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Account]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AccountSnapshotRecord]
        WHERE [tid_Account] IN
        (
            SELECT [tid_Account]
            FROM [t_edfi].[AccountSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AccountabilityRatingSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AccountabilityRatingSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AccountabilityRating]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AccountabilityRating]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AccountabilityRatingSnapshotRecord]
        WHERE [tid_AccountabilityRating] IN
        (
            SELECT [tid_AccountabilityRating]
            FROM [t_edfi].[AccountabilityRatingSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AccountCodeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AccountCodeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AccountCodeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AccountCodeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AccountCodeDescriptorSnapshotRecord]
        WHERE [tid_AccountCodeDescriptor] IN
        (
            SELECT [tid_AccountCodeDescriptor]
            FROM [t_edfi].[AccountCodeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AchievementCategoryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AchievementCategoryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
        WHERE [tid_AchievementCategoryDescriptor] IN
        (
            SELECT [tid_AchievementCategoryDescriptor]
            FROM [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ActualSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ActualSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Actual]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Actual]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ActualSnapshotRecord]
        WHERE [tid_Actual] IN
        (
            SELECT [tid_Actual]
            FROM [t_edfi].[ActualSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AdministrativeFundingControlDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AdministrativeFundingControlDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
        WHERE [tid_AdministrativeFundingControlDescriptor] IN
        (
            SELECT [tid_AdministrativeFundingControlDescriptor]
            FROM [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AssessmentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AssessmentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Assessment]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Assessment]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AssessmentSnapshotRecord]
        WHERE [tid_Assessment] IN
        (
            SELECT [tid_Assessment]
            FROM [t_edfi].[AssessmentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AssessmentCategoryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AssessmentCategoryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
        WHERE [tid_AssessmentCategoryDescriptor] IN
        (
            SELECT [tid_AssessmentCategoryDescriptor]
            FROM [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AssessmentFamilySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AssessmentFamilySnapshotRecord]
        (
            [SnapshotId]
            , [tid_AssessmentFamily]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AssessmentFamily]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AssessmentFamilySnapshotRecord]
        WHERE [tid_AssessmentFamily] IN
        (
            SELECT [tid_AssessmentFamily]
            FROM [t_edfi].[AssessmentFamilySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AssessmentIdentificationSystemDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AssessmentIdentificationSystemDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
        WHERE [tid_AssessmentIdentificationSystemDescriptor] IN
        (
            SELECT [tid_AssessmentIdentificationSystemDescriptor]
            FROM [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AssessmentItemSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AssessmentItemSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AssessmentItem]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AssessmentItem]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AssessmentItemSnapshotRecord]
        WHERE [tid_AssessmentItem] IN
        (
            SELECT [tid_AssessmentItem]
            FROM [t_edfi].[AssessmentItemSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AssessmentPeriodDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AssessmentPeriodDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
        WHERE [tid_AssessmentPeriodDescriptor] IN
        (
            SELECT [tid_AssessmentPeriodDescriptor]
            FROM [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AttendanceEventCategoryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AttendanceEventCategoryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
        WHERE [tid_AttendanceEventCategoryDescriptor] IN
        (
            SELECT [tid_AttendanceEventCategoryDescriptor]
            FROM [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[BehaviorDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[BehaviorDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_BehaviorDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_BehaviorDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[BehaviorDescriptorSnapshotRecord]
        WHERE [tid_BehaviorDescriptor] IN
        (
            SELECT [tid_BehaviorDescriptor]
            FROM [t_edfi].[BehaviorDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[BellScheduleSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[BellScheduleSnapshotRecord]
        (
            [SnapshotId]
            , [tid_BellSchedule]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_BellSchedule]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[BellScheduleSnapshotRecord]
        WHERE [tid_BellSchedule] IN
        (
            SELECT [tid_BellSchedule]
            FROM [t_edfi].[BellScheduleSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[BudgetSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[BudgetSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Budget]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Budget]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[BudgetSnapshotRecord]
        WHERE [tid_Budget] IN
        (
            SELECT [tid_Budget]
            FROM [t_edfi].[BudgetSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CalendarDateSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CalendarDateSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CalendarDate]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CalendarDate]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CalendarDateSnapshotRecord]
        WHERE [tid_CalendarDate] IN
        (
            SELECT [tid_CalendarDate]
            FROM [t_edfi].[CalendarDateSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CalendarEventDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CalendarEventDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CalendarEventDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CalendarEventDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CalendarEventDescriptorSnapshotRecord]
        WHERE [tid_CalendarEventDescriptor] IN
        (
            SELECT [tid_CalendarEventDescriptor]
            FROM [t_edfi].[CalendarEventDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ClassPeriodSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ClassPeriodSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ClassPeriod]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ClassPeriod]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ClassPeriodSnapshotRecord]
        WHERE [tid_ClassPeriod] IN
        (
            SELECT [tid_ClassPeriod]
            FROM [t_edfi].[ClassPeriodSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ClassroomPositionDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ClassroomPositionDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
        WHERE [tid_ClassroomPositionDescriptor] IN
        (
            SELECT [tid_ClassroomPositionDescriptor]
            FROM [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CohortSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CohortSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Cohort]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Cohort]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CohortSnapshotRecord]
        WHERE [tid_Cohort] IN
        (
            SELECT [tid_Cohort]
            FROM [t_edfi].[CohortSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CompetencyLevelDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CompetencyLevelDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
        WHERE [tid_CompetencyLevelDescriptor] IN
        (
            SELECT [tid_CompetencyLevelDescriptor]
            FROM [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CompetencyObjectiveSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CompetencyObjectiveSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CompetencyObjective]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CompetencyObjective]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CompetencyObjectiveSnapshotRecord]
        WHERE [tid_CompetencyObjective] IN
        (
            SELECT [tid_CompetencyObjective]
            FROM [t_edfi].[CompetencyObjectiveSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ContinuationOfServicesReasonDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ContinuationOfServicesReasonDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
        WHERE [tid_ContinuationOfServicesReasonDescriptor] IN
        (
            SELECT [tid_ContinuationOfServicesReasonDescriptor]
            FROM [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ContractedStaffSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ContractedStaffSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ContractedStaff]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ContractedStaff]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ContractedStaffSnapshotRecord]
        WHERE [tid_ContractedStaff] IN
        (
            SELECT [tid_ContractedStaff]
            FROM [t_edfi].[ContractedStaffSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CountryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CountryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CountryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CountryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CountryDescriptorSnapshotRecord]
        WHERE [tid_CountryDescriptor] IN
        (
            SELECT [tid_CountryDescriptor]
            FROM [t_edfi].[CountryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CourseSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CourseSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Course]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Course]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CourseSnapshotRecord]
        WHERE [tid_Course] IN
        (
            SELECT [tid_Course]
            FROM [t_edfi].[CourseSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseIdentificationSystemDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseIdentificationSystemDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
        WHERE [tid_CourseIdentificationSystemDescriptor] IN
        (
            SELECT [tid_CourseIdentificationSystemDescriptor]
            FROM [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CourseOfferingSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CourseOfferingSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseOffering]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseOffering]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CourseOfferingSnapshotRecord]
        WHERE [tid_CourseOffering] IN
        (
            SELECT [tid_CourseOffering]
            FROM [t_edfi].[CourseOfferingSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CourseTranscriptSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CourseTranscriptSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseTranscript]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseTranscript]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CourseTranscriptSnapshotRecord]
        WHERE [tid_CourseTranscript] IN
        (
            SELECT [tid_CourseTranscript]
            FROM [t_edfi].[CourseTranscriptSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CredentialSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CredentialSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Credential]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Credential]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CredentialSnapshotRecord]
        WHERE [tid_Credential] IN
        (
            SELECT [tid_Credential]
            FROM [t_edfi].[CredentialSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CredentialFieldDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CredentialFieldDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
        WHERE [tid_CredentialFieldDescriptor] IN
        (
            SELECT [tid_CredentialFieldDescriptor]
            FROM [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[DiagnosisDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[DiagnosisDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_DiagnosisDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_DiagnosisDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[DiagnosisDescriptorSnapshotRecord]
        WHERE [tid_DiagnosisDescriptor] IN
        (
            SELECT [tid_DiagnosisDescriptor]
            FROM [t_edfi].[DiagnosisDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[DisabilityDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[DisabilityDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_DisabilityDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_DisabilityDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[DisabilityDescriptorSnapshotRecord]
        WHERE [tid_DisabilityDescriptor] IN
        (
            SELECT [tid_DisabilityDescriptor]
            FROM [t_edfi].[DisabilityDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[DisciplineActionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[DisciplineActionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_DisciplineAction]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_DisciplineAction]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[DisciplineActionSnapshotRecord]
        WHERE [tid_DisciplineAction] IN
        (
            SELECT [tid_DisciplineAction]
            FROM [t_edfi].[DisciplineActionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[DisciplineDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[DisciplineDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_DisciplineDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_DisciplineDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[DisciplineDescriptorSnapshotRecord]
        WHERE [tid_DisciplineDescriptor] IN
        (
            SELECT [tid_DisciplineDescriptor]
            FROM [t_edfi].[DisciplineDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[DisciplineIncidentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[DisciplineIncidentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_DisciplineIncident]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_DisciplineIncident]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[DisciplineIncidentSnapshotRecord]
        WHERE [tid_DisciplineIncident] IN
        (
            SELECT [tid_DisciplineIncident]
            FROM [t_edfi].[DisciplineIncidentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationContentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationContentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationContent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationContent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationContentSnapshotRecord]
        WHERE [tid_EducationContent] IN
        (
            SELECT [tid_EducationContent]
            FROM [t_edfi].[EducationContentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationOrganizationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationOrganizationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganization]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganization]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationOrganizationSnapshotRecord]
        WHERE [tid_EducationOrganization] IN
        (
            SELECT [tid_EducationOrganization]
            FROM [t_edfi].[EducationOrganizationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationIdentificationSystemDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationIdentificationSystemDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
        WHERE [tid_EducationOrganizationIdentificationSystemDescriptor] IN
        (
            SELECT [tid_EducationOrganizationIdentificationSystemDescriptor]
            FROM [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationInterventionPrescriptionAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationInterventionPrescriptionAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
        WHERE [tid_EducationOrganizationInterventionPrescriptionAssociation] IN
        (
            SELECT [tid_EducationOrganizationInterventionPrescriptionAssociation]
            FROM [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationNetwork]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationNetwork]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
        WHERE [tid_EducationOrganizationNetwork] IN
        (
            SELECT [tid_EducationOrganizationNetwork]
            FROM [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationNetworkAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationNetworkAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
        WHERE [tid_EducationOrganizationNetworkAssociation] IN
        (
            SELECT [tid_EducationOrganizationNetworkAssociation]
            FROM [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationPeerAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationPeerAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
        WHERE [tid_EducationOrganizationPeerAssociation] IN
        (
            SELECT [tid_EducationOrganizationPeerAssociation]
            FROM [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EducationServiceCenterSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EducationServiceCenterSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationServiceCenter]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationServiceCenter]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EducationServiceCenterSnapshotRecord]
        WHERE [tid_EducationServiceCenter] IN
        (
            SELECT [tid_EducationServiceCenter]
            FROM [t_edfi].[EducationServiceCenterSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EmploymentStatusDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EmploymentStatusDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
        WHERE [tid_EmploymentStatusDescriptor] IN
        (
            SELECT [tid_EmploymentStatusDescriptor]
            FROM [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[EntryTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[EntryTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EntryTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EntryTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[EntryTypeDescriptorSnapshotRecord]
        WHERE [tid_EntryTypeDescriptor] IN
        (
            SELECT [tid_EntryTypeDescriptor]
            FROM [t_edfi].[EntryTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ExitWithdrawTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ExitWithdrawTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
        WHERE [tid_ExitWithdrawTypeDescriptor] IN
        (
            SELECT [tid_ExitWithdrawTypeDescriptor]
            FROM [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_FederalLocaleCodeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_FederalLocaleCodeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
        WHERE [tid_FederalLocaleCodeDescriptor] IN
        (
            SELECT [tid_FederalLocaleCodeDescriptor]
            FROM [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[FeederSchoolAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[FeederSchoolAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_FeederSchoolAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_FeederSchoolAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[FeederSchoolAssociationSnapshotRecord]
        WHERE [tid_FeederSchoolAssociation] IN
        (
            SELECT [tid_FeederSchoolAssociation]
            FROM [t_edfi].[FeederSchoolAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[GradeSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[GradeSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Grade]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Grade]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[GradeSnapshotRecord]
        WHERE [tid_Grade] IN
        (
            SELECT [tid_Grade]
            FROM [t_edfi].[GradeSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[GradebookEntrySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[GradebookEntrySnapshotRecord]
        (
            [SnapshotId]
            , [tid_GradebookEntry]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_GradebookEntry]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[GradebookEntrySnapshotRecord]
        WHERE [tid_GradebookEntry] IN
        (
            SELECT [tid_GradebookEntry]
            FROM [t_edfi].[GradebookEntrySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[GradeLevelDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[GradeLevelDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_GradeLevelDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_GradeLevelDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[GradeLevelDescriptorSnapshotRecord]
        WHERE [tid_GradeLevelDescriptor] IN
        (
            SELECT [tid_GradeLevelDescriptor]
            FROM [t_edfi].[GradeLevelDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[GradingPeriodSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[GradingPeriodSnapshotRecord]
        (
            [SnapshotId]
            , [tid_GradingPeriod]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_GradingPeriod]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[GradingPeriodSnapshotRecord]
        WHERE [tid_GradingPeriod] IN
        (
            SELECT [tid_GradingPeriod]
            FROM [t_edfi].[GradingPeriodSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_GradingPeriodDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_GradingPeriodDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
        WHERE [tid_GradingPeriodDescriptor] IN
        (
            SELECT [tid_GradingPeriodDescriptor]
            FROM [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[GraduationPlanSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[GraduationPlanSnapshotRecord]
        (
            [SnapshotId]
            , [tid_GraduationPlan]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_GraduationPlan]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[GraduationPlanSnapshotRecord]
        WHERE [tid_GraduationPlan] IN
        (
            SELECT [tid_GraduationPlan]
            FROM [t_edfi].[GraduationPlanSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_GraduationPlanTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_GraduationPlanTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
        WHERE [tid_GraduationPlanTypeDescriptor] IN
        (
            SELECT [tid_GraduationPlanTypeDescriptor]
            FROM [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[InterventionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[InterventionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Intervention]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Intervention]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[InterventionSnapshotRecord]
        WHERE [tid_Intervention] IN
        (
            SELECT [tid_Intervention]
            FROM [t_edfi].[InterventionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[InterventionPrescriptionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[InterventionPrescriptionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_InterventionPrescription]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_InterventionPrescription]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[InterventionPrescriptionSnapshotRecord]
        WHERE [tid_InterventionPrescription] IN
        (
            SELECT [tid_InterventionPrescription]
            FROM [t_edfi].[InterventionPrescriptionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[InterventionStudySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[InterventionStudySnapshotRecord]
        (
            [SnapshotId]
            , [tid_InterventionStudy]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_InterventionStudy]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[InterventionStudySnapshotRecord]
        WHERE [tid_InterventionStudy] IN
        (
            SELECT [tid_InterventionStudy]
            FROM [t_edfi].[InterventionStudySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LanguageDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LanguageDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LanguageDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LanguageDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LanguageDescriptorSnapshotRecord]
        WHERE [tid_LanguageDescriptor] IN
        (
            SELECT [tid_LanguageDescriptor]
            FROM [t_edfi].[LanguageDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LearningObjectiveSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LearningObjectiveSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LearningObjective]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LearningObjective]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LearningObjectiveSnapshotRecord]
        WHERE [tid_LearningObjective] IN
        (
            SELECT [tid_LearningObjective]
            FROM [t_edfi].[LearningObjectiveSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LearningStandardSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LearningStandardSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LearningStandard]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LearningStandard]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LearningStandardSnapshotRecord]
        WHERE [tid_LearningStandard] IN
        (
            SELECT [tid_LearningStandard]
            FROM [t_edfi].[LearningStandardSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LeaveEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LeaveEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LeaveEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LeaveEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LeaveEventSnapshotRecord]
        WHERE [tid_LeaveEvent] IN
        (
            SELECT [tid_LeaveEvent]
            FROM [t_edfi].[LeaveEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LevelDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LevelDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LevelDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LevelDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LevelDescriptorSnapshotRecord]
        WHERE [tid_LevelDescriptor] IN
        (
            SELECT [tid_LevelDescriptor]
            FROM [t_edfi].[LevelDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LevelOfEducationDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LevelOfEducationDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
        WHERE [tid_LevelOfEducationDescriptor] IN
        (
            SELECT [tid_LevelOfEducationDescriptor]
            FROM [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LimitedEnglishProficiencyDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LimitedEnglishProficiencyDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
        WHERE [tid_LimitedEnglishProficiencyDescriptor] IN
        (
            SELECT [tid_LimitedEnglishProficiencyDescriptor]
            FROM [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LocalEducationAgencySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LocalEducationAgencySnapshotRecord]
        (
            [SnapshotId]
            , [tid_LocalEducationAgency]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LocalEducationAgency]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LocalEducationAgencySnapshotRecord]
        WHERE [tid_LocalEducationAgency] IN
        (
            SELECT [tid_LocalEducationAgency]
            FROM [t_edfi].[LocalEducationAgencySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[LocationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[LocationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Location]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Location]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[LocationSnapshotRecord]
        WHERE [tid_Location] IN
        (
            SELECT [tid_Location]
            FROM [t_edfi].[LocationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ObjectiveAssessmentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ObjectiveAssessmentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ObjectiveAssessment]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ObjectiveAssessment]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ObjectiveAssessmentSnapshotRecord]
        WHERE [tid_ObjectiveAssessment] IN
        (
            SELECT [tid_ObjectiveAssessment]
            FROM [t_edfi].[ObjectiveAssessmentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[OpenStaffPositionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[OpenStaffPositionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_OpenStaffPosition]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_OpenStaffPosition]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[OpenStaffPositionSnapshotRecord]
        WHERE [tid_OpenStaffPosition] IN
        (
            SELECT [tid_OpenStaffPosition]
            FROM [t_edfi].[OpenStaffPositionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ParentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ParentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Parent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Parent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ParentSnapshotRecord]
        WHERE [tid_Parent] IN
        (
            SELECT [tid_Parent]
            FROM [t_edfi].[ParentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[PayrollSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[PayrollSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Payroll]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Payroll]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[PayrollSnapshotRecord]
        WHERE [tid_Payroll] IN
        (
            SELECT [tid_Payroll]
            FROM [t_edfi].[PayrollSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PerformanceLevelDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PerformanceLevelDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
        WHERE [tid_PerformanceLevelDescriptor] IN
        (
            SELECT [tid_PerformanceLevelDescriptor]
            FROM [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[PostSecondaryEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[PostSecondaryEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PostSecondaryEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PostSecondaryEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[PostSecondaryEventSnapshotRecord]
        WHERE [tid_PostSecondaryEvent] IN
        (
            SELECT [tid_PostSecondaryEvent]
            FROM [t_edfi].[PostSecondaryEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ProgramSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ProgramSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Program]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Program]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ProgramSnapshotRecord]
        WHERE [tid_Program] IN
        (
            SELECT [tid_Program]
            FROM [t_edfi].[ProgramSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ProgramAssignmentDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ProgramAssignmentDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
        WHERE [tid_ProgramAssignmentDescriptor] IN
        (
            SELECT [tid_ProgramAssignmentDescriptor]
            FROM [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ProgramCharacteristicDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ProgramCharacteristicDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
        WHERE [tid_ProgramCharacteristicDescriptor] IN
        (
            SELECT [tid_ProgramCharacteristicDescriptor]
            FROM [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ReasonExitedDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ReasonExitedDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
        WHERE [tid_ReasonExitedDescriptor] IN
        (
            SELECT [tid_ReasonExitedDescriptor]
            FROM [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ReportCardSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ReportCardSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ReportCard]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ReportCard]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ReportCardSnapshotRecord]
        WHERE [tid_ReportCard] IN
        (
            SELECT [tid_ReportCard]
            FROM [t_edfi].[ReportCardSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ReporterDescriptionDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ReporterDescriptionDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
        WHERE [tid_ReporterDescriptionDescriptor] IN
        (
            SELECT [tid_ReporterDescriptionDescriptor]
            FROM [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ResidencyStatusDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ResidencyStatusDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
        WHERE [tid_ResidencyStatusDescriptor] IN
        (
            SELECT [tid_ResidencyStatusDescriptor]
            FROM [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ResponsibilityDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ResponsibilityDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
        WHERE [tid_ResponsibilityDescriptor] IN
        (
            SELECT [tid_ResponsibilityDescriptor]
            FROM [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[RestraintEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[RestraintEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_RestraintEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_RestraintEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[RestraintEventSnapshotRecord]
        WHERE [tid_RestraintEvent] IN
        (
            SELECT [tid_RestraintEvent]
            FROM [t_edfi].[RestraintEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SchoolSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SchoolSnapshotRecord]
        (
            [SnapshotId]
            , [tid_School]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_School]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SchoolSnapshotRecord]
        WHERE [tid_School] IN
        (
            SELECT [tid_School]
            FROM [t_edfi].[SchoolSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SchoolFoodServicesEligibilityDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SchoolFoodServicesEligibilityDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
        WHERE [tid_SchoolFoodServicesEligibilityDescriptor] IN
        (
            SELECT [tid_SchoolFoodServicesEligibilityDescriptor]
            FROM [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SchoolYearTypeSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SchoolYearTypeSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SchoolYearType]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SchoolYearType]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SchoolYearTypeSnapshotRecord]
        WHERE [tid_SchoolYearType] IN
        (
            SELECT [tid_SchoolYearType]
            FROM [t_edfi].[SchoolYearTypeSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SectionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SectionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Section]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Section]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SectionSnapshotRecord]
        WHERE [tid_Section] IN
        (
            SELECT [tid_Section]
            FROM [t_edfi].[SectionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionAttendanceTakenEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionAttendanceTakenEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
        WHERE [tid_SectionAttendanceTakenEvent] IN
        (
            SELECT [tid_SectionAttendanceTakenEvent]
            FROM [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionCharacteristicDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionCharacteristicDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
        WHERE [tid_SectionCharacteristicDescriptor] IN
        (
            SELECT [tid_SectionCharacteristicDescriptor]
            FROM [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SeparationReasonDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SeparationReasonDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
        WHERE [tid_SeparationReasonDescriptor] IN
        (
            SELECT [tid_SeparationReasonDescriptor]
            FROM [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[ServiceDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[ServiceDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ServiceDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ServiceDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[ServiceDescriptorSnapshotRecord]
        WHERE [tid_ServiceDescriptor] IN
        (
            SELECT [tid_ServiceDescriptor]
            FROM [t_edfi].[ServiceDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SessionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SessionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Session]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Session]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SessionSnapshotRecord]
        WHERE [tid_Session] IN
        (
            SELECT [tid_Session]
            FROM [t_edfi].[SessionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SpecialEducationSettingDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SpecialEducationSettingDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
        WHERE [tid_SpecialEducationSettingDescriptor] IN
        (
            SELECT [tid_SpecialEducationSettingDescriptor]
            FROM [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Staff]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Staff]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffSnapshotRecord]
        WHERE [tid_Staff] IN
        (
            SELECT [tid_Staff]
            FROM [t_edfi].[StaffSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffClassificationDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffClassificationDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
        WHERE [tid_StaffClassificationDescriptor] IN
        (
            SELECT [tid_StaffClassificationDescriptor]
            FROM [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffCohortAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffCohortAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffCohortAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffCohortAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffCohortAssociationSnapshotRecord]
        WHERE [tid_StaffCohortAssociation] IN
        (
            SELECT [tid_StaffCohortAssociation]
            FROM [t_edfi].[StaffCohortAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffEducationOrganizationAssignmentAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffEducationOrganizationAssignmentAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
        WHERE [tid_StaffEducationOrganizationAssignmentAssociation] IN
        (
            SELECT [tid_StaffEducationOrganizationAssignmentAssociation]
            FROM [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffEducationOrganizationEmploymentAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffEducationOrganizationEmploymentAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
        WHERE [tid_StaffEducationOrganizationEmploymentAssociation] IN
        (
            SELECT [tid_StaffEducationOrganizationEmploymentAssociation]
            FROM [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffIdentificationSystemDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffIdentificationSystemDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
        WHERE [tid_StaffIdentificationSystemDescriptor] IN
        (
            SELECT [tid_StaffIdentificationSystemDescriptor]
            FROM [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffProgramAssociationSnapshotRecord]
        WHERE [tid_StaffProgramAssociation] IN
        (
            SELECT [tid_StaffProgramAssociation]
            FROM [t_edfi].[StaffProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffSchoolAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffSchoolAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffSchoolAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffSchoolAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffSchoolAssociationSnapshotRecord]
        WHERE [tid_StaffSchoolAssociation] IN
        (
            SELECT [tid_StaffSchoolAssociation]
            FROM [t_edfi].[StaffSchoolAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StaffSectionAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StaffSectionAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffSectionAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffSectionAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StaffSectionAssociationSnapshotRecord]
        WHERE [tid_StaffSectionAssociation] IN
        (
            SELECT [tid_StaffSectionAssociation]
            FROM [t_edfi].[StaffSectionAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StateEducationAgencySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StateEducationAgencySnapshotRecord]
        (
            [SnapshotId]
            , [tid_StateEducationAgency]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StateEducationAgency]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StateEducationAgencySnapshotRecord]
        WHERE [tid_StateEducationAgency] IN
        (
            SELECT [tid_StateEducationAgency]
            FROM [t_edfi].[StateEducationAgencySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Student]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Student]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentSnapshotRecord]
        WHERE [tid_Student] IN
        (
            SELECT [tid_Student]
            FROM [t_edfi].[StudentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentAcademicRecordSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentAcademicRecordSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentAcademicRecord]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentAcademicRecord]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentAcademicRecordSnapshotRecord]
        WHERE [tid_StudentAcademicRecord] IN
        (
            SELECT [tid_StudentAcademicRecord]
            FROM [t_edfi].[StudentAcademicRecordSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentAssessmentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentAssessmentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentAssessment]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentAssessment]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentAssessmentSnapshotRecord]
        WHERE [tid_StudentAssessment] IN
        (
            SELECT [tid_StudentAssessment]
            FROM [t_edfi].[StudentAssessmentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentCharacteristicDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentCharacteristicDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
        WHERE [tid_StudentCharacteristicDescriptor] IN
        (
            SELECT [tid_StudentCharacteristicDescriptor]
            FROM [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentCohortAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentCohortAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentCohortAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentCohortAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentCohortAssociationSnapshotRecord]
        WHERE [tid_StudentCohortAssociation] IN
        (
            SELECT [tid_StudentCohortAssociation]
            FROM [t_edfi].[StudentCohortAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentCompetencyObjective]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentCompetencyObjective]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
        WHERE [tid_StudentCompetencyObjective] IN
        (
            SELECT [tid_StudentCompetencyObjective]
            FROM [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentCTEProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentCTEProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
        WHERE [tid_StudentCTEProgramAssociation] IN
        (
            SELECT [tid_StudentCTEProgramAssociation]
            FROM [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentDisciplineIncidentAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentDisciplineIncidentAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
        WHERE [tid_StudentDisciplineIncidentAssociation] IN
        (
            SELECT [tid_StudentDisciplineIncidentAssociation]
            FROM [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentEducationOrganizationAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentEducationOrganizationAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
        WHERE [tid_StudentEducationOrganizationAssociation] IN
        (
            SELECT [tid_StudentEducationOrganizationAssociation]
            FROM [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentGradebookEntrySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentGradebookEntrySnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentGradebookEntry]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentGradebookEntry]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentGradebookEntrySnapshotRecord]
        WHERE [tid_StudentGradebookEntry] IN
        (
            SELECT [tid_StudentGradebookEntry]
            FROM [t_edfi].[StudentGradebookEntrySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentIdentificationSystemDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentIdentificationSystemDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
        WHERE [tid_StudentIdentificationSystemDescriptor] IN
        (
            SELECT [tid_StudentIdentificationSystemDescriptor]
            FROM [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentInterventionAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentInterventionAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentInterventionAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentInterventionAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentInterventionAssociationSnapshotRecord]
        WHERE [tid_StudentInterventionAssociation] IN
        (
            SELECT [tid_StudentInterventionAssociation]
            FROM [t_edfi].[StudentInterventionAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentInterventionAttendanceEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentInterventionAttendanceEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
        WHERE [tid_StudentInterventionAttendanceEvent] IN
        (
            SELECT [tid_StudentInterventionAttendanceEvent]
            FROM [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentLearningObjectiveSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentLearningObjectiveSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentLearningObjective]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentLearningObjective]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentLearningObjectiveSnapshotRecord]
        WHERE [tid_StudentLearningObjective] IN
        (
            SELECT [tid_StudentLearningObjective]
            FROM [t_edfi].[StudentLearningObjectiveSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentMigrantEducationProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentMigrantEducationProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
        WHERE [tid_StudentMigrantEducationProgramAssociation] IN
        (
            SELECT [tid_StudentMigrantEducationProgramAssociation]
            FROM [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentParentAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentParentAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentParentAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentParentAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentParentAssociationSnapshotRecord]
        WHERE [tid_StudentParentAssociation] IN
        (
            SELECT [tid_StudentParentAssociation]
            FROM [t_edfi].[StudentParentAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentProgramAssociationSnapshotRecord]
        WHERE [tid_StudentProgramAssociation] IN
        (
            SELECT [tid_StudentProgramAssociation]
            FROM [t_edfi].[StudentProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentProgramAttendanceEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentProgramAttendanceEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
        WHERE [tid_StudentProgramAttendanceEvent] IN
        (
            SELECT [tid_StudentProgramAttendanceEvent]
            FROM [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentSchoolAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentSchoolAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentSchoolAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentSchoolAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentSchoolAssociationSnapshotRecord]
        WHERE [tid_StudentSchoolAssociation] IN
        (
            SELECT [tid_StudentSchoolAssociation]
            FROM [t_edfi].[StudentSchoolAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentSchoolAttendanceEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentSchoolAttendanceEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
        WHERE [tid_StudentSchoolAttendanceEvent] IN
        (
            SELECT [tid_StudentSchoolAttendanceEvent]
            FROM [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentSectionAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentSectionAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentSectionAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentSectionAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentSectionAssociationSnapshotRecord]
        WHERE [tid_StudentSectionAssociation] IN
        (
            SELECT [tid_StudentSectionAssociation]
            FROM [t_edfi].[StudentSectionAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentSectionAttendanceEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentSectionAttendanceEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
        WHERE [tid_StudentSectionAttendanceEvent] IN
        (
            SELECT [tid_StudentSectionAttendanceEvent]
            FROM [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentSpecialEducationProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentSpecialEducationProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
        WHERE [tid_StudentSpecialEducationProgramAssociation] IN
        (
            SELECT [tid_StudentSpecialEducationProgramAssociation]
            FROM [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentTitleIPartAProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentTitleIPartAProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
        WHERE [tid_StudentTitleIPartAProgramAssociation] IN
        (
            SELECT [tid_StudentTitleIPartAProgramAssociation]
            FROM [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeachingCredentialDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeachingCredentialDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
        WHERE [tid_TeachingCredentialDescriptor] IN
        (
            SELECT [tid_TeachingCredentialDescriptor]
            FROM [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[TermDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[TermDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TermDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TermDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[TermDescriptorSnapshotRecord]
        WHERE [tid_TermDescriptor] IN
        (
            SELECT [tid_TermDescriptor]
            FROM [t_edfi].[TermDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_edfi].[WeaponDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_edfi].[WeaponDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_WeaponDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_WeaponDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_edfi].[WeaponDescriptorSnapshotRecord]
        WHERE [tid_WeaponDescriptor] IN
        (
            SELECT [tid_WeaponDescriptor]
            FROM [t_edfi].[WeaponDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

    COMMIT TRANSACTION
END;
GO

/****** PROCEDURE: [tods].[usp_CreateSnapshotMetadata] ******/

IF OBJECT_ID('[tods].[usp_CreateSnapshotMetadata]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_CreateSnapshotMetadata];
GO

CREATE PROCEDURE [tods].[usp_CreateSnapshotMetadata]
    @pSnapshotCode NVARCHAR(50)
    , @pSnapshotName NVARCHAR(1024)
    , @pDescription NVARCHAR(1024) = NULL
    , @pSnapshotDate DATE
    , @pBeginDate DATE
    , @pEndDate DATE = NULL
    , @pId UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @Message NVARCHAR(2048);

    SELECT @PartitionYearId =
    COALESCE
    (
        (SELECT PartitionYearConfigId FROM [tods].[PartitionYearConfig] WHERE BeginDate <= @pSnapshotDate AND @pSnapshotDate <= EndDate)
        , (SELECT MIN(PartitionYearConfigId) FROM [tods].[PartitionYearConfig])
        , (CAST(YEAR(@pSnapshotDate) AS SMALLINT))
    );

    BEGIN TRY
        BEGIN TRANSACTION
            -- ERROR CONDITIONS

            -- snapshot code includes invalid characters
            IF (@pSnapshotCode LIKE '%[^-A-Za-z0-9_()]%')
            BEGIN
                SET @Message = FORMATMESSAGE(50002, @pSnapshotCode);
                THROW 50002, @Message, 1;
            END;

            -- snapshot code matches existing one in tods.snapshotCode table
            IF EXISTS
            (
                SELECT [Code]
                FROM [tods].[SnapshotCode]
                WHERE [Code] = @pSnapshotCode
                GROUP BY [Code]
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50003, @pSnapshotCode);
                THROW 50003, @Message, 1;
            END;

            -- snapshot name matches existing one in tods.snapshot table
            IF EXISTS
            (
                SELECT [SnapshotName]
                FROM [tods].[Snapshot]
                WHERE [SnapshotName] = @pSnapshotName
                GROUP BY [SnapshotName]
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50004, @pSnapshotName);
                THROW 50004, @Message, 1;
            END;

            -- snapshot date is before begin date
            IF @pSnapshotDate < @pBeginDate
            BEGIN
                SET @Message = FORMATMESSAGE(50005, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50005, @Message, 1;
            END;

            -- snapshot date is on or after end date
            IF @pSnapshotDate >= @pEndDate
            BEGIN
                SET @Message = FORMATMESSAGE(50006, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
                THROW 50006, @Message, 1;
            END;

            -- begin date is in the future
            IF @pBeginDate > GETDATE()
            BEGIN
                SET @Message = FORMATMESSAGE(50007, CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50007, @Message, 1;
            END;

            -- begin date overlaps another snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] <= @pBeginDate
                AND @pBeginDate < COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50008, CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50008, @Message, 1;
            END;

            -- end date is before begin date
            IF @pBeginDate >= @pEndDate
            BEGIN
                SET @Message = FORMATMESSAGE(50009, CAST(@pEndDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50009, @Message, 1;
            END;

            -- end date overlaps other snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE @pEndDate > [EffectiveBeginDate]
                AND
                (
                    @pEndDate <= COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                    OR
                    (
                        @pBegindate < [EffectiveBeginDate]
                        AND [EffectiveEndDate] IS NULL AND @pEndDate IS NULL
                    )
                )
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
                THROW 50010, @Message, 1;
            END;

            -- begin date and end date enclose another snapshot
            IF @pEndDate IS NOT NULL AND EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
                AND @pEndDate > COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50029, CAST(@pBeginDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
                THROW 50029, @Message, 1;
            END;

            IF @pEndDate IS NULL AND EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
            )
            SET @pEndDate =
            (
                SELECT MIN([EffectiveBeginDate])
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
            );

            UPDATE [tods].[Snapshot]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;


            UPDATE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AcademicWeekSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AccommodationDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AccountSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AccountabilityRatingSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AccountCodeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ActualSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AssessmentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AssessmentFamilySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AssessmentItemSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[BehaviorDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[BellScheduleSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[BudgetSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CalendarDateSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CalendarEventDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ClassPeriodSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CohortSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CompetencyObjectiveSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ContractedStaffSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CountryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CourseSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CourseOfferingSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CourseTranscriptSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CredentialSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[DiagnosisDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[DisabilityDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[DisciplineActionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[DisciplineDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[DisciplineIncidentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationContentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationOrganizationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EducationServiceCenterSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[EntryTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[FeederSchoolAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[GradeSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[GradebookEntrySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[GradeLevelDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[GradingPeriodSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[GraduationPlanSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[InterventionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[InterventionPrescriptionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[InterventionStudySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LanguageDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LearningObjectiveSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LearningStandardSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LeaveEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LevelDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LocalEducationAgencySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[LocationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ObjectiveAssessmentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[OpenStaffPositionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ParentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[PayrollSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[PostSecondaryEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ProgramSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ReportCardSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[RestraintEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SchoolSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SchoolYearTypeSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SectionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[ServiceDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SessionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffCohortAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffSchoolAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StaffSectionAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StateEducationAgencySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentAcademicRecordSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentAssessmentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentCohortAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentGradebookEntrySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentInterventionAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentLearningObjectiveSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentParentAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentSchoolAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentSectionAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[TermDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_edfi].[WeaponDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;


            INSERT INTO [tods].[Snapshot]
                (
                    [SnapshotName]
                    , [Description]
                    , [SnapshotDate]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [IsLockedForProcessing]
                    , [IsLocked]
                    , [t_PartitionYearId]
                )
            VALUES
                (
                    @pSnapshotName
                    , @pDescription
                    , @pSnapshotDate
                    , @pBeginDate
                    , @pEndDate
                    , 0
                    , 0
                    , @PartitionYearId
                );

            SET @SnapshotId = SCOPE_IDENTITY();

            SET @pId =
            (
                SELECT [Id]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );

            INSERT INTO [tods].[SnapshotCode]
            (
                [SnapshotId]
                , [Code]
                , [t_PartitionYearId]
            )
            VALUES
            (
                @SnapshotId
                , @pSnapshotCode
                , @PartitionYearId
            );

            -- Clear any warnings about no current snapshot if we have a current snapshot now
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE EffectiveEndDate IS NULL
            )
            DELETE FROM [tods].[AuditLog] WHERE ErrorNumber = 80001;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
        BEGIN
            ROLLBACK TRANSACTION;
        END;

        BEGIN TRANSACTION
            INSERT INTO [tods].[AuditLog]
            (
                ErrorNumber
                , ErrorMessage
                , ErrorSeverity
                , SqlErrorSeverity
                , ErrorState
                , ErrorLine
                , ErrorSproc
                , SnapshotId
                , SnapshotCode
            )
            SELECT
                (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                , ERROR_MESSAGE()
                , 'ERROR'
                , ERROR_SEVERITY()
                , CAST(ERROR_STATE() AS VARCHAR(10))
                , CAST(ERROR_LINE() AS VARCHAR(10))
                , @SprocName
                , @SnapshotId
                , @pSnapshotCode
        COMMIT TRANSACTION;
        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_LoadSnapshotData] ******/

IF OBJECT_ID('[tods].[usp_LoadSnapshotData]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_LoadSnapshotData];
GO

CREATE PROCEDURE [tods].[usp_LoadSnapshotData]
    @pId UNIQUEIDENTIFIER
    , @pDatabase NVARCHAR(128) = NULL
    , @pBypassSqlServerSnapshot BIT = 0
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @SnapshotDate DATE;
    DECLARE @BeginDate DATE;
    DECLARE @EndDate DATE;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @DatabaseName NVARCHAR(128);      -- source database name
    DECLARE @DbSSDbName NVARCHAR(128);        -- this is the one to pass down to sprocs - naming convention [database name]_dbss1800;
    DECLARE @SqlDBSSName NVARCHAR(128);       -- system name of database to snapshot
    DECLARE @DbSSFileName NVARCHAR(150);      -- naming convention: [database name]_data_1800.ss
    DECLARE @DbSSDataDirectory NVARCHAR(500); -- SQL Server Data directory
    DECLARE @DbSSFilePath NVARCHAR(500);      -- SQL Server Data directory + dBSSFileName
    DECLARE @Sql NVARCHAR(4000);
    DECLARE @NeedToResetOnError BIT = 0;      -- to indicate if need to reset IsLockedForProcessing on Error
    DECLARE @Message NVARCHAR(2048);

    SET @DatabaseName = COALESCE(@pDatabase, DB_NAME());
    SET @DbSSDbName = N'Ods_Snapshot';

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

            -- there is currently a snapshot load in progress
            IF EXISTS
            (
                SELECT * FROM sys.databases
                WHERE name = @DbSSDbName
                AND source_database_id IS NOT NULL
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50028);
                THROW 50028, @Message, 1;
            END;

            -- target snapshot metadata record does not exist
            IF @SnapshotId IS NULL
            BEGIN
                SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                THROW 50015, @Message, 1;
            END;

            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50016, CAST(@pId AS NVARCHAR(36)));
                THROW 50016, @Message, 1;
            END;

            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50017, CAST(@pId AS NVARCHAR(36)));
                THROW 50017, @Message, 1;
            END;

            -- check if Status is NULL
            IF '' <>
            (
                SELECT ISNULL([Status], '')
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50018, CAST(@pId AS NVARCHAR(36)));
                THROW 50018, @Message, 1;
            END;

            SET @NeedToResetOnError = 1;

            UPDATE [tods].[Snapshot]
                SET [LoadStartTime] = CURRENT_TIMESTAMP,
                    [IsLockedForProcessing] = 1
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION

        -- ************************************
        -- CREATE SQL SERVER SNAPSHOT OF SOURCE
        -- ************************************
        IF (@pBypassSqlServerSnapshot = 0)
        BEGIN
            SET @SqlDBSSName = (
                                    SELECT  F.[name] AS [LogicalFileName]
                                    FROM [sys].[sysdatabases] D
                                    INNER JOIN [sys].[sysaltfiles] F ON F.[dbid] = D.[dbid]
                                    WHERE F.[fileid] = 1
                                    AND D.[name] = @DatabaseName
                               );
            SET @DbSSFileName = N'Ods_Snapshot.sp';
            SET @DbSSDataDirectory = (
                                          SELECT SUBSTRING(M.[physical_name], 1, CHARINDEX(N'master.mdf', LOWER(M.[physical_name])) - 1) AS DataFileLocation
                                          FROM [master].[sys].[master_files] AS M
                                          WHERE M.[database_id] = 1 AND M.[file_id] = 1
                                     );
            SET @DbSSFilePath = @DbSSDataDirectory + @DbSSFileName

            SET @SQL = 'CREATE DATABASE [' + @DbSSDbName + '] ON' + CHAR(10)
            + '(NAME = ''' + @SqlDBSSName +  ''', FILENAME = ' + '''' + @DbSSFilePath + @DbSSFileName + '''' + ')' +
            + ' AS SNAPSHOT OF [' + @DatabaseName + ']'

            EXEC (@Sql);
        END
        ELSE
        BEGIN
            SET @Sql = N'
            USE [' + @DatabaseName + '];
            BACKUP DATABASE [' + @DatabaseName + '] TO DISK = N''Ods_Snapshot.bak'' WITH COPY_ONLY, FORMAT;
            DECLARE @DataFile NVARCHAR(128);
            DECLARE @LogFile NVARCHAR(128);
            DECLARE @DataPath NVARCHAR(MAX);
            DECLARE @LogPath NVARCHAR(MAX);
            SET @DataFile = FILE_NAME(1);
            SET @LogFile = FILE_NAME(2);
            SET @DataPath = CONVERT(SYSNAME, SERVERPROPERTY(''InstanceDefaultDataPath'')) + N''Ods_Snapshot.mdf'';
            SET @LogPath = CONVERT(SYSNAME, SERVERPROPERTY(''InstanceDefaultLogPath'')) + N''Ods_Snapshot.ldf'';
            RESTORE DATABASE [Ods_Snapshot] FROM DISK = N''Ods_Snapshot.bak'' WITH RECOVERY, REPLACE, MOVE @DataFile TO @DataPath, MOVE @LogFile TO @LogPath;';

            EXEC (@Sql);
        END;

        BEGIN TRANSACTION
            SELECT @BeginDate =
            (
                SELECT [EffectiveBeginDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @EndDate =
            (
                SELECT [EffectiveEndDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @SnapshotDate =
            (
                SELECT [SnapshotDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );

            EXEC [tods].[usp_DerivePartitionYearId] @SnapshotId, @SnapshotDate, @pPartitionYearId = @PartitionYearId OUTPUT;

            --for each top level entity

            EXEC [t_edfi].[usp_dbAcademicSubjectDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAcademicWeek] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccommodationDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccount] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccountabilityRating] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccountCodeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAchievementCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbActual] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAdministrativeFundingControlDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamily] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentItem] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentPeriodDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAttendanceEventCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbBehaviorDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbBellSchedule] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbBudget] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCalendarDate] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCalendarEventDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbClassPeriod] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbClassroomPositionDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCohort] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCompetencyLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCompetencyObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbContinuationOfServicesReasonDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbContractedStaff] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCountryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourseIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourseOffering] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCredential] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCredentialFieldDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDiagnosisDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisabilityDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineAction] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineIncident] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganization] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationNetwork] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationNetworkAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationPeerAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationServiceCenter] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEmploymentStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEntryTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbExitWithdrawTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbFederalLocaleCodeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbFeederSchoolAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGrade] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradebookEntry] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradeLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradingPeriod] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradingPeriodDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlan] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbIntervention] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescription] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudy] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLanguageDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLearningObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandard] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLeaveEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLevelOfEducationDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLocalEducationAgency] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLocation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbOpenStaffPosition] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbParent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbPayroll] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbPerformanceLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbPostSecondaryEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbProgram] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbProgramAssignmentDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbProgramCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbReasonExitedDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbReportCard] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbReporterDescriptionDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbResidencyStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbResponsibilityDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbRestraintEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSchool] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSchoolYearType] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSection] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSectionAttendanceTakenEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSectionCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSeparationReasonDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbServiceDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSession] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSpecialEducationSettingDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaff] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffClassificationDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffCohortAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffSchoolAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStateEducationAgency] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCohortAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCompetencyObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCTEProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentDisciplineIncidentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentGradebookEntry] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentInterventionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentInterventionAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentLearningObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentMigrantEducationProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentParentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentProgramAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSchoolAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSchoolAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSectionAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSpecialEducationProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentTitleIPartAProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbTeachingCredentialDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbTermDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbWeaponDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [Status] = 'ACTIVE',
                    [LoadEndTime] = CURRENT_TIMESTAMP,
                    [LastModifiedDate] = CURRENT_TIMESTAMP,
                    [t_PartitionYearId] = @PartitionYearId
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION

        -- ************************************
        -- CLEAN UP SQL Database Snapshot
        -- ************************************
        IF EXISTS
        (
            SELECT * FROM sys.databases
            WHERE name = @DbSSDbName
        )
        BEGIN
            SET @SQL = 'DROP DATABASE [' + @DbSSDbName + ']';
            EXEC (@SQL);
        END;
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @SnapshotId, @SprocName;

        -- CLEAN UP SQL SERVER DB SNAPSHOT IF IT EXITS
        IF EXISTS
        (
            SELECT * FROM sys.databases
            WHERE name = @DbSSDbName
        )
        BEGIN
            SET @SQL = 'DROP DATABASE [' + @DbSSDbName + ']';
            EXEC (@SQL);
        END;

        IF (@NeedToResetOnError = 1)
        BEGIN
            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [LastModifiedDate] = CURRENT_TIMESTAMP
                WHERE [SnapshotId] = @SnapshotId;
        END;
        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_DeleteSnapshotRecord] ******/

IF OBJECT_ID('[tods].[usp_DeleteSnapshotRecord]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_DeleteSnapshotRecord];
GO

CREATE PROCEDURE [tods].[usp_DeleteSnapshotRecord]
    @pId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SnapshotId INT;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @Message NVARCHAR(2048);

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

            -- ERROR CONDITIONS

            -- snapshot id does not exist
            IF @SnapshotId IS NULL BEGIN
                SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                THROW 50015, @Message, 1;
            END;

            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            ) BEGIN
                SET @Message = FORMATMESSAGE(50025, CAST(@pId AS NVARCHAR(36)));
                THROW 50025, @Message, 1;
            END;

            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            ) BEGIN
                SET @Message = FORMATMESSAGE(50026, CAST(@pId AS NVARCHAR(36)));
                THROW 50026, @Message, 1;
            END;


            DELETE FROM [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AcademicWeekSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AccommodationDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AccountSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AccountabilityRatingSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AccountCodeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ActualSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AssessmentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AssessmentFamilySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AssessmentItemSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[BehaviorDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[BellScheduleSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[BudgetSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CalendarDateSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CalendarEventDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ClassPeriodSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CohortSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CompetencyObjectiveSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ContractedStaffSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CountryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CourseSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CourseOfferingSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CourseTranscriptSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CredentialSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[DiagnosisDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[DisabilityDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[DisciplineActionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[DisciplineDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[DisciplineIncidentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationContentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationOrganizationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EducationServiceCenterSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[EntryTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[FeederSchoolAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[GradeSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[GradebookEntrySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[GradeLevelDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[GradingPeriodSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[GraduationPlanSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[InterventionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[InterventionPrescriptionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[InterventionStudySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LanguageDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LearningObjectiveSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LearningStandardSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LeaveEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LevelDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LocalEducationAgencySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[LocationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ObjectiveAssessmentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[OpenStaffPositionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ParentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[PayrollSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[PostSecondaryEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ProgramSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ReportCardSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[RestraintEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SchoolSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SchoolYearTypeSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SectionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[ServiceDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SessionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffCohortAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffSchoolAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StaffSectionAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StateEducationAgencySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentAcademicRecordSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentAssessmentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentCohortAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentGradebookEntrySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentInterventionAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentLearningObjectiveSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentParentAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentSchoolAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentSectionAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[TermDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_edfi].[WeaponDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;


            UPDATE [tods].[Snapshot] SET Status = NULL WHERE SnapshotId = @SnapshotId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        BEGIN TRANSACTION
            INSERT INTO [tods].[AuditLog]
            (
                ErrorNumber
                , ErrorMessage
                , ErrorSeverity
                , SqlErrorSeverity
                , ErrorState
                , ErrorLine
                , ErrorSproc
                , SnapshotId
            )
            SELECT
                (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                , ERROR_MESSAGE()
                , 'ERROR'
                , ERROR_SEVERITY()
                , CAST(ERROR_STATE() AS VARCHAR(10))
                , CAST(ERROR_LINE() AS VARCHAR(10))
                , @SprocName
                , @SnapshotId
        COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_DeleteOrphanedSnapshotData] ******/

IF OBJECT_ID('[tods].[usp_DeleteOrphanedSnapshotData]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_DeleteOrphanedSnapshotData];
GO

CREATE PROCEDURE [tods].[usp_DeleteOrphanedSnapshotData]
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);

    BEGIN TRY
        BEGIN TRANSACTION


            DELETE A FROM [t_edfi].[AcademicSubjectDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AcademicSubjectDescriptor]
                FROM [t_edfi].[AcademicSubjectDescriptorSnapshotRecord] B
                WHERE A.[tid_AcademicSubjectDescriptor] = B.[tid_AcademicSubjectDescriptor]
            );


            DELETE A FROM [t_edfi].[AcademicWeek] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AcademicWeek]
                FROM [t_edfi].[AcademicWeekSnapshotRecord] B
                WHERE A.[tid_AcademicWeek] = B.[tid_AcademicWeek]
            );


            DELETE A FROM [t_edfi].[AccommodationDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AccommodationDescriptor]
                FROM [t_edfi].[AccommodationDescriptorSnapshotRecord] B
                WHERE A.[tid_AccommodationDescriptor] = B.[tid_AccommodationDescriptor]
            );


            DELETE A FROM [t_edfi].[Account] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Account]
                FROM [t_edfi].[AccountSnapshotRecord] B
                WHERE A.[tid_Account] = B.[tid_Account]
            );


            DELETE A FROM [t_edfi].[AccountabilityRating] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AccountabilityRating]
                FROM [t_edfi].[AccountabilityRatingSnapshotRecord] B
                WHERE A.[tid_AccountabilityRating] = B.[tid_AccountabilityRating]
            );


            DELETE A FROM [t_edfi].[AccountCodeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AccountCodeDescriptor]
                FROM [t_edfi].[AccountCodeDescriptorSnapshotRecord] B
                WHERE A.[tid_AccountCodeDescriptor] = B.[tid_AccountCodeDescriptor]
            );


            DELETE A FROM [t_edfi].[AchievementCategoryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AchievementCategoryDescriptor]
                FROM [t_edfi].[AchievementCategoryDescriptorSnapshotRecord] B
                WHERE A.[tid_AchievementCategoryDescriptor] = B.[tid_AchievementCategoryDescriptor]
            );


            DELETE A FROM [t_edfi].[Actual] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Actual]
                FROM [t_edfi].[ActualSnapshotRecord] B
                WHERE A.[tid_Actual] = B.[tid_Actual]
            );


            DELETE A FROM [t_edfi].[AdministrativeFundingControlDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AdministrativeFundingControlDescriptor]
                FROM [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord] B
                WHERE A.[tid_AdministrativeFundingControlDescriptor] = B.[tid_AdministrativeFundingControlDescriptor]
            );


            DELETE A FROM [t_edfi].[Assessment] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Assessment]
                FROM [t_edfi].[AssessmentSnapshotRecord] B
                WHERE A.[tid_Assessment] = B.[tid_Assessment]
            );


            DELETE A FROM [t_edfi].[AssessmentCategoryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AssessmentCategoryDescriptor]
                FROM [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord] B
                WHERE A.[tid_AssessmentCategoryDescriptor] = B.[tid_AssessmentCategoryDescriptor]
            );


            DELETE A FROM [t_edfi].[AssessmentFamily] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AssessmentFamily]
                FROM [t_edfi].[AssessmentFamilySnapshotRecord] B
                WHERE A.[tid_AssessmentFamily] = B.[tid_AssessmentFamily]
            );


            DELETE A FROM [t_edfi].[AssessmentIdentificationSystemDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AssessmentIdentificationSystemDescriptor]
                FROM [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord] B
                WHERE A.[tid_AssessmentIdentificationSystemDescriptor] = B.[tid_AssessmentIdentificationSystemDescriptor]
            );


            DELETE A FROM [t_edfi].[AssessmentItem] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AssessmentItem]
                FROM [t_edfi].[AssessmentItemSnapshotRecord] B
                WHERE A.[tid_AssessmentItem] = B.[tid_AssessmentItem]
            );


            DELETE A FROM [t_edfi].[AssessmentPeriodDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AssessmentPeriodDescriptor]
                FROM [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord] B
                WHERE A.[tid_AssessmentPeriodDescriptor] = B.[tid_AssessmentPeriodDescriptor]
            );


            DELETE A FROM [t_edfi].[AttendanceEventCategoryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AttendanceEventCategoryDescriptor]
                FROM [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord] B
                WHERE A.[tid_AttendanceEventCategoryDescriptor] = B.[tid_AttendanceEventCategoryDescriptor]
            );


            DELETE A FROM [t_edfi].[BehaviorDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_BehaviorDescriptor]
                FROM [t_edfi].[BehaviorDescriptorSnapshotRecord] B
                WHERE A.[tid_BehaviorDescriptor] = B.[tid_BehaviorDescriptor]
            );


            DELETE A FROM [t_edfi].[BellSchedule] A
            WHERE NOT EXISTS
            (
                SELECT [tid_BellSchedule]
                FROM [t_edfi].[BellScheduleSnapshotRecord] B
                WHERE A.[tid_BellSchedule] = B.[tid_BellSchedule]
            );


            DELETE A FROM [t_edfi].[Budget] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Budget]
                FROM [t_edfi].[BudgetSnapshotRecord] B
                WHERE A.[tid_Budget] = B.[tid_Budget]
            );


            DELETE A FROM [t_edfi].[CalendarDate] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CalendarDate]
                FROM [t_edfi].[CalendarDateSnapshotRecord] B
                WHERE A.[tid_CalendarDate] = B.[tid_CalendarDate]
            );


            DELETE A FROM [t_edfi].[CalendarEventDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CalendarEventDescriptor]
                FROM [t_edfi].[CalendarEventDescriptorSnapshotRecord] B
                WHERE A.[tid_CalendarEventDescriptor] = B.[tid_CalendarEventDescriptor]
            );


            DELETE A FROM [t_edfi].[ClassPeriod] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ClassPeriod]
                FROM [t_edfi].[ClassPeriodSnapshotRecord] B
                WHERE A.[tid_ClassPeriod] = B.[tid_ClassPeriod]
            );


            DELETE A FROM [t_edfi].[ClassroomPositionDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ClassroomPositionDescriptor]
                FROM [t_edfi].[ClassroomPositionDescriptorSnapshotRecord] B
                WHERE A.[tid_ClassroomPositionDescriptor] = B.[tid_ClassroomPositionDescriptor]
            );


            DELETE A FROM [t_edfi].[Cohort] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Cohort]
                FROM [t_edfi].[CohortSnapshotRecord] B
                WHERE A.[tid_Cohort] = B.[tid_Cohort]
            );


            DELETE A FROM [t_edfi].[CompetencyLevelDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CompetencyLevelDescriptor]
                FROM [t_edfi].[CompetencyLevelDescriptorSnapshotRecord] B
                WHERE A.[tid_CompetencyLevelDescriptor] = B.[tid_CompetencyLevelDescriptor]
            );


            DELETE A FROM [t_edfi].[CompetencyObjective] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CompetencyObjective]
                FROM [t_edfi].[CompetencyObjectiveSnapshotRecord] B
                WHERE A.[tid_CompetencyObjective] = B.[tid_CompetencyObjective]
            );


            DELETE A FROM [t_edfi].[ContinuationOfServicesReasonDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ContinuationOfServicesReasonDescriptor]
                FROM [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord] B
                WHERE A.[tid_ContinuationOfServicesReasonDescriptor] = B.[tid_ContinuationOfServicesReasonDescriptor]
            );


            DELETE A FROM [t_edfi].[ContractedStaff] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ContractedStaff]
                FROM [t_edfi].[ContractedStaffSnapshotRecord] B
                WHERE A.[tid_ContractedStaff] = B.[tid_ContractedStaff]
            );


            DELETE A FROM [t_edfi].[CountryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CountryDescriptor]
                FROM [t_edfi].[CountryDescriptorSnapshotRecord] B
                WHERE A.[tid_CountryDescriptor] = B.[tid_CountryDescriptor]
            );


            DELETE A FROM [t_edfi].[Course] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Course]
                FROM [t_edfi].[CourseSnapshotRecord] B
                WHERE A.[tid_Course] = B.[tid_Course]
            );


            DELETE A FROM [t_edfi].[CourseIdentificationSystemDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseIdentificationSystemDescriptor]
                FROM [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord] B
                WHERE A.[tid_CourseIdentificationSystemDescriptor] = B.[tid_CourseIdentificationSystemDescriptor]
            );


            DELETE A FROM [t_edfi].[CourseOffering] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseOffering]
                FROM [t_edfi].[CourseOfferingSnapshotRecord] B
                WHERE A.[tid_CourseOffering] = B.[tid_CourseOffering]
            );


            DELETE A FROM [t_edfi].[CourseTranscript] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseTranscript]
                FROM [t_edfi].[CourseTranscriptSnapshotRecord] B
                WHERE A.[tid_CourseTranscript] = B.[tid_CourseTranscript]
            );


            DELETE A FROM [t_edfi].[Credential] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Credential]
                FROM [t_edfi].[CredentialSnapshotRecord] B
                WHERE A.[tid_Credential] = B.[tid_Credential]
            );


            DELETE A FROM [t_edfi].[CredentialFieldDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CredentialFieldDescriptor]
                FROM [t_edfi].[CredentialFieldDescriptorSnapshotRecord] B
                WHERE A.[tid_CredentialFieldDescriptor] = B.[tid_CredentialFieldDescriptor]
            );


            DELETE A FROM [t_edfi].[DiagnosisDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_DiagnosisDescriptor]
                FROM [t_edfi].[DiagnosisDescriptorSnapshotRecord] B
                WHERE A.[tid_DiagnosisDescriptor] = B.[tid_DiagnosisDescriptor]
            );


            DELETE A FROM [t_edfi].[DisabilityDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_DisabilityDescriptor]
                FROM [t_edfi].[DisabilityDescriptorSnapshotRecord] B
                WHERE A.[tid_DisabilityDescriptor] = B.[tid_DisabilityDescriptor]
            );


            DELETE A FROM [t_edfi].[DisciplineAction] A
            WHERE NOT EXISTS
            (
                SELECT [tid_DisciplineAction]
                FROM [t_edfi].[DisciplineActionSnapshotRecord] B
                WHERE A.[tid_DisciplineAction] = B.[tid_DisciplineAction]
            );


            DELETE A FROM [t_edfi].[DisciplineDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_DisciplineDescriptor]
                FROM [t_edfi].[DisciplineDescriptorSnapshotRecord] B
                WHERE A.[tid_DisciplineDescriptor] = B.[tid_DisciplineDescriptor]
            );


            DELETE A FROM [t_edfi].[DisciplineIncident] A
            WHERE NOT EXISTS
            (
                SELECT [tid_DisciplineIncident]
                FROM [t_edfi].[DisciplineIncidentSnapshotRecord] B
                WHERE A.[tid_DisciplineIncident] = B.[tid_DisciplineIncident]
            );


            DELETE A FROM [t_edfi].[EducationContent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationContent]
                FROM [t_edfi].[EducationContentSnapshotRecord] B
                WHERE A.[tid_EducationContent] = B.[tid_EducationContent]
            );


            DELETE A FROM [t_edfi].[EducationOrganization] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganization]
                FROM [t_edfi].[EducationOrganizationSnapshotRecord] B
                WHERE A.[tid_EducationOrganization] = B.[tid_EducationOrganization]
            );


            DELETE A FROM [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationIdentificationSystemDescriptor]
                FROM [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationIdentificationSystemDescriptor] = B.[tid_EducationOrganizationIdentificationSystemDescriptor]
            );


            DELETE A FROM [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationInterventionPrescriptionAssociation]
                FROM [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationInterventionPrescriptionAssociation] = B.[tid_EducationOrganizationInterventionPrescriptionAssociation]
            );


            DELETE A FROM [t_edfi].[EducationOrganizationNetwork] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationNetwork]
                FROM [t_edfi].[EducationOrganizationNetworkSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationNetwork] = B.[tid_EducationOrganizationNetwork]
            );


            DELETE A FROM [t_edfi].[EducationOrganizationNetworkAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationNetworkAssociation]
                FROM [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationNetworkAssociation] = B.[tid_EducationOrganizationNetworkAssociation]
            );


            DELETE A FROM [t_edfi].[EducationOrganizationPeerAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationPeerAssociation]
                FROM [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationPeerAssociation] = B.[tid_EducationOrganizationPeerAssociation]
            );


            DELETE A FROM [t_edfi].[EducationServiceCenter] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationServiceCenter]
                FROM [t_edfi].[EducationServiceCenterSnapshotRecord] B
                WHERE A.[tid_EducationServiceCenter] = B.[tid_EducationServiceCenter]
            );


            DELETE A FROM [t_edfi].[EmploymentStatusDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EmploymentStatusDescriptor]
                FROM [t_edfi].[EmploymentStatusDescriptorSnapshotRecord] B
                WHERE A.[tid_EmploymentStatusDescriptor] = B.[tid_EmploymentStatusDescriptor]
            );


            DELETE A FROM [t_edfi].[EntryTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EntryTypeDescriptor]
                FROM [t_edfi].[EntryTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_EntryTypeDescriptor] = B.[tid_EntryTypeDescriptor]
            );


            DELETE A FROM [t_edfi].[ExitWithdrawTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ExitWithdrawTypeDescriptor]
                FROM [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_ExitWithdrawTypeDescriptor] = B.[tid_ExitWithdrawTypeDescriptor]
            );


            DELETE A FROM [t_edfi].[FederalLocaleCodeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_FederalLocaleCodeDescriptor]
                FROM [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord] B
                WHERE A.[tid_FederalLocaleCodeDescriptor] = B.[tid_FederalLocaleCodeDescriptor]
            );


            DELETE A FROM [t_edfi].[FeederSchoolAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_FeederSchoolAssociation]
                FROM [t_edfi].[FeederSchoolAssociationSnapshotRecord] B
                WHERE A.[tid_FeederSchoolAssociation] = B.[tid_FeederSchoolAssociation]
            );


            DELETE A FROM [t_edfi].[Grade] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Grade]
                FROM [t_edfi].[GradeSnapshotRecord] B
                WHERE A.[tid_Grade] = B.[tid_Grade]
            );


            DELETE A FROM [t_edfi].[GradebookEntry] A
            WHERE NOT EXISTS
            (
                SELECT [tid_GradebookEntry]
                FROM [t_edfi].[GradebookEntrySnapshotRecord] B
                WHERE A.[tid_GradebookEntry] = B.[tid_GradebookEntry]
            );


            DELETE A FROM [t_edfi].[GradeLevelDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_GradeLevelDescriptor]
                FROM [t_edfi].[GradeLevelDescriptorSnapshotRecord] B
                WHERE A.[tid_GradeLevelDescriptor] = B.[tid_GradeLevelDescriptor]
            );


            DELETE A FROM [t_edfi].[GradingPeriod] A
            WHERE NOT EXISTS
            (
                SELECT [tid_GradingPeriod]
                FROM [t_edfi].[GradingPeriodSnapshotRecord] B
                WHERE A.[tid_GradingPeriod] = B.[tid_GradingPeriod]
            );


            DELETE A FROM [t_edfi].[GradingPeriodDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_GradingPeriodDescriptor]
                FROM [t_edfi].[GradingPeriodDescriptorSnapshotRecord] B
                WHERE A.[tid_GradingPeriodDescriptor] = B.[tid_GradingPeriodDescriptor]
            );


            DELETE A FROM [t_edfi].[GraduationPlan] A
            WHERE NOT EXISTS
            (
                SELECT [tid_GraduationPlan]
                FROM [t_edfi].[GraduationPlanSnapshotRecord] B
                WHERE A.[tid_GraduationPlan] = B.[tid_GraduationPlan]
            );


            DELETE A FROM [t_edfi].[GraduationPlanTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_GraduationPlanTypeDescriptor]
                FROM [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_GraduationPlanTypeDescriptor] = B.[tid_GraduationPlanTypeDescriptor]
            );


            DELETE A FROM [t_edfi].[Intervention] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Intervention]
                FROM [t_edfi].[InterventionSnapshotRecord] B
                WHERE A.[tid_Intervention] = B.[tid_Intervention]
            );


            DELETE A FROM [t_edfi].[InterventionPrescription] A
            WHERE NOT EXISTS
            (
                SELECT [tid_InterventionPrescription]
                FROM [t_edfi].[InterventionPrescriptionSnapshotRecord] B
                WHERE A.[tid_InterventionPrescription] = B.[tid_InterventionPrescription]
            );


            DELETE A FROM [t_edfi].[InterventionStudy] A
            WHERE NOT EXISTS
            (
                SELECT [tid_InterventionStudy]
                FROM [t_edfi].[InterventionStudySnapshotRecord] B
                WHERE A.[tid_InterventionStudy] = B.[tid_InterventionStudy]
            );


            DELETE A FROM [t_edfi].[LanguageDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LanguageDescriptor]
                FROM [t_edfi].[LanguageDescriptorSnapshotRecord] B
                WHERE A.[tid_LanguageDescriptor] = B.[tid_LanguageDescriptor]
            );


            DELETE A FROM [t_edfi].[LearningObjective] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LearningObjective]
                FROM [t_edfi].[LearningObjectiveSnapshotRecord] B
                WHERE A.[tid_LearningObjective] = B.[tid_LearningObjective]
            );


            DELETE A FROM [t_edfi].[LearningStandard] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LearningStandard]
                FROM [t_edfi].[LearningStandardSnapshotRecord] B
                WHERE A.[tid_LearningStandard] = B.[tid_LearningStandard]
            );


            DELETE A FROM [t_edfi].[LeaveEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LeaveEvent]
                FROM [t_edfi].[LeaveEventSnapshotRecord] B
                WHERE A.[tid_LeaveEvent] = B.[tid_LeaveEvent]
            );


            DELETE A FROM [t_edfi].[LevelDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LevelDescriptor]
                FROM [t_edfi].[LevelDescriptorSnapshotRecord] B
                WHERE A.[tid_LevelDescriptor] = B.[tid_LevelDescriptor]
            );


            DELETE A FROM [t_edfi].[LevelOfEducationDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LevelOfEducationDescriptor]
                FROM [t_edfi].[LevelOfEducationDescriptorSnapshotRecord] B
                WHERE A.[tid_LevelOfEducationDescriptor] = B.[tid_LevelOfEducationDescriptor]
            );


            DELETE A FROM [t_edfi].[LimitedEnglishProficiencyDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LimitedEnglishProficiencyDescriptor]
                FROM [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord] B
                WHERE A.[tid_LimitedEnglishProficiencyDescriptor] = B.[tid_LimitedEnglishProficiencyDescriptor]
            );


            DELETE A FROM [t_edfi].[LocalEducationAgency] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LocalEducationAgency]
                FROM [t_edfi].[LocalEducationAgencySnapshotRecord] B
                WHERE A.[tid_LocalEducationAgency] = B.[tid_LocalEducationAgency]
            );


            DELETE A FROM [t_edfi].[Location] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Location]
                FROM [t_edfi].[LocationSnapshotRecord] B
                WHERE A.[tid_Location] = B.[tid_Location]
            );


            DELETE A FROM [t_edfi].[ObjectiveAssessment] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ObjectiveAssessment]
                FROM [t_edfi].[ObjectiveAssessmentSnapshotRecord] B
                WHERE A.[tid_ObjectiveAssessment] = B.[tid_ObjectiveAssessment]
            );


            DELETE A FROM [t_edfi].[OpenStaffPosition] A
            WHERE NOT EXISTS
            (
                SELECT [tid_OpenStaffPosition]
                FROM [t_edfi].[OpenStaffPositionSnapshotRecord] B
                WHERE A.[tid_OpenStaffPosition] = B.[tid_OpenStaffPosition]
            );


            DELETE A FROM [t_edfi].[Parent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Parent]
                FROM [t_edfi].[ParentSnapshotRecord] B
                WHERE A.[tid_Parent] = B.[tid_Parent]
            );


            DELETE A FROM [t_edfi].[Payroll] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Payroll]
                FROM [t_edfi].[PayrollSnapshotRecord] B
                WHERE A.[tid_Payroll] = B.[tid_Payroll]
            );


            DELETE A FROM [t_edfi].[PerformanceLevelDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PerformanceLevelDescriptor]
                FROM [t_edfi].[PerformanceLevelDescriptorSnapshotRecord] B
                WHERE A.[tid_PerformanceLevelDescriptor] = B.[tid_PerformanceLevelDescriptor]
            );


            DELETE A FROM [t_edfi].[PostSecondaryEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PostSecondaryEvent]
                FROM [t_edfi].[PostSecondaryEventSnapshotRecord] B
                WHERE A.[tid_PostSecondaryEvent] = B.[tid_PostSecondaryEvent]
            );


            DELETE A FROM [t_edfi].[Program] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Program]
                FROM [t_edfi].[ProgramSnapshotRecord] B
                WHERE A.[tid_Program] = B.[tid_Program]
            );


            DELETE A FROM [t_edfi].[ProgramAssignmentDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ProgramAssignmentDescriptor]
                FROM [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord] B
                WHERE A.[tid_ProgramAssignmentDescriptor] = B.[tid_ProgramAssignmentDescriptor]
            );


            DELETE A FROM [t_edfi].[ProgramCharacteristicDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ProgramCharacteristicDescriptor]
                FROM [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord] B
                WHERE A.[tid_ProgramCharacteristicDescriptor] = B.[tid_ProgramCharacteristicDescriptor]
            );


            DELETE A FROM [t_edfi].[ReasonExitedDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ReasonExitedDescriptor]
                FROM [t_edfi].[ReasonExitedDescriptorSnapshotRecord] B
                WHERE A.[tid_ReasonExitedDescriptor] = B.[tid_ReasonExitedDescriptor]
            );


            DELETE A FROM [t_edfi].[ReportCard] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ReportCard]
                FROM [t_edfi].[ReportCardSnapshotRecord] B
                WHERE A.[tid_ReportCard] = B.[tid_ReportCard]
            );


            DELETE A FROM [t_edfi].[ReporterDescriptionDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ReporterDescriptionDescriptor]
                FROM [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord] B
                WHERE A.[tid_ReporterDescriptionDescriptor] = B.[tid_ReporterDescriptionDescriptor]
            );


            DELETE A FROM [t_edfi].[ResidencyStatusDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ResidencyStatusDescriptor]
                FROM [t_edfi].[ResidencyStatusDescriptorSnapshotRecord] B
                WHERE A.[tid_ResidencyStatusDescriptor] = B.[tid_ResidencyStatusDescriptor]
            );


            DELETE A FROM [t_edfi].[ResponsibilityDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ResponsibilityDescriptor]
                FROM [t_edfi].[ResponsibilityDescriptorSnapshotRecord] B
                WHERE A.[tid_ResponsibilityDescriptor] = B.[tid_ResponsibilityDescriptor]
            );


            DELETE A FROM [t_edfi].[RestraintEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_RestraintEvent]
                FROM [t_edfi].[RestraintEventSnapshotRecord] B
                WHERE A.[tid_RestraintEvent] = B.[tid_RestraintEvent]
            );


            DELETE A FROM [t_edfi].[School] A
            WHERE NOT EXISTS
            (
                SELECT [tid_School]
                FROM [t_edfi].[SchoolSnapshotRecord] B
                WHERE A.[tid_School] = B.[tid_School]
            );


            DELETE A FROM [t_edfi].[SchoolFoodServicesEligibilityDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SchoolFoodServicesEligibilityDescriptor]
                FROM [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord] B
                WHERE A.[tid_SchoolFoodServicesEligibilityDescriptor] = B.[tid_SchoolFoodServicesEligibilityDescriptor]
            );


            DELETE A FROM [t_edfi].[SchoolYearType] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SchoolYearType]
                FROM [t_edfi].[SchoolYearTypeSnapshotRecord] B
                WHERE A.[tid_SchoolYearType] = B.[tid_SchoolYearType]
            );


            DELETE A FROM [t_edfi].[Section] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Section]
                FROM [t_edfi].[SectionSnapshotRecord] B
                WHERE A.[tid_Section] = B.[tid_Section]
            );


            DELETE A FROM [t_edfi].[SectionAttendanceTakenEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionAttendanceTakenEvent]
                FROM [t_edfi].[SectionAttendanceTakenEventSnapshotRecord] B
                WHERE A.[tid_SectionAttendanceTakenEvent] = B.[tid_SectionAttendanceTakenEvent]
            );


            DELETE A FROM [t_edfi].[SectionCharacteristicDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionCharacteristicDescriptor]
                FROM [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord] B
                WHERE A.[tid_SectionCharacteristicDescriptor] = B.[tid_SectionCharacteristicDescriptor]
            );


            DELETE A FROM [t_edfi].[SeparationReasonDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SeparationReasonDescriptor]
                FROM [t_edfi].[SeparationReasonDescriptorSnapshotRecord] B
                WHERE A.[tid_SeparationReasonDescriptor] = B.[tid_SeparationReasonDescriptor]
            );


            DELETE A FROM [t_edfi].[ServiceDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ServiceDescriptor]
                FROM [t_edfi].[ServiceDescriptorSnapshotRecord] B
                WHERE A.[tid_ServiceDescriptor] = B.[tid_ServiceDescriptor]
            );


            DELETE A FROM [t_edfi].[Session] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Session]
                FROM [t_edfi].[SessionSnapshotRecord] B
                WHERE A.[tid_Session] = B.[tid_Session]
            );


            DELETE A FROM [t_edfi].[SpecialEducationSettingDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SpecialEducationSettingDescriptor]
                FROM [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord] B
                WHERE A.[tid_SpecialEducationSettingDescriptor] = B.[tid_SpecialEducationSettingDescriptor]
            );


            DELETE A FROM [t_edfi].[Staff] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Staff]
                FROM [t_edfi].[StaffSnapshotRecord] B
                WHERE A.[tid_Staff] = B.[tid_Staff]
            );


            DELETE A FROM [t_edfi].[StaffClassificationDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffClassificationDescriptor]
                FROM [t_edfi].[StaffClassificationDescriptorSnapshotRecord] B
                WHERE A.[tid_StaffClassificationDescriptor] = B.[tid_StaffClassificationDescriptor]
            );


            DELETE A FROM [t_edfi].[StaffCohortAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffCohortAssociation]
                FROM [t_edfi].[StaffCohortAssociationSnapshotRecord] B
                WHERE A.[tid_StaffCohortAssociation] = B.[tid_StaffCohortAssociation]
            );


            DELETE A FROM [t_edfi].[StaffEducationOrganizationAssignmentAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffEducationOrganizationAssignmentAssociation]
                FROM [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord] B
                WHERE A.[tid_StaffEducationOrganizationAssignmentAssociation] = B.[tid_StaffEducationOrganizationAssignmentAssociation]
            );


            DELETE A FROM [t_edfi].[StaffEducationOrganizationEmploymentAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffEducationOrganizationEmploymentAssociation]
                FROM [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord] B
                WHERE A.[tid_StaffEducationOrganizationEmploymentAssociation] = B.[tid_StaffEducationOrganizationEmploymentAssociation]
            );


            DELETE A FROM [t_edfi].[StaffIdentificationSystemDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffIdentificationSystemDescriptor]
                FROM [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord] B
                WHERE A.[tid_StaffIdentificationSystemDescriptor] = B.[tid_StaffIdentificationSystemDescriptor]
            );


            DELETE A FROM [t_edfi].[StaffProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffProgramAssociation]
                FROM [t_edfi].[StaffProgramAssociationSnapshotRecord] B
                WHERE A.[tid_StaffProgramAssociation] = B.[tid_StaffProgramAssociation]
            );


            DELETE A FROM [t_edfi].[StaffSchoolAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffSchoolAssociation]
                FROM [t_edfi].[StaffSchoolAssociationSnapshotRecord] B
                WHERE A.[tid_StaffSchoolAssociation] = B.[tid_StaffSchoolAssociation]
            );


            DELETE A FROM [t_edfi].[StaffSectionAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffSectionAssociation]
                FROM [t_edfi].[StaffSectionAssociationSnapshotRecord] B
                WHERE A.[tid_StaffSectionAssociation] = B.[tid_StaffSectionAssociation]
            );


            DELETE A FROM [t_edfi].[StateEducationAgency] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StateEducationAgency]
                FROM [t_edfi].[StateEducationAgencySnapshotRecord] B
                WHERE A.[tid_StateEducationAgency] = B.[tid_StateEducationAgency]
            );


            DELETE A FROM [t_edfi].[Student] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Student]
                FROM [t_edfi].[StudentSnapshotRecord] B
                WHERE A.[tid_Student] = B.[tid_Student]
            );


            DELETE A FROM [t_edfi].[StudentAcademicRecord] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentAcademicRecord]
                FROM [t_edfi].[StudentAcademicRecordSnapshotRecord] B
                WHERE A.[tid_StudentAcademicRecord] = B.[tid_StudentAcademicRecord]
            );


            DELETE A FROM [t_edfi].[StudentAssessment] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentAssessment]
                FROM [t_edfi].[StudentAssessmentSnapshotRecord] B
                WHERE A.[tid_StudentAssessment] = B.[tid_StudentAssessment]
            );


            DELETE A FROM [t_edfi].[StudentCharacteristicDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentCharacteristicDescriptor]
                FROM [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord] B
                WHERE A.[tid_StudentCharacteristicDescriptor] = B.[tid_StudentCharacteristicDescriptor]
            );


            DELETE A FROM [t_edfi].[StudentCohortAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentCohortAssociation]
                FROM [t_edfi].[StudentCohortAssociationSnapshotRecord] B
                WHERE A.[tid_StudentCohortAssociation] = B.[tid_StudentCohortAssociation]
            );


            DELETE A FROM [t_edfi].[StudentCompetencyObjective] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentCompetencyObjective]
                FROM [t_edfi].[StudentCompetencyObjectiveSnapshotRecord] B
                WHERE A.[tid_StudentCompetencyObjective] = B.[tid_StudentCompetencyObjective]
            );


            DELETE A FROM [t_edfi].[StudentCTEProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentCTEProgramAssociation]
                FROM [t_edfi].[StudentCTEProgramAssociationSnapshotRecord] B
                WHERE A.[tid_StudentCTEProgramAssociation] = B.[tid_StudentCTEProgramAssociation]
            );


            DELETE A FROM [t_edfi].[StudentDisciplineIncidentAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentDisciplineIncidentAssociation]
                FROM [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord] B
                WHERE A.[tid_StudentDisciplineIncidentAssociation] = B.[tid_StudentDisciplineIncidentAssociation]
            );


            DELETE A FROM [t_edfi].[StudentEducationOrganizationAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentEducationOrganizationAssociation]
                FROM [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord] B
                WHERE A.[tid_StudentEducationOrganizationAssociation] = B.[tid_StudentEducationOrganizationAssociation]
            );


            DELETE A FROM [t_edfi].[StudentGradebookEntry] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentGradebookEntry]
                FROM [t_edfi].[StudentGradebookEntrySnapshotRecord] B
                WHERE A.[tid_StudentGradebookEntry] = B.[tid_StudentGradebookEntry]
            );


            DELETE A FROM [t_edfi].[StudentIdentificationSystemDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentIdentificationSystemDescriptor]
                FROM [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord] B
                WHERE A.[tid_StudentIdentificationSystemDescriptor] = B.[tid_StudentIdentificationSystemDescriptor]
            );


            DELETE A FROM [t_edfi].[StudentInterventionAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentInterventionAssociation]
                FROM [t_edfi].[StudentInterventionAssociationSnapshotRecord] B
                WHERE A.[tid_StudentInterventionAssociation] = B.[tid_StudentInterventionAssociation]
            );


            DELETE A FROM [t_edfi].[StudentInterventionAttendanceEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentInterventionAttendanceEvent]
                FROM [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord] B
                WHERE A.[tid_StudentInterventionAttendanceEvent] = B.[tid_StudentInterventionAttendanceEvent]
            );


            DELETE A FROM [t_edfi].[StudentLearningObjective] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentLearningObjective]
                FROM [t_edfi].[StudentLearningObjectiveSnapshotRecord] B
                WHERE A.[tid_StudentLearningObjective] = B.[tid_StudentLearningObjective]
            );


            DELETE A FROM [t_edfi].[StudentMigrantEducationProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentMigrantEducationProgramAssociation]
                FROM [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord] B
                WHERE A.[tid_StudentMigrantEducationProgramAssociation] = B.[tid_StudentMigrantEducationProgramAssociation]
            );


            DELETE A FROM [t_edfi].[StudentParentAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentParentAssociation]
                FROM [t_edfi].[StudentParentAssociationSnapshotRecord] B
                WHERE A.[tid_StudentParentAssociation] = B.[tid_StudentParentAssociation]
            );


            DELETE A FROM [t_edfi].[StudentProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentProgramAssociation]
                FROM [t_edfi].[StudentProgramAssociationSnapshotRecord] B
                WHERE A.[tid_StudentProgramAssociation] = B.[tid_StudentProgramAssociation]
            );


            DELETE A FROM [t_edfi].[StudentProgramAttendanceEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentProgramAttendanceEvent]
                FROM [t_edfi].[StudentProgramAttendanceEventSnapshotRecord] B
                WHERE A.[tid_StudentProgramAttendanceEvent] = B.[tid_StudentProgramAttendanceEvent]
            );


            DELETE A FROM [t_edfi].[StudentSchoolAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentSchoolAssociation]
                FROM [t_edfi].[StudentSchoolAssociationSnapshotRecord] B
                WHERE A.[tid_StudentSchoolAssociation] = B.[tid_StudentSchoolAssociation]
            );


            DELETE A FROM [t_edfi].[StudentSchoolAttendanceEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentSchoolAttendanceEvent]
                FROM [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord] B
                WHERE A.[tid_StudentSchoolAttendanceEvent] = B.[tid_StudentSchoolAttendanceEvent]
            );


            DELETE A FROM [t_edfi].[StudentSectionAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentSectionAssociation]
                FROM [t_edfi].[StudentSectionAssociationSnapshotRecord] B
                WHERE A.[tid_StudentSectionAssociation] = B.[tid_StudentSectionAssociation]
            );


            DELETE A FROM [t_edfi].[StudentSectionAttendanceEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentSectionAttendanceEvent]
                FROM [t_edfi].[StudentSectionAttendanceEventSnapshotRecord] B
                WHERE A.[tid_StudentSectionAttendanceEvent] = B.[tid_StudentSectionAttendanceEvent]
            );


            DELETE A FROM [t_edfi].[StudentSpecialEducationProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentSpecialEducationProgramAssociation]
                FROM [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord] B
                WHERE A.[tid_StudentSpecialEducationProgramAssociation] = B.[tid_StudentSpecialEducationProgramAssociation]
            );


            DELETE A FROM [t_edfi].[StudentTitleIPartAProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentTitleIPartAProgramAssociation]
                FROM [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord] B
                WHERE A.[tid_StudentTitleIPartAProgramAssociation] = B.[tid_StudentTitleIPartAProgramAssociation]
            );


            DELETE A FROM [t_edfi].[TeachingCredentialDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeachingCredentialDescriptor]
                FROM [t_edfi].[TeachingCredentialDescriptorSnapshotRecord] B
                WHERE A.[tid_TeachingCredentialDescriptor] = B.[tid_TeachingCredentialDescriptor]
            );


            DELETE A FROM [t_edfi].[TermDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TermDescriptor]
                FROM [t_edfi].[TermDescriptorSnapshotRecord] B
                WHERE A.[tid_TermDescriptor] = B.[tid_TermDescriptor]
            );


            DELETE A FROM [t_edfi].[WeaponDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_WeaponDescriptor]
                FROM [t_edfi].[WeaponDescriptorSnapshotRecord] B
                WHERE A.[tid_WeaponDescriptor] = B.[tid_WeaponDescriptor]
            );


        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

            BEGIN TRANSACTION
                INSERT INTO [tods].[AuditLog]
                (
                    ErrorNumber
                    , ErrorMessage
                    , ErrorSeverity
                    , SqlErrorSeverity
                    , ErrorState
                    , ErrorLine
                    , ErrorSproc
                )
                SELECT
                    (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                    , ERROR_MESSAGE()
                    , 'ERROR'
                    , ERROR_SEVERITY()
                    , CAST(ERROR_STATE() AS VARCHAR(10))
                    , CAST(ERROR_LINE() AS VARCHAR(10))
                    , COALESCE(ERROR_PROCEDURE(), 'error not within a sproc')
            COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_UpdateSnapshotMetadata] ******/

IF OBJECT_ID('[tods].[usp_UpdateSnapshotMetadata]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_UpdateSnapshotMetadata];
GO

CREATE PROCEDURE [tods].[usp_UpdateSnapshotMetadata]
    @pId UNIQUEIDENTIFIER
    --, @pSnapshotCode NVARCHAR(50)
    , @pSnapshotName NVARCHAR(1024)
    , @pDescription NVARCHAR(1024) = NULL
    , @pSnapshotDate DATE
    , @pBeginDate DATE
    , @pEndDate DATE = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @Message NVARCHAR(2048);

    SELECT @PartitionYearId =
    COALESCE
    (
        (SELECT PartitionYearConfigId FROM [tods].[PartitionYearConfig] WHERE BeginDate <= @pSnapshotDate AND @pSnapshotDate <= EndDate)
        , (SELECT MIN(PartitionYearConfigId) FROM [tods].[PartitionYearConfig])
        , (CAST(YEAR(@pSnapshotDate) AS SMALLINT))
    );

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

           -- ERROR CONDITIONS

            -- id does not exist
            IF @SnapshotId IS NULL
                BEGIN
                    SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                    THROW 50015, @Message, 1;
                END;


            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50013, CAST(@pId AS NVARCHAR(36)));
                    THROW 50013, @Message, 1;
                END;


            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50014, CAST(@pId AS NVARCHAR(36)));
                    THROW 50014, @Message, 1;
                END;


            -- snapshot name matches existing one in tods.snapshot table
            IF EXISTS
            (
                SELECT [SnapshotName]
                FROM [tods].[Snapshot]
                WHERE [SnapshotName] = @pSnapshotName
                AND [Id] <> @pId
                GROUP BY [SnapshotName]
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50004, @pSnapshotName);
                    THROW 50004, @Message, 1;
                END;


            -- snapshot date is before begin date
            IF @pSnapshotDate < @pBeginDate
                BEGIN
                    SET @Message = FORMATMESSAGE(50005, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50005, @Message, 1;
                END;


            -- snapshot date is on or after end date
            IF @pSnapshotDate >= @pEndDate
                BEGIN
                    SET @Message = FORMATMESSAGE(50006, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
                    THROW 50006, @Message, 1;
                END;


            -- begin date is in the future
            IF @pBeginDate > GETDATE()
                BEGIN
                    SET @Message = FORMATMESSAGE(50007, CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50007, @Message, 1;
                END;


             -- begin date overlaps another snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] <= @pBeginDate
                    AND @pBeginDate < COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                    AND [Id] <> @pId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50008, CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50008, @Message, 1;
                END;


            -- end date is before begin date
            IF @pBeginDate >= @pEndDate
                BEGIN
                    SET @Message = FORMATMESSAGE(50009, CAST(@pEndDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50009, @Message, 1;
                END;


            -- end date overlaps other snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE @pEndDate > [EffectiveBeginDate]
                    AND (
                           @pEndDate <= COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                           OR
                           (@pBegindate < [EffectiveBeginDate]
                            AND [EffectiveEndDate] IS NULL AND @pEndDate IS NULL)
                        )
                    AND [Id] <> @pId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
                    THROW 50010, @Message, 1;
                END;


            IF @pEndDate IS NULL AND EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
                    THROW 50010, @Message, 1;
                END;


            UPDATE [tods].[Snapshot]
                SET [SnapshotName] = @pSnapshotName
                  , [Description] = @pDescription
                  , [SnapshotDate] = @pSnapshotDate
                  , [EffectiveBeginDate] = @pBeginDate
                  , [EffectiveEndDate] = @pEndDate
                  , [t_PartitionYearId] = @PartitionYearId
            WHERE [Id] = @pId;

            UPDATE [tods].[SnapshotCode] SET [t_PartitionYearId] = @PartitionYearId WHERE [SnapshotId] = @SnapshotId;


            UPDATE [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AcademicWeekSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AccommodationDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AccountSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AccountabilityRatingSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AccountCodeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ActualSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AssessmentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AssessmentFamilySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AssessmentItemSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[BehaviorDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[BellScheduleSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[BudgetSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CalendarDateSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CalendarEventDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ClassPeriodSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CohortSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CompetencyObjectiveSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ContractedStaffSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CountryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CourseSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CourseOfferingSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CourseTranscriptSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CredentialSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[DiagnosisDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[DisabilityDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[DisciplineActionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[DisciplineDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[DisciplineIncidentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationContentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationOrganizationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EducationServiceCenterSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[EntryTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[FeederSchoolAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[GradeSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[GradebookEntrySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[GradeLevelDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[GradingPeriodSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[GraduationPlanSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[InterventionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[InterventionPrescriptionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[InterventionStudySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LanguageDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LearningObjectiveSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LearningStandardSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LeaveEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LevelDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LocalEducationAgencySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[LocationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ObjectiveAssessmentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[OpenStaffPositionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ParentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[PayrollSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[PostSecondaryEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ProgramSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ReportCardSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[RestraintEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SchoolSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SchoolYearTypeSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SectionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[ServiceDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SessionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffCohortAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffSchoolAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StaffSectionAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StateEducationAgencySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentAcademicRecordSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentAssessmentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentCohortAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentGradebookEntrySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentInterventionAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentLearningObjectiveSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentParentAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentSchoolAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentSectionAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[TermDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_edfi].[WeaponDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;


            -- No current snapshot
            IF NOT EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE EffectiveEndDate IS NULL
            )
            BEGIN
                MERGE [tods].[AuditLog] AS AL
                    USING
                    (
                        SELECT 80001 AS ErrorNumber
                            , 'The current snapshot was updated or deleted.  There is no current snapshot anymore.' AS ErrorMessage
                            , 'WARN' AS ErrorSeverity
                            , @SprocName AS ErrorSproc
                    ) AS TAL
                        ON AL.[ErrorNumber] = TAL.[ErrorNumber]
                        WHEN NOT MATCHED THEN
                            INSERT
                            (
                                [ErrorNumber]
                                , [ErrorMessage]
                                , [ErrorSeverity]
                                , [ErrorSproc]
                            )
                            VALUES
                            (
                                TAL.[ErrorNumber]
                                , TAL.[ErrorMessage]
                                , TAL.[ErrorSeverity]
                                , @SprocName
                            );
            END
            -- Clear any warnings about no current snapshot if we have a current snapshot now
            ELSE
                DELETE FROM [tods].[AuditLog] WHERE ErrorNumber = 80001;

        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        BEGIN TRANSACTION
            INSERT INTO [tods].[AuditLog]
            (
                ErrorNumber
                , ErrorMessage
                , ErrorSeverity
                , SqlErrorSeverity
                , ErrorState
                , ErrorLine
                , ErrorSproc
                , SnapshotId
            )
            SELECT
                (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                , ERROR_MESSAGE()
                , 'ERROR'
                , ERROR_SEVERITY()
                , CAST(ERROR_STATE() AS VARCHAR(10))
                , CAST(ERROR_LINE() AS VARCHAR(10))
                , @SprocName
                , @SnapshotId
        COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO
