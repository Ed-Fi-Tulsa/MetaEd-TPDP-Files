/****** PROCEDURE: [t_extension].[usp_dbAbsenceEventCategoryDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbAbsenceEventCategoryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAbsenceEventCategoryDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbAbsenceEventCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AbsenceEventCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AbsenceEventCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AbsenceEventCategoryType].[ShortDescription] AS AbsenceEventCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[AbsenceEventCategoryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AbsenceEventCategoryDescriptorId]
                LEFT JOIN [edfi].[AbsenceEventCategoryType] AS AbsenceEventCategoryType
                    ON [AbsenceEventCategoryType].[AbsenceEventCategoryTypeId] = T.[AbsenceEventCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AbsenceEventCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AbsenceEventCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AbsenceEventCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AbsenceEventCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AbsenceEventCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AbsenceEventCategoryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[AbsenceEventCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AbsenceEventCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAidTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbAidTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAidTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbAidTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AidTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AidTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AidType].[ShortDescription] AS AidType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[AidTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AidTypeDescriptorId]
                JOIN [edfi].[AidType] AS AidType
                    ON [AidType].[AidTypeId] = T.[AidTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AidType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AidType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AidTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AidTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AidTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AidTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AidTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[AidTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[AidTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudent] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudent];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudent] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , [ValueType].[ShortDescription] AS ValueType
                , T.[EducationOrganizationId]
                , T.[CourseCode]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , [SexType].[ShortDescription] AS SexType
                , [GenderType].[ShortDescription] AS GenderType
                , T.[HispanicLatinoEthnicity]
                , SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue
                , T.[Section504Enrollment]
                , T.[ELLEnrollment]
                , T.[ESLEnrollment]
                , T.[SPEDEnrollment]
                , T.[TitleIEnrollment]
                , T.[AtriskIndicator]
                , T.[Mobility]
                , SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[AnonymizedStudent] AS T
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON [ValueType].[ValueTypeId] = T.[ValueTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON [SchoolFoodServicesEligibilityDescriptor].[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [ValueType]
                    , [EducationOrganizationId]
                    , [CourseCode]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [TermDescriptorCodeValue]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [SexType]
                    , [GenderType]
                    , [HispanicLatinoEthnicity]
                    , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , [Section504Enrollment]
                    , [ELLEnrollment]
                    , [ESLEnrollment]
                    , [SPEDEnrollment]
                    , [TitleIEnrollment]
                    , [AtriskIndicator]
                    , [Mobility]
                    , [SchoolFoodServicesEligibilityDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[ValueType]
                    , S.[EducationOrganizationId]
                    , S.[CourseCode]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[TermDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[SexType]
                    , S.[GenderType]
                    , S.[HispanicLatinoEthnicity]
                    , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , S.[Section504Enrollment]
                    , S.[ELLEnrollment]
                    , S.[ESLEnrollment]
                    , S.[SPEDEnrollment]
                    , S.[TitleIEnrollment]
                    , S.[AtriskIndicator]
                    , S.[Mobility]
                    , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudent]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudent] AS T
            JOIN [extension].[AnonymizedStudent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbAnonymizedStudentRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentRace] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentRace];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentRace]
            (
                [tid_AnonymizedStudent]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudent]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], T.[FactsAsOfDate], RaceType.[ShortDescription] AS RaceType, T.[SchoolYear]
                , T.[CreateDate]
                , AnonymizedStudent.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudent.[Id] AS ParentId
                FROM [extension].[AnonymizedStudentRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [extension].[AnonymizedStudent] AS AnonymizedStudent
                    ON AnonymizedStudent.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudent.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudent.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentLanguage] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentLanguage];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentLanguage]
            (
                [tid_AnonymizedStudent]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_AnonymizedStudentLanguage]
            INTO @Tids
            SELECT T.[tid_AnonymizedStudent]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], T.[FactsAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[SchoolYear], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , AnonymizedStudent.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudent.[Id] AS ParentId
                FROM [extension].[AnonymizedStudentLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [extension].[AnonymizedStudent] AS AnonymizedStudent
                    ON AnonymizedStudent.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudent.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudent.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_AnonymizedStudentLanguage]
                , T.[AnonymizedStudentIdentifier]
                , T.[FactsAsOfDate]
                , S.[LanguageDescriptorCodeValue]
                , T.[SchoolYear]
                , S.[LanguageDescriptorNamespace]
            FROM [t_extension].[AnonymizedStudentLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_AnonymizedStudent] = T.[tid_AnonymizedStudent]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_AnonymizedStudentLanguage] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbAnonymizedStudentLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentLanguageUse] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentLanguageUse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentLanguageUse];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentLanguageUse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentLanguageUse]
            (
                [tid_AnonymizedStudentLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudentLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], T.[FactsAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, T.[SchoolYear], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [extension].[AnonymizedStudentLanguageUse] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AnonymizedStudentIdentifier] = S.[AnonymizedStudentIdentifier]
                AND T.[FactsAsOfDate] = S.[FactsAsOfDate]
                AND T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[SchoolYear] = S.[SchoolYear]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentDisability] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentDisability];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentDisability]
            (
                [tid_AnonymizedStudent]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudent]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[FactsAsOfDate], T.[SchoolYear], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , AnonymizedStudent.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudent.[Id] AS ParentId
                FROM [extension].[AnonymizedStudentDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [extension].[AnonymizedStudent] AS AnonymizedStudent
                    ON AnonymizedStudent.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudent.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudent.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAcademicRecord] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentAcademicRecord]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentAcademicRecord];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentAcademicRecord] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SessionGradePointAverage]
                , T.[CumulativeGradePointAverage]
                , T.[GPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[AnonymizedStudentAcademicRecord] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SessionGradePointAverage]
                    , [CumulativeGradePointAverage]
                    , [GPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SessionGradePointAverage]
                    , S.[CumulativeGradePointAverage]
                    , S.[GPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentAcademicRecord]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentAcademicRecord] AS T
            JOIN [extension].[AnonymizedStudentAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAssessment] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentAssessment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessment];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentAssessment] AS T
            USING
            (
                SELECT T.[AdministrationDate]
                , T.[AnonymizedStudentIdentifier]
                , T.[AssessmentIdentifier]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[TakenSchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[AnonymizedStudentAssessment] AS T
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AdministrationDate]
                    , [AnonymizedStudentIdentifier]
                    , [AssessmentIdentifier]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TakenSchoolYear]
                    , [TermDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AdministrationDate]
                    , S.[AnonymizedStudentIdentifier]
                    , S.[AssessmentIdentifier]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TakenSchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentAssessment]
                , INSERTED.[AdministrationDate]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[AssessmentIdentifier]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentAssessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentAssessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentAssessment] AS T
            JOIN [extension].[AnonymizedStudentAssessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAssessmentScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentAssessmentScoreResult]
            (
                [tid_AnonymizedStudentAssessment]
                , [Result]
                , [ResultDatatypeType]
                , [AssessmentReportingMethodType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudentAssessment]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[AssessmentReportingMethodType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AdministrationDate], T.[AnonymizedStudentIdentifier], T.[AssessmentIdentifier], T.[FactsAsOfDate], T.[SchoolYear], T.[TakenSchoolYear], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType
                , T.[CreateDate]
                , AnonymizedStudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudentAssessment.[Id] AS ParentId
                FROM [extension].[AnonymizedStudentAssessmentScoreResult] AS T 
                JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [extension].[AnonymizedStudentAssessment] AS AnonymizedStudentAssessment
                    ON AnonymizedStudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND AnonymizedStudentAssessment.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudentAssessment.[AssessmentIdentifier] = T.[AssessmentIdentifier]
                    AND AnonymizedStudentAssessment.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudentAssessment.[SchoolYear] = T.[SchoolYear]
                    AND AnonymizedStudentAssessment.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentAssessmentPerformanceLevel]
            (
                [tid_AnonymizedStudentAssessment]
                , [PerformanceLevelMet]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudentAssessment]
                , S.[PerformanceLevelMet]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AdministrationDate], T.[AnonymizedStudentIdentifier], T.[AssessmentIdentifier], T.[FactsAsOfDate], T.[SchoolYear], T.[TakenSchoolYear], T.[PerformanceLevelMet], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , AnonymizedStudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudentAssessment.[Id] AS ParentId
                FROM [extension].[AnonymizedStudentAssessmentPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [extension].[AnonymizedStudentAssessment] AS AnonymizedStudentAssessment
                    ON AnonymizedStudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND AnonymizedStudentAssessment.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudentAssessment.[AssessmentIdentifier] = T.[AssessmentIdentifier]
                    AND AnonymizedStudentAssessment.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudentAssessment.[SchoolYear] = T.[SchoolYear]
                    AND AnonymizedStudentAssessment.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentCourseAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentCourseAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentCourseAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentCourseAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentCourseAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentCourseAssociation] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[BeginDate]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[AnonymizedStudentCourseAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [BeginDate]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[BeginDate]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentCourseAssociation]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[BeginDate]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentCourseAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentCourseAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentCourseAssociation] AS T
            JOIN [extension].[AnonymizedStudentCourseAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentCourseTranscript] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentCourseTranscript]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentCourseTranscript];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentCourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentCourseTranscript] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[AnonymizedStudentCourseTranscript] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentCourseTranscript]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentCourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentCourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentCourseTranscript] AS T
            JOIN [extension].[AnonymizedStudentCourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[AnonymizedStudentEducationOrganizationAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [BeginDate]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentEducationOrganizationAssociation]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentEducationOrganizationAssociation] AS T
            JOIN [extension].[AnonymizedStudentEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentSectionAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbAnonymizedStudentSectionAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAnonymizedStudentSectionAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentSectionAssociation] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[EndDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[AnonymizedStudentSectionAssociation] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EndDate]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EndDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentSectionAssociation]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentSectionAssociation] AS T
            JOIN [extension].[AnonymizedStudentSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicant] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicant]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicant];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicant]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Applicant] AS T
            USING
            (
                SELECT T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[HispanicLatinoEthnicity]
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , HighestCompletedLevelOfEducationDescriptor.[CodeValue] AS HighestCompletedLevelOfEducationDescriptorCodeValue
                , T.[YearsOfPriorProfessionalExperience]
                , T.[YearsOfPriorTeachingExperience]
                , T.[LoginId]
                , T.[HighlyQualifiedTeacher]
                , HighlyQualifiedAcademicSubjectDescriptor.[CodeValue] AS HighlyQualifiedAcademicSubjectDescriptorCodeValue
                , T.[ProspectIdentifier]
                , T.[ProspectEducationOrganizationId]
                , [GenderType].[ShortDescription] AS GenderType
                , HighlyQualifiedAcademicSubjectDescriptor.[Namespace] AS HighlyQualifiedAcademicSubjectDescriptorNamespace
                , HighestCompletedLevelOfEducationDescriptor.[Namespace] AS HighestCompletedLevelOfEducationDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[Applicant] AS T
                LEFT JOIN [edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS HighestCompletedLevelOfEducationDescriptor
                    ON [HighestCompletedLevelOfEducationDescriptor].[DescriptorId] = T.[HighestCompletedLevelOfEducationDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS HighlyQualifiedAcademicSubjectDescriptor
                    ON [HighlyQualifiedAcademicSubjectDescriptor].[DescriptorId] = T.[HighlyQualifiedAcademicSubjectDescriptorId]
                LEFT JOIN [edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ApplicantIdentifier]
                    , [EducationOrganizationId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [HispanicLatinoEthnicity]
                    , [CitizenshipStatusType]
                    , [HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , [YearsOfPriorProfessionalExperience]
                    , [YearsOfPriorTeachingExperience]
                    , [LoginId]
                    , [HighlyQualifiedTeacher]
                    , [HighlyQualifiedAcademicSubjectDescriptorCodeValue]
                    , [ProspectIdentifier]
                    , [ProspectEducationOrganizationId]
                    , [GenderType]
                    , [HighlyQualifiedAcademicSubjectDescriptorNamespace]
                    , [HighestCompletedLevelOfEducationDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ApplicantIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[HispanicLatinoEthnicity]
                    , S.[CitizenshipStatusType]
                    , S.[HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , S.[YearsOfPriorProfessionalExperience]
                    , S.[YearsOfPriorTeachingExperience]
                    , S.[LoginId]
                    , S.[HighlyQualifiedTeacher]
                    , S.[HighlyQualifiedAcademicSubjectDescriptorCodeValue]
                    , S.[ProspectIdentifier]
                    , S.[ProspectEducationOrganizationId]
                    , S.[GenderType]
                    , S.[HighlyQualifiedAcademicSubjectDescriptorNamespace]
                    , S.[HighestCompletedLevelOfEducationDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Applicant]
                , INSERTED.[ApplicantIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ApplicantSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Applicant]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Applicant]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Applicant] AS T
            JOIN [extension].[Applicant] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbApplicantStaffIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantBackgroundCheck] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantTeacherPreparationProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantAid] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantStaffIdentificationCode] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantStaffIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantStaffIdentificationCode];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantStaffIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantStaffIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantStaffIdentificationCode]
            (
                [tid_Applicant]
                , [StaffIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [StaffIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[StaffIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StaffIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], StaffIdentificationSystemDescriptor.[CodeValue] AS StaffIdentificationSystemDescriptorCodeValue, T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], StaffIdentificationSystemDescriptor.[Namespace] AS StaffIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantStaffIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS StaffIdentificationSystemDescriptor
                    ON StaffIdentificationSystemDescriptor.[DescriptorId] = T.[StaffIdentificationSystemDescriptorId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantAddress]
            (
                [tid_Applicant]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantInternationalAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantInternationalAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantInternationalAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantInternationalAddress]
            (
                [tid_Applicant]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantInternationalAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantTelephone] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantTelephone];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantTelephone]
            (
                [tid_Applicant]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantTelephone] AS T 
                JOIN [edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantElectronicMail] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantElectronicMail]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantElectronicMail];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantElectronicMail]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantElectronicMail]
            (
                [tid_Applicant]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], ElectronicMailType.[ShortDescription] AS ElectronicMailType, T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantElectronicMail] AS T 
                JOIN [edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantRace] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantRace];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantRace]
            (
                [tid_Applicant]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], RaceType.[ShortDescription] AS RaceType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantVisa] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantVisa]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantVisa];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantVisa]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantVisa]
            (
                [tid_Applicant]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantVisa] AS T 
                JOIN [edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantLanguage] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantLanguage];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantLanguage]
            (
                [tid_Applicant]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_ApplicantLanguage]
            INTO @Tids
            SELECT T.[tid_Applicant]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_ApplicantLanguage]
                , T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
            FROM [t_extension].[ApplicantLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_Applicant] = T.[tid_Applicant]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_ApplicantLanguage] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbApplicantLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantLanguageUse] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantLanguageUse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantLanguageUse];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantLanguageUse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantLanguageUse]
            (
                [tid_ApplicantLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ApplicantLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [extension].[ApplicantLanguageUse] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ApplicantIdentifier] = S.[ApplicantIdentifier]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantCredential] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantCredential]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantCredential];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantCredential]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantCredential]
            (
                [tid_Applicant]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[CredentialIdentifier], T.[EducationOrganizationId], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantCredential] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantBackgroundCheck] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantBackgroundCheck]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantBackgroundCheck];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantBackgroundCheck]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantBackgroundCheckKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantBackgroundCheck]
            (
                [tid_Applicant]
                , [BackgroundCheckTypeDescriptorCodeValue]
                , [BackgroundCheckRequestedDate]
                , [BackgroundCheckStatusDescriptorCodeValue]
                , [BackgroundCheckCompletedDate]
                , [Fingerprint]
                , [BackgroundCheckStatusDescriptorNamespace]
                , [BackgroundCheckTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[BackgroundCheckTypeDescriptorCodeValue]
                , S.[BackgroundCheckRequestedDate]
                , S.[BackgroundCheckStatusDescriptorCodeValue]
                , S.[BackgroundCheckCompletedDate]
                , S.[Fingerprint]
                , S.[BackgroundCheckStatusDescriptorNamespace]
                , S.[BackgroundCheckTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], BackgroundCheckTypeDescriptor.[CodeValue] AS BackgroundCheckTypeDescriptorCodeValue, T.[EducationOrganizationId], T.[BackgroundCheckRequestedDate], BackgroundCheckStatusDescriptor.[CodeValue] AS BackgroundCheckStatusDescriptorCodeValue, T.[BackgroundCheckCompletedDate], T.[Fingerprint], BackgroundCheckStatusDescriptor.[Namespace] AS BackgroundCheckStatusDescriptorNamespace, BackgroundCheckTypeDescriptor.[Namespace] AS BackgroundCheckTypeDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantBackgroundCheck] AS T 
                JOIN [edfi].[Descriptor] AS BackgroundCheckTypeDescriptor
                    ON BackgroundCheckTypeDescriptor.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS BackgroundCheckStatusDescriptor
                    ON BackgroundCheckStatusDescriptor.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantTeacherPreparationProgram] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantTeacherPreparationProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantTeacherPreparationProgram];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantTeacherPreparationProgram]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantTeacherPreparationProgramKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantTeacherPreparationProgram]
            (
                [tid_Applicant]
                , [TeacherPreparationProgramName]
                , [TeacherPreparationProgramIdentifier]
                , [TeacherPreparationProgramTypeDescriptorCodeValue]
                , [NameOfInstitution]
                , [MajorSpecialization]
                , [GPA]
                , [LevelOfDegreeAwardedDescriptorCodeValue]
                , [LevelOfDegreeAwardedDescriptorNamespace]
                , [TeacherPreparationProgramTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_ApplicantTeacherPreparationProgram]
            INTO @Tids
            SELECT T.[tid_Applicant]
                , S.[TeacherPreparationProgramName]
                , S.[TeacherPreparationProgramIdentifier]
                , S.[TeacherPreparationProgramTypeDescriptorCodeValue]
                , S.[NameOfInstitution]
                , S.[MajorSpecialization]
                , S.[GPA]
                , S.[LevelOfDegreeAwardedDescriptorCodeValue]
                , S.[LevelOfDegreeAwardedDescriptorNamespace]
                , S.[TeacherPreparationProgramTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[TeacherPreparationProgramName], T.[TeacherPreparationProgramIdentifier], TeacherPreparationProgramTypeDescriptor.[CodeValue] AS TeacherPreparationProgramTypeDescriptorCodeValue, T.[NameOfInstitution], T.[MajorSpecialization], T.[GPA], LevelOfDegreeAwardedDescriptor.[CodeValue] AS LevelOfDegreeAwardedDescriptorCodeValue, LevelOfDegreeAwardedDescriptor.[Namespace] AS LevelOfDegreeAwardedDescriptorNamespace, TeacherPreparationProgramTypeDescriptor.[Namespace] AS TeacherPreparationProgramTypeDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantTeacherPreparationProgram] AS T 
                JOIN [edfi].[Descriptor] AS TeacherPreparationProgramTypeDescriptor
                    ON TeacherPreparationProgramTypeDescriptor.[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                JOIN [edfi].[Descriptor] AS LevelOfDegreeAwardedDescriptor
                    ON LevelOfDegreeAwardedDescriptor.[DescriptorId] = T.[LevelOfDegreeAwardedDescriptorId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_ApplicantTeacherPreparationProgram]
                , T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , S.[TeacherPreparationProgramName]
            FROM [t_extension].[ApplicantTeacherPreparationProgram] AS S
            JOIN @pTids AS T
                ON S.[tid_Applicant] = T.[tid_Applicant]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_ApplicantTeacherPreparationProgram] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbApplicantTeacherPreparationProgramAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantTeacherPreparationProgramAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantTeacherPreparationProgramAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantTeacherPreparationProgramAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantTeacherPreparationProgramAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantTeacherPreparationProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantTeacherPreparationProgramAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantTeacherPreparationProgramAddress]
            (
                [tid_ApplicantTeacherPreparationProgram]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ApplicantTeacherPreparationProgram]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[TeacherPreparationProgramName], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                FROM [extension].[ApplicantTeacherPreparationProgramAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ApplicantIdentifier] = S.[ApplicantIdentifier]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[TeacherPreparationProgramName] = S.[TeacherPreparationProgramName];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantDisability] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantDisability];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantDisability]
            (
                [tid_Applicant]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[EducationOrganizationId], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantAid] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantAid]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantAid];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantAid]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantAidKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantAid]
            (
                [tid_Applicant]
                , [AidTypeDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [AidConditionDescription]
                , [AidAmount]
                , [PellGrantRecipient]
                , [AidTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AidTypeDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[AidConditionDescription]
                , S.[AidAmount]
                , S.[PellGrantRecipient]
                , S.[AidTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AidTypeDescriptor.[CodeValue] AS AidTypeDescriptorCodeValue, T.[ApplicantIdentifier], T.[BeginDate], T.[EducationOrganizationId], T.[EndDate], T.[AidConditionDescription], T.[AidAmount], T.[PellGrantRecipient], AidTypeDescriptor.[Namespace] AS AidTypeDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantAid] AS T 
                JOIN [edfi].[Descriptor] AS AidTypeDescriptor
                    ON AidTypeDescriptor.[DescriptorId] = T.[AidTypeDescriptorId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantScoreResult] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantScoreResult]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantScoreResult];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantScoreResult]
            (
                [tid_Applicant]
                , [AssessmentReportingMethodType]
                , [Result]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AssessmentReportingMethodType]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[EducationOrganizationId], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantScoreResult] AS T 
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantIdentificationDocument] ******/

IF OBJECT_ID('[t_extension].[usp_dbApplicantIdentificationDocument]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbApplicantIdentificationDocument];
GO

CREATE PROCEDURE [t_extension].[usp_dbApplicantIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantIdentificationDocument]
            (
                [tid_Applicant]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [extension].[ApplicantIdentificationDocument] AS T 
                JOIN [edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbBackgroundCheckStatusDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbBackgroundCheckStatusDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbBackgroundCheckStatusDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbBackgroundCheckStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_BackgroundCheckStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[BackgroundCheckStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BackgroundCheckStatusType].[ShortDescription] AS BackgroundCheckStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[BackgroundCheckStatusDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                LEFT JOIN [edfi].[BackgroundCheckStatusType] AS BackgroundCheckStatusType
                    ON [BackgroundCheckStatusType].[BackgroundCheckStatusTypeId] = T.[BackgroundCheckStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BackgroundCheckStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BackgroundCheckStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BackgroundCheckStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BackgroundCheckStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BackgroundCheckStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[BackgroundCheckStatusDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[BackgroundCheckStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[BackgroundCheckStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbBackgroundCheckTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbBackgroundCheckTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbBackgroundCheckTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbBackgroundCheckTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_BackgroundCheckTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[BackgroundCheckTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BackgroundCheckType].[ShortDescription] AS BackgroundCheckType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[BackgroundCheckTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [edfi].[BackgroundCheckType] AS BackgroundCheckType
                    ON [BackgroundCheckType].[BackgroundCheckTypeId] = T.[BackgroundCheckTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BackgroundCheckType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BackgroundCheckType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BackgroundCheckTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BackgroundCheckTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BackgroundCheckTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[BackgroundCheckTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[BackgroundCheckTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[BackgroundCheckTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbBoardCertificationTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbBoardCertificationTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbBoardCertificationTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbBoardCertificationTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_BoardCertificationTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[BoardCertificationTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BoardCertificationType].[ShortDescription] AS BoardCertificationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[BoardCertificationTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BoardCertificationTypeDescriptorId]
                JOIN [edfi].[BoardCertificationType] AS BoardCertificationType
                    ON [BoardCertificationType].[BoardCertificationTypeId] = T.[BoardCertificationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BoardCertificationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BoardCertificationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BoardCertificationTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BoardCertificationTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BoardCertificationTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[BoardCertificationTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[BoardCertificationTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[BoardCertificationTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCertificationExamTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbCertificationExamTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCertificationExamTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbCertificationExamTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CertificationExamTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CertificationExamTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [CertificationExamType].[ShortDescription] AS CertificationExamType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[CertificationExamTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CertificationExamTypeDescriptorId]
                JOIN [edfi].[CertificationExamType] AS CertificationExamType
                    ON [CertificationExamType].[CertificationExamTypeId] = T.[CertificationExamTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [CertificationExamType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[CertificationExamType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CertificationExamTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CertificationExamTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CertificationExamTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CertificationExamTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[CertificationExamTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[CertificationExamTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseCourseTranscriptFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseCourseTranscriptFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[CourseCourseTranscriptFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseCourseTranscriptFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseCourseTranscriptFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseCourseTranscriptFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseCourseTranscriptFacts] AS T
            JOIN [extension].[CourseCourseTranscriptFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled]
            (
                [tid_CourseCourseTranscriptFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseCourseTranscriptFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[CourseCourseTranscriptFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseCourseTranscriptFacts] AS CourseCourseTranscriptFacts
                    ON CourseCourseTranscriptFacts.[CourseCode] = T.[CourseCode]
                    AND CourseCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
            (
                [tid_CourseCourseTranscriptFacts]
                , [FinalLetterGrade]
                , [LetterGradeTypeNumber]
                , [LetterGradeTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseCourseTranscriptFacts]
                , S.[FinalLetterGrade]
                , S.[LetterGradeTypeNumber]
                , S.[LetterGradeTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[FinalLetterGrade], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[LetterGradeTypeNumber], T.[LetterGradeTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[CourseCourseTranscriptFacts] AS CourseCourseTranscriptFacts
                    ON CourseCourseTranscriptFacts.[CourseCode] = T.[CourseCode]
                    AND CourseCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsAggregatedNumericGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned]
            (
                [tid_CourseCourseTranscriptFacts]
                , [AverageFinalNumericGradeEarned]
                , [NumericGradeNCount]
                , [NumericGradeStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseCourseTranscriptFacts]
                , S.[AverageFinalNumericGradeEarned]
                , S.[NumericGradeNCount]
                , S.[NumericGradeStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AverageFinalNumericGradeEarned], T.[NumericGradeNCount], T.[NumericGradeStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[CourseCourseTranscriptFacts] AS CourseCourseTranscriptFacts
                    ON CourseCourseTranscriptFacts.[CourseCode] = T.[CourseCode]
                    AND CourseCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAcademicRecordFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseStudentAcademicRecordFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AggregatedGPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[CourseStudentAcademicRecordFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [AggregatedGPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[AggregatedGPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseStudentAcademicRecordFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseStudentAcademicRecordFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseStudentAcademicRecordFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseStudentAcademicRecordFacts] AS T
            JOIN [extension].[CourseStudentAcademicRecordFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled]
            (
                [tid_CourseStudentAcademicRecordFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAcademicRecordFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentAcademicRecordFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentAcademicRecordFacts] AS CourseStudentAcademicRecordFacts
                    ON CourseStudentAcademicRecordFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
            (
                [tid_CourseStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[CourseStudentAcademicRecordFacts] AS CourseStudentAcademicRecordFacts
                    ON CourseStudentAcademicRecordFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
            (
                [tid_CourseStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[CourseStudentAcademicRecordFacts] AS CourseStudentAcademicRecordFacts
                    ON CourseStudentAcademicRecordFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAssessmentFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseStudentAssessmentFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[TakenSchoolYear]
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[AdministrationDate]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[CourseStudentAssessmentFacts] AS T
                LEFT JOIN .[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [TakenSchoolYear]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [AdministrationDate]
                    , [TermDescriptorCodeValue]
                    , [TermDescriptorNamespace]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[TakenSchoolYear]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[TermDescriptorCodeValue]
                    , S.[TermDescriptorNamespace]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseStudentAssessmentFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseStudentAssessmentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseStudentAssessmentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseStudentAssessmentFacts] AS T
            JOIN [extension].[CourseStudentAssessmentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled]
            (
                [tid_CourseStudentAssessmentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAssessmentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , CourseStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentAssessmentFactsStudentsEnrolled] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentAssessmentFacts] AS CourseStudentAssessmentFacts
                    ON CourseStudentAssessmentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsAggregatedScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult]
            (
                [tid_CourseStudentAssessmentFacts]
                , [AssessmentReportingMethodType]
                , [AverageScoreResultDatatypeType]
                , [AverageScoreResult]
                , [ScoreNCount]
                , [ScoreStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAssessmentFacts]
                , S.[AssessmentReportingMethodType]
                , S.[AverageScoreResultDatatypeType]
                , S.[AverageScoreResult]
                , S.[ScoreNCount]
                , S.[ScoreStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, AverageScoreResultDatatypeType.[ShortDescription] AS AverageScoreResultDatatypeType, T.[AverageScoreResult], T.[ScoreNCount], T.[ScoreStandardDeviation]
                , T.[CreateDate]
                , CourseStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentAssessmentFactsAggregatedScoreResult] AS T 
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[ResultDatatypeType] AS AverageScoreResultDatatypeType
                    ON AverageScoreResultDatatypeType.[ResultDatatypeTypeId] = T.[AverageScoreResultDatatypeTypeId]
                JOIN [extension].[CourseStudentAssessmentFacts] AS CourseStudentAssessmentFacts
                    ON CourseStudentAssessmentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsAggregatedPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel]
            (
                [tid_CourseStudentAssessmentFacts]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMetNumber]
                , [PerformanceLevelMetPercentage]
                , [PerformanceLevelTypeNumber]
                , [PerformanceLevelTypePercentage]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAssessmentFacts]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMetNumber]
                , S.[PerformanceLevelMetPercentage]
                , S.[PerformanceLevelTypeNumber]
                , S.[PerformanceLevelTypePercentage]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[TakenSchoolYear], T.[PerformanceLevelMetNumber], T.[PerformanceLevelMetPercentage], T.[PerformanceLevelTypeNumber], T.[PerformanceLevelTypePercentage], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [extension].[CourseStudentAssessmentFacts] AS CourseStudentAssessmentFacts
                    ON CourseStudentAssessmentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseStudentFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[CourseStudentFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseStudentFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseStudentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseStudentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseStudentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseStudentFacts] AS T
            JOIN [extension].[CourseStudentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseStudentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedGender] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedByDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSPED] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsStudentsEnrolled]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsStudentsEnrolled] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSex] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedSex]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSex];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSex]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSex]
            (
                [tid_CourseStudentFacts]
                , [SexType]
                , [ValueType]
                , [SexTypeNumber]
                , [SexTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[SexType]
                , S.[ValueType]
                , S.[SexTypeNumber]
                , S.[SexTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], SexType.[ShortDescription] AS SexType, ValueType.[ShortDescription] AS ValueType, T.[SexTypeNumber], T.[SexTypePercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedSex] AS T 
                JOIN [edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedGender] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedGender]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedGender];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedGender]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedGenderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedGender]
            (
                [tid_CourseStudentFacts]
                , [GenderType]
                , [ValueType]
                , [GenderTypeNumber]
                , [GenderTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[GenderType]
                , S.[ValueType]
                , S.[GenderTypeNumber]
                , S.[GenderTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], GenderType.[ShortDescription] AS GenderType, ValueType.[ShortDescription] AS ValueType, T.[GenderTypeNumber], T.[GenderTypePercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedGender] AS T 
                JOIN [edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedHispanicLatinoEthnicityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity]
            (
                [tid_CourseStudentFacts]
                , [HispanicLatinoEthnicity]
                , [ValueType]
                , [HispanicLatinoEthnicityNumber]
                , [HispanicLatinoEthnicityPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[HispanicLatinoEthnicity]
                , S.[ValueType]
                , S.[HispanicLatinoEthnicityNumber]
                , S.[HispanicLatinoEthnicityPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[HispanicLatinoEthnicity], ValueType.[ShortDescription] AS ValueType, T.[HispanicLatinoEthnicityNumber], T.[HispanicLatinoEthnicityPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedRace] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedRace];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedRace]
            (
                [tid_CourseStudentFacts]
                , [RaceType]
                , [ValueType]
                , [RaceTypeNumber]
                , [RaceTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[RaceType]
                , S.[ValueType]
                , S.[RaceTypeNumber]
                , S.[RaceTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], RaceType.[ShortDescription] AS RaceType, ValueType.[ShortDescription] AS ValueType, T.[RaceTypeNumber], T.[RaceTypePercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSchoolFoodServicesEligibilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility]
            (
                [tid_CourseStudentFacts]
                , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [TypePercentage]
                , [SchoolFoodServicesEligibilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[TypePercentage]
                , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[TypePercentage], SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility] AS T 
                JOIN [edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON SchoolFoodServicesEligibilityDescriptor.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedLanguage] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedLanguage];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedLanguage]
            (
                [tid_CourseStudentFacts]
                , [LanguageDescriptorCodeValue]
                , [ValueType]
                , [LanguageTypeNumber]
                , [LanguageTypePercentage]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[LanguageDescriptorCodeValue]
                , S.[ValueType]
                , S.[LanguageTypeNumber]
                , S.[LanguageTypePercentage]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[LanguageTypeNumber], T.[LanguageTypePercentage], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedByDisability] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedByDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedByDisability];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedByDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedByDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedByDisability]
            (
                [tid_CourseStudentFacts]
                , [DisabilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [Percentage]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[DisabilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[Percentage]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[Percentage], DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedByDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [StudentsDisabledNumber]
                , [StudentsDisabledPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[StudentsDisabledNumber]
                , S.[StudentsDisabledPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[StudentsDisabledNumber], T.[StudentsDisabledPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedELLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedELLEnrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [ELLEnrollmentNumber]
                , [ELLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[ELLEnrollmentNumber]
                , S.[ELLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ELLEnrollmentNumber], T.[ELLEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedELLEnrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedESLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedESLEnrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [ESLEnrollmentNumber]
                , [ESLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[ESLEnrollmentNumber]
                , S.[ESLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ESLEnrollmentNumber], T.[ESLEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedESLEnrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSection504EnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSection504Enrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [Number504Enrolled]
                , [Percentage504Enrolled]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[Number504Enrolled]
                , S.[Percentage504Enrolled]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[Number504Enrolled], T.[Percentage504Enrolled]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedSection504Enrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSPED] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedSPED]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSPED];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSPED]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSPEDKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSPED]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [SPEDEnrollmentNumber]
                , [SPEDEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[SPEDEnrollmentNumber]
                , S.[SPEDEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[SPEDEnrollmentNumber], T.[SPEDEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedSPED] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedTitleIEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [TitleIEnrollmentNumber]
                , [TitleIEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[TitleIEnrollmentNumber]
                , S.[TitleIEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TitleIEnrollmentNumber], T.[TitleIEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [extension].[CourseStudentFactsAggregatedTitleIEnrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyQuestionResponseFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseSurveyQuestionResponseFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyQuestionResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseSurveyQuestionResponseFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[QuestionCode]
                , T.[SurveyIdentifier]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[CourseSurveyQuestionResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [QuestionCode]
                    , [SurveyIdentifier]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseSurveyQuestionResponseFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseSurveyQuestionResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseSurveyQuestionResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseSurveyQuestionResponseFacts] AS T
            JOIN [extension].[CourseSurveyQuestionResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse]
            (
                [tid_CourseSurveyQuestionResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseSurveyQuestionResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , CourseSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse] AS T 
                JOIN [extension].[CourseSurveyQuestionResponseFacts] AS CourseSurveyQuestionResponseFacts
                    ON CourseSurveyQuestionResponseFacts.[CourseCode] = T.[CourseCode]
                    AND CourseSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND CourseSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
            (
                [tid_CourseSurveyQuestionResponseFacts]
                , [AggregatedMatrixElement]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseSurveyQuestionResponseFacts]
                , S.[AggregatedMatrixElement]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AggregatedMatrixElement], T.[AverageNumericResponse], T.[CourseCode], T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , CourseSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS T 
                JOIN [extension].[CourseSurveyQuestionResponseFacts] AS CourseSurveyQuestionResponseFacts
                    ON CourseSurveyQuestionResponseFacts.[CourseCode] = T.[CourseCode]
                    AND CourseSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND CourseSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyResponseFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseSurveyResponseFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseSurveyResponseFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseSurveyResponseFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SurveyIdentifier]
                , T.[SchoolYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[CourseSurveyResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SurveyIdentifier]
                    , [SchoolYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SurveyIdentifier]
                    , S.[SchoolYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseSurveyResponseFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseSurveyResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseSurveyResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseSurveyResponseFacts] AS T
            JOIN [extension].[CourseSurveyResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveySectionResponseRatingFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseSurveySectionResponseRatingFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseSurveySectionResponseRatingFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveySectionResponseRatingFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveySectionResponseRatingFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseSurveySectionResponseRatingFacts] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[CourseSurveySectionResponseRatingFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseSurveySectionResponseRatingFacts]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseSurveySectionResponseRatingFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseSurveySectionResponseRatingFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseSurveySectionResponseRatingFacts] AS T
            JOIN [extension].[CourseSurveySectionResponseRatingFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseSurveySectionResponseRatingFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveySectionResponseRatingFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse]
            (
                [tid_CourseSurveySectionResponseRatingFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseSurveySectionResponseRatingFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SurveyIdentifier], T.[SurveySectionTitle], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , CourseSurveySectionResponseRatingFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseSurveySectionResponseRatingFacts.[Id] AS ParentId
                FROM [extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] AS T 
                JOIN [extension].[CourseSurveySectionResponseRatingFacts] AS CourseSurveySectionResponseRatingFacts
                    ON CourseSurveySectionResponseRatingFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND CourseSurveySectionResponseRatingFacts.[SurveySectionTitle] = T.[SurveySectionTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationCourseTranscriptFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationCourseTranscriptFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationCourseTranscriptFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationCourseTranscriptFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationCourseTranscriptFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationCourseTranscriptFacts] AS T
            JOIN [extension].[EducationOrganizationCourseTranscriptFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationCourseTranscriptFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationCourseTranscriptFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationCourseTranscriptFacts] AS EducationOrganizationCourseTranscriptFacts
                    ON EducationOrganizationCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
            (
                [tid_EducationOrganizationCourseTranscriptFacts]
                , [FinalLetterGrade]
                , [LetterGradeTypeNumber]
                , [LetterGradeTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationCourseTranscriptFacts]
                , S.[FinalLetterGrade]
                , S.[LetterGradeTypeNumber]
                , S.[LetterGradeTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[FinalLetterGrade], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[LetterGradeTypeNumber], T.[LetterGradeTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[EducationOrganizationCourseTranscriptFacts] AS EducationOrganizationCourseTranscriptFacts
                    ON EducationOrganizationCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned]
            (
                [tid_EducationOrganizationCourseTranscriptFacts]
                , [AverageFinalNumericGradeEarned]
                , [NumericGradeNCount]
                , [NumericGradeStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationCourseTranscriptFacts]
                , S.[AverageFinalNumericGradeEarned]
                , S.[NumericGradeNCount]
                , S.[NumericGradeStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AverageFinalNumericGradeEarned], T.[NumericGradeNCount], T.[NumericGradeStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[EducationOrganizationCourseTranscriptFacts] AS EducationOrganizationCourseTranscriptFacts
                    ON EducationOrganizationCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[NumberAdministratorsEmployed]
                , T.[NumberStudentsEnrolled]
                , T.[NumberTeachersEmployed]
                , T.[PercentStudentsFreeReducedLunch]
                , T.[PercentStudentsLimitedEnglishProficiency]
                , T.[PercentStudentsSpecialEducation]
                , T.[HiringRate]
                , T.[RetentionRate]
                , T.[RetirementRate]
                , T.[AverageYearsInDistrictEmployed]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [NumberAdministratorsEmployed]
                    , [NumberStudentsEnrolled]
                    , [NumberTeachersEmployed]
                    , [PercentStudentsFreeReducedLunch]
                    , [PercentStudentsLimitedEnglishProficiency]
                    , [PercentStudentsSpecialEducation]
                    , [HiringRate]
                    , [RetentionRate]
                    , [RetirementRate]
                    , [AverageYearsInDistrictEmployed]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[NumberAdministratorsEmployed]
                    , S.[NumberStudentsEnrolled]
                    , S.[NumberTeachersEmployed]
                    , S.[PercentStudentsFreeReducedLunch]
                    , S.[PercentStudentsLimitedEnglishProficiency]
                    , S.[PercentStudentsSpecialEducation]
                    , S.[HiringRate]
                    , S.[RetentionRate]
                    , S.[RetirementRate]
                    , S.[AverageYearsInDistrictEmployed]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationFacts] AS T
            JOIN [extension].[EducationOrganizationFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationFactsVacancies] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationFactsVacancies] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationFactsVacancies]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationFactsVacancies];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationFactsVacancies]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationFactsVacanciesKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationFactsVacancies]
            (
                [tid_EducationOrganizationFacts]
                , [AcademicSubjectDescriptorCodeValue]
                , [ValueType]
                , [NumberOfVacancies]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationFacts]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[ValueType]
                , S.[NumberOfVacancies]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[EducationOrganizationId], T.[FactsAsOfDate], T.[SchoolYear], ValueType.[ShortDescription] AS ValueType, T.[NumberOfVacancies], AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationFactsVacancies] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationFacts] AS EducationOrganizationFacts
                    ON EducationOrganizationFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationFactsAggregatedSalaryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationFactsAggregatedSalary]
            (
                [tid_EducationOrganizationFacts]
                , [AverageSalary]
                , [CountOfSalariesAveraged]
                , [StandardDeviation]
                , [SalaryMinRange]
                , [SalaryMaxRange]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationFacts]
                , S.[AverageSalary]
                , S.[CountOfSalariesAveraged]
                , S.[StandardDeviation]
                , S.[SalaryMinRange]
                , S.[SalaryMaxRange]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactsAsOfDate], T.[SchoolYear], T.[AverageSalary], T.[CountOfSalariesAveraged], T.[StandardDeviation], T.[SalaryMinRange], T.[SalaryMaxRange]
                , T.[CreateDate]
                , EducationOrganizationFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationFactsAggregatedSalary] AS T 
                JOIN [extension].[EducationOrganizationFacts] AS EducationOrganizationFacts
                    ON EducationOrganizationFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationStudentAcademicRecordFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AggregatedGPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationStudentAcademicRecordFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [AggregatedGPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[AggregatedGPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationStudentAcademicRecordFacts] AS T
            JOIN [extension].[EducationOrganizationStudentAcademicRecordFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentAcademicRecordFacts] AS EducationOrganizationStudentAcademicRecordFacts
                    ON EducationOrganizationStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
            (
                [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[EducationOrganizationStudentAcademicRecordFacts] AS EducationOrganizationStudentAcademicRecordFacts
                    ON EducationOrganizationStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
            (
                [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[EducationOrganizationStudentAcademicRecordFacts] AS EducationOrganizationStudentAcademicRecordFacts
                    ON EducationOrganizationStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationStudentAssessmentFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[TakenSchoolYear]
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[AdministrationDate]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationStudentAssessmentFacts] AS T
                LEFT JOIN .[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [TakenSchoolYear]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [AdministrationDate]
                    , [TermDescriptorCodeValue]
                    , [TermDescriptorNamespace]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[TakenSchoolYear]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[TermDescriptorCodeValue]
                    , S.[TermDescriptorNamespace]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationStudentAssessmentFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationStudentAssessmentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationStudentAssessmentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationStudentAssessmentFacts] AS T
            JOIN [extension].[EducationOrganizationStudentAssessmentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationStudentAssessmentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAssessmentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , EducationOrganizationStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentAssessmentFacts] AS EducationOrganizationStudentAssessmentFacts
                    ON EducationOrganizationStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult]
            (
                [tid_EducationOrganizationStudentAssessmentFacts]
                , [AssessmentReportingMethodType]
                , [AverageScoreResultDatatypeType]
                , [AverageScoreResult]
                , [ScoreNCount]
                , [ScoreStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAssessmentFacts]
                , S.[AssessmentReportingMethodType]
                , S.[AverageScoreResultDatatypeType]
                , S.[AverageScoreResult]
                , S.[ScoreNCount]
                , S.[ScoreStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, AverageScoreResultDatatypeType.[ShortDescription] AS AverageScoreResultDatatypeType, T.[AverageScoreResult], T.[ScoreNCount], T.[ScoreStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] AS T 
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[ResultDatatypeType] AS AverageScoreResultDatatypeType
                    ON AverageScoreResultDatatypeType.[ResultDatatypeTypeId] = T.[AverageScoreResultDatatypeTypeId]
                JOIN [extension].[EducationOrganizationStudentAssessmentFacts] AS EducationOrganizationStudentAssessmentFacts
                    ON EducationOrganizationStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel]
            (
                [tid_EducationOrganizationStudentAssessmentFacts]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMetNumber]
                , [PerformanceLevelMetPercentage]
                , [PerformanceLevelTypeNumber]
                , [PerformanceLevelTypePercentage]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAssessmentFacts]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMetNumber]
                , S.[PerformanceLevelMetPercentage]
                , S.[PerformanceLevelTypeNumber]
                , S.[PerformanceLevelTypePercentage]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[TakenSchoolYear], T.[PerformanceLevelMetNumber], T.[PerformanceLevelMetPercentage], T.[PerformanceLevelTypeNumber], T.[PerformanceLevelTypePercentage], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [extension].[EducationOrganizationStudentAssessmentFacts] AS EducationOrganizationStudentAssessmentFacts
                    ON EducationOrganizationStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationStudentFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationStudentFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationStudentFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationStudentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationStudentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationStudentFacts] AS T
            JOIN [extension].[EducationOrganizationStudentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsStudentsEnrolled] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSex]
            (
                [tid_EducationOrganizationStudentFacts]
                , [SexType]
                , [ValueType]
                , [SexTypeNumber]
                , [SexTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[SexType]
                , S.[ValueType]
                , S.[SexTypeNumber]
                , S.[SexTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], SexType.[ShortDescription] AS SexType, ValueType.[ShortDescription] AS ValueType, T.[SexTypeNumber], T.[SexTypePercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedSex] AS T 
                JOIN [edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedGenderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedGender]
            (
                [tid_EducationOrganizationStudentFacts]
                , [GenderType]
                , [ValueType]
                , [GenderTypeNumber]
                , [GenderTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[GenderType]
                , S.[ValueType]
                , S.[GenderTypeNumber]
                , S.[GenderTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], GenderType.[ShortDescription] AS GenderType, ValueType.[ShortDescription] AS ValueType, T.[GenderTypeNumber], T.[GenderTypePercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedGender] AS T 
                JOIN [edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity]
            (
                [tid_EducationOrganizationStudentFacts]
                , [HispanicLatinoEthnicity]
                , [ValueType]
                , [HispanicLatinoEthnicityNumber]
                , [HispanicLatinoEthnicityPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[HispanicLatinoEthnicity]
                , S.[ValueType]
                , S.[HispanicLatinoEthnicityNumber]
                , S.[HispanicLatinoEthnicityPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[HispanicLatinoEthnicity], ValueType.[ShortDescription] AS ValueType, T.[HispanicLatinoEthnicityNumber], T.[HispanicLatinoEthnicityPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedRace]
            (
                [tid_EducationOrganizationStudentFacts]
                , [RaceType]
                , [ValueType]
                , [RaceTypeNumber]
                , [RaceTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[RaceType]
                , S.[ValueType]
                , S.[RaceTypeNumber]
                , S.[RaceTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], RaceType.[ShortDescription] AS RaceType, ValueType.[ShortDescription] AS ValueType, T.[RaceTypeNumber], T.[RaceTypePercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility]
            (
                [tid_EducationOrganizationStudentFacts]
                , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [TypePercentage]
                , [SchoolFoodServicesEligibilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[TypePercentage]
                , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[TypePercentage], SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] AS T 
                JOIN [edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON SchoolFoodServicesEligibilityDescriptor.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage]
            (
                [tid_EducationOrganizationStudentFacts]
                , [LanguageDescriptorCodeValue]
                , [ValueType]
                , [LanguageTypeNumber]
                , [LanguageTypePercentage]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[LanguageDescriptorCodeValue]
                , S.[ValueType]
                , S.[LanguageTypeNumber]
                , S.[LanguageTypePercentage]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[LanguageTypeNumber], T.[LanguageTypePercentage], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedByDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability]
            (
                [tid_EducationOrganizationStudentFacts]
                , [DisabilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [Percentage]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[DisabilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[Percentage]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[Percentage], DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedByDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [StudentsDisabledNumber]
                , [StudentsDisabledPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[StudentsDisabledNumber]
                , S.[StudentsDisabledPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[StudentsDisabledNumber], T.[StudentsDisabledPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedELLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [ELLEnrollmentNumber]
                , [ELLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[ELLEnrollmentNumber]
                , S.[ELLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ELLEnrollmentNumber], T.[ELLEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedESLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [ESLEnrollmentNumber]
                , [ESLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[ESLEnrollmentNumber]
                , S.[ESLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ESLEnrollmentNumber], T.[ESLEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSection504EnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [Number504Enrolled]
                , [Percentage504Enrolled]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[Number504Enrolled]
                , S.[Percentage504Enrolled]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[Number504Enrolled], T.[Percentage504Enrolled]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSPEDKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSPED]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [SPEDEnrollmentNumber]
                , [SPEDEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[SPEDEnrollmentNumber]
                , S.[SPEDEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[SPEDEnrollmentNumber], T.[SPEDEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedSPED] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedTitleIEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [TitleIEnrollmentNumber]
                , [TitleIEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[TitleIEnrollmentNumber]
                , S.[TitleIEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TitleIEnrollmentNumber], T.[TitleIEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment] AS T 
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[QuestionCode]
                , T.[SurveyIdentifier]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationSurveyQuestionResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [QuestionCode]
                    , [SurveyIdentifier]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationSurveyQuestionResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] AS T
            JOIN [extension].[EducationOrganizationSurveyQuestionResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse]
            (
                [tid_EducationOrganizationSurveyQuestionResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] AS T 
                JOIN [extension].[EducationOrganizationSurveyQuestionResponseFacts] AS EducationOrganizationSurveyQuestionResponseFacts
                    ON EducationOrganizationSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
            (
                [tid_EducationOrganizationSurveyQuestionResponseFacts]
                , [AggregatedMatrixElement]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , S.[AggregatedMatrixElement]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AggregatedMatrixElement], T.[AverageNumericResponse], T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS T 
                JOIN [extension].[EducationOrganizationSurveyQuestionResponseFacts] AS EducationOrganizationSurveyQuestionResponseFacts
                    ON EducationOrganizationSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyResponseFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationSurveyResponseFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyResponseFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationSurveyResponseFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SurveyIdentifier]
                , T.[SchoolYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationSurveyResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SurveyIdentifier]
                    , [SchoolYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SurveyIdentifier]
                    , S.[SchoolYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationSurveyResponseFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationSurveyResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationSurveyResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationSurveyResponseFacts] AS T
            JOIN [extension].[EducationOrganizationSurveyResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS T
            JOIN [extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse]
            (
                [tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactsAsOfDate], T.[SurveyIdentifier], T.[SurveySectionTitle], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationSurveySectionResponseRatingFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationSurveySectionResponseRatingFacts.[Id] AS ParentId
                FROM [extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] AS T 
                JOIN [extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS EducationOrganizationSurveySectionResponseRatingFacts
                    ON EducationOrganizationSurveySectionResponseRatingFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationSurveySectionResponseRatingFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationSurveySectionResponseRatingFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND EducationOrganizationSurveySectionResponseRatingFacts.[SurveySectionTitle] = T.[SurveySectionTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbEnglishLanguageExamDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbEnglishLanguageExamDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbEnglishLanguageExamDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbEnglishLanguageExamDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EnglishLanguageExamDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EnglishLanguageExamDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EnglishLanguageExamType].[ShortDescription] AS EnglishLanguageExamType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[EnglishLanguageExamDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EnglishLanguageExamDescriptorId]
                JOIN [edfi].[EnglishLanguageExamType] AS EnglishLanguageExamType
                    ON [EnglishLanguageExamType].[EnglishLanguageExamTypeId] = T.[EnglishLanguageExamTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EnglishLanguageExamType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EnglishLanguageExamType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EnglishLanguageExamDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EnglishLanguageExamDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EnglishLanguageExamDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EnglishLanguageExamDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[EnglishLanguageExamDescriptor] AS S
                ON P.[DescriptorId] = S.[EnglishLanguageExamDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscript] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalCourseTranscript]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalCourseTranscript];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ExternalCourseTranscript] AS T
            USING
            (
                SELECT T.[ExternalCourseCode]
                , T.[ExternalTerm]
                , T.[NameOfInstitution]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , [CourseAttemptResultType].[ShortDescription] AS CourseAttemptResultType
                , T.[AttemptedCredits]
                , [AttemptedCreditType].[ShortDescription] AS AttemptedCreditType
                , T.[AttemptedCreditConversion]
                , T.[EarnedCredits]
                , [EarnedCreditType].[ShortDescription] AS EarnedCreditType
                , T.[EarnedCreditConversion]
                , WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue
                , OfferedGradeLevelDescriptor.[CodeValue] AS OfferedGradeLevelDescriptorCodeValue
                , [MethodCreditEarnedType].[ShortDescription] AS MethodCreditEarnedType
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[CourseCode]
                , T.[CourseEducationOrganizationId]
                , T.[ExternalCourseTitle]
                , T.[AlternativeCourseTitle]
                , T.[AlternativeCourseCode]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , [CareerPathwayType].[ShortDescription] AS CareerPathwayType
                , T.[CourseDescription]
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , OfferedGradeLevelDescriptor.[Namespace] AS OfferedGradeLevelDescriptorNamespace
                , WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[ExternalCourseTranscript] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON [CourseAttemptResultType].[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                LEFT JOIN [edfi].[CreditType] AS AttemptedCreditType
                    ON [AttemptedCreditType].[CreditTypeId] = T.[AttemptedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS EarnedCreditType
                    ON [EarnedCreditType].[CreditTypeId] = T.[EarnedCreditTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON [WhenTakenGradeLevelDescriptor].[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS OfferedGradeLevelDescriptor
                    ON [OfferedGradeLevelDescriptor].[DescriptorId] = T.[OfferedGradeLevelDescriptorId]
                LEFT JOIN [edfi].[MethodCreditEarnedType] AS MethodCreditEarnedType
                    ON [MethodCreditEarnedType].[MethodCreditEarnedTypeId] = T.[MethodCreditEarnedTypeId]
                LEFT JOIN [edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [edfi].[CareerPathwayType] AS CareerPathwayType
                    ON [CareerPathwayType].[CareerPathwayTypeId] = T.[CareerPathwayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ExternalCourseCode]
                    , [ExternalTerm]
                    , [NameOfInstitution]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [CourseAttemptResultType]
                    , [AttemptedCredits]
                    , [AttemptedCreditType]
                    , [AttemptedCreditConversion]
                    , [EarnedCredits]
                    , [EarnedCreditType]
                    , [EarnedCreditConversion]
                    , [WhenTakenGradeLevelDescriptorCodeValue]
                    , [OfferedGradeLevelDescriptorCodeValue]
                    , [MethodCreditEarnedType]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [CourseCode]
                    , [CourseEducationOrganizationId]
                    , [ExternalCourseTitle]
                    , [AlternativeCourseTitle]
                    , [AlternativeCourseCode]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CareerPathwayType]
                    , [CourseDescription]
                    , [AcademicSubjectDescriptorNamespace]
                    , [OfferedGradeLevelDescriptorNamespace]
                    , [WhenTakenGradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ExternalCourseCode]
                    , S.[ExternalTerm]
                    , S.[NameOfInstitution]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[CourseAttemptResultType]
                    , S.[AttemptedCredits]
                    , S.[AttemptedCreditType]
                    , S.[AttemptedCreditConversion]
                    , S.[EarnedCredits]
                    , S.[EarnedCreditType]
                    , S.[EarnedCreditConversion]
                    , S.[WhenTakenGradeLevelDescriptorCodeValue]
                    , S.[OfferedGradeLevelDescriptorCodeValue]
                    , S.[MethodCreditEarnedType]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[CourseCode]
                    , S.[CourseEducationOrganizationId]
                    , S.[ExternalCourseTitle]
                    , S.[AlternativeCourseTitle]
                    , S.[AlternativeCourseCode]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CareerPathwayType]
                    , S.[CourseDescription]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[OfferedGradeLevelDescriptorNamespace]
                    , S.[WhenTakenGradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExternalCourseTranscript]
                , INSERTED.[ExternalCourseCode]
                , INSERTED.[ExternalTerm]
                , INSERTED.[NameOfInstitution]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ExternalCourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExternalCourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExternalCourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ExternalCourseTranscript] AS T
            JOIN [extension].[ExternalCourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptEarnedAdditionalCreditsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits]
            (
                [tid_ExternalCourseTranscript]
                , [AdditionalCreditType]
                , [Credits]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalCourseTranscript]
                , S.[AdditionalCreditType]
                , S.[Credits]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AdditionalCreditType.[ShortDescription] AS AdditionalCreditType, T.[ExternalCourseCode], T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[Credits]
                , T.[CreateDate]
                , ExternalCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalCourseTranscript.[Id] AS ParentId
                FROM [extension].[ExternalCourseTranscriptEarnedAdditionalCredits] AS T 
                JOIN [edfi].[AdditionalCreditType] AS AdditionalCreditType
                    ON AdditionalCreditType.[AdditionalCreditTypeId] = T.[AdditionalCreditTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [extension].[ExternalCourseTranscript] AS ExternalCourseTranscript
                    ON ExternalCourseTranscript.[ExternalCourseCode] = T.[ExternalCourseCode]
                    AND ExternalCourseTranscript.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalCourseTranscript.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND ExternalCourseTranscript.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptCourseIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalCourseTranscriptCourseIdentificationCode]
            (
                [tid_ExternalCourseTranscript]
                , [CourseIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [CourseIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalCourseTranscript]
                , S.[CourseIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[CourseIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CourseIdentificationSystemDescriptor.[CodeValue] AS CourseIdentificationSystemDescriptorCodeValue, T.[ExternalCourseCode], T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], CourseIdentificationSystemDescriptor.[Namespace] AS CourseIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , ExternalCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalCourseTranscript.[Id] AS ParentId
                FROM [extension].[ExternalCourseTranscriptCourseIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS CourseIdentificationSystemDescriptor
                    ON CourseIdentificationSystemDescriptor.[DescriptorId] = T.[CourseIdentificationSystemDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [extension].[ExternalCourseTranscript] AS ExternalCourseTranscript
                    ON ExternalCourseTranscript.[ExternalCourseCode] = T.[ExternalCourseCode]
                    AND ExternalCourseTranscript.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalCourseTranscript.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND ExternalCourseTranscript.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptCourseLevelCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic]
            (
                [tid_ExternalCourseTranscript]
                , [CourseLevelCharacteristicType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalCourseTranscript]
                , S.[CourseLevelCharacteristicType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CourseLevelCharacteristicType.[ShortDescription] AS CourseLevelCharacteristicType, T.[ExternalCourseCode], T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , ExternalCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalCourseTranscript.[Id] AS ParentId
                FROM [extension].[ExternalCourseTranscriptCourseLevelCharacteristic] AS T 
                JOIN [edfi].[CourseLevelCharacteristicType] AS CourseLevelCharacteristicType
                    ON CourseLevelCharacteristicType.[CourseLevelCharacteristicTypeId] = T.[CourseLevelCharacteristicTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [extension].[ExternalCourseTranscript] AS ExternalCourseTranscript
                    ON ExternalCourseTranscript.[ExternalCourseCode] = T.[ExternalCourseCode]
                    AND ExternalCourseTranscript.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalCourseTranscript.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND ExternalCourseTranscript.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganization] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalEducationOrganization]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalEducationOrganization];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganization]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ExternalEducationOrganization] AS T
            USING
            (
                SELECT T.[NameOfInstitution]
                , T.[ShortNameOfInstitution]
                , T.[WebSite]
                , [OperationalStatusType].[ShortDescription] AS OperationalStatusType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[ExternalEducationOrganization] AS T
                LEFT JOIN [edfi].[OperationalStatusType] AS OperationalStatusType
                    ON [OperationalStatusType].[OperationalStatusTypeId] = T.[OperationalStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [NameOfInstitution]
                    , [ShortNameOfInstitution]
                    , [WebSite]
                    , [OperationalStatusType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[NameOfInstitution]
                    , S.[ShortNameOfInstitution]
                    , S.[WebSite]
                    , S.[OperationalStatusType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExternalEducationOrganization]
                , INSERTED.[NameOfInstitution]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ExternalEducationOrganizationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExternalEducationOrganization]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExternalEducationOrganization]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ExternalEducationOrganization] AS T
            JOIN [extension].[ExternalEducationOrganization] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbExternalEducationOrganizationIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationCategory] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationIdentificationCode] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalEducationOrganizationIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationIdentificationCode];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationIdentificationCode]
            (
                [tid_ExternalEducationOrganization]
                , [EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [EducationOrganizationIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[EducationOrganizationIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationIdentificationSystemDescriptor.[CodeValue] AS EducationOrganizationIdentificationSystemDescriptorCodeValue, T.[NameOfInstitution], T.[IdentificationCode], EducationOrganizationIdentificationSystemDescriptor.[Namespace] AS EducationOrganizationIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [extension].[ExternalEducationOrganizationIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS EducationOrganizationIdentificationSystemDescriptor
                    ON EducationOrganizationIdentificationSystemDescriptor.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                JOIN [extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationCategory] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalEducationOrganizationCategory]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationCategory];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationCategory]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationCategoryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationCategory]
            (
                [tid_ExternalEducationOrganization]
                , [EducationOrganizationCategoryType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[EducationOrganizationCategoryType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationCategoryType.[ShortDescription] AS EducationOrganizationCategoryType, T.[NameOfInstitution]
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [extension].[ExternalEducationOrganizationCategory] AS T 
                JOIN [edfi].[EducationOrganizationCategoryType] AS EducationOrganizationCategoryType
                    ON EducationOrganizationCategoryType.[EducationOrganizationCategoryTypeId] = T.[EducationOrganizationCategoryTypeId]
                JOIN [extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalEducationOrganizationAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationAddress]
            (
                [tid_ExternalEducationOrganization]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[NameOfInstitution], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [extension].[ExternalEducationOrganizationAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationInternationalAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalEducationOrganizationInternationalAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationInternationalAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationInternationalAddress]
            (
                [tid_ExternalEducationOrganization]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[NameOfInstitution], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [extension].[ExternalEducationOrganizationInternationalAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationInstitutionTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationInstitutionTelephone]
            (
                [tid_ExternalEducationOrganization]
                , [InstitutionTelephoneNumberType]
                , [TelephoneNumber]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[InstitutionTelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT InstitutionTelephoneNumberType.[ShortDescription] AS InstitutionTelephoneNumberType, T.[NameOfInstitution], T.[TelephoneNumber]
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [extension].[ExternalEducationOrganizationInstitutionTelephone] AS T 
                JOIN [edfi].[InstitutionTelephoneNumberType] AS InstitutionTelephoneNumberType
                    ON InstitutionTelephoneNumberType.[InstitutionTelephoneNumberTypeId] = T.[InstitutionTelephoneNumberTypeId]
                JOIN [extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecord] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalStudentAcademicRecord]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecord];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ExternalStudentAcademicRecord] AS T
            USING
            (
                SELECT T.[ExternalTerm]
                , T.[NameOfInstitution]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , T.[CumulativeEarnedCredits]
                , [CumulativeEarnedCreditType].[ShortDescription] AS CumulativeEarnedCreditType
                , T.[CumulativeEarnedCreditConversion]
                , T.[CumulativeAttemptedCredits]
                , [CumulativeAttemptedCreditType].[ShortDescription] AS CumulativeAttemptedCreditType
                , T.[CumulativeAttemptedCreditConversion]
                , T.[CumulativeGradePointsEarned]
                , T.[CumulativeGradePointAverage]
                , T.[GradeValueQualifier]
                , T.[ProjectedGraduationDate]
                , T.[SessionEarnedCredits]
                , [SessionEarnedCreditType].[ShortDescription] AS SessionEarnedCreditType
                , T.[SessionEarnedCreditConversion]
                , T.[SessionAttemptedCredits]
                , [SessionAttemptedCreditType].[ShortDescription] AS SessionAttemptedCreditType
                , T.[SessionAttemptedCreditConversion]
                , T.[SessionGradePointsEarned]
                , T.[SessionGradePointAverage]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[ExternalStudentAcademicRecord] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[CreditType] AS CumulativeEarnedCreditType
                    ON [CumulativeEarnedCreditType].[CreditTypeId] = T.[CumulativeEarnedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS CumulativeAttemptedCreditType
                    ON [CumulativeAttemptedCreditType].[CreditTypeId] = T.[CumulativeAttemptedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS SessionEarnedCreditType
                    ON [SessionEarnedCreditType].[CreditTypeId] = T.[SessionEarnedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS SessionAttemptedCreditType
                    ON [SessionAttemptedCreditType].[CreditTypeId] = T.[SessionAttemptedCreditTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ExternalTerm]
                    , [NameOfInstitution]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [CumulativeEarnedCredits]
                    , [CumulativeEarnedCreditType]
                    , [CumulativeEarnedCreditConversion]
                    , [CumulativeAttemptedCredits]
                    , [CumulativeAttemptedCreditType]
                    , [CumulativeAttemptedCreditConversion]
                    , [CumulativeGradePointsEarned]
                    , [CumulativeGradePointAverage]
                    , [GradeValueQualifier]
                    , [ProjectedGraduationDate]
                    , [SessionEarnedCredits]
                    , [SessionEarnedCreditType]
                    , [SessionEarnedCreditConversion]
                    , [SessionAttemptedCredits]
                    , [SessionAttemptedCreditType]
                    , [SessionAttemptedCreditConversion]
                    , [SessionGradePointsEarned]
                    , [SessionGradePointAverage]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ExternalTerm]
                    , S.[NameOfInstitution]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[CumulativeEarnedCredits]
                    , S.[CumulativeEarnedCreditType]
                    , S.[CumulativeEarnedCreditConversion]
                    , S.[CumulativeAttemptedCredits]
                    , S.[CumulativeAttemptedCreditType]
                    , S.[CumulativeAttemptedCreditConversion]
                    , S.[CumulativeGradePointsEarned]
                    , S.[CumulativeGradePointAverage]
                    , S.[GradeValueQualifier]
                    , S.[ProjectedGraduationDate]
                    , S.[SessionEarnedCredits]
                    , S.[SessionEarnedCreditType]
                    , S.[SessionEarnedCreditConversion]
                    , S.[SessionAttemptedCredits]
                    , S.[SessionAttemptedCreditType]
                    , S.[SessionAttemptedCreditConversion]
                    , S.[SessionGradePointsEarned]
                    , S.[SessionGradePointAverage]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExternalStudentAcademicRecord]
                , INSERTED.[ExternalTerm]
                , INSERTED.[NameOfInstitution]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExternalStudentAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExternalStudentAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ExternalStudentAcademicRecord] AS T
            JOIN [extension].[ExternalStudentAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordClassRanking] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordDiploma] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordClassRanking] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalStudentAcademicRecordClassRanking]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordClassRanking];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordClassRanking]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordClassRankingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordClassRanking]
            (
                [tid_ExternalStudentAcademicRecord]
                , [ClassRank]
                , [TotalNumberInClass]
                , [PercentageRanking]
                , [ClassRankingDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[ClassRank]
                , S.[TotalNumberInClass]
                , S.[PercentageRanking]
                , S.[ClassRankingDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[ClassRank], T.[TotalNumberInClass], T.[PercentageRanking], T.[ClassRankingDate]
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [extension].[ExternalStudentAcademicRecordClassRanking] AS T 
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordAcademicHonorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordAcademicHonor]
            (
                [tid_ExternalStudentAcademicRecord]
                , [AcademicHonorCategoryType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [HonorDescription]
                , [HonorAwardDate]
                , [HonorAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[AcademicHonorCategoryType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[HonorDescription]
                , S.[HonorAwardDate]
                , S.[HonorAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicHonorCategoryType.[ShortDescription] AS AcademicHonorCategoryType, T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[HonorDescription], T.[HonorAwardDate], T.[HonorAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [extension].[ExternalStudentAcademicRecordAcademicHonor] AS T 
                JOIN [edfi].[AcademicHonorCategoryType] AS AcademicHonorCategoryType
                    ON AcademicHonorCategoryType.[AcademicHonorCategoryTypeId] = T.[AcademicHonorCategoryTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordRecognition] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalStudentAcademicRecordRecognition]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordRecognition];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordRecognition]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordRecognition]
            (
                [tid_ExternalStudentAcademicRecord]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ExternalTerm], T.[NameOfInstitution], RecognitionType.[ShortDescription] AS RecognitionType, T.[SchoolYear], [Student].[StudentUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [extension].[ExternalStudentAcademicRecordRecognition] AS T 
                JOIN [edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordDiploma] ******/

IF OBJECT_ID('[t_extension].[usp_dbExternalStudentAcademicRecordDiploma]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordDiploma];
GO

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordDiploma]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordDiplomaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordDiploma]
            (
                [tid_ExternalStudentAcademicRecord]
                , [DiplomaAwardDate]
                , [DiplomaType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [DiplomaLevelType]
                , [CTECompleter]
                , [DiplomaDescription]
                , [DiplomaAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[DiplomaAwardDate]
                , S.[DiplomaType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[DiplomaLevelType]
                , S.[CTECompleter]
                , S.[DiplomaDescription]
                , S.[DiplomaAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DiplomaAwardDate], DiplomaType.[ShortDescription] AS DiplomaType, T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], DiplomaLevelType.[ShortDescription] AS DiplomaLevelType, T.[CTECompleter], T.[DiplomaDescription], T.[DiplomaAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [extension].[ExternalStudentAcademicRecordDiploma] AS T 
                JOIN [edfi].[DiplomaType] AS DiplomaType
                    ON DiplomaType.[DiplomaTypeId] = T.[DiplomaTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [edfi].[DiplomaLevelType] AS DiplomaLevelType
                    ON DiplomaLevelType.[DiplomaLevelTypeId] = T.[DiplomaLevelTypeId]
                JOIN [extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbFieldworkTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbFieldworkTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbFieldworkTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbFieldworkTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_FieldworkTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[FieldworkTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [FieldworkType].[ShortDescription] AS FieldworkType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[FieldworkTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[FieldworkTypeDescriptorId]
                LEFT JOIN [edfi].[FieldworkType] AS FieldworkType
                    ON [FieldworkType].[FieldworkTypeId] = T.[FieldworkTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [FieldworkType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[FieldworkType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_FieldworkTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_FieldworkTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_FieldworkTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[FieldworkTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[FieldworkTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[FieldworkTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbLevelOfDegreeAwardedDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbLevelOfDegreeAwardedDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbLevelOfDegreeAwardedDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbLevelOfDegreeAwardedDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_LevelOfDegreeAwardedDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[LevelOfDegreeAwardedDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LevelOfDegreeAwardedType].[ShortDescription] AS LevelOfDegreeAwardedType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[LevelOfDegreeAwardedDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelOfDegreeAwardedDescriptorId]
                LEFT JOIN [edfi].[LevelOfDegreeAwardedType] AS LevelOfDegreeAwardedType
                    ON [LevelOfDegreeAwardedType].[LevelOfDegreeAwardedTypeId] = T.[LevelOfDegreeAwardedTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LevelOfDegreeAwardedType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LevelOfDegreeAwardedType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelOfDegreeAwardedDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelOfDegreeAwardedDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelOfDegreeAwardedDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[LevelOfDegreeAwardedDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[LevelOfDegreeAwardedDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelOfDegreeAwardedDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbLevelTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbLevelTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbLevelTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbLevelTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_LevelTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[LevelTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LevelType].[ShortDescription] AS LevelType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[LevelTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelTypeDescriptorId]
                LEFT JOIN [edfi].[LevelType] AS LevelType
                    ON [LevelType].[LevelTypeId] = T.[LevelTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LevelType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LevelType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[LevelTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[LevelTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[LevelTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasure] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasure]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasure];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PerformanceMeasure] AS T
            USING
            (
                SELECT T.[PerformanceMeasureIdentifier]
                , PerformanceMeasureTypeDescriptor.[CodeValue] AS PerformanceMeasureTypeDescriptorCodeValue
                , T.[RubricEducationOrganizationId]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[RubricTitle]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[ScheduleDateOfPerformanceMeasure]
                , T.[ActualDateOfPerformanceMeasure]
                , T.[TimeOfPerformanceMeasure]
                , T.[DurationOfPerformanceMeasure]
                , T.[Announced]
                , T.[CoteachingObserved]
                , T.[Comments]
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , PerformanceMeasureTypeDescriptor.[Namespace] AS PerformanceMeasureTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[PerformanceMeasure] AS T
                JOIN .[edfi].[Descriptor] AS PerformanceMeasureTypeDescriptor
                    ON [PerformanceMeasureTypeDescriptor].[DescriptorId] = T.[PerformanceMeasureTypeDescriptorId]
                JOIN .[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [PerformanceMeasureIdentifier]
                    , [PerformanceMeasureTypeDescriptorCodeValue]
                    , [RubricEducationOrganizationId]
                    , [RubricTypeDescriptorCodeValue]
                    , [RubricTitle]
                    , [TermDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [ScheduleDateOfPerformanceMeasure]
                    , [ActualDateOfPerformanceMeasure]
                    , [TimeOfPerformanceMeasure]
                    , [DurationOfPerformanceMeasure]
                    , [Announced]
                    , [CoteachingObserved]
                    , [Comments]
                    , [AcademicSubjectDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [RubricTypeDescriptorNamespace]
                    , [PerformanceMeasureTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[PerformanceMeasureIdentifier]
                    , S.[PerformanceMeasureTypeDescriptorCodeValue]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[RubricTitle]
                    , S.[TermDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[ScheduleDateOfPerformanceMeasure]
                    , S.[ActualDateOfPerformanceMeasure]
                    , S.[TimeOfPerformanceMeasure]
                    , S.[DurationOfPerformanceMeasure]
                    , S.[Announced]
                    , S.[CoteachingObserved]
                    , S.[Comments]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[PerformanceMeasureTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceMeasure]
                , INSERTED.[PerformanceMeasureIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PerformanceMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PerformanceMeasure] AS T
            JOIN [extension].[PerformanceMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbPerformanceMeasureProgramGateway] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureReviewer] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureProgramGateway] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasureProgramGateway]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasureProgramGateway];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureProgramGateway]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureProgramGatewayKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureProgramGateway]
            (
                [tid_PerformanceMeasure]
                , [ProgramGatewayDescriptorCodeValue]
                , [ProgramGatewayDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasure]
                , S.[ProgramGatewayDescriptorCodeValue]
                , S.[ProgramGatewayDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[PerformanceMeasureIdentifier], ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue, ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [extension].[PerformanceMeasureProgramGateway] AS T 
                JOIN [edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON ProgramGatewayDescriptor.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN [extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureGradeLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasureGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasureGradeLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureGradeLevel]
            (
                [tid_PerformanceMeasure]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasure]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[PerformanceMeasureIdentifier], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [extension].[PerformanceMeasureGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasurePersonBeingReviewedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasurePersonBeingReviewed]
            (
                [tid_PerformanceMeasure]
                , [FirstName]
                , [LastSurname]
                , [ProspectIdentifier]
                , [ProspectEducationOrganizationId]
                , [PersonBeingReviewedStaffUniqueId]
                , [TeacherCandidateIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasure]
                , S.[FirstName]
                , S.[LastSurname]
                , S.[ProspectIdentifier]
                , S.[ProspectEducationOrganizationId]
                , S.[PersonBeingReviewedStaffUniqueId]
                , S.[TeacherCandidateIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[PerformanceMeasureIdentifier], T.[FirstName], T.[LastSurname], T.[ProspectIdentifier], T.[ProspectEducationOrganizationId], [PersonBeingReviewedStaff].[PersonBeingReviewedStaffUniqueId], T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [extension].[PerformanceMeasurePersonBeingReviewed] AS T 
                LEFT JOIN [edfi].[PersonBeingReviewedStaff]
                    ON [PersonBeingReviewedStaff].[PersonBeingReviewedStaffUSI] = T.[PersonBeingReviewedStaffUSI]
                JOIN [extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureReviewer] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasureReviewer]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasureReviewer];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureReviewer]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureReviewerKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureReviewer]
            (
                [tid_PerformanceMeasure]
                , [FirstName]
                , [LastSurname]
                , [ReviewerStaffUniqueId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_PerformanceMeasureReviewer]
            INTO @Tids
            SELECT T.[tid_PerformanceMeasure]
                , S.[FirstName]
                , S.[LastSurname]
                , S.[ReviewerStaffUniqueId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FirstName], T.[LastSurname], T.[PerformanceMeasureIdentifier], [ReviewerStaff].[ReviewerStaffUniqueId]
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [extension].[PerformanceMeasureReviewer] AS T 
                LEFT JOIN [edfi].[ReviewerStaff]
                    ON [ReviewerStaff].[ReviewerStaffUSI] = T.[ReviewerStaffUSI]
                JOIN [extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_PerformanceMeasureReviewer]
                , S.[FirstName]
                , S.[LastSurname]
                , T.[PerformanceMeasureIdentifier]
            FROM [t_extension].[PerformanceMeasureReviewer] AS S
            JOIN @pTids AS T
                ON S.[tid_PerformanceMeasure] = T.[tid_PerformanceMeasure]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_PerformanceMeasureReviewer] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureReviewerKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureReviewerReceivedTrainingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureReviewerReceivedTraining]
            (
                [tid_PerformanceMeasureReviewer]
                , [ReceivedTrainingDate]
                , [InterRaterReliabilityScore]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasureReviewer]
                , S.[ReceivedTrainingDate]
                , S.[InterRaterReliabilityScore]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FirstName], T.[LastSurname], T.[PerformanceMeasureIdentifier], T.[ReceivedTrainingDate], T.[InterRaterReliabilityScore]
                , T.[CreateDate]
                FROM [extension].[PerformanceMeasureReviewerReceivedTraining] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[FirstName] = S.[FirstName]
                AND T.[LastSurname] = S.[LastSurname]
                AND T.[PerformanceMeasureIdentifier] = S.[PerformanceMeasureIdentifier];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasureFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasureFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PerformanceMeasureFacts] AS T
            USING
            (
                SELECT T.[FactsAsOfDate]
                , T.[RubricEducationOrganizationId]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[SchoolYear]
                , PerformanceMeasureTypeDescriptor.[CodeValue] AS PerformanceMeasureTypeDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , PerformanceMeasureTypeDescriptor.[Namespace] AS PerformanceMeasureTypeDescriptorNamespace
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[PerformanceMeasureFacts] AS T
                JOIN .[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN .[edfi].[Descriptor] AS PerformanceMeasureTypeDescriptor
                    ON [PerformanceMeasureTypeDescriptor].[DescriptorId] = T.[PerformanceMeasureTypeDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactsAsOfDate]
                    , [RubricEducationOrganizationId]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [SchoolYear]
                    , [PerformanceMeasureTypeDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AcademicSubjectDescriptorNamespace]
                    , [PerformanceMeasureTypeDescriptorNamespace]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactsAsOfDate]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[SchoolYear]
                    , S.[PerformanceMeasureTypeDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[PerformanceMeasureTypeDescriptorNamespace]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceMeasureFacts]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[SchoolYear]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PerformanceMeasureFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceMeasureFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceMeasureFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PerformanceMeasureFacts] AS T
            JOIN [extension].[PerformanceMeasureFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbPerformanceMeasureFactsGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureFactsGradeLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasureFactsGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasureFactsGradeLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureFactsGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureFactsGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureFactsGradeLevel]
            (
                [tid_PerformanceMeasureFacts]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasureFacts]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FactsAsOfDate], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[RubricEducationOrganizationId], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, T.[SchoolYear], RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , PerformanceMeasureFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasureFacts.[Id] AS ParentId
                FROM [extension].[PerformanceMeasureFactsGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [extension].[PerformanceMeasureFacts] AS PerformanceMeasureFacts
                    ON PerformanceMeasureFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND PerformanceMeasureFacts.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND PerformanceMeasureFacts.[RubricTitle] = T.[RubricTitle]
                    AND PerformanceMeasureFacts.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
                    AND PerformanceMeasureFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbPerformanceMeasureTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPerformanceMeasureTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PerformanceMeasureTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PerformanceMeasureType].[ShortDescription] AS PerformanceMeasureType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[PerformanceMeasureTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PerformanceMeasureTypeDescriptorId]
                LEFT JOIN [edfi].[PerformanceMeasureType] AS PerformanceMeasureType
                    ON [PerformanceMeasureType].[PerformanceMeasureTypeId] = T.[PerformanceMeasureTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PerformanceMeasureType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PerformanceMeasureType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceMeasureTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceMeasureTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceMeasureTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PerformanceMeasureTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[PerformanceMeasureTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[PerformanceMeasureTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPopulationCategoryDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbPopulationCategoryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPopulationCategoryDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbPopulationCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PopulationCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PopulationCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PopulationCategoryType].[ShortDescription] AS PopulationCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[PopulationCategoryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PopulationCategoryDescriptorId]
                JOIN [edfi].[PopulationCategoryType] AS PopulationCategoryType
                    ON [PopulationCategoryType].[PopulationCategoryTypeId] = T.[PopulationCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PopulationCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PopulationCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PopulationCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PopulationCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PopulationCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PopulationCategoryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[PopulationCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[PopulationCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPopulationSubCategoryDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbPopulationSubCategoryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPopulationSubCategoryDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbPopulationSubCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PopulationSubCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PopulationSubCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PopulationSubCategoryType].[ShortDescription] AS PopulationSubCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[PopulationSubCategoryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PopulationSubCategoryDescriptorId]
                JOIN [edfi].[PopulationSubCategoryType] AS PopulationSubCategoryType
                    ON [PopulationSubCategoryType].[PopulationSubCategoryTypeId] = T.[PopulationSubCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PopulationSubCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PopulationSubCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PopulationSubCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PopulationSubCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PopulationSubCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PopulationSubCategoryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[PopulationSubCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[PopulationSubCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbPreviousCareerDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbPreviousCareerDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbPreviousCareerDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbPreviousCareerDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PreviousCareerDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PreviousCareerDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PreviousCareerType].[ShortDescription] AS PreviousCareerType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[PreviousCareerDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PreviousCareerDescriptorId]
                LEFT JOIN [edfi].[PreviousCareerType] AS PreviousCareerType
                    ON [PreviousCareerType].[PreviousCareerTypeId] = T.[PreviousCareerTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PreviousCareerType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PreviousCareerType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PreviousCareerDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PreviousCareerDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PreviousCareerDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PreviousCareerDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PreviousCareerDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[PreviousCareerDescriptor] AS S
                ON P.[DescriptorId] = S.[PreviousCareerDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProfessionalDevelopmentEvent] ******/

IF OBJECT_ID('[t_extension].[usp_dbProfessionalDevelopmentEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProfessionalDevelopmentEvent];
GO

CREATE PROCEDURE [t_extension].[usp_dbProfessionalDevelopmentEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProfessionalDevelopmentEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProfessionalDevelopmentEvent] AS T
            USING
            (
                SELECT T.[ProfessionalDevelopmentTitle]
                , ProfessionalDevelopmentOfferedByDescriptor.[CodeValue] AS ProfessionalDevelopmentOfferedByDescriptorCodeValue
                , T.[TotalHours]
                , T.[Required]
                , T.[MultipleSession]
                , T.[ProfessionalDevelopmentReason]
                , ProfessionalDevelopmentOfferedByDescriptor.[Namespace] AS ProfessionalDevelopmentOfferedByDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[ProfessionalDevelopmentEvent] AS T
                JOIN .[edfi].[Descriptor] AS ProfessionalDevelopmentOfferedByDescriptor
                    ON [ProfessionalDevelopmentOfferedByDescriptor].[DescriptorId] = T.[ProfessionalDevelopmentOfferedByDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ProfessionalDevelopmentTitle]
                    , [ProfessionalDevelopmentOfferedByDescriptorCodeValue]
                    , [TotalHours]
                    , [Required]
                    , [MultipleSession]
                    , [ProfessionalDevelopmentReason]
                    , [ProfessionalDevelopmentOfferedByDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ProfessionalDevelopmentTitle]
                    , S.[ProfessionalDevelopmentOfferedByDescriptorCodeValue]
                    , S.[TotalHours]
                    , S.[Required]
                    , S.[MultipleSession]
                    , S.[ProfessionalDevelopmentReason]
                    , S.[ProfessionalDevelopmentOfferedByDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProfessionalDevelopmentEvent]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProfessionalDevelopmentEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProfessionalDevelopmentEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProfessionalDevelopmentEvent] AS T
            JOIN [extension].[ProfessionalDevelopmentEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProfessionalDevelopmentOfferedByDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProfessionalDevelopmentOfferedByType].[ShortDescription] AS ProfessionalDevelopmentOfferedByType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[ProfessionalDevelopmentOfferedByDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProfessionalDevelopmentOfferedByDescriptorId]
                LEFT JOIN [edfi].[ProfessionalDevelopmentOfferedByType] AS ProfessionalDevelopmentOfferedByType
                    ON [ProfessionalDevelopmentOfferedByType].[ProfessionalDevelopmentOfferedByTypeId] = T.[ProfessionalDevelopmentOfferedByTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProfessionalDevelopmentOfferedByType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProfessionalDevelopmentOfferedByType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProfessionalDevelopmentOfferedByDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProfessionalDevelopmentOfferedByDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProfessionalDevelopmentOfferedByDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[ProfessionalDevelopmentOfferedByDescriptor] AS S
                ON P.[DescriptorId] = S.[ProfessionalDevelopmentOfferedByDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProgramGatewayDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbProgramGatewayDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProgramGatewayDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbProgramGatewayDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProgramGatewayDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProgramGatewayDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProgramGatewayType].[ShortDescription] AS ProgramGatewayType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[ProgramGatewayDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                LEFT JOIN [edfi].[ProgramGatewayType] AS ProgramGatewayType
                    ON [ProgramGatewayType].[ProgramGatewayTypeId] = T.[ProgramGatewayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProgramGatewayType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProgramGatewayType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProgramGatewayDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProgramGatewayDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProgramGatewayDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProgramGatewayDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[ProgramGatewayDescriptor] AS S
                ON P.[DescriptorId] = S.[ProgramGatewayDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspect] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspect]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspect];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspect]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Prospect] AS T
            USING
            (
                SELECT T.[ProspectEducationOrganizationId]
                , T.[ProspectIdentifier]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , T.[ElectronicMailAddress]
                , T.[Applied]
                , T.[HispanicLatinoEthnicity]
                , T.[Met]
                , T.[Notes]
                , T.[PreScreeningRating]
                , T.[Referral]
                , T.[ReferredBy]
                , [SexType].[ShortDescription] AS SexType
                , T.[SocialMediaUserName]
                , T.[SocialMediaNetworkName]
                , [GenderType].[ShortDescription] AS GenderType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[Prospect] AS T
                LEFT JOIN [edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ProspectEducationOrganizationId]
                    , [ProspectIdentifier]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [ElectronicMailAddress]
                    , [Applied]
                    , [HispanicLatinoEthnicity]
                    , [Met]
                    , [Notes]
                    , [PreScreeningRating]
                    , [Referral]
                    , [ReferredBy]
                    , [SexType]
                    , [SocialMediaUserName]
                    , [SocialMediaNetworkName]
                    , [GenderType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ProspectEducationOrganizationId]
                    , S.[ProspectIdentifier]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[ElectronicMailAddress]
                    , S.[Applied]
                    , S.[HispanicLatinoEthnicity]
                    , S.[Met]
                    , S.[Notes]
                    , S.[PreScreeningRating]
                    , S.[Referral]
                    , S.[ReferredBy]
                    , S.[SexType]
                    , S.[SocialMediaUserName]
                    , S.[SocialMediaNetworkName]
                    , S.[GenderType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Prospect]
                , INSERTED.[ProspectEducationOrganizationId]
                , INSERTED.[ProspectIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProspectSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Prospect]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Prospect]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Prospect] AS T
            JOIN [extension].[Prospect] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbProspectCurrentPosition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectRecruitmentEvent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectTouchpoint] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectQualifications] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectCurrentPosition] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectCurrentPosition]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectCurrentPosition];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectCurrentPosition]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectCurrentPositionKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectCurrentPosition]
            (
                [tid_Prospect]
                , [NameOfInstitution]
                , [Location]
                , [PositionTitle]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_ProspectCurrentPosition]
            INTO @Tids
            SELECT T.[tid_Prospect]
                , S.[NameOfInstitution]
                , S.[Location]
                , S.[PositionTitle]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[NameOfInstitution], T.[Location], T.[PositionTitle], AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectCurrentPosition] AS T 
                LEFT JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_ProspectCurrentPosition]
                , T.[ProspectEducationOrganizationId]
                , T.[ProspectIdentifier]
            FROM [t_extension].[ProspectCurrentPosition] AS S
            JOIN @pTids AS T
                ON S.[tid_Prospect] = T.[tid_Prospect]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_ProspectCurrentPosition] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbProspectCurrentPositionGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectCurrentPositionGradeLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectCurrentPositionGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectCurrentPositionGradeLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectCurrentPositionGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectCurrentPositionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectCurrentPositionGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectCurrentPositionGradeLevel]
            (
                [tid_ProspectCurrentPosition]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ProspectCurrentPosition]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                FROM [extension].[ProspectCurrentPositionGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ProspectEducationOrganizationId] = S.[ProspectEducationOrganizationId]
                AND T.[ProspectIdentifier] = S.[ProspectIdentifier];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectRace] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectRace];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectRace]
            (
                [tid_Prospect]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], RaceType.[ShortDescription] AS RaceType
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectRecruitmentEvent] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectRecruitmentEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectRecruitmentEvent];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectRecruitmentEvent]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectRecruitmentEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectRecruitmentEvent]
            (
                [tid_Prospect]
                , [EventDate]
                , [EventTitle]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[EventDate]
                , S.[EventTitle]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], T.[EventTitle], T.[ProspectEducationOrganizationId], T.[ProspectIdentifier]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectRecruitmentEvent] AS T 
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectTelephone] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectTelephone];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectTelephone]
            (
                [tid_Prospect]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectTelephone] AS T 
                JOIN [edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectTouchpoint] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectTouchpoint]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectTouchpoint];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectTouchpoint]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectTouchpointKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectTouchpoint]
            (
                [tid_Prospect]
                , [TouchpointContent]
                , [TouchpointDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[TouchpointContent]
                , S.[TouchpointDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[TouchpointContent], T.[TouchpointDate]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectTouchpoint] AS T 
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectCredential] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectCredential]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectCredential];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectCredential]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectCredential]
            (
                [tid_Prospect]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectCredential] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectDisability] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectDisability];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectDisability]
            (
                [tid_Prospect]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectQualifications] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectQualifications]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectQualifications];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectQualifications]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectQualificationsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectQualifications]
            (
                [tid_Prospect]
                , [Eligible]
                , [CapacityToServe]
                , [YearsOfServiceCurrentPlacement]
                , [YearsOfServiceTotal]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[Eligible]
                , S.[CapacityToServe]
                , S.[YearsOfServiceCurrentPlacement]
                , S.[YearsOfServiceTotal]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[Eligible], T.[CapacityToServe], T.[YearsOfServiceCurrentPlacement], T.[YearsOfServiceTotal]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectQualifications] AS T 
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectIdentificationDocument] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectIdentificationDocument]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectIdentificationDocument];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectIdentificationDocument]
            (
                [tid_Prospect]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [extension].[ProspectIdentificationDocument] AS T 
                JOIN [edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance] ******/

IF OBJECT_ID('[t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance];
GO

CREATE PROCEDURE [t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectProfessionalDevelopmentEventAttendanceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProspectProfessionalDevelopmentEventAttendance] AS T
            USING
            (
                SELECT T.[AttendanceDate]
                , T.[ProfessionalDevelopmentTitle]
                , T.[ProspectEducationOrganizationId]
                , T.[ProspectIdentifier]
                , AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[AttendanceEventReason]
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[ProspectProfessionalDevelopmentEventAttendance] AS T
                JOIN .[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceDate]
                    , [ProfessionalDevelopmentTitle]
                    , [ProspectEducationOrganizationId]
                    , [ProspectIdentifier]
                    , [AttendanceEventCategoryDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceDate]
                    , S.[ProfessionalDevelopmentTitle]
                    , S.[ProspectEducationOrganizationId]
                    , S.[ProspectIdentifier]
                    , S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProspectProfessionalDevelopmentEventAttendance]
                , INSERTED.[AttendanceDate]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[ProspectEducationOrganizationId]
                , INSERTED.[ProspectIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProspectProfessionalDevelopmentEventAttendance]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProspectProfessionalDevelopmentEventAttendance]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProspectProfessionalDevelopmentEventAttendance] AS T
            JOIN [extension].[ProspectProfessionalDevelopmentEventAttendance] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRecruitmentEvent] ******/

IF OBJECT_ID('[t_extension].[usp_dbRecruitmentEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRecruitmentEvent];
GO

CREATE PROCEDURE [t_extension].[usp_dbRecruitmentEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RecruitmentEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RecruitmentEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , T.[EventTitle]
                , T.[EventDescription]
                , T.[EventLocation]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[RecruitmentEvent] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [EventTitle]
                    , [EventDescription]
                    , [EventLocation]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[EventTitle]
                    , S.[EventDescription]
                    , S.[EventLocation]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RecruitmentEvent]
                , INSERTED.[EventDate]
                , INSERTED.[EventTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RecruitmentEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RecruitmentEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RecruitmentEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RecruitmentEvent] AS T
            JOIN [extension].[RecruitmentEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubric] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubric]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubric];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubric]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Rubric] AS T
            USING
            (
                SELECT T.[RubricEducationOrganizationId]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[RubricDescription]
                , T.[InterRaterReliabilityScore]
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[Rubric] AS T
                JOIN .[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [RubricEducationOrganizationId]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [RubricDescription]
                    , [InterRaterReliabilityScore]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[RubricEducationOrganizationId]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[RubricDescription]
                    , S.[InterRaterReliabilityScore]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Rubric]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Rubric]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Rubric]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Rubric] AS T
            JOIN [extension].[Rubric] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubricLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubricLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubricLevel]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricLevel] AS T
            USING
            (
                SELECT T.[RubricEducationOrganizationId]
                , T.[RubricLevelCode]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[RubricLevel] AS T
                JOIN .[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [RubricEducationOrganizationId]
                    , [RubricLevelCode]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[RubricEducationOrganizationId]
                    , S.[RubricLevelCode]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricLevel]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricLevelCode]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricLevelSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricLevel]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricLevel]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricLevel] AS T
            JOIN [extension].[RubricLevel] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbRubricLevelInformation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevelTheme] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelInformation] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubricLevelInformation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubricLevelInformation];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelInformation]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_RubricLevelKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelInformationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[RubricLevelInformation]
            (
                [tid_RubricLevel]
                , [LevelTypeDescriptorCodeValue]
                , [LevelTitle]
                , [LevelDescription]
                , [MinimumScore]
                , [MaximumScore]
                , [LevelTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RubricLevel]
                , S.[LevelTypeDescriptorCodeValue]
                , S.[LevelTitle]
                , S.[LevelDescription]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[LevelTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[RubricEducationOrganizationId], T.[RubricLevelCode], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, LevelTypeDescriptor.[CodeValue] AS LevelTypeDescriptorCodeValue, T.[LevelTitle], T.[LevelDescription], T.[MinimumScore], T.[MaximumScore], LevelTypeDescriptor.[Namespace] AS LevelTypeDescriptorNamespace, RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , RubricLevel.[LastModifiedDate] AS ParentLastModifiedDate
                , RubricLevel.[Id] AS ParentId
                FROM [extension].[RubricLevelInformation] AS T 
                JOIN [edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [edfi].[Descriptor] AS LevelTypeDescriptor
                    ON LevelTypeDescriptor.[DescriptorId] = T.[LevelTypeDescriptorId]
                JOIN [extension].[RubricLevel] AS RubricLevel
                    ON RubricLevel.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND RubricLevel.[RubricLevelCode] = T.[RubricLevelCode]
                    AND RubricLevel.[RubricTitle] = T.[RubricTitle]
                    AND RubricLevel.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelTheme] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubricLevelTheme]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubricLevelTheme];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelTheme]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_RubricLevelKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelThemeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[RubricLevelTheme]
            (
                [tid_RubricLevel]
                , [ThemeDescriptorCodeValue]
                , [ThemeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RubricLevel]
                , S.[ThemeDescriptorCodeValue]
                , S.[ThemeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[RubricEducationOrganizationId], T.[RubricLevelCode], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, ThemeDescriptor.[CodeValue] AS ThemeDescriptorCodeValue, ThemeDescriptor.[Namespace] AS ThemeDescriptorNamespace, RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , RubricLevel.[LastModifiedDate] AS ParentLastModifiedDate
                , RubricLevel.[Id] AS ParentId
                FROM [extension].[RubricLevelTheme] AS T 
                JOIN [edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [edfi].[Descriptor] AS ThemeDescriptor
                    ON ThemeDescriptor.[DescriptorId] = T.[ThemeDescriptorId]
                JOIN [extension].[RubricLevel] AS RubricLevel
                    ON RubricLevel.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND RubricLevel.[RubricLevelCode] = T.[RubricLevelCode]
                    AND RubricLevel.[RubricTitle] = T.[RubricTitle]
                    AND RubricLevel.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubricLevelResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubricLevelResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelResponse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricLevelResponse] AS T
            USING
            (
                SELECT T.[PerformanceMeasureIdentifier]
                , T.[RubricEducationOrganizationId]
                , T.[RubricLevelCode]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[NumericResponse]
                , T.[TextResponse]
                , T.[AreaOfRefinement]
                , T.[AreaOfReinforcement]
                , T.[HalfIndicatorsScored]
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[RubricLevelResponse] AS T
                JOIN .[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [PerformanceMeasureIdentifier]
                    , [RubricEducationOrganizationId]
                    , [RubricLevelCode]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [NumericResponse]
                    , [TextResponse]
                    , [AreaOfRefinement]
                    , [AreaOfReinforcement]
                    , [HalfIndicatorsScored]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[PerformanceMeasureIdentifier]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricLevelCode]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[NumericResponse]
                    , S.[TextResponse]
                    , S.[AreaOfRefinement]
                    , S.[AreaOfReinforcement]
                    , S.[HalfIndicatorsScored]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricLevelResponse]
                , INSERTED.[PerformanceMeasureIdentifier]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricLevelCode]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricLevelResponseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricLevelResponse]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricLevelResponse]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricLevelResponse] AS T
            JOIN [extension].[RubricLevelResponse] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelResponseFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubricLevelResponseFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubricLevelResponseFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricLevelResponseFacts] AS T
            USING
            (
                SELECT T.[FactsAsOfDate]
                , T.[RubricEducationOrganizationId]
                , T.[RubricLevelCode]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[SchoolYear]
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[RubricLevelResponseFacts] AS T
                JOIN .[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactsAsOfDate]
                    , [RubricEducationOrganizationId]
                    , [RubricLevelCode]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [SchoolYear]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactsAsOfDate]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricLevelCode]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[SchoolYear]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricLevelResponseFacts]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricLevelCode]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[SchoolYear]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricLevelResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricLevelResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricLevelResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricLevelResponseFacts] AS T
            JOIN [extension].[RubricLevelResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_RubricLevelResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse]
            (
                [tid_RubricLevelResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RubricLevelResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FactsAsOfDate], T.[RubricEducationOrganizationId], T.[RubricLevelCode], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, T.[SchoolYear], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , RubricLevelResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , RubricLevelResponseFacts.[Id] AS ParentId
                FROM [extension].[RubricLevelResponseFactsAggregatedNumericResponse] AS T 
                JOIN [edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [extension].[RubricLevelResponseFacts] AS RubricLevelResponseFacts
                    ON RubricLevelResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND RubricLevelResponseFacts.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND RubricLevelResponseFacts.[RubricLevelCode] = T.[RubricLevelCode]
                    AND RubricLevelResponseFacts.[RubricTitle] = T.[RubricTitle]
                    AND RubricLevelResponseFacts.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
                    AND RubricLevelResponseFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbRubricTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbRubricTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbRubricTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [RubricType].[ShortDescription] AS RubricType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[RubricTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[RubricTypeDescriptorId]
                LEFT JOIN [edfi].[RubricType] AS RubricType
                    ON [RubricType].[RubricTypeId] = T.[RubricTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [RubricType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[RubricType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[RubricTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[RubricTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSalaryTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbSalaryTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSalaryTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbSalaryTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SalaryTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SalaryTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SalaryType].[ShortDescription] AS SalaryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[SalaryTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SalaryTypeDescriptorId]
                LEFT JOIN [edfi].[SalaryType] AS SalaryType
                    ON [SalaryType].[SalaryTypeId] = T.[SalaryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SalaryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SalaryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SalaryTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SalaryTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SalaryTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SalaryTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SalaryTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[SalaryTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[SalaryTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSchoolStatusDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbSchoolStatusDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSchoolStatusDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbSchoolStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SchoolStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SchoolStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SchoolStatusType].[ShortDescription] AS SchoolStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[SchoolStatusDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SchoolStatusDescriptorId]
                LEFT JOIN [edfi].[SchoolStatusType] AS SchoolStatusType
                    ON [SchoolStatusType].[SchoolStatusTypeId] = T.[SchoolStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SchoolStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SchoolStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SchoolStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SchoolStatusDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[SchoolStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[SchoolStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSchoolStudentGrowthMeasure] ******/

IF OBJECT_ID('[t_extension].[usp_dbSchoolStudentGrowthMeasure]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSchoolStudentGrowthMeasure];
GO

CREATE PROCEDURE [t_extension].[usp_dbSchoolStudentGrowthMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SchoolStudentGrowthMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SchoolStudentGrowthMeasure] AS T
            USING
            (
                SELECT T.[FactAsOfDate]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[StudentGrowthActualScore]
                , T.[StudentGrowthMet]
                , T.[StudentGrowthNCount]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , PopulationCategoryDescriptor.[CodeValue] AS PopulationCategoryDescriptorCodeValue
                , PopulationSubCategoryDescriptor.[CodeValue] AS PopulationSubCategoryDescriptorCodeValue
                , T.[SupLowN]
                , T.[SupressionFlag]
                , PopulationSubCategoryDescriptor.[Namespace] AS PopulationSubCategoryDescriptorNamespace
                , PopulationCategoryDescriptor.[Namespace] AS PopulationCategoryDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SchoolStudentGrowthMeasure] AS T
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN .[edfi].[Descriptor] AS PopulationCategoryDescriptor
                    ON [PopulationCategoryDescriptor].[DescriptorId] = T.[PopulationCategoryDescriptorId]
                JOIN .[edfi].[Descriptor] AS PopulationSubCategoryDescriptor
                    ON [PopulationSubCategoryDescriptor].[DescriptorId] = T.[PopulationSubCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactAsOfDate]
                    , [SchoolId]
                    , [SchoolYear]
                    , [StudentGrowthActualScore]
                    , [StudentGrowthMet]
                    , [StudentGrowthNCount]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [PopulationCategoryDescriptorCodeValue]
                    , [PopulationSubCategoryDescriptorCodeValue]
                    , [SupLowN]
                    , [SupressionFlag]
                    , [PopulationSubCategoryDescriptorNamespace]
                    , [PopulationCategoryDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactAsOfDate]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[StudentGrowthActualScore]
                    , S.[StudentGrowthMet]
                    , S.[StudentGrowthNCount]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[PopulationCategoryDescriptorCodeValue]
                    , S.[PopulationSubCategoryDescriptorCodeValue]
                    , S.[SupLowN]
                    , S.[SupressionFlag]
                    , S.[PopulationSubCategoryDescriptorNamespace]
                    , S.[PopulationCategoryDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolStudentGrowthMeasure]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolStudentGrowthMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolStudentGrowthMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SchoolStudentGrowthMeasure] AS T
            JOIN [extension].[SchoolStudentGrowthMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionCourseTranscriptFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionCourseTranscriptFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SectionCourseTranscriptFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionCourseTranscriptFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionCourseTranscriptFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionCourseTranscriptFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionCourseTranscriptFacts] AS T
            JOIN [extension].[SectionCourseTranscriptFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled]
            (
                [tid_SectionCourseTranscriptFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionCourseTranscriptFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[FactsAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[SectionCourseTranscriptFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionCourseTranscriptFacts] AS SectionCourseTranscriptFacts
                    ON SectionCourseTranscriptFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionCourseTranscriptFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionCourseTranscriptFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionCourseTranscriptFacts.[SchoolId] = T.[SchoolId]
                    AND SectionCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionCourseTranscriptFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionCourseTranscriptFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
            (
                [tid_SectionCourseTranscriptFacts]
                , [FinalLetterGrade]
                , [LetterGradeTypeNumber]
                , [LetterGradeTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionCourseTranscriptFacts]
                , S.[FinalLetterGrade]
                , S.[LetterGradeTypeNumber]
                , S.[LetterGradeTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[FactsAsOfDate], T.[FinalLetterGrade], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[LetterGradeTypeNumber], T.[LetterGradeTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionCourseTranscriptFacts] AS SectionCourseTranscriptFacts
                    ON SectionCourseTranscriptFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionCourseTranscriptFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionCourseTranscriptFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionCourseTranscriptFacts.[SchoolId] = T.[SchoolId]
                    AND SectionCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionCourseTranscriptFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionCourseTranscriptFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsAggregatedNumericGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned]
            (
                [tid_SectionCourseTranscriptFacts]
                , [AverageFinalNumericGradeEarned]
                , [NumericGradeNCount]
                , [NumericGradeStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionCourseTranscriptFacts]
                , S.[AverageFinalNumericGradeEarned]
                , S.[NumericGradeNCount]
                , S.[NumericGradeStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[FactsAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[AverageFinalNumericGradeEarned], T.[NumericGradeNCount], T.[NumericGradeStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionCourseTranscriptFacts.[Id] AS ParentId
                FROM [extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionCourseTranscriptFacts] AS SectionCourseTranscriptFacts
                    ON SectionCourseTranscriptFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionCourseTranscriptFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionCourseTranscriptFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionCourseTranscriptFacts.[SchoolId] = T.[SchoolId]
                    AND SectionCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionCourseTranscriptFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionCourseTranscriptFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAcademicRecordFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionStudentAcademicRecordFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[AggregatedGPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SectionStudentAcademicRecordFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [AggregatedGPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[AggregatedGPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionStudentAcademicRecordFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionStudentAcademicRecordFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionStudentAcademicRecordFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionStudentAcademicRecordFacts] AS T
            JOIN [extension].[SectionStudentAcademicRecordFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled]
            (
                [tid_SectionStudentAcademicRecordFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAcademicRecordFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentAcademicRecordFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentAcademicRecordFacts] AS SectionStudentAcademicRecordFacts
                    ON SectionStudentAcademicRecordFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAcademicRecordFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAcademicRecordFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAcademicRecordFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAcademicRecordFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAcademicRecordFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
            (
                [tid_SectionStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionStudentAcademicRecordFacts] AS SectionStudentAcademicRecordFacts
                    ON SectionStudentAcademicRecordFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAcademicRecordFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAcademicRecordFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAcademicRecordFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAcademicRecordFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAcademicRecordFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
            (
                [tid_SectionStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionStudentAcademicRecordFacts] AS SectionStudentAcademicRecordFacts
                    ON SectionStudentAcademicRecordFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAcademicRecordFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAcademicRecordFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAcademicRecordFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAcademicRecordFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAcademicRecordFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAssessmentFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionStudentAssessmentFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[TakenSchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[AdministrationDate]
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SectionStudentAssessmentFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TakenSchoolYear]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [AdministrationDate]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TakenSchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionStudentAssessmentFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionStudentAssessmentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionStudentAssessmentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionStudentAssessmentFacts] AS T
            JOIN [extension].[SectionStudentAssessmentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled]
            (
                [tid_SectionStudentAssessmentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAssessmentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[TakenSchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentAssessmentFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentAssessmentFacts] AS SectionStudentAssessmentFacts
                    ON SectionStudentAssessmentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAssessmentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAssessmentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAssessmentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAssessmentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAssessmentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
                    AND SectionStudentAssessmentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAssessmentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsAggregatedScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult]
            (
                [tid_SectionStudentAssessmentFacts]
                , [AssessmentReportingMethodType]
                , [AverageScoreResultDatatypeType]
                , [AverageScoreResult]
                , [ScoreNCount]
                , [ScoreStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAssessmentFacts]
                , S.[AssessmentReportingMethodType]
                , S.[AverageScoreResultDatatypeType]
                , S.[AverageScoreResult]
                , S.[ScoreNCount]
                , S.[ScoreStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[TakenSchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, AverageScoreResultDatatypeType.[ShortDescription] AS AverageScoreResultDatatypeType, T.[AverageScoreResult], T.[ScoreNCount], T.[ScoreStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentAssessmentFactsAggregatedScoreResult] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[ResultDatatypeType] AS AverageScoreResultDatatypeType
                    ON AverageScoreResultDatatypeType.[ResultDatatypeTypeId] = T.[AverageScoreResultDatatypeTypeId]
                JOIN [extension].[SectionStudentAssessmentFacts] AS SectionStudentAssessmentFacts
                    ON SectionStudentAssessmentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAssessmentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAssessmentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAssessmentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAssessmentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAssessmentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
                    AND SectionStudentAssessmentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAssessmentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsAggregatedPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel]
            (
                [tid_SectionStudentAssessmentFacts]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMetNumber]
                , [PerformanceLevelMetPercentage]
                , [PerformanceLevelTypeNumber]
                , [PerformanceLevelTypePercentage]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAssessmentFacts]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMetNumber]
                , S.[PerformanceLevelMetPercentage]
                , S.[PerformanceLevelTypeNumber]
                , S.[PerformanceLevelTypePercentage]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[TakenSchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[PerformanceLevelMetNumber], T.[PerformanceLevelMetPercentage], T.[PerformanceLevelTypeNumber], T.[PerformanceLevelTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAssessmentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionStudentAssessmentFacts] AS SectionStudentAssessmentFacts
                    ON SectionStudentAssessmentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAssessmentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAssessmentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAssessmentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAssessmentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAssessmentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
                    AND SectionStudentAssessmentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAssessmentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionStudentFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SectionStudentFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionStudentFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionStudentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionStudentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionStudentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionStudentFacts] AS T
            JOIN [extension].[SectionStudentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionStudentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedGender] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedByDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSPED] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsStudentsEnrolled] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsStudentsEnrolled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsStudentsEnrolled];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsStudentsEnrolled]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsStudentsEnrolled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSex] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedSex]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSex];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSex]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSex]
            (
                [tid_SectionStudentFacts]
                , [SexType]
                , [ValueType]
                , [SexTypeNumber]
                , [SexTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[SexType]
                , S.[ValueType]
                , S.[SexTypeNumber]
                , S.[SexTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], SexType.[ShortDescription] AS SexType, TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[SexTypeNumber], T.[SexTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedSex] AS T 
                JOIN [edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedGender] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedGender]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedGender];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedGender]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedGenderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedGender]
            (
                [tid_SectionStudentFacts]
                , [GenderType]
                , [ValueType]
                , [GenderTypeNumber]
                , [GenderTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[GenderType]
                , S.[ValueType]
                , S.[GenderTypeNumber]
                , S.[GenderTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], GenderType.[ShortDescription] AS GenderType, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[GenderTypeNumber], T.[GenderTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedGender] AS T 
                JOIN [edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedHispanicLatinoEthnicityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity]
            (
                [tid_SectionStudentFacts]
                , [HispanicLatinoEthnicity]
                , [ValueType]
                , [HispanicLatinoEthnicityNumber]
                , [HispanicLatinoEthnicityPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[HispanicLatinoEthnicity]
                , S.[ValueType]
                , S.[HispanicLatinoEthnicityNumber]
                , S.[HispanicLatinoEthnicityPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[HispanicLatinoEthnicity], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[HispanicLatinoEthnicityNumber], T.[HispanicLatinoEthnicityPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedRace] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedRace];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedRace]
            (
                [tid_SectionStudentFacts]
                , [RaceType]
                , [ValueType]
                , [RaceTypeNumber]
                , [RaceTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[RaceType]
                , S.[ValueType]
                , S.[RaceTypeNumber]
                , S.[RaceTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], RaceType.[ShortDescription] AS RaceType, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[RaceTypeNumber], T.[RaceTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSchoolFoodServicesEligibilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility]
            (
                [tid_SectionStudentFacts]
                , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [TypePercentage]
                , [SchoolFoodServicesEligibilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[TypePercentage]
                , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[TypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility] AS T 
                JOIN [edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON SchoolFoodServicesEligibilityDescriptor.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedLanguage] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedLanguage];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedLanguage]
            (
                [tid_SectionStudentFacts]
                , [LanguageDescriptorCodeValue]
                , [ValueType]
                , [LanguageTypeNumber]
                , [LanguageTypePercentage]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[LanguageDescriptorCodeValue]
                , S.[ValueType]
                , S.[LanguageTypeNumber]
                , S.[LanguageTypePercentage]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[LanguageTypeNumber], T.[LanguageTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedByDisability] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedByDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedByDisability];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedByDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedByDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedByDisability]
            (
                [tid_SectionStudentFacts]
                , [DisabilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [Percentage]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[DisabilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[Percentage]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[Percentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedByDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [StudentsDisabledNumber]
                , [StudentsDisabledPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[StudentsDisabledNumber]
                , S.[StudentsDisabledPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[StudentsDisabledNumber], T.[StudentsDisabledPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedELLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedELLEnrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [ELLEnrollmentNumber]
                , [ELLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[ELLEnrollmentNumber]
                , S.[ELLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[ELLEnrollmentNumber], T.[ELLEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedELLEnrollment] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedESLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedESLEnrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [ESLEnrollmentNumber]
                , [ESLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[ESLEnrollmentNumber]
                , S.[ESLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[ESLEnrollmentNumber], T.[ESLEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedESLEnrollment] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSection504EnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSection504Enrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [Number504Enrolled]
                , [Percentage504Enrolled]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[Number504Enrolled]
                , S.[Percentage504Enrolled]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[Number504Enrolled], T.[Percentage504Enrolled], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedSection504Enrollment] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSPED] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedSPED]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSPED];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSPED]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSPEDKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSPED]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [SPEDEnrollmentNumber]
                , [SPEDEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[SPEDEnrollmentNumber]
                , S.[SPEDEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[SPEDEnrollmentNumber], T.[SPEDEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedSPED] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedTitleIEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [TitleIEnrollmentNumber]
                , [TitleIEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[TitleIEnrollmentNumber]
                , S.[TitleIEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[TitleIEnrollmentNumber], T.[TitleIEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [extension].[SectionStudentFactsAggregatedTitleIEnrollment] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyQuestionResponseFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionSurveyQuestionResponseFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyQuestionResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionSurveyQuestionResponseFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[QuestionCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[SurveyIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SectionSurveyQuestionResponseFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [QuestionCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [SurveyIdentifier]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[QuestionCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[SurveyIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionSurveyQuestionResponseFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[QuestionCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionSurveyQuestionResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionSurveyQuestionResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionSurveyQuestionResponseFacts] AS T
            JOIN [extension].[SectionSurveyQuestionResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse]
            (
                [tid_SectionSurveyQuestionResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionSurveyQuestionResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactsAsOfDate], T.[LocalCourseCode], T.[QuestionCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[SurveyIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionSurveyQuestionResponseFacts] AS SectionSurveyQuestionResponseFacts
                    ON SectionSurveyQuestionResponseFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionSurveyQuestionResponseFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionSurveyQuestionResponseFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND SectionSurveyQuestionResponseFacts.[SchoolId] = T.[SchoolId]
                    AND SectionSurveyQuestionResponseFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionSurveyQuestionResponseFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SectionSurveyQuestionResponseFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionSurveyQuestionResponseFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
            (
                [tid_SectionSurveyQuestionResponseFacts]
                , [AggregatedMatrixElement]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionSurveyQuestionResponseFacts]
                , S.[AggregatedMatrixElement]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AggregatedMatrixElement], T.[AverageNumericResponse], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactsAsOfDate], T.[LocalCourseCode], T.[QuestionCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[SurveyIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionSurveyQuestionResponseFacts] AS SectionSurveyQuestionResponseFacts
                    ON SectionSurveyQuestionResponseFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionSurveyQuestionResponseFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionSurveyQuestionResponseFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND SectionSurveyQuestionResponseFacts.[SchoolId] = T.[SchoolId]
                    AND SectionSurveyQuestionResponseFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionSurveyQuestionResponseFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SectionSurveyQuestionResponseFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionSurveyQuestionResponseFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyResponseFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionSurveyResponseFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionSurveyResponseFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionSurveyResponseFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[SurveyIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SectionSurveyResponseFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [SurveyIdentifier]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[SurveyIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionSurveyResponseFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionSurveyResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionSurveyResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionSurveyResponseFacts] AS T
            JOIN [extension].[SectionSurveyResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveySectionResponseRatingFacts] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionSurveySectionResponseRatingFacts]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionSurveySectionResponseRatingFacts];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveySectionResponseRatingFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveySectionResponseRatingFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionSurveySectionResponseRatingFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SectionSurveySectionResponseRatingFacts] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionSurveySectionResponseRatingFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionSurveySectionResponseRatingFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionSurveySectionResponseRatingFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionSurveySectionResponseRatingFacts] AS T
            JOIN [extension].[SectionSurveySectionResponseRatingFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionSurveySectionResponseRatingFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveySectionResponseRatingFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse]
            (
                [tid_SectionSurveySectionResponseRatingFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionSurveySectionResponseRatingFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactsAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[SurveyIdentifier], T.[SurveySectionTitle], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionSurveySectionResponseRatingFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionSurveySectionResponseRatingFacts.[Id] AS ParentId
                FROM [extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[SectionSurveySectionResponseRatingFacts] AS SectionSurveySectionResponseRatingFacts
                    ON SectionSurveySectionResponseRatingFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionSurveySectionResponseRatingFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionSurveySectionResponseRatingFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionSurveySectionResponseRatingFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionSurveySectionResponseRatingFacts.[SchoolId] = T.[SchoolId]
                    AND SectionSurveySectionResponseRatingFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionSurveySectionResponseRatingFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionSurveySectionResponseRatingFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SectionSurveySectionResponseRatingFacts.[SurveySectionTitle] = T.[SurveySectionTitle]
                    AND SectionSurveySectionResponseRatingFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionSurveySectionResponseRatingFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffFieldworkAbsenceEvent] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffFieldworkAbsenceEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffFieldworkAbsenceEvent];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffFieldworkAbsenceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffFieldworkAbsenceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffFieldworkAbsenceEvent] AS T
            USING
            (
                SELECT AbsenceEventCategoryDescriptor.[CodeValue] AS AbsenceEventCategoryDescriptorCodeValue
                , T.[EventDate]
                , [Staff].[StaffUniqueId]
                , T.[AbsenceEventReason]
                , T.[HoursAbsent]
                , AbsenceEventCategoryDescriptor.[Namespace] AS AbsenceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffFieldworkAbsenceEvent] AS T
                JOIN .[edfi].[Descriptor] AS AbsenceEventCategoryDescriptor
                    ON [AbsenceEventCategoryDescriptor].[DescriptorId] = T.[AbsenceEventCategoryDescriptorId]
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AbsenceEventCategoryDescriptorCodeValue]
                    , [EventDate]
                    , [StaffUniqueId]
                    , [AbsenceEventReason]
                    , [HoursAbsent]
                    , [AbsenceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AbsenceEventCategoryDescriptorCodeValue]
                    , S.[EventDate]
                    , S.[StaffUniqueId]
                    , S.[AbsenceEventReason]
                    , S.[HoursAbsent]
                    , S.[AbsenceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffFieldworkAbsenceEvent]
                , INSERTED.[AbsenceEventCategoryDescriptorCodeValue]
                , INSERTED.[EventDate]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[AbsenceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffFieldworkAbsenceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffFieldworkAbsenceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffFieldworkAbsenceEvent] AS T
            JOIN [extension].[StaffFieldworkAbsenceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffFieldworkExperience] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffFieldworkExperience]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffFieldworkExperience];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffFieldworkExperience]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffFieldworkExperienceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffFieldworkExperience] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[FieldworkExperienceSchoolId]
                , T.[FieldworkIdentifier]
                , [Staff].[StaffUniqueId]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , FieldworkTypeDescriptor.[CodeValue] AS FieldworkTypeDescriptorCodeValue
                , T.[HoursPerWeek]
                , T.[EndDate]
                , ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue
                , ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , FieldworkTypeDescriptor.[Namespace] AS FieldworkTypeDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffFieldworkExperience] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                JOIN .[edfi].[Descriptor] AS FieldworkTypeDescriptor
                    ON [FieldworkTypeDescriptor].[DescriptorId] = T.[FieldworkTypeDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON [ProgramGatewayDescriptor].[DescriptorId] = T.[ProgramGatewayDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [FieldworkExperienceSchoolId]
                    , [FieldworkIdentifier]
                    , [StaffUniqueId]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [FieldworkTypeDescriptorCodeValue]
                    , [HoursPerWeek]
                    , [EndDate]
                    , [ProgramGatewayDescriptorCodeValue]
                    , [ProgramGatewayDescriptorNamespace]
                    , [FieldworkTypeDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[FieldworkExperienceSchoolId]
                    , S.[FieldworkIdentifier]
                    , S.[StaffUniqueId]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[FieldworkTypeDescriptorCodeValue]
                    , S.[HoursPerWeek]
                    , S.[EndDate]
                    , S.[ProgramGatewayDescriptorCodeValue]
                    , S.[ProgramGatewayDescriptorNamespace]
                    , S.[FieldworkTypeDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffFieldworkExperience]
                , INSERTED.[BeginDate]
                , INSERTED.[FieldworkExperienceSchoolId]
                , INSERTED.[FieldworkIdentifier]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffFieldworkExperienceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffFieldworkExperience]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffFieldworkExperience]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffFieldworkExperience] AS T
            JOIN [extension].[StaffFieldworkExperience] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffFieldworkExperienceCoteaching] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffFieldworkExperienceCoteaching] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffFieldworkExperienceCoteaching]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffFieldworkExperienceCoteaching];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffFieldworkExperienceCoteaching]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffFieldworkExperienceKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffFieldworkExperienceCoteachingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffFieldworkExperienceCoteaching]
            (
                [tid_StaffFieldworkExperience]
                , [CoteachingBeginDate]
                , [CoteachingEndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffFieldworkExperience]
                , S.[CoteachingBeginDate]
                , S.[CoteachingEndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[FieldworkExperienceSchoolId], T.[FieldworkIdentifier], [Staff].[StaffUniqueId], T.[CoteachingBeginDate], T.[CoteachingEndDate]
                , T.[CreateDate]
                , StaffFieldworkExperience.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffFieldworkExperience.[Id] AS ParentId
                FROM [extension].[StaffFieldworkExperienceCoteaching] AS T 
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [extension].[StaffFieldworkExperience] AS StaffFieldworkExperience
                    ON StaffFieldworkExperience.[BeginDate] = T.[BeginDate]
                    AND StaffFieldworkExperience.[FieldworkExperienceSchoolId] = T.[FieldworkExperienceSchoolId]
                    AND StaffFieldworkExperience.[FieldworkIdentifier] = T.[FieldworkIdentifier]
                    AND StaffFieldworkExperience.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffProfessionalDevelopmentEventAttendanceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffProfessionalDevelopmentEventAttendance] AS T
            USING
            (
                SELECT T.[AttendanceDate]
                , T.[ProfessionalDevelopmentTitle]
                , [Staff].[StaffUniqueId]
                , AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[AttendanceEventReason]
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffProfessionalDevelopmentEventAttendance] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN .[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceDate]
                    , [ProfessionalDevelopmentTitle]
                    , [StaffUniqueId]
                    , [AttendanceEventCategoryDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceDate]
                    , S.[ProfessionalDevelopmentTitle]
                    , S.[StaffUniqueId]
                    , S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffProfessionalDevelopmentEventAttendance]
                , INSERTED.[AttendanceDate]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffProfessionalDevelopmentEventAttendance]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffProfessionalDevelopmentEventAttendance]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffProfessionalDevelopmentEventAttendance] AS T
            JOIN [extension].[StaffProfessionalDevelopmentEventAttendance] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasure] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffStudentGrowthMeasure]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasure];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasure] AS T
            USING
            (
                SELECT T.[FactAsOfDate]
                , T.[SchoolYear]
                , [Staff].[StaffUniqueId]
                , T.[StudentGrowthMeasureDate]
                , [ResultDatatypeType].[ShortDescription] AS ResultDatatypeType
                , StudentGrowthTypeDescriptor.[CodeValue] AS StudentGrowthTypeDescriptorCodeValue
                , T.[StudentGrowthTargetScore]
                , T.[StudentGrowthActualScore]
                , T.[StudentGrowthMet]
                , T.[StudentGrowthNCount]
                , StudentGrowthTypeDescriptor.[Namespace] AS StudentGrowthTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffStudentGrowthMeasure] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON [ResultDatatypeType].[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS StudentGrowthTypeDescriptor
                    ON [StudentGrowthTypeDescriptor].[DescriptorId] = T.[StudentGrowthTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactAsOfDate]
                    , [SchoolYear]
                    , [StaffUniqueId]
                    , [StudentGrowthMeasureDate]
                    , [ResultDatatypeType]
                    , [StudentGrowthTypeDescriptorCodeValue]
                    , [StudentGrowthTargetScore]
                    , [StudentGrowthActualScore]
                    , [StudentGrowthMet]
                    , [StudentGrowthNCount]
                    , [StudentGrowthTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[StaffUniqueId]
                    , S.[StudentGrowthMeasureDate]
                    , S.[ResultDatatypeType]
                    , S.[StudentGrowthTypeDescriptorCodeValue]
                    , S.[StudentGrowthTargetScore]
                    , S.[StudentGrowthActualScore]
                    , S.[StudentGrowthMet]
                    , S.[StudentGrowthNCount]
                    , S.[StudentGrowthTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasure]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasure] AS T
            JOIN [extension].[StaffStudentGrowthMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureCourseAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasureCourseAssociation] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , [Staff].[StaffUniqueId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffStudentGrowthMeasureCourseAssociation] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [StaffUniqueId]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[StaffUniqueId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasureCourseAssociation]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasureCourseAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasureCourseAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasureCourseAssociation] AS T
            JOIN [extension].[StaffStudentGrowthMeasureCourseAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , [Staff].[StaffUniqueId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [StaffUniqueId]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[StaffUniqueId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS T
            JOIN [extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasureSectionAssociation] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Staff].[StaffUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[BeginDate]
                , T.[EndDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffStudentGrowthMeasureSectionAssociation] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StaffUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [BeginDate]
                    , [EndDate]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StaffUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasureSectionAssociation]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasureSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasureSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasureSectionAssociation] AS T
            JOIN [extension].[StaffStudentGrowthMeasureSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffTeacherPreparationProviderAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffTeacherPreparationProviderAssociation] AS T
            USING
            (
                SELECT [Staff].[StaffUniqueId]
                , T.[TeacherPreparationProviderId]
                , T.[SchoolYear]
                , ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue
                , ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffTeacherPreparationProviderAssociation] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN .[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON [ProgramAssignmentDescriptor].[DescriptorId] = T.[ProgramAssignmentDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StaffUniqueId]
                    , [TeacherPreparationProviderId]
                    , [SchoolYear]
                    , [ProgramAssignmentDescriptorCodeValue]
                    , [ProgramAssignmentDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StaffUniqueId]
                    , S.[TeacherPreparationProviderId]
                    , S.[SchoolYear]
                    , S.[ProgramAssignmentDescriptorCodeValue]
                    , S.[ProgramAssignmentDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffTeacherPreparationProviderAssociation]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TeacherPreparationProviderId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffTeacherPreparationProviderAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffTeacherPreparationProviderAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffTeacherPreparationProviderAssociation] AS T
            JOIN [extension].[StaffTeacherPreparationProviderAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderAssociationGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel]
            (
                [tid_StaffTeacherPreparationProviderAssociation]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffTeacherPreparationProviderAssociation]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, [Staff].[StaffUniqueId], T.[TeacherPreparationProviderId], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , StaffTeacherPreparationProviderAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffTeacherPreparationProviderAssociation.[Id] AS ParentId
                FROM [extension].[StaffTeacherPreparationProviderAssociationGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [extension].[StaffTeacherPreparationProviderAssociation] AS StaffTeacherPreparationProviderAssociation
                    ON StaffTeacherPreparationProviderAssociation.[StaffUSI] = T.[StaffUSI]
                    AND StaffTeacherPreparationProviderAssociation.[TeacherPreparationProviderId] = T.[TeacherPreparationProviderId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderAssociationAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject]
            (
                [tid_StaffTeacherPreparationProviderAssociation]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffTeacherPreparationProviderAssociation]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, [Staff].[StaffUniqueId], T.[TeacherPreparationProviderId], AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StaffTeacherPreparationProviderAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffTeacherPreparationProviderAssociation.[Id] AS ParentId
                FROM [extension].[StaffTeacherPreparationProviderAssociationAcademicSubject] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [extension].[StaffTeacherPreparationProviderAssociation] AS StaffTeacherPreparationProviderAssociation
                    ON StaffTeacherPreparationProviderAssociation.[StaffUSI] = T.[StaffUSI]
                    AND StaffTeacherPreparationProviderAssociation.[TeacherPreparationProviderId] = T.[TeacherPreparationProviderId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffTeacherPreparationProviderProgramAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Staff].[StaffUniqueId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[StudentRecordAccess]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[StaffTeacherPreparationProviderProgramAssociation] AS T
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StaffUniqueId]
                    , [BeginDate]
                    , [EndDate]
                    , [StudentRecordAccess]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StaffUniqueId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[StudentRecordAccess]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffTeacherPreparationProviderProgramAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffTeacherPreparationProviderProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffTeacherPreparationProviderProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffTeacherPreparationProviderProgramAssociation] AS T
            JOIN [extension].[StaffTeacherPreparationProviderProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStudentGrowthTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbStudentGrowthTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStudentGrowthTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbStudentGrowthTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StudentGrowthTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StudentGrowthTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StudentGrowthType].[ShortDescription] AS StudentGrowthType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[StudentGrowthTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StudentGrowthTypeDescriptorId]
                JOIN [edfi].[StudentGrowthType] AS StudentGrowthType
                    ON [StudentGrowthType].[StudentGrowthTypeId] = T.[StudentGrowthTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StudentGrowthType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StudentGrowthType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentGrowthTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentGrowthTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentGrowthTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StudentGrowthTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[StudentGrowthTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[StudentGrowthTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurvey] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurvey]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurvey];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurvey]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Survey] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[EducationOrganizationId]
                , T.[SurveyTitle]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , SurveyCategoryDescriptor.[CodeValue] AS SurveyCategoryDescriptorCodeValue
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[CourseCode]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , SurveyCategoryDescriptor.[Namespace] AS SurveyCategoryDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[Survey] AS T
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS SurveyCategoryDescriptor
                    ON [SurveyCategoryDescriptor].[DescriptorId] = T.[SurveyCategoryDescriptorId]
                LEFT JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [EducationOrganizationId]
                    , [SurveyTitle]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SurveyCategoryDescriptorCodeValue]
                    , [ProgramName]
                    , [ProgramType]
                    , [CourseCode]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [SurveyCategoryDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[SurveyTitle]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SurveyCategoryDescriptorCodeValue]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[CourseCode]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[SurveyCategoryDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Survey]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveySnapshotRecord]
            (
                [SnapshotId]
                , [tid_Survey]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Survey]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Survey] AS T
            JOIN [extension].[Survey] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyCategoryDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyCategoryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyCategoryDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SurveyCategoryType].[ShortDescription] AS SurveyCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[SurveyCategoryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SurveyCategoryDescriptorId]
                LEFT JOIN [edfi].[SurveyCategoryType] AS SurveyCategoryType
                    ON [SurveyCategoryType].[SurveyCategoryTypeId] = T.[SurveyCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SurveyCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SurveyCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyCategoryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[SurveyCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[SurveyCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestion] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyQuestion]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyQuestion];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestion]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyQuestion] AS T
            USING
            (
                SELECT T.[QuestionCode]
                , T.[SurveyIdentifier]
                , [QuestionFormType].[ShortDescription] AS QuestionFormType
                , T.[QuestionText]
                , T.[SurveySectionTitle]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SurveyQuestion] AS T
                JOIN [edfi].[QuestionFormType] AS QuestionFormType
                    ON [QuestionFormType].[QuestionFormTypeId] = T.[QuestionFormTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [QuestionCode]
                    , [SurveyIdentifier]
                    , [QuestionFormType]
                    , [QuestionText]
                    , [SurveySectionTitle]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[QuestionFormType]
                    , S.[QuestionText]
                    , S.[SurveySectionTitle]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyQuestion]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyQuestionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyQuestion]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyQuestion]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyQuestion] AS T
            JOIN [extension].[SurveyQuestion] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSurveyQuestionNumericChoice] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestionTextChoice] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestionMatrix] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionNumericChoice] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyQuestionNumericChoice]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyQuestionNumericChoice];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionNumericChoice]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionNumericChoiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionNumericChoice]
            (
                [tid_SurveyQuestion]
                , [NumericChoice]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestion]
                , S.[NumericChoice]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[NumericChoice], T.[QuestionCode], T.[SurveyIdentifier]
                , T.[CreateDate]
                , SurveyQuestion.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestion.[Id] AS ParentId
                FROM [extension].[SurveyQuestionNumericChoice] AS T 
                JOIN [extension].[SurveyQuestion] AS SurveyQuestion
                    ON SurveyQuestion.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestion.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionTextChoice] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyQuestionTextChoice]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyQuestionTextChoice];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionTextChoice]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionTextChoiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionTextChoice]
            (
                [tid_SurveyQuestion]
                , [TextChoice]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestion]
                , S.[TextChoice]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[QuestionCode], T.[SurveyIdentifier], T.[TextChoice]
                , T.[CreateDate]
                , SurveyQuestion.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestion.[Id] AS ParentId
                FROM [extension].[SurveyQuestionTextChoice] AS T 
                JOIN [extension].[SurveyQuestion] AS SurveyQuestion
                    ON SurveyQuestion.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestion.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionMatrix] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyQuestionMatrix]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyQuestionMatrix];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionMatrix]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionMatrixKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionMatrix]
            (
                [tid_SurveyQuestion]
                , [MatrixElement]
                , [MinRawScore]
                , [MaxRawScore]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestion]
                , S.[MatrixElement]
                , S.[MinRawScore]
                , S.[MaxRawScore]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[MatrixElement], T.[QuestionCode], T.[SurveyIdentifier], T.[MinRawScore], T.[MaxRawScore]
                , T.[CreateDate]
                , SurveyQuestion.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestion.[Id] AS ParentId
                FROM [extension].[SurveyQuestionMatrix] AS T 
                JOIN [extension].[SurveyQuestion] AS SurveyQuestion
                    ON SurveyQuestion.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestion.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyQuestionResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyQuestionResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionResponse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyQuestionResponse] AS T
            USING
            (
                SELECT T.[QuestionCode]
                , T.[SurveyIdentifier]
                , T.[SurveyResponseIdentifier]
                , T.[NoResponse]
                , T.[NumericResponse]
                , T.[TextResponse]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SurveyQuestionResponse] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [QuestionCode]
                    , [SurveyIdentifier]
                    , [SurveyResponseIdentifier]
                    , [NoResponse]
                    , [NumericResponse]
                    , [TextResponse]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[SurveyResponseIdentifier]
                    , S.[NoResponse]
                    , S.[NumericResponse]
                    , S.[TextResponse]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyQuestionResponse]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveyResponseIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyQuestionResponseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyQuestionResponse]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyQuestionResponse]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyQuestionResponse] AS T
            JOIN [extension].[SurveyQuestionResponse] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionResponseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionResponseSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse]
            (
                [tid_SurveyQuestionResponse]
                , [MatrixElement]
                , [NumericResponse]
                , [TextResponse]
                , [NoResponse]
                , [MinNumericResponse]
                , [MaxNumericResponse]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestionResponse]
                , S.[MatrixElement]
                , S.[NumericResponse]
                , S.[TextResponse]
                , S.[NoResponse]
                , S.[MinNumericResponse]
                , S.[MaxNumericResponse]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[MatrixElement], T.[QuestionCode], T.[SurveyIdentifier], T.[SurveyResponseIdentifier], T.[NumericResponse], T.[TextResponse], T.[NoResponse], T.[MinNumericResponse], T.[MaxNumericResponse]
                , T.[CreateDate]
                , SurveyQuestionResponse.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestionResponse.[Id] AS ParentId
                FROM [extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] AS T 
                JOIN [extension].[SurveyQuestionResponse] AS SurveyQuestionResponse
                    ON SurveyQuestionResponse.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestionResponse.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SurveyQuestionResponse.[SurveyResponseIdentifier] = T.[SurveyResponseIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyResponse] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveyResponse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveyResponse];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveyResponse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyResponse] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveyResponseIdentifier]
                , T.[ResponseDate]
                , T.[ElectronicMailAddress]
                , T.[FullName]
                , T.[Location]
                , [Student].[StudentUniqueId]
                , [Parent].[ParentUniqueId]
                , [Staff].[StaffUniqueId]
                , T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , T.[ProspectIdentifier]
                , T.[ProspectEducationOrganizationId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SurveyResponse] AS T
                LEFT JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN .[edfi].[Parent]
                    ON [Parent].[ParentUSI] = T.[ParentUSI]
                LEFT JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveyResponseIdentifier]
                    , [ResponseDate]
                    , [ElectronicMailAddress]
                    , [FullName]
                    , [Location]
                    , [StudentUniqueId]
                    , [ParentUniqueId]
                    , [StaffUniqueId]
                    , [ApplicantIdentifier]
                    , [EducationOrganizationId]
                    , [ProspectIdentifier]
                    , [ProspectEducationOrganizationId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveyResponseIdentifier]
                    , S.[ResponseDate]
                    , S.[ElectronicMailAddress]
                    , S.[FullName]
                    , S.[Location]
                    , S.[StudentUniqueId]
                    , S.[ParentUniqueId]
                    , S.[StaffUniqueId]
                    , S.[ApplicantIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[ProspectIdentifier]
                    , S.[ProspectEducationOrganizationId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyResponse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveyResponseIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyResponseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyResponse]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyResponse]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyResponse] AS T
            JOIN [extension].[SurveyResponse] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveySection] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveySection]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveySection];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveySection]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveySectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveySection] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SurveySection] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveySection]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveySectionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveySection]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveySection]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveySection] AS T
            JOIN [extension].[SurveySection] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveySectionResponseRating] ******/

IF OBJECT_ID('[t_extension].[usp_dbSurveySectionResponseRating]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSurveySectionResponseRating];
GO

CREATE PROCEDURE [t_extension].[usp_dbSurveySectionResponseRating]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveySectionResponseRatingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveySectionResponseRating] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveyResponseIdentifier]
                , T.[SurveySectionTitle]
                , T.[SectionRating]
                , T.[StudentSurveyNCount]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[SurveySectionResponseRating] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveyResponseIdentifier]
                    , [SurveySectionTitle]
                    , [SectionRating]
                    , [StudentSurveyNCount]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveyResponseIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[SectionRating]
                    , S.[StudentSurveyNCount]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveySectionResponseRating]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveyResponseIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveySectionResponseRatingSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveySectionResponseRating]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveySectionResponseRating]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveySectionResponseRating] AS T
            JOIN [extension].[SurveySectionResponseRating] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidate] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidate]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidate];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidate]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidate] AS T
            USING
            (
                SELECT T.[TeacherCandidateIdentifier]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[BirthCity]
                , [BirthStateAbbreviationType].[ShortDescription] AS BirthStateAbbreviationType
                , T.[BirthInternationalProvince]
                , BirthCountryDescriptor.[CodeValue] AS BirthCountryDescriptorCodeValue
                , T.[DateEnteredUS]
                , T.[MultipleBirthStatus]
                , T.[ProfileThumbnail]
                , T.[HispanicLatinoEthnicity]
                , [OldEthnicityType].[ShortDescription] AS OldEthnicityType
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , T.[EconomicDisadvantaged]
                , SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue
                , LimitedEnglishProficiencyDescriptor.[CodeValue] AS LimitedEnglishProficiencyDescriptorCodeValue
                , T.[DisplacementStatus]
                , T.[LoginId]
                , [GenderType].[ShortDescription] AS GenderType
                , T.[TuitionCost]
                , EnglishLanguageExamDescriptor.[CodeValue] AS EnglishLanguageExamDescriptorCodeValue
                , PreviousCareerDescriptor.[CodeValue] AS PreviousCareerDescriptorCodeValue
                , T.[ProgramComplete]
                , [Student].[StudentUniqueId]
                , [Staff].[StaffUniqueId]
                , PreviousCareerDescriptor.[Namespace] AS PreviousCareerDescriptorNamespace
                , EnglishLanguageExamDescriptor.[Namespace] AS EnglishLanguageExamDescriptorNamespace
                , LimitedEnglishProficiencyDescriptor.[Namespace] AS LimitedEnglishProficiencyDescriptorNamespace
                , SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , BirthCountryDescriptor.[Namespace] AS BirthCountryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidate] AS T
                JOIN [edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[StateAbbreviationType] AS BirthStateAbbreviationType
                    ON [BirthStateAbbreviationType].[StateAbbreviationTypeId] = T.[BirthStateAbbreviationTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS BirthCountryDescriptor
                    ON [BirthCountryDescriptor].[DescriptorId] = T.[BirthCountryDescriptorId]
                LEFT JOIN [edfi].[OldEthnicityType] AS OldEthnicityType
                    ON [OldEthnicityType].[OldEthnicityTypeId] = T.[OldEthnicityTypeId]
                LEFT JOIN [edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON [SchoolFoodServicesEligibilityDescriptor].[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS LimitedEnglishProficiencyDescriptor
                    ON [LimitedEnglishProficiencyDescriptor].[DescriptorId] = T.[LimitedEnglishProficiencyDescriptorId]
                LEFT JOIN [edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS EnglishLanguageExamDescriptor
                    ON [EnglishLanguageExamDescriptor].[DescriptorId] = T.[EnglishLanguageExamDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS PreviousCareerDescriptor
                    ON [PreviousCareerDescriptor].[DescriptorId] = T.[PreviousCareerDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [TeacherCandidateIdentifier]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [BirthCity]
                    , [BirthStateAbbreviationType]
                    , [BirthInternationalProvince]
                    , [BirthCountryDescriptorCodeValue]
                    , [DateEnteredUS]
                    , [MultipleBirthStatus]
                    , [ProfileThumbnail]
                    , [HispanicLatinoEthnicity]
                    , [OldEthnicityType]
                    , [CitizenshipStatusType]
                    , [EconomicDisadvantaged]
                    , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , [LimitedEnglishProficiencyDescriptorCodeValue]
                    , [DisplacementStatus]
                    , [LoginId]
                    , [GenderType]
                    , [TuitionCost]
                    , [EnglishLanguageExamDescriptorCodeValue]
                    , [PreviousCareerDescriptorCodeValue]
                    , [ProgramComplete]
                    , [StudentUniqueId]
                    , [StaffUniqueId]
                    , [PreviousCareerDescriptorNamespace]
                    , [EnglishLanguageExamDescriptorNamespace]
                    , [LimitedEnglishProficiencyDescriptorNamespace]
                    , [SchoolFoodServicesEligibilityDescriptorNamespace]
                    , [BirthCountryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[TeacherCandidateIdentifier]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[BirthCity]
                    , S.[BirthStateAbbreviationType]
                    , S.[BirthInternationalProvince]
                    , S.[BirthCountryDescriptorCodeValue]
                    , S.[DateEnteredUS]
                    , S.[MultipleBirthStatus]
                    , S.[ProfileThumbnail]
                    , S.[HispanicLatinoEthnicity]
                    , S.[OldEthnicityType]
                    , S.[CitizenshipStatusType]
                    , S.[EconomicDisadvantaged]
                    , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , S.[LimitedEnglishProficiencyDescriptorCodeValue]
                    , S.[DisplacementStatus]
                    , S.[LoginId]
                    , S.[GenderType]
                    , S.[TuitionCost]
                    , S.[EnglishLanguageExamDescriptorCodeValue]
                    , S.[PreviousCareerDescriptorCodeValue]
                    , S.[ProgramComplete]
                    , S.[StudentUniqueId]
                    , S.[StaffUniqueId]
                    , S.[PreviousCareerDescriptorNamespace]
                    , S.[EnglishLanguageExamDescriptorNamespace]
                    , S.[LimitedEnglishProficiencyDescriptorNamespace]
                    , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                    , S.[BirthCountryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidate]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidate]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidate]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidate] AS T
            JOIN [extension].[TeacherCandidate] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateProgramParticipation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateLearningStyle] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCohortYear] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateIndicator] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAid] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateBackgroundCheck] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateIdentificationCode] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateIdentificationCode];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateIdentificationCode]
            (
                [tid_TeacherCandidate]
                , [AssigningOrganizationIdentificationCode]
                , [StudentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [StudentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StudentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[StudentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssigningOrganizationIdentificationCode], StudentIdentificationSystemDescriptor.[CodeValue] AS StudentIdentificationSystemDescriptorCodeValue, T.[TeacherCandidateIdentifier], T.[IdentificationCode], StudentIdentificationSystemDescriptor.[Namespace] AS StudentIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS StudentIdentificationSystemDescriptor
                    ON StudentIdentificationSystemDescriptor.[DescriptorId] = T.[StudentIdentificationSystemDescriptorId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateOtherName] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateOtherName]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateOtherName];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateOtherName]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateOtherName]
            (
                [tid_TeacherCandidate]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, T.[TeacherCandidateIdentifier], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateOtherName] AS T 
                JOIN [edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAddress]
            (
                [tid_TeacherCandidate]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[TeacherCandidateIdentifier], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateInternationalAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateInternationalAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateInternationalAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateInternationalAddress]
            (
                [tid_TeacherCandidate]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[TeacherCandidateIdentifier], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateInternationalAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateTelephone] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateTelephone];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateTelephone]
            (
                [tid_TeacherCandidate]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateTelephone] AS T 
                JOIN [edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateElectronicMail] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateElectronicMail]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateElectronicMail];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateElectronicMail]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateElectronicMail]
            (
                [tid_TeacherCandidate]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, T.[TeacherCandidateIdentifier], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateElectronicMail] AS T 
                JOIN [edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateRace] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateRace];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateRace]
            (
                [tid_TeacherCandidate]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RaceType.[ShortDescription] AS RaceType, T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateVisa] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateVisa]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateVisa];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateVisa]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateVisa]
            (
                [tid_TeacherCandidate]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateVisa] AS T 
                JOIN [edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCharacteristic] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateCharacteristic];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCharacteristic]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCharacteristic]
            (
                [tid_TeacherCandidate]
                , [StudentCharacteristicDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [StudentCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[StudentCharacteristicDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[StudentCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT StudentCharacteristicDescriptor.[CodeValue] AS StudentCharacteristicDescriptorCodeValue, T.[TeacherCandidateIdentifier], T.[BeginDate], T.[EndDate], T.[DesignatedBy], StudentCharacteristicDescriptor.[Namespace] AS StudentCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateCharacteristic] AS T 
                JOIN [edfi].[Descriptor] AS StudentCharacteristicDescriptor
                    ON StudentCharacteristicDescriptor.[DescriptorId] = T.[StudentCharacteristicDescriptorId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateLanguage] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateLanguage];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateLanguage]
            (
                [tid_TeacherCandidate]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_TeacherCandidateLanguage]
            INTO @Tids
            SELECT T.[tid_TeacherCandidate]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[TeacherCandidateIdentifier], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_TeacherCandidateLanguage]
                , S.[LanguageDescriptorCodeValue]
                , T.[TeacherCandidateIdentifier]
                , S.[LanguageDescriptorNamespace]
            FROM [t_extension].[TeacherCandidateLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_TeacherCandidate] = T.[tid_TeacherCandidate]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_TeacherCandidateLanguage] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateLanguageUse] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateLanguageUse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateLanguageUse];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateLanguageUse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateLanguageUse]
            (
                [tid_TeacherCandidateLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, T.[TeacherCandidateIdentifier], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [extension].[TeacherCandidateLanguageUse] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[TeacherCandidateIdentifier] = S.[TeacherCandidateIdentifier]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateDisability] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateDisability];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateDisability]
            (
                [tid_TeacherCandidate]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[TeacherCandidateIdentifier], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateProgramParticipation] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateProgramParticipation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateProgramParticipation];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateProgramParticipation]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateProgramParticipationKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateProgramParticipation]
            (
                [tid_TeacherCandidate]
                , [ProgramType]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_TeacherCandidateProgramParticipation]
            INTO @Tids
            SELECT T.[tid_TeacherCandidate]
                , S.[ProgramType]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramType.[ShortDescription] AS ProgramType, T.[TeacherCandidateIdentifier], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateProgramParticipation] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_TeacherCandidateProgramParticipation]
                , S.[ProgramType]
                , T.[TeacherCandidateIdentifier]
            FROM [t_extension].[TeacherCandidateProgramParticipation] AS S
            JOIN @pTids AS T
                ON S.[tid_TeacherCandidate] = T.[tid_TeacherCandidate]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_TeacherCandidateProgramParticipation] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateProgramParticipationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateProgramParticipationProgramCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic]
            (
                [tid_TeacherCandidateProgramParticipation]
                , [ProgramCharacteristicDescriptorCodeValue]
                , [ProgramCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateProgramParticipation]
                , S.[ProgramCharacteristicDescriptorCodeValue]
                , S.[ProgramCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramCharacteristicDescriptor.[CodeValue] AS ProgramCharacteristicDescriptorCodeValue, ProgramType.[ShortDescription] AS ProgramType, T.[TeacherCandidateIdentifier], ProgramCharacteristicDescriptor.[Namespace] AS ProgramCharacteristicDescriptorNamespace
                , T.[CreateDate]
                FROM [extension].[TeacherCandidateProgramParticipationProgramCharacteristic] AS T 
                JOIN [edfi].[Descriptor] AS ProgramCharacteristicDescriptor
                    ON ProgramCharacteristicDescriptor.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ProgramType] = S.[ProgramType]
                AND T.[TeacherCandidateIdentifier] = S.[TeacherCandidateIdentifier];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateLearningStyle] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateLearningStyle]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateLearningStyle];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateLearningStyle]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateLearningStyleKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateLearningStyle]
            (
                [tid_TeacherCandidate]
                , [VisualLearning]
                , [AuditoryLearning]
                , [TactileLearning]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[VisualLearning]
                , S.[AuditoryLearning]
                , S.[TactileLearning]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], T.[VisualLearning], T.[AuditoryLearning], T.[TactileLearning]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateLearningStyle] AS T 
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCohortYear] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateCohortYear]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateCohortYear];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCohortYear]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCohortYearKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCohortYear]
            (
                [tid_TeacherCandidate]
                , [CohortYearType]
                , [SchoolYear]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[CohortYearType]
                , S.[SchoolYear]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CohortYearType.[ShortDescription] AS CohortYearType, T.[SchoolYear], T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateCohortYear] AS T 
                JOIN [edfi].[CohortYearType] AS CohortYearType
                    ON CohortYearType.[CohortYearTypeId] = T.[CohortYearTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateIndicator] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateIndicator]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateIndicator];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateIndicator]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateIndicatorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateIndicator]
            (
                [tid_TeacherCandidate]
                , [IndicatorName]
                , [IndicatorGroup]
                , [Indicator]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[IndicatorName]
                , S.[IndicatorGroup]
                , S.[Indicator]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[IndicatorName], T.[TeacherCandidateIdentifier], T.[IndicatorGroup], T.[Indicator], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateIndicator] AS T 
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCredential] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateCredential]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateCredential];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCredential]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCredential]
            (
                [tid_TeacherCandidate]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateCredential] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAid] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateAid]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateAid];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAid]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAidKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAid]
            (
                [tid_TeacherCandidate]
                , [AidTypeDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [AidConditionDescription]
                , [AidAmount]
                , [PellGrantRecipient]
                , [AidTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AidTypeDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[AidConditionDescription]
                , S.[AidAmount]
                , S.[PellGrantRecipient]
                , S.[AidTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AidTypeDescriptor.[CodeValue] AS AidTypeDescriptorCodeValue, T.[BeginDate], T.[TeacherCandidateIdentifier], T.[EndDate], T.[AidConditionDescription], T.[AidAmount], T.[PellGrantRecipient], AidTypeDescriptor.[Namespace] AS AidTypeDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateAid] AS T 
                JOIN [edfi].[Descriptor] AS AidTypeDescriptor
                    ON AidTypeDescriptor.[DescriptorId] = T.[AidTypeDescriptorId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateBackgroundCheck] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateBackgroundCheck]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateBackgroundCheck];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateBackgroundCheck]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateBackgroundCheckKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateBackgroundCheck]
            (
                [tid_TeacherCandidate]
                , [BackgroundCheckTypeDescriptorCodeValue]
                , [BackgroundCheckRequestedDate]
                , [BackgroundCheckStatusDescriptorCodeValue]
                , [BackgroundCheckCompletedDate]
                , [Fingerprint]
                , [BackgroundCheckStatusDescriptorNamespace]
                , [BackgroundCheckTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[BackgroundCheckTypeDescriptorCodeValue]
                , S.[BackgroundCheckRequestedDate]
                , S.[BackgroundCheckStatusDescriptorCodeValue]
                , S.[BackgroundCheckCompletedDate]
                , S.[Fingerprint]
                , S.[BackgroundCheckStatusDescriptorNamespace]
                , S.[BackgroundCheckTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], BackgroundCheckTypeDescriptor.[CodeValue] AS BackgroundCheckTypeDescriptorCodeValue, T.[BackgroundCheckRequestedDate], BackgroundCheckStatusDescriptor.[CodeValue] AS BackgroundCheckStatusDescriptorCodeValue, T.[BackgroundCheckCompletedDate], T.[Fingerprint], BackgroundCheckStatusDescriptor.[Namespace] AS BackgroundCheckStatusDescriptorNamespace, BackgroundCheckTypeDescriptor.[Namespace] AS BackgroundCheckTypeDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateBackgroundCheck] AS T 
                JOIN [edfi].[Descriptor] AS BackgroundCheckTypeDescriptor
                    ON BackgroundCheckTypeDescriptor.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS BackgroundCheckStatusDescriptor
                    ON BackgroundCheckStatusDescriptor.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateIdentificationDocument] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateIdentificationDocument]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateIdentificationDocument];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateIdentificationDocument]
            (
                [tid_TeacherCandidate]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[TeacherCandidateIdentifier], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [extension].[TeacherCandidateIdentificationDocument] AS T 
                JOIN [edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecord] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateAcademicRecord]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecord];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateAcademicRecord] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CumulativeEarnedCredits]
                , [CumulativeEarnedCreditType].[ShortDescription] AS CumulativeEarnedCreditType
                , T.[CumulativeEarnedCreditConversion]
                , T.[CumulativeAttemptedCredits]
                , [CumulativeAttemptedCreditType].[ShortDescription] AS CumulativeAttemptedCreditType
                , T.[CumulativeAttemptedCreditConversion]
                , T.[CumulativeGradePointsEarned]
                , T.[CumulativeGradePointAverage]
                , T.[GradeValueQualifier]
                , T.[ProjectedGraduationDate]
                , T.[SessionEarnedCredits]
                , [SessionEarnedCreditType].[ShortDescription] AS SessionEarnedCreditType
                , T.[SessionEarnedCreditConversion]
                , T.[SessionAttemptedCredits]
                , [SessionAttemptedCreditType].[ShortDescription] AS SessionAttemptedCreditType
                , T.[SessionAttemptedCreditConversion]
                , T.[SessionGradePointsEarned]
                , T.[SessionGradePointAverage]
                , T.[ContentGradePointAverage]
                , T.[ContentGradePointEarned]
                , ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue
                , TPPDegreeTypeDescriptor.[CodeValue] AS TPPDegreeTypeDescriptorCodeValue
                , TPPDegreeTypeDescriptor.[Namespace] AS TPPDegreeTypeDescriptorNamespace
                , ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateAcademicRecord] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[CreditType] AS CumulativeEarnedCreditType
                    ON [CumulativeEarnedCreditType].[CreditTypeId] = T.[CumulativeEarnedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS CumulativeAttemptedCreditType
                    ON [CumulativeAttemptedCreditType].[CreditTypeId] = T.[CumulativeAttemptedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS SessionEarnedCreditType
                    ON [SessionEarnedCreditType].[CreditTypeId] = T.[SessionEarnedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS SessionAttemptedCreditType
                    ON [SessionAttemptedCreditType].[CreditTypeId] = T.[SessionAttemptedCreditTypeId]
                JOIN .[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON [ProgramGatewayDescriptor].[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN .[edfi].[Descriptor] AS TPPDegreeTypeDescriptor
                    ON [TPPDegreeTypeDescriptor].[DescriptorId] = T.[TPPDegreeTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [TermDescriptorCodeValue]
                    , [CumulativeEarnedCredits]
                    , [CumulativeEarnedCreditType]
                    , [CumulativeEarnedCreditConversion]
                    , [CumulativeAttemptedCredits]
                    , [CumulativeAttemptedCreditType]
                    , [CumulativeAttemptedCreditConversion]
                    , [CumulativeGradePointsEarned]
                    , [CumulativeGradePointAverage]
                    , [GradeValueQualifier]
                    , [ProjectedGraduationDate]
                    , [SessionEarnedCredits]
                    , [SessionEarnedCreditType]
                    , [SessionEarnedCreditConversion]
                    , [SessionAttemptedCredits]
                    , [SessionAttemptedCreditType]
                    , [SessionAttemptedCreditConversion]
                    , [SessionGradePointsEarned]
                    , [SessionGradePointAverage]
                    , [ContentGradePointAverage]
                    , [ContentGradePointEarned]
                    , [ProgramGatewayDescriptorCodeValue]
                    , [TPPDegreeTypeDescriptorCodeValue]
                    , [TPPDegreeTypeDescriptorNamespace]
                    , [ProgramGatewayDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[CumulativeEarnedCredits]
                    , S.[CumulativeEarnedCreditType]
                    , S.[CumulativeEarnedCreditConversion]
                    , S.[CumulativeAttemptedCredits]
                    , S.[CumulativeAttemptedCreditType]
                    , S.[CumulativeAttemptedCreditConversion]
                    , S.[CumulativeGradePointsEarned]
                    , S.[CumulativeGradePointAverage]
                    , S.[GradeValueQualifier]
                    , S.[ProjectedGraduationDate]
                    , S.[SessionEarnedCredits]
                    , S.[SessionEarnedCreditType]
                    , S.[SessionEarnedCreditConversion]
                    , S.[SessionAttemptedCredits]
                    , S.[SessionAttemptedCreditType]
                    , S.[SessionAttemptedCreditConversion]
                    , S.[SessionGradePointsEarned]
                    , S.[SessionGradePointAverage]
                    , S.[ContentGradePointAverage]
                    , S.[ContentGradePointEarned]
                    , S.[ProgramGatewayDescriptorCodeValue]
                    , S.[TPPDegreeTypeDescriptorCodeValue]
                    , S.[TPPDegreeTypeDescriptorNamespace]
                    , S.[ProgramGatewayDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateAcademicRecord]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateAcademicRecord] AS T
            JOIN [extension].[TeacherCandidateAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordClassRankingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordClassRanking]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [ClassRank]
                , [TotalNumberInClass]
                , [PercentageRanking]
                , [ClassRankingDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[ClassRank]
                , S.[TotalNumberInClass]
                , S.[PercentageRanking]
                , S.[ClassRankingDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[ClassRank], T.[TotalNumberInClass], T.[PercentageRanking], T.[ClassRankingDate], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [extension].[TeacherCandidateAcademicRecordClassRanking] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordAcademicHonorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordAcademicHonor]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [AcademicHonorCategoryType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [HonorDescription]
                , [HonorAwardDate]
                , [HonorAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[AcademicHonorCategoryType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[HonorDescription]
                , S.[HonorAwardDate]
                , S.[HonorAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicHonorCategoryType.[ShortDescription] AS AcademicHonorCategoryType, T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[HonorDescription], T.[HonorAwardDate], T.[HonorAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [extension].[TeacherCandidateAcademicRecordAcademicHonor] AS T 
                JOIN [edfi].[AcademicHonorCategoryType] AS AcademicHonorCategoryType
                    ON AcademicHonorCategoryType.[AcademicHonorCategoryTypeId] = T.[AcademicHonorCategoryTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordRecognition]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], RecognitionType.[ShortDescription] AS RecognitionType, T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [extension].[TeacherCandidateAcademicRecordRecognition] AS T 
                JOIN [edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordDiplomaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordDiploma]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [DiplomaAwardDate]
                , [DiplomaType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [DiplomaLevelType]
                , [CTECompleter]
                , [DiplomaDescription]
                , [DiplomaAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[DiplomaAwardDate]
                , S.[DiplomaType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[DiplomaLevelType]
                , S.[CTECompleter]
                , S.[DiplomaDescription]
                , S.[DiplomaAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DiplomaAwardDate], DiplomaType.[ShortDescription] AS DiplomaType, T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], DiplomaLevelType.[ShortDescription] AS DiplomaLevelType, T.[CTECompleter], T.[DiplomaDescription], T.[DiplomaAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [extension].[TeacherCandidateAcademicRecordDiploma] AS T 
                JOIN [edfi].[DiplomaType] AS DiplomaType
                    ON DiplomaType.[DiplomaTypeId] = T.[DiplomaTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [edfi].[DiplomaLevelType] AS DiplomaLevelType
                    ON DiplomaLevelType.[DiplomaLevelTypeId] = T.[DiplomaLevelTypeId]
                JOIN [extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TeacherCandidateCharacteristicType].[ShortDescription] AS TeacherCandidateCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[TeacherCandidateCharacteristicDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TeacherCandidateCharacteristicDescriptorId]
                JOIN [edfi].[TeacherCandidateCharacteristicType] AS TeacherCandidateCharacteristicType
                    ON [TeacherCandidateCharacteristicType].[TeacherCandidateCharacteristicTypeId] = T.[TeacherCandidateCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TeacherCandidateCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TeacherCandidateCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateCharacteristicDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[TeacherCandidateCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[TeacherCandidateCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCourseTranscript] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateCourseTranscript]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateCourseTranscript];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateCourseTranscript] AS T
            USING
            (
                SELECT [CourseAttemptResultType].[ShortDescription] AS CourseAttemptResultType
                , T.[CourseCode]
                , T.[CourseEducationOrganizationId]
                , T.[EducationOrganizationId]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AttemptedCredits]
                , [AttemptedCreditType].[ShortDescription] AS AttemptedCreditType
                , T.[AttemptedCreditConversion]
                , T.[EarnedCredits]
                , [EarnedCreditType].[ShortDescription] AS EarnedCreditType
                , T.[EarnedCreditConversion]
                , WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue
                , [MethodCreditEarnedType].[ShortDescription] AS MethodCreditEarnedType
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[SchoolId]
                , T.[CourseTitle]
                , T.[AlternativeCourseTitle]
                , T.[AlternativeCourseCode]
                , WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateCourseTranscript] AS T
                JOIN [edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON [CourseAttemptResultType].[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[CreditType] AS AttemptedCreditType
                    ON [AttemptedCreditType].[CreditTypeId] = T.[AttemptedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS EarnedCreditType
                    ON [EarnedCreditType].[CreditTypeId] = T.[EarnedCreditTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON [WhenTakenGradeLevelDescriptor].[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                LEFT JOIN [edfi].[MethodCreditEarnedType] AS MethodCreditEarnedType
                    ON [MethodCreditEarnedType].[MethodCreditEarnedTypeId] = T.[MethodCreditEarnedTypeId]
                LEFT JOIN [edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseAttemptResultType]
                    , [CourseCode]
                    , [CourseEducationOrganizationId]
                    , [EducationOrganizationId]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [TermDescriptorCodeValue]
                    , [AttemptedCredits]
                    , [AttemptedCreditType]
                    , [AttemptedCreditConversion]
                    , [EarnedCredits]
                    , [EarnedCreditType]
                    , [EarnedCreditConversion]
                    , [WhenTakenGradeLevelDescriptorCodeValue]
                    , [MethodCreditEarnedType]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [SchoolId]
                    , [CourseTitle]
                    , [AlternativeCourseTitle]
                    , [AlternativeCourseCode]
                    , [WhenTakenGradeLevelDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseAttemptResultType]
                    , S.[CourseCode]
                    , S.[CourseEducationOrganizationId]
                    , S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[AttemptedCredits]
                    , S.[AttemptedCreditType]
                    , S.[AttemptedCreditConversion]
                    , S.[EarnedCredits]
                    , S.[EarnedCreditType]
                    , S.[EarnedCreditConversion]
                    , S.[WhenTakenGradeLevelDescriptorCodeValue]
                    , S.[MethodCreditEarnedType]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[SchoolId]
                    , S.[CourseTitle]
                    , S.[AlternativeCourseTitle]
                    , S.[AlternativeCourseCode]
                    , S.[WhenTakenGradeLevelDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateCourseTranscript]
                , INSERTED.[CourseAttemptResultType]
                , INSERTED.[CourseCode]
                , INSERTED.[CourseEducationOrganizationId]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateCourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateCourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateCourseTranscript] AS T
            JOIN [extension].[TeacherCandidateCourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCourseTranscriptEarnedAdditionalCreditsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits]
            (
                [tid_TeacherCandidateCourseTranscript]
                , [AdditionalCreditType]
                , [Credits]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateCourseTranscript]
                , S.[AdditionalCreditType]
                , S.[Credits]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AdditionalCreditType.[ShortDescription] AS AdditionalCreditType, CourseAttemptResultType.[ShortDescription] AS CourseAttemptResultType, T.[CourseCode], T.[CourseEducationOrganizationId], T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[Credits], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateCourseTranscript.[Id] AS ParentId
                FROM [extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits] AS T 
                JOIN [edfi].[AdditionalCreditType] AS AdditionalCreditType
                    ON AdditionalCreditType.[AdditionalCreditTypeId] = T.[AdditionalCreditTypeId]
                JOIN [edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON CourseAttemptResultType.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [extension].[TeacherCandidateCourseTranscript] AS TeacherCandidateCourseTranscript
                    ON TeacherCandidateCourseTranscript.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                    AND TeacherCandidateCourseTranscript.[CourseCode] = T.[CourseCode]
                    AND TeacherCandidateCourseTranscript.[CourseEducationOrganizationId] = T.[CourseEducationOrganizationId]
                    AND TeacherCandidateCourseTranscript.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateCourseTranscript.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateCourseTranscript.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateFieldworkAbsenceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateFieldworkAbsenceEvent] AS T
            USING
            (
                SELECT AbsenceEventCategoryDescriptor.[CodeValue] AS AbsenceEventCategoryDescriptorCodeValue
                , T.[TeacherCandidateIdentifier]
                , T.[EventDate]
                , T.[AbsenceEventReason]
                , T.[HoursAbsent]
                , AbsenceEventCategoryDescriptor.[Namespace] AS AbsenceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateFieldworkAbsenceEvent] AS T
                JOIN .[edfi].[Descriptor] AS AbsenceEventCategoryDescriptor
                    ON [AbsenceEventCategoryDescriptor].[DescriptorId] = T.[AbsenceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AbsenceEventCategoryDescriptorCodeValue]
                    , [TeacherCandidateIdentifier]
                    , [EventDate]
                    , [AbsenceEventReason]
                    , [HoursAbsent]
                    , [AbsenceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AbsenceEventCategoryDescriptorCodeValue]
                    , S.[TeacherCandidateIdentifier]
                    , S.[EventDate]
                    , S.[AbsenceEventReason]
                    , S.[HoursAbsent]
                    , S.[AbsenceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateFieldworkAbsenceEvent]
                , INSERTED.[AbsenceEventCategoryDescriptorCodeValue]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[AbsenceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateFieldworkAbsenceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateFieldworkAbsenceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateFieldworkAbsenceEvent] AS T
            JOIN [extension].[TeacherCandidateFieldworkAbsenceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateFieldworkExperience] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateFieldworkExperience]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkExperience];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkExperience]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateFieldworkExperienceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateFieldworkExperience] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[FieldworkExperienceSchoolId]
                , T.[FieldworkIdentifier]
                , T.[TeacherCandidateIdentifier]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , FieldworkTypeDescriptor.[CodeValue] AS FieldworkTypeDescriptorCodeValue
                , T.[HoursPerWeek]
                , T.[EndDate]
                , ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue
                , ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , FieldworkTypeDescriptor.[Namespace] AS FieldworkTypeDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateFieldworkExperience] AS T
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                JOIN .[edfi].[Descriptor] AS FieldworkTypeDescriptor
                    ON [FieldworkTypeDescriptor].[DescriptorId] = T.[FieldworkTypeDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON [ProgramGatewayDescriptor].[DescriptorId] = T.[ProgramGatewayDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [FieldworkExperienceSchoolId]
                    , [FieldworkIdentifier]
                    , [TeacherCandidateIdentifier]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [FieldworkTypeDescriptorCodeValue]
                    , [HoursPerWeek]
                    , [EndDate]
                    , [ProgramGatewayDescriptorCodeValue]
                    , [ProgramGatewayDescriptorNamespace]
                    , [FieldworkTypeDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[FieldworkExperienceSchoolId]
                    , S.[FieldworkIdentifier]
                    , S.[TeacherCandidateIdentifier]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[FieldworkTypeDescriptorCodeValue]
                    , S.[HoursPerWeek]
                    , S.[EndDate]
                    , S.[ProgramGatewayDescriptorCodeValue]
                    , S.[ProgramGatewayDescriptorNamespace]
                    , S.[FieldworkTypeDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateFieldworkExperience]
                , INSERTED.[BeginDate]
                , INSERTED.[FieldworkExperienceSchoolId]
                , INSERTED.[FieldworkIdentifier]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateFieldworkExperience]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateFieldworkExperience]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateFieldworkExperience] AS T
            JOIN [extension].[TeacherCandidateFieldworkExperience] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateFieldworkExperienceKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateFieldworkExperienceCoteachingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateFieldworkExperienceCoteaching]
            (
                [tid_TeacherCandidateFieldworkExperience]
                , [CoteachingBeginDate]
                , [CoteachingEndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateFieldworkExperience]
                , S.[CoteachingBeginDate]
                , S.[CoteachingEndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[FieldworkExperienceSchoolId], T.[FieldworkIdentifier], T.[TeacherCandidateIdentifier], T.[CoteachingBeginDate], T.[CoteachingEndDate]
                , T.[CreateDate]
                , TeacherCandidateFieldworkExperience.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateFieldworkExperience.[Id] AS ParentId
                FROM [extension].[TeacherCandidateFieldworkExperienceCoteaching] AS T 
                JOIN [extension].[TeacherCandidateFieldworkExperience] AS TeacherCandidateFieldworkExperience
                    ON TeacherCandidateFieldworkExperience.[BeginDate] = T.[BeginDate]
                    AND TeacherCandidateFieldworkExperience.[FieldworkExperienceSchoolId] = T.[FieldworkExperienceSchoolId]
                    AND TeacherCandidateFieldworkExperience.[FieldworkIdentifier] = T.[FieldworkIdentifier]
                    AND TeacherCandidateFieldworkExperience.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateProfessionalDevelopmentEventAttendanceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS T
            USING
            (
                SELECT T.[AttendanceDate]
                , T.[ProfessionalDevelopmentTitle]
                , T.[TeacherCandidateIdentifier]
                , AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[AttendanceEventReason]
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS T
                JOIN .[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceDate]
                    , [ProfessionalDevelopmentTitle]
                    , [TeacherCandidateIdentifier]
                    , [AttendanceEventCategoryDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceDate]
                    , S.[ProfessionalDevelopmentTitle]
                    , S.[TeacherCandidateIdentifier]
                    , S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
                , INSERTED.[AttendanceDate]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS T
            JOIN [extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStaffAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateStaffAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateStaffAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStaffAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStaffAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStaffAssociation] AS T
            USING
            (
                SELECT [Staff].[StaffUniqueId]
                , T.[TeacherCandidateIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateStaffAssociation] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StaffUniqueId]
                    , [TeacherCandidateIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StaffUniqueId]
                    , S.[TeacherCandidateIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStaffAssociation]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStaffAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStaffAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStaffAssociation] AS T
            JOIN [extension].[TeacherCandidateStaffAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasure] AS T
            USING
            (
                SELECT T.[FactAsOfDate]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , T.[StudentGrowthMeasureDate]
                , [ResultDatatypeType].[ShortDescription] AS ResultDatatypeType
                , StudentGrowthTypeDescriptor.[CodeValue] AS StudentGrowthTypeDescriptorCodeValue
                , T.[StudentGrowthTargetScore]
                , T.[StudentGrowthActualScore]
                , T.[StudentGrowthMet]
                , T.[StudentGrowthNCount]
                , StudentGrowthTypeDescriptor.[Namespace] AS StudentGrowthTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateStudentGrowthMeasure] AS T
                LEFT JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON [ResultDatatypeType].[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS StudentGrowthTypeDescriptor
                    ON [StudentGrowthTypeDescriptor].[DescriptorId] = T.[StudentGrowthTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactAsOfDate]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [StudentGrowthMeasureDate]
                    , [ResultDatatypeType]
                    , [StudentGrowthTypeDescriptorCodeValue]
                    , [StudentGrowthTargetScore]
                    , [StudentGrowthActualScore]
                    , [StudentGrowthMet]
                    , [StudentGrowthNCount]
                    , [StudentGrowthTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[StudentGrowthMeasureDate]
                    , S.[ResultDatatypeType]
                    , S.[StudentGrowthTypeDescriptorCodeValue]
                    , S.[StudentGrowthTargetScore]
                    , S.[StudentGrowthActualScore]
                    , S.[StudentGrowthMet]
                    , S.[StudentGrowthNCount]
                    , S.[StudentGrowthTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasure]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasure] AS T
            JOIN [extension].[TeacherCandidateStudentGrowthMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureCourseAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS T
            JOIN [extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS T
            JOIN [extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[TeacherCandidateIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[BeginDate]
                , T.[EndDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TeacherCandidateIdentifier]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [BeginDate]
                    , [EndDate]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS T
            JOIN [extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateTeacherPreparationProviderAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS T
            USING
            (
                SELECT T.[EntryDate]
                , T.[TeacherCandidateIdentifier]
                , T.[TeacherPreparationProviderId]
                , T.[SchoolYear]
                , EntryTypeDescriptor.[CodeValue] AS EntryTypeDescriptorCodeValue
                , T.[ExitWithdrawDate]
                , ExitWithdrawTypeDescriptor.[CodeValue] AS ExitWithdrawTypeDescriptorCodeValue
                , T.[ClassOfSchoolYear]
                , ExitWithdrawTypeDescriptor.[Namespace] AS ExitWithdrawTypeDescriptorNamespace
                , EntryTypeDescriptor.[Namespace] AS EntryTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS T
                LEFT JOIN .[edfi].[Descriptor] AS EntryTypeDescriptor
                    ON [EntryTypeDescriptor].[DescriptorId] = T.[EntryTypeDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ExitWithdrawTypeDescriptor
                    ON [ExitWithdrawTypeDescriptor].[DescriptorId] = T.[ExitWithdrawTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EntryDate]
                    , [TeacherCandidateIdentifier]
                    , [TeacherPreparationProviderId]
                    , [SchoolYear]
                    , [EntryTypeDescriptorCodeValue]
                    , [ExitWithdrawDate]
                    , [ExitWithdrawTypeDescriptorCodeValue]
                    , [ClassOfSchoolYear]
                    , [ExitWithdrawTypeDescriptorNamespace]
                    , [EntryTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EntryDate]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TeacherPreparationProviderId]
                    , S.[SchoolYear]
                    , S.[EntryTypeDescriptorCodeValue]
                    , S.[ExitWithdrawDate]
                    , S.[ExitWithdrawTypeDescriptorCodeValue]
                    , S.[ClassOfSchoolYear]
                    , S.[ExitWithdrawTypeDescriptorNamespace]
                    , S.[EntryTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateTeacherPreparationProviderAssociation]
                , INSERTED.[EntryDate]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TeacherPreparationProviderId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateTeacherPreparationProviderAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateTeacherPreparationProviderAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS T
            JOIN [extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateTeacherPreparationProviderProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[TeacherCandidateIdentifier]
                , T.[EndDate]
                , ReasonExitedDescriptor.[CodeValue] AS ReasonExitedDescriptorCodeValue
                , ReasonExitedDescriptor.[Namespace] AS ReasonExitedDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS T
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS ReasonExitedDescriptor
                    ON [ReasonExitedDescriptor].[DescriptorId] = T.[ReasonExitedDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [TeacherCandidateIdentifier]
                    , [EndDate]
                    , [ReasonExitedDescriptorCodeValue]
                    , [ReasonExitedDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[TeacherCandidateIdentifier]
                    , S.[EndDate]
                    , S.[ReasonExitedDescriptorCodeValue]
                    , S.[ReasonExitedDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS T
            JOIN [extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProgramTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherPreparationProgramTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TeacherPreparationProgramType].[ShortDescription] AS TeacherPreparationProgramType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[TeacherPreparationProgramTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                LEFT JOIN [edfi].[TeacherPreparationProgramType] AS TeacherPreparationProgramType
                    ON [TeacherPreparationProgramType].[TeacherPreparationProgramTypeId] = T.[TeacherPreparationProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TeacherPreparationProgramType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TeacherPreparationProgramType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherPreparationProgramTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherPreparationProgramTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherPreparationProgramTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherPreparationProgramTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[TeacherPreparationProgramTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[TeacherPreparationProgramTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProvider] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherPreparationProvider]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherPreparationProvider];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProvider]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherPreparationProvider] AS T
            USING
            (
                SELECT T.[TeacherPreparationProviderId]
                , T.[UniversityId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[TeacherPreparationProvider] AS T
                JOIN [edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[TeacherPreparationProviderId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [TeacherPreparationProviderId]
                    , [UniversityId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[TeacherPreparationProviderId]
                    , S.[UniversityId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherPreparationProvider]
                , INSERTED.[TeacherPreparationProviderId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherPreparationProviderSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherPreparationProvider]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherPreparationProvider]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherPreparationProvider] AS T
            JOIN [edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[TeacherPreparationProvider] AS S
                ON P.[EducationOrganizationId] = S.[TeacherPreparationProviderId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProviderProgram] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherPreparationProviderProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgram];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgram]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherPreparationProviderProgram] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[ProgramId]
                , T.[MajorSpecialization]
                , T.[MinorSpecialization]
                , TeacherPreparationProgramTypeDescriptor.[CodeValue] AS TeacherPreparationProgramTypeDescriptorCodeValue
                , TPPProgramPathwayDescriptor.[CodeValue] AS TPPProgramPathwayDescriptorCodeValue
                , TPPProgramPathwayDescriptor.[Namespace] AS TPPProgramPathwayDescriptorNamespace
                , TeacherPreparationProgramTypeDescriptor.[Namespace] AS TeacherPreparationProgramTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [extension].[TeacherPreparationProviderProgram] AS T
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS TeacherPreparationProgramTypeDescriptor
                    ON [TeacherPreparationProgramTypeDescriptor].[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS TPPProgramPathwayDescriptor
                    ON [TPPProgramPathwayDescriptor].[DescriptorId] = T.[TPPProgramPathwayDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [ProgramId]
                    , [MajorSpecialization]
                    , [MinorSpecialization]
                    , [TeacherPreparationProgramTypeDescriptorCodeValue]
                    , [TPPProgramPathwayDescriptorCodeValue]
                    , [TPPProgramPathwayDescriptorNamespace]
                    , [TeacherPreparationProgramTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[ProgramId]
                    , S.[MajorSpecialization]
                    , S.[MinorSpecialization]
                    , S.[TeacherPreparationProgramTypeDescriptorCodeValue]
                    , S.[TPPProgramPathwayDescriptorCodeValue]
                    , S.[TPPProgramPathwayDescriptorNamespace]
                    , S.[TeacherPreparationProgramTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherPreparationProviderProgram]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherPreparationProviderProgram]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherPreparationProviderProgram]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherPreparationProviderProgram] AS T
            JOIN [extension].[TeacherPreparationProviderProgram] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherPreparationProviderProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderProgramGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherPreparationProviderProgramGradeLevel]
            (
                [tid_TeacherPreparationProviderProgram]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherPreparationProviderProgram]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , TeacherPreparationProviderProgram.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherPreparationProviderProgram.[Id] AS ParentId
                FROM [extension].[TeacherPreparationProviderProgramGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [extension].[TeacherPreparationProviderProgram] AS TeacherPreparationProviderProgram
                    ON TeacherPreparationProviderProgram.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherPreparationProviderProgram.[ProgramName] = T.[ProgramName]
                    AND TeacherPreparationProviderProgram.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree] ******/

IF OBJECT_ID('[t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree];
GO

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherPreparationProviderProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderProgramTPPProgramDegreeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree]
            (
                [tid_TeacherPreparationProviderProgram]
                , [AcademicSubjectDescriptorCodeValue]
                , [TPPDegreeTypeDescriptorCodeValue]
                , [TPPDegreeTypeDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherPreparationProviderProgram]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[TPPDegreeTypeDescriptorCodeValue]
                , S.[TPPDegreeTypeDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, TPPDegreeTypeDescriptor.[CodeValue] AS TPPDegreeTypeDescriptorCodeValue, TPPDegreeTypeDescriptor.[Namespace] AS TPPDegreeTypeDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , TeacherPreparationProviderProgram.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherPreparationProviderProgram.[Id] AS ParentId
                FROM [extension].[TeacherPreparationProviderProgramTPPProgramDegree] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS TPPDegreeTypeDescriptor
                    ON TPPDegreeTypeDescriptor.[DescriptorId] = T.[TPPDegreeTypeDescriptorId]
                JOIN [extension].[TeacherPreparationProviderProgram] AS TeacherPreparationProviderProgram
                    ON TeacherPreparationProviderProgram.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherPreparationProviderProgram.[ProgramName] = T.[ProgramName]
                    AND TeacherPreparationProviderProgram.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbThemeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbThemeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbThemeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbThemeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ThemeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ThemeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ThemeType].[ShortDescription] AS ThemeType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[ThemeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ThemeDescriptorId]
                LEFT JOIN [edfi].[ThemeType] AS ThemeType
                    ON [ThemeType].[ThemeTypeId] = T.[ThemeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ThemeType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ThemeType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ThemeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ThemeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ThemeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ThemeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ThemeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[ThemeDescriptor] AS S
                ON P.[DescriptorId] = S.[ThemeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTPPDegreeTypeDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbTPPDegreeTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTPPDegreeTypeDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbTPPDegreeTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TPPDegreeTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TPPDegreeTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TPPDegreeType].[ShortDescription] AS TPPDegreeType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[TPPDegreeTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TPPDegreeTypeDescriptorId]
                LEFT JOIN [edfi].[TPPDegreeType] AS TPPDegreeType
                    ON [TPPDegreeType].[TPPDegreeTypeId] = T.[TPPDegreeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TPPDegreeType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TPPDegreeType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TPPDegreeTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TPPDegreeTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TPPDegreeTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TPPDegreeTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[TPPDegreeTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[TPPDegreeTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbTPPProgramPathwayDescriptor] ******/

IF OBJECT_ID('[t_extension].[usp_dbTPPProgramPathwayDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbTPPProgramPathwayDescriptor];
GO

CREATE PROCEDURE [t_extension].[usp_dbTPPProgramPathwayDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TPPProgramPathwayDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TPPProgramPathwayDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TPPProgramPathwayType].[ShortDescription] AS TPPProgramPathwayType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[TPPProgramPathwayDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TPPProgramPathwayDescriptorId]
                LEFT JOIN [edfi].[TPPProgramPathwayType] AS TPPProgramPathwayType
                    ON [TPPProgramPathwayType].[TPPProgramPathwayTypeId] = T.[TPPProgramPathwayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TPPProgramPathwayType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TPPProgramPathwayType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TPPProgramPathwayDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TPPProgramPathwayDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TPPProgramPathwayDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TPPProgramPathwayDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[TPPProgramPathwayDescriptor] AS S
                ON P.[DescriptorId] = S.[TPPProgramPathwayDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbUniversity] ******/

IF OBJECT_ID('[t_extension].[usp_dbUniversity]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbUniversity];
GO

CREATE PROCEDURE [t_extension].[usp_dbUniversity]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_UniversityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[University] AS T
            USING
            (
                SELECT T.[UniversityId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [extension].[University] AS T
                JOIN [edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[UniversityId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [UniversityId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[UniversityId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_University]
                , INSERTED.[UniversityId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[UniversitySnapshotRecord]
            (
                [SnapshotId]
                , [tid_University]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_University]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[University] AS T
            JOIN [edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [extension].[University] AS S
                ON P.[EducationOrganizationId] = S.[UniversityId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_LoadSnapshotData] ******/

IF OBJECT_ID('[tods].[usp_LoadSnapshotData]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_LoadSnapshotData];
GO

CREATE PROCEDURE [tods].[usp_LoadSnapshotData]
    @pId UNIQUEIDENTIFIER
    , @pDatabase NVARCHAR(128) = NULL
    , @pBypassSqlServerSnapshot BIT = 0
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @SnapshotDate DATE;
    DECLARE @BeginDate DATE;
    DECLARE @EndDate DATE;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @NeedToResetOnError BIT = 0;      -- to indicate if need to reset IsLockedForProcessing on Error
    DECLARE @Message NVARCHAR(2048);

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

            -- target snapshot metadata record does not exist
            IF @SnapshotId IS NULL
            BEGIN
                SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                THROW 50015, @Message, 1;
            END;

            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50016, CAST(@pId AS NVARCHAR(36)));
                THROW 50016, @Message, 1;
            END;

            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50017, CAST(@pId AS NVARCHAR(36)));
                THROW 50017, @Message, 1;
            END;

            -- check if Status is NULL
            IF '' <>
            (
                SELECT ISNULL([Status], '')
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50018, CAST(@pId AS NVARCHAR(36)));
                THROW 50018, @Message, 1;
            END;

            SET @NeedToResetOnError = 1;

            UPDATE [tods].[Snapshot]
                SET [LoadStartTime] = CURRENT_TIMESTAMP,
                    [IsLockedForProcessing] = 1
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION

        BEGIN TRANSACTION
            SELECT @BeginDate = 
            ( 
                SELECT [EffectiveBeginDate] 
                FROM [tods].[Snapshot] 
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @EndDate = 
            (   
                SELECT [EffectiveEndDate] 
                FROM [tods].[Snapshot] 
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @SnapshotDate =
            (   
                SELECT [SnapshotDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );

            EXEC [tods].[usp_DerivePartitionYearId] @SnapshotId, @SnapshotDate, @pPartitionYearId = @PartitionYearId OUTPUT;

            --for each top level entity

            EXEC [t_extension].[usp_dbAbsenceEventCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAidTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentCourseAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbApplicant] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbBackgroundCheckStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbBackgroundCheckTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbBoardCertificationTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCertificationExamTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveyQuestionResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveyResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveySectionResponseRatingFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEnglishLanguageExamDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbExternalCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganization] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbFieldworkTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbLevelOfDegreeAwardedDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbLevelTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPopulationCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPopulationSubCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPreviousCareerDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProfessionalDevelopmentEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProgramGatewayDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProspect] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRecruitmentEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubric] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevel] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevelResponse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevelResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSalaryTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSchoolStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSchoolStudentGrowthMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveyQuestionResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveyResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveySectionResponseRatingFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffFieldworkAbsenceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffFieldworkExperience] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStudentGrowthTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurvey] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestion] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestionResponse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyResponse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveySection] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveySectionResponseRating] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidate] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateFieldworkExperience] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStaffAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProvider] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProviderProgram] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbThemeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTPPDegreeTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTPPProgramPathwayDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbUniversity] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [Status] = 'ACTIVE',
                    [LoadEndTime] = CURRENT_TIMESTAMP,
                    [LastModifiedDate] = CURRENT_TIMESTAMP,
                    [t_PartitionYearId] = @PartitionYearId
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @SnapshotId, @SprocName;

        IF (@NeedToResetOnError = 1)
        BEGIN
            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [LastModifiedDate] = CURRENT_TIMESTAMP
                WHERE [SnapshotId] = @SnapshotId;
        END;
        THROW;
    END CATCH;
END;
GO