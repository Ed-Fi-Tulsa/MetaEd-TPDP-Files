/****** PROCEDURE: [t_edfi].[usp_dbAcademicSubjectDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAcademicSubjectDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAcademicSubjectDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAcademicSubjectDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AcademicSubjectDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AcademicSubjectDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AcademicSubjectType].[ShortDescription] AS AcademicSubjectType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AcademicSubjectDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[AcademicSubjectType] AS AcademicSubjectType
                    ON [AcademicSubjectType].[AcademicSubjectTypeId] = T.[AcademicSubjectTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AcademicSubjectType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AcademicSubjectType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AcademicSubjectDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AcademicSubjectDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AcademicSubjectDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AcademicSubjectDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AcademicSubjectDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AcademicSubjectDescriptor] AS S
                ON P.[DescriptorId] = S.[AcademicSubjectDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAcademicWeek] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAcademicWeek]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAcademicWeek];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAcademicWeek]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AcademicWeekKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AcademicWeek] AS T
            USING
            (
                SELECT T.[SchoolId]
                , T.[WeekIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[TotalInstructionalDays]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[AcademicWeek] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolId]
                    , [WeekIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [TotalInstructionalDays]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolId]
                    , S.[WeekIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TotalInstructionalDays]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AcademicWeek]
                , INSERTED.[SchoolId]
                , INSERTED.[WeekIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AcademicWeekSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AcademicWeek]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AcademicWeek]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AcademicWeek] AS T
            JOIN [edfi].[AcademicWeek] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccommodationDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAccommodationDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAccommodationDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAccommodationDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccommodationDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AccommodationDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AccommodationType].[ShortDescription] AS AccommodationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AccommodationDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AccommodationDescriptorId]
                LEFT JOIN [edfi].[AccommodationType] AS AccommodationType
                    ON [AccommodationType].[AccommodationTypeId] = T.[AccommodationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AccommodationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AccommodationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AccommodationDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccommodationDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AccommodationDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AccommodationDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AccommodationDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AccommodationDescriptor] AS S
                ON P.[DescriptorId] = S.[AccommodationDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccount] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAccount]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAccount];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAccount]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Account] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Account] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Account]
                , INSERTED.[AccountNumber]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccountSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Account]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Account]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Account] AS T
            JOIN [edfi].[Account] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAccountCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAccountExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccountCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAccountCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAccountCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAccountCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AccountKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AccountCode]
            (
                [tid_Account]
                , [AccountCodeDescriptorCodeValue]
                , [AccountCodeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Account]
                , S.[AccountCodeDescriptorCodeValue]
                , S.[AccountCodeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AccountCodeDescriptor.[CodeValue] AS AccountCodeDescriptorCodeValue, T.[AccountNumber], T.[EducationOrganizationId], T.[FiscalYear], AccountCodeDescriptor.[Namespace] AS AccountCodeDescriptorNamespace
                , T.[CreateDate]
                , Account.[LastModifiedDate] AS ParentLastModifiedDate
                , Account.[Id] AS ParentId
                FROM [edfi].[AccountCode] AS T 
                JOIN [edfi].[Descriptor] AS AccountCodeDescriptor
                    ON AccountCodeDescriptor.[DescriptorId] = T.[AccountCodeDescriptorId]
                JOIN [edfi].[Account] AS Account
                    ON Account.[AccountNumber] = T.[AccountNumber]
                    AND Account.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Account.[FiscalYear] = T.[FiscalYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAccountExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbAccountExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAccountExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbAccountExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AccountKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AccountExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AccountExtension]
            (
                [tid_Account]
                , [ActualPurchaseOrderCarryForwardCurrentYear]
                , [ActualCurrentYear]
                , [CarryForwardCurrentYear]
                , [CarryForwardTransferCurrentYear]
                , [EncumbPurchaseOrderCarryForwardCurrentYear]
                , [EncumbranceCurrentYear]
                , [LongDescription]
                , [RequisitionCurrentYear]
                , [RevisedCurrentYear]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Account]
                , S.[ActualPurchaseOrderCarryForwardCurrentYear]
                , S.[ActualCurrentYear]
                , S.[CarryForwardCurrentYear]
                , S.[CarryForwardTransferCurrentYear]
                , S.[EncumbPurchaseOrderCarryForwardCurrentYear]
                , S.[EncumbranceCurrentYear]
                , S.[LongDescription]
                , S.[RequisitionCurrentYear]
                , S.[RevisedCurrentYear]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AccountNumber], T.[EducationOrganizationId], T.[FiscalYear], T.[ActualPurchaseOrderCarryForwardCurrentYear], T.[ActualCurrentYear], T.[CarryForwardCurrentYear], T.[CarryForwardTransferCurrentYear], T.[EncumbPurchaseOrderCarryForwardCurrentYear], T.[EncumbranceCurrentYear], T.[LongDescription], T.[RequisitionCurrentYear], T.[RevisedCurrentYear]
                , Account.[LastModifiedDate] AS ParentLastModifiedDate
                , Account.[Id] AS ParentId
                FROM [extension].[AccountExtension] AS T 
                JOIN [edfi].[Account] AS Account
                    ON Account.[AccountNumber] = T.[AccountNumber]
                    AND Account.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Account.[FiscalYear] = T.[FiscalYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccountabilityRating] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAccountabilityRating]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAccountabilityRating];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAccountabilityRating]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountabilityRatingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AccountabilityRating] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[RatingTitle]
                , T.[SchoolYear]
                , T.[Rating]
                , T.[RatingDate]
                , T.[RatingOrganization]
                , T.[RatingProgram]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[AccountabilityRating] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [RatingTitle]
                    , [SchoolYear]
                    , [Rating]
                    , [RatingDate]
                    , [RatingOrganization]
                    , [RatingProgram]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[RatingTitle]
                    , S.[SchoolYear]
                    , S.[Rating]
                    , S.[RatingDate]
                    , S.[RatingOrganization]
                    , S.[RatingProgram]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AccountabilityRating]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[RatingTitle]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccountabilityRatingSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AccountabilityRating]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AccountabilityRating]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AccountabilityRating] AS T
            JOIN [edfi].[AccountabilityRating] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAccountCodeDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAccountCodeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAccountCodeDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAccountCodeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AccountCodeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AccountCodeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , T.[AccountCodeCategory]
                , T.[BeginDate]
                , T.[EndDate]
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AccountCodeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AccountCodeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AccountCodeCategory]
                    , [BeginDate]
                    , [EndDate]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AccountCodeCategory]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AccountCodeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AccountCodeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AccountCodeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AccountCodeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AccountCodeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AccountCodeDescriptor] AS S
                ON P.[DescriptorId] = S.[AccountCodeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAchievementCategoryDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAchievementCategoryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAchievementCategoryDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAchievementCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AchievementCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AchievementCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AchievementCategoryType].[ShortDescription] AS AchievementCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AchievementCategoryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [edfi].[AchievementCategoryType] AS AchievementCategoryType
                    ON [AchievementCategoryType].[AchievementCategoryTypeId] = T.[AchievementCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AchievementCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AchievementCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AchievementCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AchievementCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AchievementCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AchievementCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AchievementCategoryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AchievementCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AchievementCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbActual] ******/

IF OBJECT_ID('[t_edfi].[usp_dbActual]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbActual];
GO

CREATE PROCEDURE [t_edfi].[usp_dbActual]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ActualKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Actual] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , T.[AmountToDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Actual] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [AmountToDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[AmountToDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Actual]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ActualSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Actual]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Actual]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Actual] AS T
            JOIN [edfi].[Actual] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAdministrativeFundingControlDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAdministrativeFundingControlDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAdministrativeFundingControlDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAdministrativeFundingControlDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AdministrativeFundingControlDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AdministrativeFundingControlDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AdministrativeFundingControlType].[ShortDescription] AS AdministrativeFundingControlType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AdministrativeFundingControlDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AdministrativeFundingControlDescriptorId]
                LEFT JOIN [edfi].[AdministrativeFundingControlType] AS AdministrativeFundingControlType
                    ON [AdministrativeFundingControlType].[AdministrativeFundingControlTypeId] = T.[AdministrativeFundingControlTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AdministrativeFundingControlType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AdministrativeFundingControlType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AdministrativeFundingControlDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AdministrativeFundingControlDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AdministrativeFundingControlDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AdministrativeFundingControlDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AdministrativeFundingControlDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AdministrativeFundingControlDescriptor] AS S
                ON P.[DescriptorId] = S.[AdministrativeFundingControlDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessment] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessment];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Assessment] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , T.[Version]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , LowestAssessedGradeLevelDescriptor.[CodeValue] AS LowestAssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentForm]
                , T.[RevisionDate]
                , T.[MaxRawScore]
                , T.[Nomenclature]
                , AssessmentPeriodDescriptor.[CodeValue] AS AssessmentPeriodDescriptorCodeValue
                , T.[AssessmentFamilyTitle]
                , T.[Namespace]
                , AssessmentPeriodDescriptor.[Namespace] AS AssessmentPeriodDescriptorNamespace
                , LowestAssessedGradeLevelDescriptor.[Namespace] AS LowestAssessedGradeLevelDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Assessment] AS T
                JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN .[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS LowestAssessedGradeLevelDescriptor
                    ON [LowestAssessedGradeLevelDescriptor].[DescriptorId] = T.[LowestAssessedGradeLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AssessmentPeriodDescriptor
                    ON [AssessmentPeriodDescriptor].[DescriptorId] = T.[AssessmentPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [Version]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [LowestAssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentForm]
                    , [RevisionDate]
                    , [MaxRawScore]
                    , [Nomenclature]
                    , [AssessmentPeriodDescriptorCodeValue]
                    , [AssessmentFamilyTitle]
                    , [Namespace]
                    , [AssessmentPeriodDescriptorNamespace]
                    , [LowestAssessedGradeLevelDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[Version]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[LowestAssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentForm]
                    , S.[RevisionDate]
                    , S.[MaxRawScore]
                    , S.[Nomenclature]
                    , S.[AssessmentPeriodDescriptorCodeValue]
                    , S.[AssessmentFamilyTitle]
                    , S.[Namespace]
                    , S.[AssessmentPeriodDescriptorNamespace]
                    , S.[LowestAssessedGradeLevelDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Assessment]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Assessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Assessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Assessment] AS T
            JOIN [edfi].[Assessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentScore] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentSection] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAssessmentExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentIdentificationCode]
            (
                [tid_Assessment]
                , [AssessmentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [AssessmentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[AssessmentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[AssessmentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentIdentificationSystemDescriptor.[CodeValue] AS AssessmentIdentificationSystemDescriptorCodeValue, T.[AssessmentTitle], T.[Version], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], AssessmentIdentificationSystemDescriptor.[Namespace] AS AssessmentIdentificationSystemDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [edfi].[AssessmentIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessmentIdentificationSystemDescriptor
                    ON AssessmentIdentificationSystemDescriptor.[DescriptorId] = T.[AssessmentIdentificationSystemDescriptorId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentScore] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentScore]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentScore];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentScore]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentScoreKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentScore]
            (
                [tid_Assessment]
                , [AssessmentReportingMethodType]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[AssessmentReportingMethodType]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [edfi].[AssessmentScore] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                LEFT JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentPerformanceLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentPerformanceLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentPerformanceLevel]
            (
                [tid_Assessment]
                , [AssessmentReportingMethodType]
                , [PerformanceLevelDescriptorCodeValue]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[AssessmentReportingMethodType]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [edfi].[AssessmentPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                LEFT JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentContentStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentContentStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentContentStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentContentStandard]
            (
                [tid_Assessment]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_AssessmentContentStandard]
            INTO @Tids
            SELECT T.[tid_Assessment]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[AssessmentVersion], T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [edfi].[AssessmentContentStandard] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[AssessmentVersion]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_AssessmentContentStandard]
                , T.[AcademicSubjectDescriptorCodeValue]
                , T.[AssessedGradeLevelDescriptorCodeValue]
                , T.[AssessmentTitle]
                , T.[Version]
                , T.[AssessedGradeLevelDescriptorNamespace]
                , T.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[AssessmentContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_Assessment] = T.[tid_Assessment]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_AssessmentContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentContentStandardAuthor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentContentStandardAuthor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentContentStandardAuthor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentContentStandardAuthor]
            (
                [tid_AssessmentContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[AssessmentVersion], T.[Author], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[AssessmentContentStandardAuthor] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[AssessmentVersion] = S.[AssessmentVersion]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentLanguage] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentLanguage];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentLanguage]
            (
                [tid_Assessment]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[Version], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [edfi].[AssessmentLanguage] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentSection] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentSection]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentSection];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentSection]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentSectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentSection]
            (
                [tid_Assessment]
                , [ClassPeriodName]
                , [ClassroomIdentificationCode]
                , [LocalCourseCode]
                , [SchoolId]
                , [SchoolYear]
                , [SequenceOfCourse]
                , [TermDescriptorCodeValue]
                , [UniqueSectionCode]
                , [TermDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[ClassPeriodName]
                , S.[ClassroomIdentificationCode]
                , S.[LocalCourseCode]
                , S.[SchoolId]
                , S.[SchoolYear]
                , S.[SequenceOfCourse]
                , S.[TermDescriptorCodeValue]
                , S.[UniqueSectionCode]
                , S.[TermDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[Version], TermDescriptor.[Namespace] AS TermDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [edfi].[AssessmentSection] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentProgram] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentProgram];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentProgram]
            (
                [tid_Assessment]
                , [EducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[EducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[EducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [edfi].[AssessmentProgram] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbAssessmentExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbAssessmentExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbAssessmentExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbAssessmentExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AssessmentExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AssessmentExtension]
            (
                [tid_Assessment]
                , [ProgramGatewayDescriptorCodeValue]
                , [ProgramGatewayDescriptorNamespace]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Assessment]
                , S.[ProgramGatewayDescriptorCodeValue]
                , S.[ProgramGatewayDescriptorNamespace]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[Version], ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue, ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , Assessment.[LastModifiedDate] AS ParentLastModifiedDate
                , Assessment.[Id] AS ParentId
                FROM [extension].[AssessmentExtension] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON ProgramGatewayDescriptor.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN [edfi].[Assessment] AS Assessment
                    ON Assessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND Assessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND Assessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND Assessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentCategoryDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentCategoryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentCategoryDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AssessmentCategoryType].[ShortDescription] AS AssessmentCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AssessmentCategoryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [edfi].[AssessmentCategoryType] AS AssessmentCategoryType
                    ON [AssessmentCategoryType].[AssessmentCategoryTypeId] = T.[AssessmentCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AssessmentCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AssessmentCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentCategoryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AssessmentCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AssessmentCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamily] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentFamily]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentFamily];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamily]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentFamily] AS T
            USING
            (
                SELECT T.[AssessmentFamilyTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , LowestAssessedGradeLevelDescriptor.[CodeValue] AS LowestAssessedGradeLevelDescriptorCodeValue
                , T.[Version]
                , T.[RevisionDate]
                , T.[Nomenclature]
                , T.[ParentAssessmentFamilyTitle]
                , T.[Namespace]
                , LowestAssessedGradeLevelDescriptor.[Namespace] AS LowestAssessedGradeLevelDescriptorNamespace
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[AssessmentFamily] AS T
                LEFT JOIN .[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS LowestAssessedGradeLevelDescriptor
                    ON [LowestAssessedGradeLevelDescriptor].[DescriptorId] = T.[LowestAssessedGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AssessmentFamilyTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [LowestAssessedGradeLevelDescriptorCodeValue]
                    , [Version]
                    , [RevisionDate]
                    , [Nomenclature]
                    , [ParentAssessmentFamilyTitle]
                    , [Namespace]
                    , [LowestAssessedGradeLevelDescriptorNamespace]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AssessmentFamilyTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[LowestAssessedGradeLevelDescriptorCodeValue]
                    , S.[Version]
                    , S.[RevisionDate]
                    , S.[Nomenclature]
                    , S.[ParentAssessmentFamilyTitle]
                    , S.[Namespace]
                    , S.[LowestAssessedGradeLevelDescriptorNamespace]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentFamily]
                , INSERTED.[AssessmentFamilyTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentFamilySnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentFamily]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentFamily]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentFamily] AS T
            JOIN [edfi].[AssessmentFamily] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentFamilyIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamilyContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamilyLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentFamilyIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentFamilyIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyIdentificationCode]
            (
                [tid_AssessmentFamily]
                , [AssessmentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [AssessmentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamily]
                , S.[AssessmentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[AssessmentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], AssessmentIdentificationSystemDescriptor.[CodeValue] AS AssessmentIdentificationSystemDescriptorCodeValue, T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], AssessmentIdentificationSystemDescriptor.[Namespace] AS AssessmentIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [edfi].[AssessmentFamilyIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS AssessmentIdentificationSystemDescriptor
                    ON AssessmentIdentificationSystemDescriptor.[DescriptorId] = T.[AssessmentIdentificationSystemDescriptorId]
                JOIN [edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyContentStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentFamilyContentStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentFamilyContentStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyContentStandard]
            (
                [tid_AssessmentFamily]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_AssessmentFamilyContentStandard]
            INTO @Tids
            SELECT T.[tid_AssessmentFamily]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [edfi].[AssessmentFamilyContentStandard] AS T 
                LEFT JOIN [edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_AssessmentFamilyContentStandard]
                , T.[AssessmentFamilyTitle]
            FROM [t_edfi].[AssessmentFamilyContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_AssessmentFamily] = T.[tid_AssessmentFamily]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_AssessmentFamilyContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyContentStandardAuthor]
            (
                [tid_AssessmentFamilyContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamilyContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], T.[Author]
                , T.[CreateDate]
                FROM [edfi].[AssessmentFamilyContentStandardAuthor] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[AssessmentFamilyTitle] = S.[AssessmentFamilyTitle];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyLanguage] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentFamilyLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentFamilyLanguage];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyLanguage]
            (
                [tid_AssessmentFamily]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamily]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [edfi].[AssessmentFamilyLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentFamilyAssessmentPeriod]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentFamilyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentFamilyAssessmentPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentFamilyAssessmentPeriod]
            (
                [tid_AssessmentFamily]
                , [AssessmentPeriodDescriptorCodeValue]
                , [AssessmentPeriodDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentFamily]
                , S.[AssessmentPeriodDescriptorCodeValue]
                , S.[AssessmentPeriodDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssessmentFamilyTitle], AssessmentPeriodDescriptor.[CodeValue] AS AssessmentPeriodDescriptorCodeValue, AssessmentPeriodDescriptor.[Namespace] AS AssessmentPeriodDescriptorNamespace
                , T.[CreateDate]
                , AssessmentFamily.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentFamily.[Id] AS ParentId
                FROM [edfi].[AssessmentFamilyAssessmentPeriod] AS T 
                JOIN [edfi].[Descriptor] AS AssessmentPeriodDescriptor
                    ON AssessmentPeriodDescriptor.[DescriptorId] = T.[AssessmentPeriodDescriptorId]
                JOIN [edfi].[AssessmentFamily] AS AssessmentFamily
                    ON AssessmentFamily.[AssessmentFamilyTitle] = T.[AssessmentFamilyTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AssessmentIdentificationSystemType].[ShortDescription] AS AssessmentIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AssessmentIdentificationSystemDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AssessmentIdentificationSystemDescriptorId]
                JOIN [edfi].[AssessmentIdentificationSystemType] AS AssessmentIdentificationSystemType
                    ON [AssessmentIdentificationSystemType].[AssessmentIdentificationSystemTypeId] = T.[AssessmentIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AssessmentIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AssessmentIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentIdentificationSystemDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AssessmentIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[AssessmentIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentItem] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentItem]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentItem];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentItem]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentItemKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentItem] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , T.[IdentificationCode]
                , T.[Version]
                , [AssessmentItemCategoryType].[ShortDescription] AS AssessmentItemCategoryType
                , T.[MaxRawScore]
                , T.[CorrectResponse]
                , T.[ExpectedTimeAssessed]
                , T.[Nomenclature]
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[AssessmentItem] AS T
                JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN .[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                LEFT JOIN [edfi].[AssessmentItemCategoryType] AS AssessmentItemCategoryType
                    ON [AssessmentItemCategoryType].[AssessmentItemCategoryTypeId] = T.[AssessmentItemCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [IdentificationCode]
                    , [Version]
                    , [AssessmentItemCategoryType]
                    , [MaxRawScore]
                    , [CorrectResponse]
                    , [ExpectedTimeAssessed]
                    , [Nomenclature]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[IdentificationCode]
                    , S.[Version]
                    , S.[AssessmentItemCategoryType]
                    , S.[MaxRawScore]
                    , S.[CorrectResponse]
                    , S.[ExpectedTimeAssessed]
                    , S.[Nomenclature]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentItem]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[IdentificationCode]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentItemSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentItem]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentItem]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentItem] AS T
            JOIN [edfi].[AssessmentItem] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbAssessmentItemLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentItemLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentItemLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentItemLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentItemLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_AssessmentItemKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentItemLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[AssessmentItemLearningStandard]
            (
                [tid_AssessmentItem]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AssessmentItem]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], T.[LearningStandardId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , AssessmentItem.[LastModifiedDate] AS ParentLastModifiedDate
                , AssessmentItem.[Id] AS ParentId
                FROM [edfi].[AssessmentItemLearningStandard] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[AssessmentItem] AS AssessmentItem
                    ON AssessmentItem.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND AssessmentItem.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND AssessmentItem.[AssessmentTitle] = T.[AssessmentTitle]
                    AND AssessmentItem.[IdentificationCode] = T.[IdentificationCode]
                    AND AssessmentItem.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAssessmentPeriodDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAssessmentPeriodDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAssessmentPeriodDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAssessmentPeriodDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AssessmentPeriodDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AssessmentPeriodDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , T.[BeginDate]
                , T.[EndDate]
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AssessmentPeriodDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AssessmentPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BeginDate]
                    , [EndDate]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AssessmentPeriodDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AssessmentPeriodDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AssessmentPeriodDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AssessmentPeriodDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AssessmentPeriodDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AssessmentPeriodDescriptor] AS S
                ON P.[DescriptorId] = S.[AssessmentPeriodDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbAttendanceEventCategoryDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbAttendanceEventCategoryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbAttendanceEventCategoryDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbAttendanceEventCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_AttendanceEventCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[AttendanceEventCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AttendanceEventCategoryType].[ShortDescription] AS AttendanceEventCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[AttendanceEventCategoryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN [edfi].[AttendanceEventCategoryType] AS AttendanceEventCategoryType
                    ON [AttendanceEventCategoryType].[AttendanceEventCategoryTypeId] = T.[AttendanceEventCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AttendanceEventCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AttendanceEventCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AttendanceEventCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[AttendanceEventCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AttendanceEventCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AttendanceEventCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[AttendanceEventCategoryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[AttendanceEventCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AttendanceEventCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbBehaviorDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbBehaviorDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbBehaviorDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbBehaviorDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BehaviorDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[BehaviorDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BehaviorType].[ShortDescription] AS BehaviorType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[BehaviorDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BehaviorDescriptorId]
                LEFT JOIN [edfi].[BehaviorType] AS BehaviorType
                    ON [BehaviorType].[BehaviorTypeId] = T.[BehaviorTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BehaviorType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BehaviorType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BehaviorDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[BehaviorDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BehaviorDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BehaviorDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[BehaviorDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[BehaviorDescriptor] AS S
                ON P.[DescriptorId] = S.[BehaviorDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbBellSchedule] ******/

IF OBJECT_ID('[t_edfi].[usp_dbBellSchedule]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbBellSchedule];
GO

CREATE PROCEDURE [t_edfi].[usp_dbBellSchedule]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BellScheduleKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[BellSchedule] AS T
            USING
            (
                SELECT T.[BellScheduleName]
                , T.[Date]
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[SchoolId]
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[BellSchedule] AS T
                JOIN .[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BellScheduleName]
                    , [Date]
                    , [GradeLevelDescriptorCodeValue]
                    , [SchoolId]
                    , [GradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BellScheduleName]
                    , S.[Date]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BellSchedule]
                , INSERTED.[BellScheduleName]
                , INSERTED.[Date]
                , INSERTED.[GradeLevelDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[GradeLevelDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[BellScheduleSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BellSchedule]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BellSchedule]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[BellSchedule] AS T
            JOIN [edfi].[BellSchedule] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbBellScheduleMeetingTime] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbBellScheduleMeetingTime] ******/

IF OBJECT_ID('[t_edfi].[usp_dbBellScheduleMeetingTime]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbBellScheduleMeetingTime];
GO

CREATE PROCEDURE [t_edfi].[usp_dbBellScheduleMeetingTime]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_BellScheduleKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BellScheduleMeetingTimeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[BellScheduleMeetingTime]
            (
                [tid_BellSchedule]
                , [ClassPeriodName]
                , [StartTime]
                , [AlternateDayName]
                , [EndTime]
                , [OfficialAttendancePeriod]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_BellSchedule]
                , S.[ClassPeriodName]
                , S.[StartTime]
                , S.[AlternateDayName]
                , S.[EndTime]
                , S.[OfficialAttendancePeriod]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BellScheduleName], T.[ClassPeriodName], T.[Date], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[SchoolId], T.[StartTime], T.[AlternateDayName], T.[EndTime], T.[OfficialAttendancePeriod], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , BellSchedule.[LastModifiedDate] AS ParentLastModifiedDate
                , BellSchedule.[Id] AS ParentId
                FROM [edfi].[BellScheduleMeetingTime] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[BellSchedule] AS BellSchedule
                    ON BellSchedule.[BellScheduleName] = T.[BellScheduleName]
                    AND BellSchedule.[Date] = T.[Date]
                    AND BellSchedule.[GradeLevelDescriptorId] = T.[GradeLevelDescriptorId]
                    AND BellSchedule.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbBudget] ******/

IF OBJECT_ID('[t_edfi].[usp_dbBudget]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbBudget];
GO

CREATE PROCEDURE [t_edfi].[usp_dbBudget]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_BudgetKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Budget] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , T.[Amount]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Budget] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [Amount]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[Amount]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Budget]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[BudgetSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Budget]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Budget]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Budget] AS T
            JOIN [edfi].[Budget] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCalendarDate] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCalendarDate]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCalendarDate];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCalendarDate]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CalendarDateKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CalendarDate] AS T
            USING
            (
                SELECT T.[Date]
                , T.[SchoolId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[CalendarDate] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [Date]
                    , [SchoolId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[Date]
                    , S.[SchoolId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CalendarDate]
                , INSERTED.[Date]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CalendarDateSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CalendarDate]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CalendarDate]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CalendarDate] AS T
            JOIN [edfi].[CalendarDate] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCalendarDateCalendarEvent] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCalendarDateCalendarEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCalendarDateCalendarEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCalendarDateCalendarEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCalendarDateCalendarEvent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CalendarDateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CalendarDateCalendarEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CalendarDateCalendarEvent]
            (
                [tid_CalendarDate]
                , [CalendarEventDescriptorCodeValue]
                , [EventDuration]
                , [CalendarEventDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CalendarDate]
                , S.[CalendarEventDescriptorCodeValue]
                , S.[EventDuration]
                , S.[CalendarEventDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CalendarEventDescriptor.[CodeValue] AS CalendarEventDescriptorCodeValue, T.[Date], T.[SchoolId], T.[EventDuration], CalendarEventDescriptor.[Namespace] AS CalendarEventDescriptorNamespace
                , T.[CreateDate]
                , CalendarDate.[LastModifiedDate] AS ParentLastModifiedDate
                , CalendarDate.[Id] AS ParentId
                FROM [edfi].[CalendarDateCalendarEvent] AS T 
                JOIN [edfi].[Descriptor] AS CalendarEventDescriptor
                    ON CalendarEventDescriptor.[DescriptorId] = T.[CalendarEventDescriptorId]
                JOIN [edfi].[CalendarDate] AS CalendarDate
                    ON CalendarDate.[Date] = T.[Date]
                    AND CalendarDate.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCalendarEventDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCalendarEventDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCalendarEventDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCalendarEventDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CalendarEventDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CalendarEventDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [CalendarEventType].[ShortDescription] AS CalendarEventType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[CalendarEventDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CalendarEventDescriptorId]
                JOIN [edfi].[CalendarEventType] AS CalendarEventType
                    ON [CalendarEventType].[CalendarEventTypeId] = T.[CalendarEventTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [CalendarEventType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[CalendarEventType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CalendarEventDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CalendarEventDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CalendarEventDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CalendarEventDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CalendarEventDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[CalendarEventDescriptor] AS S
                ON P.[DescriptorId] = S.[CalendarEventDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbClassPeriod] ******/

IF OBJECT_ID('[t_edfi].[usp_dbClassPeriod]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbClassPeriod];
GO

CREATE PROCEDURE [t_edfi].[usp_dbClassPeriod]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ClassPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ClassPeriod] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[SchoolId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[ClassPeriod] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [SchoolId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[SchoolId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ClassPeriod]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ClassPeriodSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ClassPeriod]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ClassPeriod]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ClassPeriod] AS T
            JOIN [edfi].[ClassPeriod] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbClassroomPositionDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbClassroomPositionDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbClassroomPositionDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbClassroomPositionDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ClassroomPositionDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ClassroomPositionDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ClassroomPositionType].[ShortDescription] AS ClassroomPositionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ClassroomPositionDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ClassroomPositionDescriptorId]
                LEFT JOIN [edfi].[ClassroomPositionType] AS ClassroomPositionType
                    ON [ClassroomPositionType].[ClassroomPositionTypeId] = T.[ClassroomPositionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ClassroomPositionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ClassroomPositionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ClassroomPositionDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ClassroomPositionDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ClassroomPositionDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ClassroomPositionDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ClassroomPositionDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ClassroomPositionDescriptor] AS S
                ON P.[DescriptorId] = S.[ClassroomPositionDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCohort] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCohort]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCohort];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCohort]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CohortKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Cohort] AS T
            USING
            (
                SELECT T.[CohortIdentifier]
                , T.[EducationOrganizationId]
                , T.[CohortDescription]
                , [CohortType].[ShortDescription] AS CohortType
                , [CohortScopeType].[ShortDescription] AS CohortScopeType
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Cohort] AS T
                JOIN [edfi].[CohortType] AS CohortType
                    ON [CohortType].[CohortTypeId] = T.[CohortTypeId]
                LEFT JOIN [edfi].[CohortScopeType] AS CohortScopeType
                    ON [CohortScopeType].[CohortScopeTypeId] = T.[CohortScopeTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CohortIdentifier]
                    , [EducationOrganizationId]
                    , [CohortDescription]
                    , [CohortType]
                    , [CohortScopeType]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CohortIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[CohortDescription]
                    , S.[CohortType]
                    , S.[CohortScopeType]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Cohort]
                , INSERTED.[CohortIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CohortSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Cohort]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Cohort]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Cohort] AS T
            JOIN [edfi].[Cohort] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCohortProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCohortProgram] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCohortProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCohortProgram];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCohortProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CohortKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CohortProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CohortProgram]
            (
                [tid_Cohort]
                , [ProgramEducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Cohort]
                , S.[ProgramEducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CohortIdentifier], T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType
                , T.[CreateDate]
                , Cohort.[LastModifiedDate] AS ParentLastModifiedDate
                , Cohort.[Id] AS ParentId
                FROM [edfi].[CohortProgram] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Cohort] AS Cohort
                    ON Cohort.[CohortIdentifier] = T.[CohortIdentifier]
                    AND Cohort.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCompetencyLevelDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCompetencyLevelDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCompetencyLevelDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCompetencyLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CompetencyLevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CompetencyLevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PerformanceBaseConversionType].[ShortDescription] AS PerformanceBaseConversionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[CompetencyLevelDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CompetencyLevelDescriptorId]
                LEFT JOIN [edfi].[PerformanceBaseConversionType] AS PerformanceBaseConversionType
                    ON [PerformanceBaseConversionType].[PerformanceBaseConversionTypeId] = T.[PerformanceBaseConversionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PerformanceBaseConversionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PerformanceBaseConversionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CompetencyLevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CompetencyLevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CompetencyLevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CompetencyLevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CompetencyLevelDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[CompetencyLevelDescriptor] AS S
                ON P.[DescriptorId] = S.[CompetencyLevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCompetencyObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCompetencyObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCompetencyObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCompetencyObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CompetencyObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CompetencyObjective] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[Objective]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[CompetencyObjectiveId]
                , T.[Description]
                , T.[SuccessCriteria]
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[CompetencyObjective] AS T
                JOIN .[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [Objective]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [CompetencyObjectiveId]
                    , [Description]
                    , [SuccessCriteria]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[Objective]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[CompetencyObjectiveId]
                    , S.[Description]
                    , S.[SuccessCriteria]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CompetencyObjective]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CompetencyObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CompetencyObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CompetencyObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CompetencyObjective] AS T
            JOIN [edfi].[CompetencyObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbContinuationOfServicesReasonDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbContinuationOfServicesReasonDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbContinuationOfServicesReasonDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbContinuationOfServicesReasonDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ContinuationOfServicesReasonDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ContinuationOfServicesReasonDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ContinuationOfServicesReasonType].[ShortDescription] AS ContinuationOfServicesReasonType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ContinuationOfServicesReasonDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ContinuationOfServicesReasonDescriptorId]
                JOIN [edfi].[ContinuationOfServicesReasonType] AS ContinuationOfServicesReasonType
                    ON [ContinuationOfServicesReasonType].[ContinuationOfServicesReasonTypeId] = T.[ContinuationOfServicesReasonTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ContinuationOfServicesReasonType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ContinuationOfServicesReasonType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ContinuationOfServicesReasonDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ContinuationOfServicesReasonDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ContinuationOfServicesReasonDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ContinuationOfServicesReasonDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ContinuationOfServicesReasonDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ContinuationOfServicesReasonDescriptor] AS S
                ON P.[DescriptorId] = S.[ContinuationOfServicesReasonDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbContractedStaff] ******/

IF OBJECT_ID('[t_edfi].[usp_dbContractedStaff]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbContractedStaff];
GO

CREATE PROCEDURE [t_edfi].[usp_dbContractedStaff]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ContractedStaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ContractedStaff] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , [Staff].[StaffUniqueId]
                , T.[AmountToDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[ContractedStaff] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [StaffUniqueId]
                    , [AmountToDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[StaffUniqueId]
                    , S.[AmountToDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ContractedStaff]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ContractedStaffSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ContractedStaff]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ContractedStaff]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ContractedStaff] AS T
            JOIN [edfi].[ContractedStaff] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCountryDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCountryDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCountryDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCountryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CountryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CountryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[CountryDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CountryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CountryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CountryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CountryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CountryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CountryDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[CountryDescriptor] AS S
                ON P.[DescriptorId] = S.[CountryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourse] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourse];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Course] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[CourseTitle]
                , T.[NumberOfParts]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[CourseDescription]
                , T.[TimeRequiredForCompletion]
                , T.[DateCourseAdopted]
                , T.[HighSchoolCourseRequirement]
                , [CourseGPAApplicabilityType].[ShortDescription] AS CourseGPAApplicabilityType
                , [CourseDefinedByType].[ShortDescription] AS CourseDefinedByType
                , T.[MinimumAvailableCredits]
                , [MinimumAvailableCreditType].[ShortDescription] AS MinimumAvailableCreditType
                , T.[MinimumAvailableCreditConversion]
                , T.[MaximumAvailableCredits]
                , [MaximumAvailableCreditType].[ShortDescription] AS MaximumAvailableCreditType
                , T.[MaximumAvailableCreditConversion]
                , [CareerPathwayType].[ShortDescription] AS CareerPathwayType
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Course] AS T
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [edfi].[CourseGPAApplicabilityType] AS CourseGPAApplicabilityType
                    ON [CourseGPAApplicabilityType].[CourseGPAApplicabilityTypeId] = T.[CourseGPAApplicabilityTypeId]
                LEFT JOIN [edfi].[CourseDefinedByType] AS CourseDefinedByType
                    ON [CourseDefinedByType].[CourseDefinedByTypeId] = T.[CourseDefinedByTypeId]
                LEFT JOIN [edfi].[CreditType] AS MinimumAvailableCreditType
                    ON [MinimumAvailableCreditType].[CreditTypeId] = T.[MinimumAvailableCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS MaximumAvailableCreditType
                    ON [MaximumAvailableCreditType].[CreditTypeId] = T.[MaximumAvailableCreditTypeId]
                LEFT JOIN [edfi].[CareerPathwayType] AS CareerPathwayType
                    ON [CareerPathwayType].[CareerPathwayTypeId] = T.[CareerPathwayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [CourseTitle]
                    , [NumberOfParts]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CourseDescription]
                    , [TimeRequiredForCompletion]
                    , [DateCourseAdopted]
                    , [HighSchoolCourseRequirement]
                    , [CourseGPAApplicabilityType]
                    , [CourseDefinedByType]
                    , [MinimumAvailableCredits]
                    , [MinimumAvailableCreditType]
                    , [MinimumAvailableCreditConversion]
                    , [MaximumAvailableCredits]
                    , [MaximumAvailableCreditType]
                    , [MaximumAvailableCreditConversion]
                    , [CareerPathwayType]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[CourseTitle]
                    , S.[NumberOfParts]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CourseDescription]
                    , S.[TimeRequiredForCompletion]
                    , S.[DateCourseAdopted]
                    , S.[HighSchoolCourseRequirement]
                    , S.[CourseGPAApplicabilityType]
                    , S.[CourseDefinedByType]
                    , S.[MinimumAvailableCredits]
                    , S.[MinimumAvailableCreditType]
                    , S.[MinimumAvailableCreditConversion]
                    , S.[MaximumAvailableCredits]
                    , S.[MaximumAvailableCreditType]
                    , S.[MaximumAvailableCreditConversion]
                    , S.[CareerPathwayType]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Course]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Course]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Course]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Course] AS T
            JOIN [edfi].[Course] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCourseIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseLevelCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseOfferedGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseCompetencyLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbCourseLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseIdentificationCode]
            (
                [tid_Course]
                , [CourseIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [CourseIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[CourseIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[CourseIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], CourseIdentificationSystemDescriptor.[CodeValue] AS CourseIdentificationSystemDescriptorCodeValue, T.[EducationOrganizationId], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], CourseIdentificationSystemDescriptor.[Namespace] AS CourseIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [edfi].[CourseIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS CourseIdentificationSystemDescriptor
                    ON CourseIdentificationSystemDescriptor.[DescriptorId] = T.[CourseIdentificationSystemDescriptorId]
                JOIN [edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseLevelCharacteristic] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseLevelCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseLevelCharacteristic];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseLevelCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseLevelCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseLevelCharacteristic]
            (
                [tid_Course]
                , [CourseLevelCharacteristicType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[CourseLevelCharacteristicType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], CourseLevelCharacteristicType.[ShortDescription] AS CourseLevelCharacteristicType, T.[EducationOrganizationId]
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [edfi].[CourseLevelCharacteristic] AS T 
                JOIN [edfi].[CourseLevelCharacteristicType] AS CourseLevelCharacteristicType
                    ON CourseLevelCharacteristicType.[CourseLevelCharacteristicTypeId] = T.[CourseLevelCharacteristicTypeId]
                JOIN [edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseOfferedGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseOfferedGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseOfferedGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseOfferedGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseOfferedGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseOfferedGradeLevel]
            (
                [tid_Course]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [edfi].[CourseOfferedGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseCompetencyLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseCompetencyLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseCompetencyLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseCompetencyLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseCompetencyLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseCompetencyLevel]
            (
                [tid_Course]
                , [CompetencyLevelDescriptorCodeValue]
                , [CompetencyLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[CompetencyLevelDescriptorCodeValue]
                , S.[CompetencyLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue, T.[CourseCode], T.[EducationOrganizationId], CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [edfi].[CourseCompetencyLevel] AS T 
                JOIN [edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON CompetencyLevelDescriptor.[DescriptorId] = T.[CompetencyLevelDescriptorId]
                JOIN [edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseLearningStandard]
            (
                [tid_Course]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[LearningStandardId]
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [edfi].[CourseLearningStandard] AS T 
                JOIN [edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseLearningObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseLearningObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseLearningObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseLearningObjective]
            (
                [tid_Course]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Course]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[CourseCode], T.[EducationOrganizationId], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Course.[LastModifiedDate] AS ParentLastModifiedDate
                , Course.[Id] AS ParentId
                FROM [edfi].[CourseLearningObjective] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [edfi].[Course] AS Course
                    ON Course.[CourseCode] = T.[CourseCode]
                    AND Course.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseIdentificationSystemDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseIdentificationSystemDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseIdentificationSystemDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CourseIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [CourseIdentificationSystemType].[ShortDescription] AS CourseIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[CourseIdentificationSystemDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CourseIdentificationSystemDescriptorId]
                LEFT JOIN [edfi].[CourseIdentificationSystemType] AS CourseIdentificationSystemType
                    ON [CourseIdentificationSystemType].[CourseIdentificationSystemTypeId] = T.[CourseIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [CourseIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[CourseIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CourseIdentificationSystemDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[CourseIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[CourseIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseOffering] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseOffering]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseOffering];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseOffering]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseOfferingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CourseOffering] AS T
            USING
            (
                SELECT T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[LocalCourseTitle]
                , T.[InstructionalTimePlanned]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[CourseOffering] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [LocalCourseTitle]
                    , [InstructionalTimePlanned]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[LocalCourseTitle]
                    , S.[InstructionalTimePlanned]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseOffering]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseOfferingSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseOffering]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseOffering]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CourseOffering] AS T
            JOIN [edfi].[CourseOffering] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCourseOfferingCurriculumUsed] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseOfferingCurriculumUsed] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseOfferingCurriculumUsed]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseOfferingCurriculumUsed];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseOfferingCurriculumUsed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseOfferingKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseOfferingCurriculumUsedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseOfferingCurriculumUsed]
            (
                [tid_CourseOffering]
                , [CurriculumUsedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseOffering]
                , S.[CurriculumUsedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CurriculumUsedType.[ShortDescription] AS CurriculumUsedType, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseOffering.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseOffering.[Id] AS ParentId
                FROM [edfi].[CourseOfferingCurriculumUsed] AS T 
                JOIN [edfi].[CurriculumUsedType] AS CurriculumUsedType
                    ON CurriculumUsedType.[CurriculumUsedTypeId] = T.[CurriculumUsedTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[CourseOffering] AS CourseOffering
                    ON CourseOffering.[LocalCourseCode] = T.[LocalCourseCode]
                    AND CourseOffering.[SchoolId] = T.[SchoolId]
                    AND CourseOffering.[SchoolYear] = T.[SchoolYear]
                    AND CourseOffering.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseTranscript] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseTranscript]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseTranscript];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CourseTranscript] AS T
            USING
            (
                SELECT [CourseAttemptResultType].[ShortDescription] AS CourseAttemptResultType
                , T.[CourseCode]
                , T.[CourseEducationOrganizationId]
                , T.[EducationOrganizationId]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AttemptedCredits]
                , [AttemptedCreditType].[ShortDescription] AS AttemptedCreditType
                , T.[AttemptedCreditConversion]
                , T.[EarnedCredits]
                , [EarnedCreditType].[ShortDescription] AS EarnedCreditType
                , T.[EarnedCreditConversion]
                , WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue
                , [MethodCreditEarnedType].[ShortDescription] AS MethodCreditEarnedType
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[SchoolId]
                , T.[CourseTitle]
                , T.[AlternativeCourseTitle]
                , T.[AlternativeCourseCode]
                , WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[CourseTranscript] AS T
                JOIN [edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON [CourseAttemptResultType].[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[CreditType] AS AttemptedCreditType
                    ON [AttemptedCreditType].[CreditTypeId] = T.[AttemptedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS EarnedCreditType
                    ON [EarnedCreditType].[CreditTypeId] = T.[EarnedCreditTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON [WhenTakenGradeLevelDescriptor].[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                LEFT JOIN [edfi].[MethodCreditEarnedType] AS MethodCreditEarnedType
                    ON [MethodCreditEarnedType].[MethodCreditEarnedTypeId] = T.[MethodCreditEarnedTypeId]
                LEFT JOIN [edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseAttemptResultType]
                    , [CourseCode]
                    , [CourseEducationOrganizationId]
                    , [EducationOrganizationId]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [AttemptedCredits]
                    , [AttemptedCreditType]
                    , [AttemptedCreditConversion]
                    , [EarnedCredits]
                    , [EarnedCreditType]
                    , [EarnedCreditConversion]
                    , [WhenTakenGradeLevelDescriptorCodeValue]
                    , [MethodCreditEarnedType]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [SchoolId]
                    , [CourseTitle]
                    , [AlternativeCourseTitle]
                    , [AlternativeCourseCode]
                    , [WhenTakenGradeLevelDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseAttemptResultType]
                    , S.[CourseCode]
                    , S.[CourseEducationOrganizationId]
                    , S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[AttemptedCredits]
                    , S.[AttemptedCreditType]
                    , S.[AttemptedCreditConversion]
                    , S.[EarnedCredits]
                    , S.[EarnedCreditType]
                    , S.[EarnedCreditConversion]
                    , S.[WhenTakenGradeLevelDescriptorCodeValue]
                    , S.[MethodCreditEarnedType]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[SchoolId]
                    , S.[CourseTitle]
                    , S.[AlternativeCourseTitle]
                    , S.[AlternativeCourseCode]
                    , S.[WhenTakenGradeLevelDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseTranscript]
                , INSERTED.[CourseAttemptResultType]
                , INSERTED.[CourseCode]
                , INSERTED.[CourseEducationOrganizationId]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CourseTranscript] AS T
            JOIN [edfi].[CourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCourseTranscriptEarnedAdditionalCredits]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CourseTranscriptEarnedAdditionalCreditsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CourseTranscriptEarnedAdditionalCredits]
            (
                [tid_CourseTranscript]
                , [AdditionalCreditType]
                , [Credits]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseTranscript]
                , S.[AdditionalCreditType]
                , S.[Credits]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AdditionalCreditType.[ShortDescription] AS AdditionalCreditType, CourseAttemptResultType.[ShortDescription] AS CourseAttemptResultType, T.[CourseCode], T.[CourseEducationOrganizationId], T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[Credits], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseTranscript.[Id] AS ParentId
                FROM [edfi].[CourseTranscriptEarnedAdditionalCredits] AS T 
                JOIN [edfi].[AdditionalCreditType] AS AdditionalCreditType
                    ON AdditionalCreditType.[AdditionalCreditTypeId] = T.[AdditionalCreditTypeId]
                JOIN [edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON CourseAttemptResultType.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[CourseTranscript] AS CourseTranscript
                    ON CourseTranscript.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                    AND CourseTranscript.[CourseCode] = T.[CourseCode]
                    AND CourseTranscript.[CourseEducationOrganizationId] = T.[CourseEducationOrganizationId]
                    AND CourseTranscript.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND CourseTranscript.[StudentUSI] = T.[StudentUSI]
                    AND CourseTranscript.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCredential] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCredential]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCredential];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCredential]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Credential] AS T
            USING
            (
                SELECT T.[CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType].[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[EffectiveDate]
                , T.[ExpirationDate]
                , CredentialFieldDescriptor.[CodeValue] AS CredentialFieldDescriptorCodeValue
                , T.[IssuanceDate]
                , [CredentialType].[ShortDescription] AS CredentialType
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , TeachingCredentialDescriptor.[CodeValue] AS TeachingCredentialDescriptorCodeValue
                , [TeachingCredentialBasisType].[ShortDescription] AS TeachingCredentialBasisType
                , T.[CurrentCredential]
                , TeachingCredentialDescriptor.[Namespace] AS TeachingCredentialDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , CredentialFieldDescriptor.[Namespace] AS CredentialFieldDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Credential] AS T
                JOIN [edfi].[StateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON [StateOfIssueStateAbbreviationType].[StateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN .[edfi].[Descriptor] AS CredentialFieldDescriptor
                    ON [CredentialFieldDescriptor].[DescriptorId] = T.[CredentialFieldDescriptorId]
                JOIN [edfi].[CredentialType] AS CredentialType
                    ON [CredentialType].[CredentialTypeId] = T.[CredentialTypeId]
                JOIN .[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN .[edfi].[Descriptor] AS TeachingCredentialDescriptor
                    ON [TeachingCredentialDescriptor].[DescriptorId] = T.[TeachingCredentialDescriptorId]
                LEFT JOIN [edfi].[TeachingCredentialBasisType] AS TeachingCredentialBasisType
                    ON [TeachingCredentialBasisType].[TeachingCredentialBasisTypeId] = T.[TeachingCredentialBasisTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CredentialIdentifier]
                    , [StateOfIssueStateAbbreviationType]
                    , [EffectiveDate]
                    , [ExpirationDate]
                    , [CredentialFieldDescriptorCodeValue]
                    , [IssuanceDate]
                    , [CredentialType]
                    , [GradeLevelDescriptorCodeValue]
                    , [TeachingCredentialDescriptorCodeValue]
                    , [TeachingCredentialBasisType]
                    , [CurrentCredential]
                    , [TeachingCredentialDescriptorNamespace]
                    , [GradeLevelDescriptorNamespace]
                    , [CredentialFieldDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CredentialIdentifier]
                    , S.[StateOfIssueStateAbbreviationType]
                    , S.[EffectiveDate]
                    , S.[ExpirationDate]
                    , S.[CredentialFieldDescriptorCodeValue]
                    , S.[IssuanceDate]
                    , S.[CredentialType]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[TeachingCredentialDescriptorCodeValue]
                    , S.[TeachingCredentialBasisType]
                    , S.[CurrentCredential]
                    , S.[TeachingCredentialDescriptorNamespace]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[CredentialFieldDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Credential]
                , INSERTED.[CredentialIdentifier]
                , INSERTED.[StateOfIssueStateAbbreviationType]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CredentialSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Credential]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Credential]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Credential] AS T
            JOIN [edfi].[Credential] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbCredentialEndorsement] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialBoardCertification] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialCertificationExam] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialRecommendation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCredentialRecommendingInstitution] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCredentialEndorsement] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCredentialEndorsement]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCredentialEndorsement];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCredentialEndorsement]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CredentialEndorsementKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[CredentialEndorsement]
            (
                [tid_Credential]
                , [CredentialEndorsement]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[CredentialEndorsement]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialEndorsement], T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [edfi].[CredentialEndorsement] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbCredentialExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCredentialExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbCredentialExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialExtension]
            (
                [tid_Credential]
                , [RevocationDate]
                , [RevocationReason]
                , [SuspensionDate]
                , [SuspensionReason]
                , [ValueType]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[RevocationDate]
                , S.[RevocationReason]
                , S.[SuspensionDate]
                , S.[SuspensionReason]
                , S.[ValueType]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[RevocationDate], T.[RevocationReason], T.[SuspensionDate], T.[SuspensionReason], ValueType.[ShortDescription] AS ValueType
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [extension].[CredentialExtension] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialBoardCertification] ******/

IF OBJECT_ID('[t_extension].[usp_dbCredentialBoardCertification]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCredentialBoardCertification];
GO

CREATE PROCEDURE [t_extension].[usp_dbCredentialBoardCertification]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialBoardCertificationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialBoardCertification]
            (
                [tid_Credential]
                , [BoardCertification]
                , [BoardCertificationDate]
                , [BoardCertificationTypeDescriptorCodeValue]
                , [BoardCertificationTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[BoardCertification]
                , S.[BoardCertificationDate]
                , S.[BoardCertificationTypeDescriptorCodeValue]
                , S.[BoardCertificationTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[BoardCertification], T.[BoardCertificationDate], BoardCertificationTypeDescriptor.[CodeValue] AS BoardCertificationTypeDescriptorCodeValue, BoardCertificationTypeDescriptor.[Namespace] AS BoardCertificationTypeDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [extension].[CredentialBoardCertification] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [edfi].[Descriptor] AS BoardCertificationTypeDescriptor
                    ON BoardCertificationTypeDescriptor.[DescriptorId] = T.[BoardCertificationTypeDescriptorId]
                JOIN [edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialCertificationExam] ******/

IF OBJECT_ID('[t_extension].[usp_dbCredentialCertificationExam]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCredentialCertificationExam];
GO

CREATE PROCEDURE [t_extension].[usp_dbCredentialCertificationExam]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialCertificationExamKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialCertificationExam]
            (
                [tid_Credential]
                , [CertificationExamTitle]
                , [CertificationExamTypeDescriptorCodeValue]
                , [CertificationExamOverallScore]
                , [CertificationExamTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[CertificationExamTitle]
                , S.[CertificationExamTypeDescriptorCodeValue]
                , S.[CertificationExamOverallScore]
                , S.[CertificationExamTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[CertificationExamTitle], CertificationExamTypeDescriptor.[CodeValue] AS CertificationExamTypeDescriptorCodeValue, T.[CertificationExamOverallScore], CertificationExamTypeDescriptor.[Namespace] AS CertificationExamTypeDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [extension].[CredentialCertificationExam] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS CertificationExamTypeDescriptor
                    ON CertificationExamTypeDescriptor.[DescriptorId] = T.[CertificationExamTypeDescriptorId]
                JOIN [edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialRecommendation] ******/

IF OBJECT_ID('[t_extension].[usp_dbCredentialRecommendation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCredentialRecommendation];
GO

CREATE PROCEDURE [t_extension].[usp_dbCredentialRecommendation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialRecommendationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialRecommendation]
            (
                [tid_Credential]
                , [CredentialFieldDescriptorCodeValue]
                , [LevelDescriptorCodeValue]
                , [TeachingCredentialDescriptorCodeValue]
                , [TeachingCredentialDescriptorNamespace]
                , [LevelDescriptorNamespace]
                , [CredentialFieldDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[CredentialFieldDescriptorCodeValue]
                , S.[LevelDescriptorCodeValue]
                , S.[TeachingCredentialDescriptorCodeValue]
                , S.[TeachingCredentialDescriptorNamespace]
                , S.[LevelDescriptorNamespace]
                , S.[CredentialFieldDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, CredentialFieldDescriptor.[CodeValue] AS CredentialFieldDescriptorCodeValue, LevelDescriptor.[CodeValue] AS LevelDescriptorCodeValue, TeachingCredentialDescriptor.[CodeValue] AS TeachingCredentialDescriptorCodeValue, TeachingCredentialDescriptor.[Namespace] AS TeachingCredentialDescriptorNamespace, LevelDescriptor.[Namespace] AS LevelDescriptorNamespace, CredentialFieldDescriptor.[Namespace] AS CredentialFieldDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [extension].[CredentialRecommendation] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS CredentialFieldDescriptor
                    ON CredentialFieldDescriptor.[DescriptorId] = T.[CredentialFieldDescriptorId]
                JOIN [edfi].[Descriptor] AS LevelDescriptor
                    ON LevelDescriptor.[DescriptorId] = T.[LevelDescriptorId]
                JOIN [edfi].[Descriptor] AS TeachingCredentialDescriptor
                    ON TeachingCredentialDescriptor.[DescriptorId] = T.[TeachingCredentialDescriptorId]
                JOIN [edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbCredentialRecommendingInstitution] ******/

IF OBJECT_ID('[t_extension].[usp_dbCredentialRecommendingInstitution]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbCredentialRecommendingInstitution];
GO

CREATE PROCEDURE [t_extension].[usp_dbCredentialRecommendingInstitution]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_CredentialKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CredentialRecommendingInstitutionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CredentialRecommendingInstitution]
            (
                [tid_Credential]
                , [RecommendingInstutionName]
                , [RecommendingDate]
                , [RecommendingInstitutionCountryDescriptorCodeValue]
                , [RecommendingInstitutionStateAbbreviationType]
                , [RecommendingInstitutionCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Credential]
                , S.[RecommendingInstutionName]
                , S.[RecommendingDate]
                , S.[RecommendingInstitutionCountryDescriptorCodeValue]
                , S.[RecommendingInstitutionStateAbbreviationType]
                , S.[RecommendingInstitutionCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[RecommendingInstutionName], T.[RecommendingDate], RecommendingInstitutionCountryDescriptor.[CodeValue] AS RecommendingInstitutionCountryDescriptorCodeValue, RecommendingInstitutionStateAbbreviationType.[ShortDescription] AS RecommendingInstitutionStateAbbreviationType, RecommendingInstitutionCountryDescriptor.[Namespace] AS RecommendingInstitutionCountryDescriptorNamespace
                , T.[CreateDate]
                , Credential.[LastModifiedDate] AS ParentLastModifiedDate
                , Credential.[Id] AS ParentId
                FROM [extension].[CredentialRecommendingInstitution] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS RecommendingInstitutionCountryDescriptor
                    ON RecommendingInstitutionCountryDescriptor.[DescriptorId] = T.[RecommendingInstitutionCountryDescriptorId]
                LEFT JOIN [edfi].[StateAbbreviationType] AS RecommendingInstitutionStateAbbreviationType
                    ON RecommendingInstitutionStateAbbreviationType.[StateAbbreviationTypeId] = T.[RecommendingInstitutionStateAbbreviationTypeId]
                JOIN [edfi].[Credential] AS Credential
                    ON Credential.[CredentialIdentifier] = T.[CredentialIdentifier]
                    AND Credential.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbCredentialFieldDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbCredentialFieldDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbCredentialFieldDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbCredentialFieldDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_CredentialFieldDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[CredentialFieldDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[CredentialFieldDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CredentialFieldDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AcademicSubjectDescriptorNamespace]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CredentialFieldDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[CredentialFieldDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CredentialFieldDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CredentialFieldDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[CredentialFieldDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[CredentialFieldDescriptor] AS S
                ON P.[DescriptorId] = S.[CredentialFieldDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDiagnosisDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDiagnosisDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDiagnosisDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDiagnosisDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DiagnosisDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DiagnosisDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [DiagnosisType].[ShortDescription] AS DiagnosisType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[DiagnosisDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[DiagnosisDescriptorId]
                LEFT JOIN [edfi].[DiagnosisType] AS DiagnosisType
                    ON [DiagnosisType].[DiagnosisTypeId] = T.[DiagnosisTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [DiagnosisType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[DiagnosisType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DiagnosisDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DiagnosisDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DiagnosisDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DiagnosisDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DiagnosisDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[DiagnosisDescriptor] AS S
                ON P.[DescriptorId] = S.[DiagnosisDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisabilityDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisabilityDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisabilityDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisabilityDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisabilityDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisabilityDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [DisabilityType].[ShortDescription] AS DisabilityType
                , [DisabilityCategoryType].[ShortDescription] AS DisabilityCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[DisabilityDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[DisabilityType] AS DisabilityType
                    ON [DisabilityType].[DisabilityTypeId] = T.[DisabilityTypeId]
                JOIN [edfi].[DisabilityCategoryType] AS DisabilityCategoryType
                    ON [DisabilityCategoryType].[DisabilityCategoryTypeId] = T.[DisabilityCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [DisabilityType]
                    , [DisabilityCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[DisabilityType]
                    , S.[DisabilityCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisabilityDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisabilityDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisabilityDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisabilityDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisabilityDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[DisabilityDescriptor] AS S
                ON P.[DescriptorId] = S.[DisabilityDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineAction] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineAction]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineAction];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineAction]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisciplineAction] AS T
            USING
            (
                SELECT T.[DisciplineActionIdentifier]
                , T.[DisciplineDate]
                , [Student].[StudentUniqueId]
                , T.[DisciplineActionLength]
                , T.[ActualDisciplineActionLength]
                , [DisciplineActionLengthDifferenceReasonType].[ShortDescription] AS DisciplineActionLengthDifferenceReasonType
                , T.[RelatedToZeroTolerancePolicy]
                , T.[ResponsibilitySchoolId]
                , T.[AssignmentSchoolId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[DisciplineAction] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[DisciplineActionLengthDifferenceReasonType] AS DisciplineActionLengthDifferenceReasonType
                    ON [DisciplineActionLengthDifferenceReasonType].[DisciplineActionLengthDifferenceReasonTypeId] = T.[DisciplineActionLengthDifferenceReasonTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [DisciplineActionIdentifier]
                    , [DisciplineDate]
                    , [StudentUniqueId]
                    , [DisciplineActionLength]
                    , [ActualDisciplineActionLength]
                    , [DisciplineActionLengthDifferenceReasonType]
                    , [RelatedToZeroTolerancePolicy]
                    , [ResponsibilitySchoolId]
                    , [AssignmentSchoolId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[DisciplineActionIdentifier]
                    , S.[DisciplineDate]
                    , S.[StudentUniqueId]
                    , S.[DisciplineActionLength]
                    , S.[ActualDisciplineActionLength]
                    , S.[DisciplineActionLengthDifferenceReasonType]
                    , S.[RelatedToZeroTolerancePolicy]
                    , S.[ResponsibilitySchoolId]
                    , S.[AssignmentSchoolId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisciplineAction]
                , INSERTED.[DisciplineActionIdentifier]
                , INSERTED.[DisciplineDate]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisciplineActionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisciplineAction]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisciplineAction]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisciplineAction] AS T
            JOIN [edfi].[DisciplineAction] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbDisciplineActionDiscipline] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineActionDisciplineIncident] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineActionStaff] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineActionDiscipline] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineActionDiscipline]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineActionDiscipline];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineActionDiscipline]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineActionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionDisciplineKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineActionDiscipline]
            (
                [tid_DisciplineAction]
                , [DisciplineDescriptorCodeValue]
                , [DisciplineDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineAction]
                , S.[DisciplineDescriptorCodeValue]
                , S.[DisciplineDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DisciplineActionIdentifier], T.[DisciplineDate], DisciplineDescriptor.[CodeValue] AS DisciplineDescriptorCodeValue, [Student].[StudentUniqueId], DisciplineDescriptor.[Namespace] AS DisciplineDescriptorNamespace
                , T.[CreateDate]
                , DisciplineAction.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineAction.[Id] AS ParentId
                FROM [edfi].[DisciplineActionDiscipline] AS T 
                JOIN [edfi].[Descriptor] AS DisciplineDescriptor
                    ON DisciplineDescriptor.[DescriptorId] = T.[DisciplineDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[DisciplineAction] AS DisciplineAction
                    ON DisciplineAction.[DisciplineActionIdentifier] = T.[DisciplineActionIdentifier]
                    AND DisciplineAction.[DisciplineDate] = T.[DisciplineDate]
                    AND DisciplineAction.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineActionDisciplineIncident] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineActionDisciplineIncident]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineActionDisciplineIncident];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineActionDisciplineIncident]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineActionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionDisciplineIncidentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineActionDisciplineIncident]
            (
                [tid_DisciplineAction]
                , [IncidentIdentifier]
                , [SchoolId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineAction]
                , S.[IncidentIdentifier]
                , S.[SchoolId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DisciplineActionIdentifier], T.[DisciplineDate], T.[IncidentIdentifier], T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , DisciplineAction.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineAction.[Id] AS ParentId
                FROM [edfi].[DisciplineActionDisciplineIncident] AS T 
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[DisciplineAction] AS DisciplineAction
                    ON DisciplineAction.[DisciplineActionIdentifier] = T.[DisciplineActionIdentifier]
                    AND DisciplineAction.[DisciplineDate] = T.[DisciplineDate]
                    AND DisciplineAction.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineActionStaff] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineActionStaff]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineActionStaff];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineActionStaff]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineActionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineActionStaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineActionStaff]
            (
                [tid_DisciplineAction]
                , [StaffUniqueId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineAction]
                , S.[StaffUniqueId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DisciplineActionIdentifier], T.[DisciplineDate], [Staff].[StaffUniqueId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , DisciplineAction.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineAction.[Id] AS ParentId
                FROM [edfi].[DisciplineActionStaff] AS T 
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[DisciplineAction] AS DisciplineAction
                    ON DisciplineAction.[DisciplineActionIdentifier] = T.[DisciplineActionIdentifier]
                    AND DisciplineAction.[DisciplineDate] = T.[DisciplineDate]
                    AND DisciplineAction.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisciplineDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [DisciplineType].[ShortDescription] AS DisciplineType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[DisciplineDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[DisciplineDescriptorId]
                LEFT JOIN [edfi].[DisciplineType] AS DisciplineType
                    ON [DisciplineType].[DisciplineTypeId] = T.[DisciplineTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [DisciplineType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[DisciplineType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisciplineDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisciplineDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisciplineDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisciplineDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisciplineDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[DisciplineDescriptor] AS S
                ON P.[DescriptorId] = S.[DisciplineDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineIncident] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineIncident]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineIncident];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineIncident]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineIncidentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[DisciplineIncident] AS T
            USING
            (
                SELECT T.[IncidentIdentifier]
                , T.[SchoolId]
                , T.[IncidentDate]
                , T.[IncidentTime]
                , [IncidentLocationType].[ShortDescription] AS IncidentLocationType
                , T.[IncidentDescription]
                , ReporterDescriptionDescriptor.[CodeValue] AS ReporterDescriptionDescriptorCodeValue
                , T.[ReporterName]
                , T.[ReportedToLawEnforcement]
                , T.[CaseNumber]
                , T.[IncidentCost]
                , [Staff].[StaffUniqueId]
                , ReporterDescriptionDescriptor.[Namespace] AS ReporterDescriptionDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[DisciplineIncident] AS T
                LEFT JOIN [edfi].[IncidentLocationType] AS IncidentLocationType
                    ON [IncidentLocationType].[IncidentLocationTypeId] = T.[IncidentLocationTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS ReporterDescriptionDescriptor
                    ON [ReporterDescriptionDescriptor].[DescriptorId] = T.[ReporterDescriptionDescriptorId]
                LEFT JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [IncidentIdentifier]
                    , [SchoolId]
                    , [IncidentDate]
                    , [IncidentTime]
                    , [IncidentLocationType]
                    , [IncidentDescription]
                    , [ReporterDescriptionDescriptorCodeValue]
                    , [ReporterName]
                    , [ReportedToLawEnforcement]
                    , [CaseNumber]
                    , [IncidentCost]
                    , [StaffUniqueId]
                    , [ReporterDescriptionDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[IncidentIdentifier]
                    , S.[SchoolId]
                    , S.[IncidentDate]
                    , S.[IncidentTime]
                    , S.[IncidentLocationType]
                    , S.[IncidentDescription]
                    , S.[ReporterDescriptionDescriptorCodeValue]
                    , S.[ReporterName]
                    , S.[ReportedToLawEnforcement]
                    , S.[CaseNumber]
                    , S.[IncidentCost]
                    , S.[StaffUniqueId]
                    , S.[ReporterDescriptionDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_DisciplineIncident]
                , INSERTED.[IncidentIdentifier]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[DisciplineIncidentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_DisciplineIncident]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_DisciplineIncident]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[DisciplineIncident] AS T
            JOIN [edfi].[DisciplineIncident] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbDisciplineIncidentBehavior] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineIncidentWeapon] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineIncidentBehavior] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineIncidentBehavior]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineIncidentBehavior];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineIncidentBehavior]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineIncidentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineIncidentBehaviorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineIncidentBehavior]
            (
                [tid_DisciplineIncident]
                , [BehaviorDescriptorCodeValue]
                , [BehaviorDetailedDescription]
                , [BehaviorDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineIncident]
                , S.[BehaviorDescriptorCodeValue]
                , S.[BehaviorDetailedDescription]
                , S.[BehaviorDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT BehaviorDescriptor.[CodeValue] AS BehaviorDescriptorCodeValue, T.[IncidentIdentifier], T.[SchoolId], T.[BehaviorDetailedDescription], BehaviorDescriptor.[Namespace] AS BehaviorDescriptorNamespace
                , T.[CreateDate]
                , DisciplineIncident.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineIncident.[Id] AS ParentId
                FROM [edfi].[DisciplineIncidentBehavior] AS T 
                JOIN [edfi].[Descriptor] AS BehaviorDescriptor
                    ON BehaviorDescriptor.[DescriptorId] = T.[BehaviorDescriptorId]
                JOIN [edfi].[DisciplineIncident] AS DisciplineIncident
                    ON DisciplineIncident.[IncidentIdentifier] = T.[IncidentIdentifier]
                    AND DisciplineIncident.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbDisciplineIncidentWeapon] ******/

IF OBJECT_ID('[t_edfi].[usp_dbDisciplineIncidentWeapon]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbDisciplineIncidentWeapon];
GO

CREATE PROCEDURE [t_edfi].[usp_dbDisciplineIncidentWeapon]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_DisciplineIncidentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_DisciplineIncidentWeaponKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[DisciplineIncidentWeapon]
            (
                [tid_DisciplineIncident]
                , [WeaponDescriptorCodeValue]
                , [WeaponDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_DisciplineIncident]
                , S.[WeaponDescriptorCodeValue]
                , S.[WeaponDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[IncidentIdentifier], T.[SchoolId], WeaponDescriptor.[CodeValue] AS WeaponDescriptorCodeValue, WeaponDescriptor.[Namespace] AS WeaponDescriptorNamespace
                , T.[CreateDate]
                , DisciplineIncident.[LastModifiedDate] AS ParentLastModifiedDate
                , DisciplineIncident.[Id] AS ParentId
                FROM [edfi].[DisciplineIncidentWeapon] AS T 
                JOIN [edfi].[Descriptor] AS WeaponDescriptor
                    ON WeaponDescriptor.[DescriptorId] = T.[WeaponDescriptorId]
                JOIN [edfi].[DisciplineIncident] AS DisciplineIncident
                    ON DisciplineIncident.[IncidentIdentifier] = T.[IncidentIdentifier]
                    AND DisciplineIncident.[SchoolId] = T.[SchoolId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationContent] AS T
            USING
            (
                SELECT T.[ContentIdentifier]
                , T.[LearningResourceMetadataURI]
                , T.[ShortDescription]
                , T.[Description]
                , T.[AdditionalAuthorsIndicator]
                , T.[Publisher]
                , T.[TimeRequired]
                , [InteractivityStyleType].[ShortDescription] AS InteractivityStyleType
                , [ContentClassType].[ShortDescription] AS ContentClassType
                , T.[UseRightsURL]
                , T.[PublicationDate]
                , T.[PublicationYear]
                , T.[Version]
                , T.[LearningStandardId]
                , T.[Cost]
                , [CostRateType].[ShortDescription] AS CostRateType
                , T.[Namespace]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[EducationContent] AS T
                LEFT JOIN [edfi].[InteractivityStyleType] AS InteractivityStyleType
                    ON [InteractivityStyleType].[InteractivityStyleTypeId] = T.[InteractivityStyleTypeId]
                LEFT JOIN [edfi].[ContentClassType] AS ContentClassType
                    ON [ContentClassType].[ContentClassTypeId] = T.[ContentClassTypeId]
                LEFT JOIN [edfi].[CostRateType] AS CostRateType
                    ON [CostRateType].[CostRateTypeId] = T.[CostRateTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ContentIdentifier]
                    , [LearningResourceMetadataURI]
                    , [ShortDescription]
                    , [Description]
                    , [AdditionalAuthorsIndicator]
                    , [Publisher]
                    , [TimeRequired]
                    , [InteractivityStyleType]
                    , [ContentClassType]
                    , [UseRightsURL]
                    , [PublicationDate]
                    , [PublicationYear]
                    , [Version]
                    , [LearningStandardId]
                    , [Cost]
                    , [CostRateType]
                    , [Namespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ContentIdentifier]
                    , S.[LearningResourceMetadataURI]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[AdditionalAuthorsIndicator]
                    , S.[Publisher]
                    , S.[TimeRequired]
                    , S.[InteractivityStyleType]
                    , S.[ContentClassType]
                    , S.[UseRightsURL]
                    , S.[PublicationDate]
                    , S.[PublicationYear]
                    , S.[Version]
                    , S.[LearningStandardId]
                    , S.[Cost]
                    , S.[CostRateType]
                    , S.[Namespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationContent]
                , INSERTED.[ContentIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationContentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationContent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationContent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationContent] AS T
            JOIN [edfi].[EducationContent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbEducationContentAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentDerivativeSourceURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentAuthor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContentAuthor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContentAuthor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentAuthor]
            (
                [tid_EducationContent]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[Author], T.[ContentIdentifier]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [edfi].[EducationContentAuthor] AS T 
                JOIN [edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentDerivativeSourceEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentDerivativeSourceEducationContent]
            (
                [tid_EducationContent]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[DerivativeSourceContentIdentifier]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [edfi].[EducationContentDerivativeSourceEducationContent] AS T 
                JOIN [edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
                    AND EducationContent.[ContentIdentifier] = T.[DerivativeSourceContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentDerivativeSourceLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI]
            (
                [tid_EducationContent]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] AS T 
                JOIN [edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentDerivativeSourceURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContentDerivativeSourceURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentDerivativeSourceURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentDerivativeSourceURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentDerivativeSourceURI]
            (
                [tid_EducationContent]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[URI]
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [edfi].[EducationContentDerivativeSourceURI] AS T 
                JOIN [edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentAppropriateSex] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContentAppropriateSex]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContentAppropriateSex];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentAppropriateSex]
            (
                [tid_EducationContent]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [edfi].[EducationContentAppropriateSex] AS T 
                JOIN [edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentAppropriateGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContentAppropriateGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContentAppropriateGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentAppropriateGradeLevel]
            (
                [tid_EducationContent]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [edfi].[EducationContentAppropriateGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationContentLanguage] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationContentLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationContentLanguage];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationContentLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationContentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationContentLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationContentLanguage]
            (
                [tid_EducationContent]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationContent]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , EducationContent.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationContent.[Id] AS ParentId
                FROM [edfi].[EducationContentLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[EducationContent] AS EducationContent
                    ON EducationContent.[ContentIdentifier] = T.[ContentIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganization] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganization]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganization];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganization]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganization] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[StateOrganizationId]
                , T.[NameOfInstitution]
                , T.[ShortNameOfInstitution]
                , T.[WebSite]
                , [OperationalStatusType].[ShortDescription] AS OperationalStatusType
                , FederalLocaleCodeDescriptor.[CodeValue] AS FederalLocaleCodeDescriptorCodeValue
                , FederalLocaleCodeDescriptor.[Namespace] AS FederalLocaleCodeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[EducationOrganization] AS T
                LEFT JOIN [edfi].[OperationalStatusType] AS OperationalStatusType
                    ON [OperationalStatusType].[OperationalStatusTypeId] = T.[OperationalStatusTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS FederalLocaleCodeDescriptor
                    ON [FederalLocaleCodeDescriptor].[DescriptorId] = T.[FederalLocaleCodeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [StateOrganizationId]
                    , [NameOfInstitution]
                    , [ShortNameOfInstitution]
                    , [WebSite]
                    , [OperationalStatusType]
                    , [FederalLocaleCodeDescriptorCodeValue]
                    , [FederalLocaleCodeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[StateOrganizationId]
                    , S.[NameOfInstitution]
                    , S.[ShortNameOfInstitution]
                    , S.[WebSite]
                    , S.[OperationalStatusType]
                    , S.[FederalLocaleCodeDescriptorCodeValue]
                    , S.[FederalLocaleCodeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganization]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganization]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganization]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganization] AS T
            JOIN [edfi].[EducationOrganization] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbEducationOrganizationIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationCategory] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationInstitutionTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationIdentificationCode]
            (
                [tid_EducationOrganization]
                , [EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [EducationOrganizationIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[EducationOrganizationIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], EducationOrganizationIdentificationSystemDescriptor.[CodeValue] AS EducationOrganizationIdentificationSystemDescriptorCodeValue, T.[IdentificationCode], EducationOrganizationIdentificationSystemDescriptor.[Namespace] AS EducationOrganizationIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [edfi].[EducationOrganizationIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS EducationOrganizationIdentificationSystemDescriptor
                    ON EducationOrganizationIdentificationSystemDescriptor.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                JOIN [edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationCategory] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationCategory]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationCategory];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationCategory]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationCategoryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationCategory]
            (
                [tid_EducationOrganization]
                , [EducationOrganizationCategoryType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[EducationOrganizationCategoryType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationCategoryType.[ShortDescription] AS EducationOrganizationCategoryType, T.[EducationOrganizationId]
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [edfi].[EducationOrganizationCategory] AS T 
                JOIN [edfi].[EducationOrganizationCategoryType] AS EducationOrganizationCategoryType
                    ON EducationOrganizationCategoryType.[EducationOrganizationCategoryTypeId] = T.[EducationOrganizationCategoryTypeId]
                JOIN [edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationAddress]
            (
                [tid_EducationOrganization]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[EducationOrganizationId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [edfi].[EducationOrganizationAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationInternationalAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationInternationalAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationInternationalAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationInternationalAddress]
            (
                [tid_EducationOrganization]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[EducationOrganizationId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [edfi].[EducationOrganizationInternationalAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationInstitutionTelephone] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationInstitutionTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationInstitutionTelephone];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationInstitutionTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_EducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationInstitutionTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[EducationOrganizationInstitutionTelephone]
            (
                [tid_EducationOrganization]
                , [InstitutionTelephoneNumberType]
                , [TelephoneNumber]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganization]
                , S.[InstitutionTelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], InstitutionTelephoneNumberType.[ShortDescription] AS InstitutionTelephoneNumberType, T.[TelephoneNumber]
                , T.[CreateDate]
                , EducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganization.[Id] AS ParentId
                FROM [edfi].[EducationOrganizationInstitutionTelephone] AS T 
                JOIN [edfi].[InstitutionTelephoneNumberType] AS InstitutionTelephoneNumberType
                    ON InstitutionTelephoneNumberType.[InstitutionTelephoneNumberTypeId] = T.[InstitutionTelephoneNumberTypeId]
                JOIN [edfi].[EducationOrganization] AS EducationOrganization
                    ON EducationOrganization.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EducationOrganizationIdentificationSystemType].[ShortDescription] AS EducationOrganizationIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[EducationOrganizationIdentificationSystemDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                LEFT JOIN [edfi].[EducationOrganizationIdentificationSystemType] AS EducationOrganizationIdentificationSystemType
                    ON [EducationOrganizationIdentificationSystemType].[EducationOrganizationIdentificationSystemTypeId] = T.[EducationOrganizationIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EducationOrganizationIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EducationOrganizationIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationIdentificationSystemDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[EducationOrganizationIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[EducationOrganizationIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationInterventionPrescriptionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionPrescriptionEducationOrganizationId]
                , T.[InterventionPrescriptionIdentificationCode]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionPrescriptionEducationOrganizationId]
                    , [InterventionPrescriptionIdentificationCode]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionPrescriptionEducationOrganizationId]
                    , S.[InterventionPrescriptionIdentificationCode]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationInterventionPrescriptionAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionPrescriptionEducationOrganizationId]
                , INSERTED.[InterventionPrescriptionIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationInterventionPrescriptionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationInterventionPrescriptionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationInterventionPrescriptionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS T
            JOIN [edfi].[EducationOrganizationInterventionPrescriptionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationNetwork] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationNetwork]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationNetwork];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationNetwork]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationNetworkKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationNetwork] AS T
            USING
            (
                SELECT T.[EducationOrganizationNetworkId]
                , [NetworkPurposeType].[ShortDescription] AS NetworkPurposeType
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[EducationOrganizationNetwork] AS T
                JOIN [edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[EducationOrganizationNetworkId]
                JOIN [edfi].[NetworkPurposeType] AS NetworkPurposeType
                    ON [NetworkPurposeType].[NetworkPurposeTypeId] = T.[NetworkPurposeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationNetworkId]
                    , [NetworkPurposeType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationNetworkId]
                    , S.[NetworkPurposeType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationNetwork]
                , INSERTED.[EducationOrganizationNetworkId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationNetworkSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationNetwork]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationNetwork]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationNetwork] AS T
            JOIN [edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[EducationOrganizationNetwork] AS S
                ON P.[EducationOrganizationId] = S.[EducationOrganizationNetworkId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationNetworkAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationNetworkAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationNetworkAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationNetworkAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationNetworkAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationNetworkAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationNetworkId]
                , T.[MemberEducationOrganizationId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[EducationOrganizationNetworkAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationNetworkId]
                    , [MemberEducationOrganizationId]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationNetworkId]
                    , S.[MemberEducationOrganizationId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationNetworkAssociation]
                , INSERTED.[EducationOrganizationNetworkId]
                , INSERTED.[MemberEducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationNetworkAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationNetworkAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationNetworkAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationNetworkAssociation] AS T
            JOIN [edfi].[EducationOrganizationNetworkAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationOrganizationPeerAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationOrganizationPeerAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationOrganizationPeerAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationOrganizationPeerAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationOrganizationPeerAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationOrganizationPeerAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[PeerEducationOrganizationId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[EducationOrganizationPeerAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [PeerEducationOrganizationId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[PeerEducationOrganizationId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationPeerAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[PeerEducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationOrganizationPeerAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationPeerAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationPeerAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationOrganizationPeerAssociation] AS T
            JOIN [edfi].[EducationOrganizationPeerAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEducationServiceCenter] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEducationServiceCenter]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEducationServiceCenter];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEducationServiceCenter]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EducationServiceCenterKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EducationServiceCenter] AS T
            USING
            (
                SELECT T.[EducationServiceCenterId]
                , T.[StateEducationAgencyId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[EducationServiceCenter] AS T
                JOIN [edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[EducationServiceCenterId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationServiceCenterId]
                    , [StateEducationAgencyId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationServiceCenterId]
                    , S.[StateEducationAgencyId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationServiceCenter]
                , INSERTED.[EducationServiceCenterId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EducationServiceCenterSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationServiceCenter]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationServiceCenter]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EducationServiceCenter] AS T
            JOIN [edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[EducationServiceCenter] AS S
                ON P.[EducationOrganizationId] = S.[EducationServiceCenterId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEmploymentStatusDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEmploymentStatusDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEmploymentStatusDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEmploymentStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EmploymentStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EmploymentStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EmploymentStatusType].[ShortDescription] AS EmploymentStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[EmploymentStatusDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [edfi].[EmploymentStatusType] AS EmploymentStatusType
                    ON [EmploymentStatusType].[EmploymentStatusTypeId] = T.[EmploymentStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EmploymentStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EmploymentStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EmploymentStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EmploymentStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EmploymentStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EmploymentStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EmploymentStatusDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[EmploymentStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[EmploymentStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbEntryTypeDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbEntryTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbEntryTypeDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbEntryTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_EntryTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[EntryTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EntryType].[ShortDescription] AS EntryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[EntryTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EntryTypeDescriptorId]
                LEFT JOIN [edfi].[EntryType] AS EntryType
                    ON [EntryType].[EntryTypeId] = T.[EntryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EntryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EntryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EntryTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[EntryTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EntryTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EntryTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[EntryTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[EntryTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[EntryTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbExitWithdrawTypeDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbExitWithdrawTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbExitWithdrawTypeDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbExitWithdrawTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ExitWithdrawTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ExitWithdrawTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ExitWithdrawType].[ShortDescription] AS ExitWithdrawType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ExitWithdrawTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ExitWithdrawTypeDescriptorId]
                LEFT JOIN [edfi].[ExitWithdrawType] AS ExitWithdrawType
                    ON [ExitWithdrawType].[ExitWithdrawTypeId] = T.[ExitWithdrawTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ExitWithdrawType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ExitWithdrawType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExitWithdrawTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ExitWithdrawTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExitWithdrawTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExitWithdrawTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ExitWithdrawTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ExitWithdrawTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[ExitWithdrawTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbFederalLocaleCodeDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbFederalLocaleCodeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbFederalLocaleCodeDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbFederalLocaleCodeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_FederalLocaleCodeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[FederalLocaleCodeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [FederalLocaleCodeType].[ShortDescription] AS FederalLocaleCodeType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[FederalLocaleCodeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[FederalLocaleCodeDescriptorId]
                LEFT JOIN [edfi].[FederalLocaleCodeType] AS FederalLocaleCodeType
                    ON [FederalLocaleCodeType].[FederalLocaleCodeTypeId] = T.[FederalLocaleCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [FederalLocaleCodeType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[FederalLocaleCodeType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_FederalLocaleCodeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[FederalLocaleCodeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_FederalLocaleCodeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_FederalLocaleCodeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[FederalLocaleCodeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[FederalLocaleCodeDescriptor] AS S
                ON P.[DescriptorId] = S.[FederalLocaleCodeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbFeederSchoolAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbFeederSchoolAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbFeederSchoolAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbFeederSchoolAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_FeederSchoolAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[FeederSchoolAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[FeederSchoolId]
                , T.[SchoolId]
                , T.[EndDate]
                , T.[FeederRelationshipDescription]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[FeederSchoolAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [FeederSchoolId]
                    , [SchoolId]
                    , [EndDate]
                    , [FeederRelationshipDescription]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[FeederSchoolId]
                    , S.[SchoolId]
                    , S.[EndDate]
                    , S.[FeederRelationshipDescription]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_FeederSchoolAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[FeederSchoolId]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[FeederSchoolAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_FeederSchoolAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_FeederSchoolAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[FeederSchoolAssociation] AS T
            JOIN [edfi].[FeederSchoolAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGrade] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGrade]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGrade];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGrade]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Grade] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , [GradeType].[ShortDescription] AS GradeType
                , T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[LetterGradeEarned]
                , T.[NumericGradeEarned]
                , T.[DiagnosticStatement]
                , [PerformanceBaseConversionType].[ShortDescription] AS PerformanceBaseConversionType
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Grade] AS T
                JOIN [edfi].[GradeType] AS GradeType
                    ON [GradeType].[GradeTypeId] = T.[GradeTypeId]
                JOIN .[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[PerformanceBaseConversionType] AS PerformanceBaseConversionType
                    ON [PerformanceBaseConversionType].[PerformanceBaseConversionTypeId] = T.[PerformanceBaseConversionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [GradeType]
                    , [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [LetterGradeEarned]
                    , [NumericGradeEarned]
                    , [DiagnosticStatement]
                    , [PerformanceBaseConversionType]
                    , [TermDescriptorNamespace]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[GradeType]
                    , S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[LetterGradeEarned]
                    , S.[NumericGradeEarned]
                    , S.[DiagnosticStatement]
                    , S.[PerformanceBaseConversionType]
                    , S.[TermDescriptorNamespace]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Grade]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[GradeType]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradeSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Grade]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Grade]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Grade] AS T
            JOIN [edfi].[Grade] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradebookEntry] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGradebookEntry]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGradebookEntry];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGradebookEntry]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradebookEntryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradebookEntry] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[DateAssigned]
                , T.[GradebookEntryTitle]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , [GradebookEntryType].[ShortDescription] AS GradebookEntryType
                , T.[Description]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[BeginDate]
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[GradebookEntry] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[GradebookEntryType] AS GradebookEntryType
                    ON [GradebookEntryType].[GradebookEntryTypeId] = T.[GradebookEntryTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [DateAssigned]
                    , [GradebookEntryTitle]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [GradebookEntryType]
                    , [Description]
                    , [GradingPeriodDescriptorCodeValue]
                    , [BeginDate]
                    , [GradingPeriodDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[DateAssigned]
                    , S.[GradebookEntryTitle]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[GradebookEntryType]
                    , S.[Description]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[BeginDate]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradebookEntry]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[DateAssigned]
                , INSERTED.[GradebookEntryTitle]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradebookEntrySnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradebookEntry]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradebookEntry]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradebookEntry] AS T
            JOIN [edfi].[GradebookEntry] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbGradebookEntryLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGradebookEntryLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbGradebookEntryExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradebookEntryLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGradebookEntryLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGradebookEntryLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGradebookEntryLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradebookEntryLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GradebookEntryLearningStandard]
            (
                [tid_GradebookEntry]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GradebookEntry]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LearningStandardId], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , GradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , GradebookEntry.[Id] AS ParentId
                FROM [edfi].[GradebookEntryLearningStandard] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[GradebookEntry] AS GradebookEntry
                    ON GradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND GradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND GradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND GradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND GradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND GradebookEntry.[SchoolId] = T.[SchoolId]
                    AND GradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND GradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND GradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND GradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradebookEntryLearningObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGradebookEntryLearningObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGradebookEntryLearningObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGradebookEntryLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradebookEntryLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GradebookEntryLearningObjective]
            (
                [tid_GradebookEntry]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GradebookEntry]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LocalCourseCode], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , GradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , GradebookEntry.[Id] AS ParentId
                FROM [edfi].[GradebookEntryLearningObjective] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[GradebookEntry] AS GradebookEntry
                    ON GradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND GradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND GradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND GradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND GradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND GradebookEntry.[SchoolId] = T.[SchoolId]
                    AND GradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND GradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND GradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND GradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbGradebookEntryExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbGradebookEntryExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbGradebookEntryExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbGradebookEntryExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_GradebookEntryExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[GradebookEntryExtension]
            (
                [tid_GradebookEntry]
                , [DueDate]
                , [ProgramGatewayDescriptorCodeValue]
                , [ProgramGatewayDescriptorNamespace]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GradebookEntry]
                , S.[DueDate]
                , S.[ProgramGatewayDescriptorCodeValue]
                , S.[ProgramGatewayDescriptorNamespace]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[DueDate], ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue, ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , GradebookEntry.[Id] AS ParentId
                FROM [extension].[GradebookEntryExtension] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON ProgramGatewayDescriptor.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN [edfi].[GradebookEntry] AS GradebookEntry
                    ON GradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND GradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND GradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND GradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND GradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND GradebookEntry.[SchoolId] = T.[SchoolId]
                    AND GradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND GradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND GradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND GradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradeLevelDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGradeLevelDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGradeLevelDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGradeLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradeLevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradeLevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [GradeLevelType].[ShortDescription] AS GradeLevelType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[GradeLevelDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[GradeLevelType] AS GradeLevelType
                    ON [GradeLevelType].[GradeLevelTypeId] = T.[GradeLevelTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [GradeLevelType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[GradeLevelType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradeLevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradeLevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradeLevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradeLevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradeLevelDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[GradeLevelDescriptor] AS S
                ON P.[DescriptorId] = S.[GradeLevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradingPeriod] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGradingPeriod]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGradingPeriod];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGradingPeriod]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradingPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradingPeriod] AS T
            USING
            (
                SELECT T.[BeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[SchoolId]
                , T.[EndDate]
                , T.[TotalInstructionalDays]
                , T.[PeriodSequence]
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[GradingPeriod] AS T
                JOIN .[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [SchoolId]
                    , [EndDate]
                    , [TotalInstructionalDays]
                    , [PeriodSequence]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[EndDate]
                    , S.[TotalInstructionalDays]
                    , S.[PeriodSequence]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradingPeriod]
                , INSERTED.[BeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradingPeriodSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradingPeriod]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradingPeriod]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradingPeriod] AS T
            JOIN [edfi].[GradingPeriod] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGradingPeriodDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGradingPeriodDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGradingPeriodDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGradingPeriodDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GradingPeriodDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GradingPeriodDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [GradingPeriodType].[ShortDescription] AS GradingPeriodType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[GradingPeriodDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [edfi].[GradingPeriodType] AS GradingPeriodType
                    ON [GradingPeriodType].[GradingPeriodTypeId] = T.[GradingPeriodTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [GradingPeriodType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[GradingPeriodType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GradingPeriodDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GradingPeriodDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GradingPeriodDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GradingPeriodDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GradingPeriodDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[GradingPeriodDescriptor] AS S
                ON P.[DescriptorId] = S.[GradingPeriodDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlan] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlan]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlan];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlan]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GraduationPlan] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue
                , T.[GraduationSchoolYear]
                , T.[IndividualPlan]
                , T.[TotalRequiredCredits]
                , [TotalRequiredCreditType].[ShortDescription] AS TotalRequiredCreditType
                , T.[TotalRequiredCreditConversion]
                , GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[GraduationPlan] AS T
                JOIN .[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON [GraduationPlanTypeDescriptor].[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [edfi].[CreditType] AS TotalRequiredCreditType
                    ON [TotalRequiredCreditType].[CreditTypeId] = T.[TotalRequiredCreditTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [GraduationPlanTypeDescriptorCodeValue]
                    , [GraduationSchoolYear]
                    , [IndividualPlan]
                    , [TotalRequiredCredits]
                    , [TotalRequiredCreditType]
                    , [TotalRequiredCreditConversion]
                    , [GraduationPlanTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[GraduationPlanTypeDescriptorCodeValue]
                    , S.[GraduationSchoolYear]
                    , S.[IndividualPlan]
                    , S.[TotalRequiredCredits]
                    , S.[TotalRequiredCreditType]
                    , S.[TotalRequiredCreditConversion]
                    , S.[GraduationPlanTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GraduationPlan]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[GraduationPlanTypeDescriptorCodeValue]
                , INSERTED.[GraduationSchoolYear]
                , INSERTED.[GraduationPlanTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GraduationPlanSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GraduationPlan]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GraduationPlan]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GraduationPlan] AS T
            JOIN [edfi].[GraduationPlan] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbGraduationPlanCreditsBySubject] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanCreditsByCourse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanRequiredAssessment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanCreditsBySubject] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlanCreditsBySubject]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsBySubject];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsBySubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanCreditsBySubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanCreditsBySubject]
            (
                [tid_GraduationPlan]
                , [AcademicSubjectDescriptorCodeValue]
                , [Credits]
                , [CreditType]
                , [CreditConversion]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlan]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Credits]
                , S.[CreditType]
                , S.[CreditConversion]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Credits], CreditType.[ShortDescription] AS CreditType, T.[CreditConversion], GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , GraduationPlan.[LastModifiedDate] AS ParentLastModifiedDate
                , GraduationPlan.[Id] AS ParentId
                FROM [edfi].[GraduationPlanCreditsBySubject] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [edfi].[CreditType] AS CreditType
                    ON CreditType.[CreditTypeId] = T.[CreditTypeId]
                JOIN [edfi].[GraduationPlan] AS GraduationPlan
                    ON GraduationPlan.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND GraduationPlan.[GraduationPlanTypeDescriptorId] = T.[GraduationPlanTypeDescriptorId]
                    AND GraduationPlan.[GraduationSchoolYear] = T.[GraduationSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanCreditsByCourse] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlanCreditsByCourse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsByCourse];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsByCourse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanCreditsByCourseKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanCreditsByCourse]
            (
                [tid_GraduationPlan]
                , [CourseSetName]
                , [Credits]
                , [CreditType]
                , [CreditConversion]
                , [WhenTakenGradeLevelDescriptorCodeValue]
                , [WhenTakenGradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_GraduationPlanCreditsByCourse]
            INTO @Tids
            SELECT T.[tid_GraduationPlan]
                , S.[CourseSetName]
                , S.[Credits]
                , S.[CreditType]
                , S.[CreditConversion]
                , S.[WhenTakenGradeLevelDescriptorCodeValue]
                , S.[WhenTakenGradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseSetName], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Credits], CreditType.[ShortDescription] AS CreditType, T.[CreditConversion], WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue, WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace, GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , T.[CreateDate]
                , GraduationPlan.[LastModifiedDate] AS ParentLastModifiedDate
                , GraduationPlan.[Id] AS ParentId
                FROM [edfi].[GraduationPlanCreditsByCourse] AS T 
                JOIN [edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [edfi].[CreditType] AS CreditType
                    ON CreditType.[CreditTypeId] = T.[CreditTypeId]
                LEFT JOIN [edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON WhenTakenGradeLevelDescriptor.[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                JOIN [edfi].[GraduationPlan] AS GraduationPlan
                    ON GraduationPlan.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND GraduationPlan.[GraduationPlanTypeDescriptorId] = T.[GraduationPlanTypeDescriptorId]
                    AND GraduationPlan.[GraduationSchoolYear] = T.[GraduationSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_GraduationPlanCreditsByCourse]
                , S.[CourseSetName]
                , T.[EducationOrganizationId]
                , T.[GraduationPlanTypeDescriptorCodeValue]
                , T.[GraduationSchoolYear]
                , T.[GraduationPlanTypeDescriptorNamespace]
            FROM [t_edfi].[GraduationPlanCreditsByCourse] AS S
            JOIN @pTids AS T
                ON S.[tid_GraduationPlan] = T.[tid_GraduationPlan]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_GraduationPlanCreditsByCourse] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanCreditsByCourseCourse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanCreditsByCourseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanCreditsByCourseCourseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanCreditsByCourseCourse]
            (
                [tid_GraduationPlanCreditsByCourse]
                , [CourseCode]
                , [CourseEducationOrganizationId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlanCreditsByCourse]
                , S.[CourseCode]
                , S.[CourseEducationOrganizationId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[CourseEducationOrganizationId], T.[CourseSetName], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[GraduationPlanCreditsByCourseCourse] AS T 
                JOIN [edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[CourseSetName] = S.[CourseSetName]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[GraduationPlanTypeDescriptorCodeValue] = S.[GraduationPlanTypeDescriptorCodeValue]
                AND T.[GraduationSchoolYear] = S.[GraduationSchoolYear]
                AND T.[GraduationPlanTypeDescriptorNamespace] = S.[GraduationPlanTypeDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanRequiredAssessment] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlanRequiredAssessment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessment];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessment]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanRequiredAssessmentKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanRequiredAssessment]
            (
                [tid_GraduationPlan]
                , [AcademicSubjectDescriptorCodeValue]
                , [AssessedGradeLevelDescriptorCodeValue]
                , [AssessmentTitle]
                , [Version]
                , [AssessedGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_GraduationPlanRequiredAssessment]
            INTO @Tids
            SELECT T.[tid_GraduationPlan]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AssessedGradeLevelDescriptorCodeValue]
                , S.[AssessmentTitle]
                , S.[Version]
                , S.[AssessedGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Version], GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , GraduationPlan.[LastModifiedDate] AS ParentLastModifiedDate
                , GraduationPlan.[Id] AS ParentId
                FROM [edfi].[GraduationPlanRequiredAssessment] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                JOIN [edfi].[GraduationPlan] AS GraduationPlan
                    ON GraduationPlan.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND GraduationPlan.[GraduationPlanTypeDescriptorId] = T.[GraduationPlanTypeDescriptorId]
                    AND GraduationPlan.[GraduationSchoolYear] = T.[GraduationSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_GraduationPlanRequiredAssessment]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AssessedGradeLevelDescriptorCodeValue]
                , S.[AssessmentTitle]
                , T.[EducationOrganizationId]
                , T.[GraduationPlanTypeDescriptorCodeValue]
                , T.[GraduationSchoolYear]
                , S.[Version]
                , T.[GraduationPlanTypeDescriptorNamespace]
                , S.[AssessedGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[GraduationPlanRequiredAssessment] AS S
            JOIN @pTids AS T
                ON S.[tid_GraduationPlan] = T.[tid_GraduationPlan]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_GraduationPlanRequiredAssessment] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessmentScore]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanRequiredAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanRequiredAssessmentScoreKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanRequiredAssessmentScore]
            (
                [tid_GraduationPlanRequiredAssessment]
                , [AssessmentReportingMethodType]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlanRequiredAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[GraduationPlanRequiredAssessmentScore] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[GraduationPlanTypeDescriptorCodeValue] = S.[GraduationPlanTypeDescriptorCodeValue]
                AND T.[GraduationSchoolYear] = S.[GraduationSchoolYear]
                AND T.[Version] = S.[Version]
                AND T.[GraduationPlanTypeDescriptorNamespace] = S.[GraduationPlanTypeDescriptorNamespace]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanRequiredAssessmentAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_GraduationPlanRequiredAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanRequiredAssessmentAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel]
            (
                [tid_GraduationPlanRequiredAssessment]
                , [PerformanceLevelDescriptorCodeValue]
                , [AssessmentReportingMethodType]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_GraduationPlanRequiredAssessment]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[AssessmentReportingMethodType]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[EducationOrganizationId], GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue, T.[GraduationSchoolYear], T.[Version], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON GraduationPlanTypeDescriptor.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                LEFT JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[GraduationPlanTypeDescriptorCodeValue] = S.[GraduationPlanTypeDescriptorCodeValue]
                AND T.[GraduationSchoolYear] = S.[GraduationSchoolYear]
                AND T.[Version] = S.[Version]
                AND T.[GraduationPlanTypeDescriptorNamespace] = S.[GraduationPlanTypeDescriptorNamespace]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbGraduationPlanTypeDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbGraduationPlanTypeDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbGraduationPlanTypeDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbGraduationPlanTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_GraduationPlanTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[GraduationPlanTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [GraduationPlanType].[ShortDescription] AS GraduationPlanType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[GraduationPlanTypeDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
                LEFT JOIN [edfi].[GraduationPlanType] AS GraduationPlanType
                    ON [GraduationPlanType].[GraduationPlanTypeId] = T.[GraduationPlanTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [GraduationPlanType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[GraduationPlanType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_GraduationPlanTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[GraduationPlanTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_GraduationPlanTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_GraduationPlanTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[GraduationPlanTypeDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[GraduationPlanTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[GraduationPlanTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbIntervention] ******/

IF OBJECT_ID('[t_edfi].[usp_dbIntervention]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbIntervention];
GO

CREATE PROCEDURE [t_edfi].[usp_dbIntervention]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Intervention] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionIdentificationCode]
                , [InterventionClassType].[ShortDescription] AS InterventionClassType
                , [DeliveryMethodType].[ShortDescription] AS DeliveryMethodType
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Intervention] AS T
                JOIN [edfi].[InterventionClassType] AS InterventionClassType
                    ON [InterventionClassType].[InterventionClassTypeId] = T.[InterventionClassTypeId]
                JOIN [edfi].[DeliveryMethodType] AS DeliveryMethodType
                    ON [DeliveryMethodType].[DeliveryMethodTypeId] = T.[DeliveryMethodTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionIdentificationCode]
                    , [InterventionClassType]
                    , [DeliveryMethodType]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionIdentificationCode]
                    , S.[InterventionClassType]
                    , S.[DeliveryMethodType]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Intervention]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[InterventionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Intervention]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Intervention]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Intervention] AS T
            JOIN [edfi].[Intervention] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbInterventionEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionDiagnosis] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPopulationServed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionInterventionPrescription] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionMeetingTime] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStaff] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionEducationContent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionEducationContent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionEducationContent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionEducationContent]
            (
                [tid_Intervention]
                , [ContentIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[ContentIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[EducationOrganizationId], T.[InterventionIdentificationCode]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionEducationContent] AS T 
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionLearningResourceMetadataURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionLearningResourceMetadataURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionLearningResourceMetadataURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionLearningResourceMetadataURI]
            (
                [tid_Intervention]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionLearningResourceMetadataURI] AS T 
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionURI]
            (
                [tid_Intervention]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[URI]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionURI] AS T 
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionDiagnosis] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionDiagnosis]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionDiagnosis];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionDiagnosis]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionDiagnosisKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionDiagnosis]
            (
                [tid_Intervention]
                , [DiagnosisDescriptorCodeValue]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], T.[InterventionIdentificationCode], DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionDiagnosis] AS T 
                JOIN [edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPopulationServed] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPopulationServed]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPopulationServed];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPopulationServed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPopulationServedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPopulationServed]
            (
                [tid_Intervention]
                , [PopulationServedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[PopulationServedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionPopulationServed] AS T 
                JOIN [edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionAppropriateSex] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionAppropriateSex]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionAppropriateSex];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionAppropriateSex]
            (
                [tid_Intervention]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionAppropriateSex] AS T 
                JOIN [edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionAppropriateGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionAppropriateGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionAppropriateGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionAppropriateGradeLevel]
            (
                [tid_Intervention]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionIdentificationCode], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionAppropriateGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionInterventionPrescription] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionInterventionPrescription]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionInterventionPrescription];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionInterventionPrescription]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionInterventionPrescriptionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionInterventionPrescription]
            (
                [tid_Intervention]
                , [InterventionPrescriptionEducationOrganizationId]
                , [InterventionPrescriptionIdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[InterventionPrescriptionEducationOrganizationId]
                , S.[InterventionPrescriptionIdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[InterventionPrescriptionEducationOrganizationId], T.[InterventionPrescriptionIdentificationCode]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionInterventionPrescription] AS T 
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionMeetingTime] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionMeetingTime]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionMeetingTime];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionMeetingTime]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionMeetingTimeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionMeetingTime]
            (
                [tid_Intervention]
                , [ClassPeriodName]
                , [SchoolId]
                , [AlternateDayName]
                , [StartTime]
                , [EndTime]
                , [OfficialAttendancePeriod]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[ClassPeriodName]
                , S.[SchoolId]
                , S.[AlternateDayName]
                , S.[StartTime]
                , S.[EndTime]
                , S.[OfficialAttendancePeriod]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[EducationOrganizationId], T.[InterventionIdentificationCode], T.[SchoolId], T.[AlternateDayName], T.[StartTime], T.[EndTime], T.[OfficialAttendancePeriod]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionMeetingTime] AS T 
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStaff] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStaff]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStaff];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStaff]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStaff]
            (
                [tid_Intervention]
                , [StaffUniqueId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Intervention]
                , S.[StaffUniqueId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionIdentificationCode], [Staff].[StaffUniqueId]
                , T.[CreateDate]
                , Intervention.[LastModifiedDate] AS ParentLastModifiedDate
                , Intervention.[Id] AS ParentId
                FROM [edfi].[InterventionStaff] AS T 
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[Intervention] AS Intervention
                    ON Intervention.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Intervention.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescription] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescription]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescription];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescription]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[InterventionPrescription] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionPrescriptionIdentificationCode]
                , [InterventionClassType].[ShortDescription] AS InterventionClassType
                , [DeliveryMethodType].[ShortDescription] AS DeliveryMethodType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[InterventionPrescription] AS T
                JOIN [edfi].[InterventionClassType] AS InterventionClassType
                    ON [InterventionClassType].[InterventionClassTypeId] = T.[InterventionClassTypeId]
                JOIN [edfi].[DeliveryMethodType] AS DeliveryMethodType
                    ON [DeliveryMethodType].[DeliveryMethodTypeId] = T.[DeliveryMethodTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionPrescriptionIdentificationCode]
                    , [InterventionClassType]
                    , [DeliveryMethodType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionPrescriptionIdentificationCode]
                    , S.[InterventionClassType]
                    , S.[DeliveryMethodType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_InterventionPrescription]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionPrescriptionIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[InterventionPrescriptionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_InterventionPrescription]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_InterventionPrescription]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[InterventionPrescription] AS T
            JOIN [edfi].[InterventionPrescription] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbInterventionPrescriptionEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionDiagnosis] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionPopulationServed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionEducationContent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescriptionEducationContent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionEducationContent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionEducationContent]
            (
                [tid_InterventionPrescription]
                , [ContentIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[ContentIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode]
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [edfi].[InterventionPrescriptionEducationContent] AS T 
                JOIN [edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionLearningResourceMetadataURI]
            (
                [tid_InterventionPrescription]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [edfi].[InterventionPrescriptionLearningResourceMetadataURI] AS T 
                JOIN [edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescriptionURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionURI]
            (
                [tid_InterventionPrescription]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], T.[URI]
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [edfi].[InterventionPrescriptionURI] AS T 
                JOIN [edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionDiagnosis] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescriptionDiagnosis]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionDiagnosis];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionDiagnosis]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionDiagnosisKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionDiagnosis]
            (
                [tid_InterventionPrescription]
                , [DiagnosisDescriptorCodeValue]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [edfi].[InterventionPrescriptionDiagnosis] AS T 
                JOIN [edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionPopulationServed] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescriptionPopulationServed]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionPopulationServed];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionPopulationServed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionPopulationServedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionPopulationServed]
            (
                [tid_InterventionPrescription]
                , [PopulationServedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[PopulationServedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [edfi].[InterventionPrescriptionPopulationServed] AS T 
                JOIN [edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionAppropriateSex] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescriptionAppropriateSex]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionAppropriateSex];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionAppropriateSex]
            (
                [tid_InterventionPrescription]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionPrescriptionIdentificationCode], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [edfi].[InterventionPrescriptionAppropriateSex] AS T 
                JOIN [edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionPrescriptionAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionPrescriptionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionPrescriptionAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionPrescriptionAppropriateGradeLevel]
            (
                [tid_InterventionPrescription]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionPrescription]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionPrescriptionIdentificationCode], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , InterventionPrescription.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionPrescription.[Id] AS ParentId
                FROM [edfi].[InterventionPrescriptionAppropriateGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[InterventionPrescription] AS InterventionPrescription
                    ON InterventionPrescription.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionPrescription.[InterventionPrescriptionIdentificationCode] = T.[InterventionPrescriptionIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudy] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudy]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudy];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudy]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[InterventionStudy] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionStudyIdentificationCode]
                , T.[InterventionPrescriptionEducationOrganizationId]
                , T.[InterventionPrescriptionIdentificationCode]
                , T.[Participants]
                , [DeliveryMethodType].[ShortDescription] AS DeliveryMethodType
                , [InterventionClassType].[ShortDescription] AS InterventionClassType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[InterventionStudy] AS T
                JOIN [edfi].[DeliveryMethodType] AS DeliveryMethodType
                    ON [DeliveryMethodType].[DeliveryMethodTypeId] = T.[DeliveryMethodTypeId]
                JOIN [edfi].[InterventionClassType] AS InterventionClassType
                    ON [InterventionClassType].[InterventionClassTypeId] = T.[InterventionClassTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionStudyIdentificationCode]
                    , [InterventionPrescriptionEducationOrganizationId]
                    , [InterventionPrescriptionIdentificationCode]
                    , [Participants]
                    , [DeliveryMethodType]
                    , [InterventionClassType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionStudyIdentificationCode]
                    , S.[InterventionPrescriptionEducationOrganizationId]
                    , S.[InterventionPrescriptionIdentificationCode]
                    , S.[Participants]
                    , S.[DeliveryMethodType]
                    , S.[InterventionClassType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_InterventionStudy]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionStudyIdentificationCode]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[InterventionStudySnapshotRecord]
            (
                [SnapshotId]
                , [tid_InterventionStudy]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_InterventionStudy]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[InterventionStudy] AS T
            JOIN [edfi].[InterventionStudy] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbInterventionStudyEducationContent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyURI] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyInterventionEffectiveness] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyPopulationServed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyAppropriateSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudyStateAbbreviation] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyEducationContent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyEducationContent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyEducationContent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyEducationContent]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyEducationContentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyEducationContent]
            (
                [tid_InterventionStudy]
                , [ContentIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[ContentIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentIdentifier], T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode]
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyEducationContent] AS T 
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyLearningResourceMetadataURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyLearningResourceMetadataURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyLearningResourceMetadataURI]
            (
                [tid_InterventionStudy]
                , [LearningResourceMetadataURI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[LearningResourceMetadataURI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], T.[LearningResourceMetadataURI]
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyLearningResourceMetadataURI] AS T 
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyURI] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyURI]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyURI];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyURI]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyURIKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyURI]
            (
                [tid_InterventionStudy]
                , [URI]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[URI]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], T.[URI]
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyURI] AS T 
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyInterventionEffectiveness] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyInterventionEffectiveness]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyInterventionEffectiveness];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyInterventionEffectiveness]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyInterventionEffectivenessKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyInterventionEffectiveness]
            (
                [tid_InterventionStudy]
                , [DiagnosisDescriptorCodeValue]
                , [GradeLevelDescriptorCodeValue]
                , [PopulationServedType]
                , [ImprovementIndex]
                , [InterventionEffectivenessRatingType]
                , [GradeLevelDescriptorNamespace]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[PopulationServedType]
                , S.[ImprovementIndex]
                , S.[InterventionEffectivenessRatingType]
                , S.[GradeLevelDescriptorNamespace]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionStudyIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType, T.[ImprovementIndex], InterventionEffectivenessRatingType.[ShortDescription] AS InterventionEffectivenessRatingType, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace, DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyInterventionEffectiveness] AS T 
                JOIN [edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [edfi].[InterventionEffectivenessRatingType] AS InterventionEffectivenessRatingType
                    ON InterventionEffectivenessRatingType.[InterventionEffectivenessRatingTypeId] = T.[InterventionEffectivenessRatingTypeId]
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyAppropriateGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyAppropriateGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyAppropriateGradeLevel]
            (
                [tid_InterventionStudy]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionStudyIdentificationCode], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyAppropriateGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyPopulationServed] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyPopulationServed]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyPopulationServed];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyPopulationServed]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyPopulationServedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyPopulationServed]
            (
                [tid_InterventionStudy]
                , [PopulationServedType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[PopulationServedType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyPopulationServed] AS T 
                JOIN [edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyAppropriateSex] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyAppropriateSex]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyAppropriateSex];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyAppropriateSex]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyAppropriateSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyAppropriateSex]
            (
                [tid_InterventionStudy]
                , [SexType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[SexType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], SexType.[ShortDescription] AS SexType
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyAppropriateSex] AS T 
                JOIN [edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbInterventionStudyStateAbbreviation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbInterventionStudyStateAbbreviation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbInterventionStudyStateAbbreviation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbInterventionStudyStateAbbreviation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_InterventionStudyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_InterventionStudyStateAbbreviationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[InterventionStudyStateAbbreviation]
            (
                [tid_InterventionStudy]
                , [StateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_InterventionStudy]
                , S.[StateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[InterventionStudyIdentificationCode], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType
                , T.[CreateDate]
                , InterventionStudy.[LastModifiedDate] AS ParentLastModifiedDate
                , InterventionStudy.[Id] AS ParentId
                FROM [edfi].[InterventionStudyStateAbbreviation] AS T 
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [edfi].[InterventionStudy] AS InterventionStudy
                    ON InterventionStudy.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND InterventionStudy.[InterventionStudyIdentificationCode] = T.[InterventionStudyIdentificationCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLanguageDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLanguageDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLanguageDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLanguageDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LanguageDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LanguageDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LanguageType].[ShortDescription] AS LanguageType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[LanguageDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LanguageDescriptorId]
                LEFT JOIN [edfi].[LanguageType] AS LanguageType
                    ON [LanguageType].[LanguageTypeId] = T.[LanguageTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LanguageType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LanguageType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LanguageDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LanguageDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LanguageDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LanguageDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LanguageDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[LanguageDescriptor] AS S
                ON P.[DescriptorId] = S.[LanguageDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LearningObjective] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[Objective]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[LearningObjectiveId]
                , T.[Description]
                , T.[Nomenclature]
                , T.[SuccessCriteria]
                , T.[ParentObjective]
                , ParentAcademicSubjectDescriptor.[CodeValue] AS ParentAcademicSubjectDescriptorCodeValue
                , ParentObjectiveGradeLevelDescriptor.[CodeValue] AS ParentObjectiveGradeLevelDescriptorCodeValue
                , T.[Namespace]
                , ParentObjectiveGradeLevelDescriptor.[Namespace] AS ParentObjectiveGradeLevelDescriptorNamespace
                , ParentAcademicSubjectDescriptor.[Namespace] AS ParentAcademicSubjectDescriptorNamespace
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[LearningObjective] AS T
                JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN .[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ParentAcademicSubjectDescriptor
                    ON [ParentAcademicSubjectDescriptor].[DescriptorId] = T.[ParentAcademicSubjectDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ParentObjectiveGradeLevelDescriptor
                    ON [ParentObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ParentObjectiveGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [Objective]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [LearningObjectiveId]
                    , [Description]
                    , [Nomenclature]
                    , [SuccessCriteria]
                    , [ParentObjective]
                    , [ParentAcademicSubjectDescriptorCodeValue]
                    , [ParentObjectiveGradeLevelDescriptorCodeValue]
                    , [Namespace]
                    , [ParentObjectiveGradeLevelDescriptorNamespace]
                    , [ParentAcademicSubjectDescriptorNamespace]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[Objective]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[LearningObjectiveId]
                    , S.[Description]
                    , S.[Nomenclature]
                    , S.[SuccessCriteria]
                    , S.[ParentObjective]
                    , S.[ParentAcademicSubjectDescriptorCodeValue]
                    , S.[ParentObjectiveGradeLevelDescriptorCodeValue]
                    , S.[Namespace]
                    , S.[ParentObjectiveGradeLevelDescriptorNamespace]
                    , S.[ParentAcademicSubjectDescriptorNamespace]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LearningObjective]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LearningObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LearningObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LearningObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LearningObjective] AS T
            JOIN [edfi].[LearningObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningObjectiveContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningObjectiveLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjectiveContentStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningObjectiveContentStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningObjectiveContentStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjectiveContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningObjectiveKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningObjectiveContentStandard]
            (
                [tid_LearningObjective]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_LearningObjectiveContentStandard]
            INTO @Tids
            SELECT T.[tid_LearningObjective]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate], ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , LearningObjective.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningObjective.[Id] AS ParentId
                FROM [edfi].[LearningObjectiveContentStandard] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                LEFT JOIN [edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [edfi].[LearningObjective] AS LearningObjective
                    ON LearningObjective.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND LearningObjective.[Objective] = T.[Objective]
                    AND LearningObjective.[ObjectiveGradeLevelDescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_LearningObjectiveContentStandard]
                , T.[AcademicSubjectDescriptorCodeValue]
                , T.[Objective]
                , T.[ObjectiveGradeLevelDescriptorCodeValue]
                , T.[ObjectiveGradeLevelDescriptorNamespace]
                , T.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[LearningObjectiveContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_LearningObjective] = T.[tid_LearningObjective]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_LearningObjectiveContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningObjectiveContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjectiveContentStandardAuthor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningObjectiveContentStandardAuthor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningObjectiveContentStandardAuthor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjectiveContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningObjectiveContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningObjectiveContentStandardAuthor]
            (
                [tid_LearningObjectiveContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningObjectiveContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[Author], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[LearningObjectiveContentStandardAuthor] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[Objective] = S.[Objective]
                AND T.[ObjectiveGradeLevelDescriptorCodeValue] = S.[ObjectiveGradeLevelDescriptorCodeValue]
                AND T.[ObjectiveGradeLevelDescriptorNamespace] = S.[ObjectiveGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningObjectiveLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningObjectiveLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningObjectiveLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningObjectiveLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningObjectiveKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningObjectiveLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningObjectiveLearningStandard]
            (
                [tid_LearningObjective]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningObjective]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[LearningStandardId], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , LearningObjective.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningObjective.[Id] AS ParentId
                FROM [edfi].[LearningObjectiveLearningStandard] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [edfi].[LearningObjective] AS LearningObjective
                    ON LearningObjective.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND LearningObjective.[Objective] = T.[Objective]
                    AND LearningObjective.[ObjectiveGradeLevelDescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandard]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LearningStandard] AS T
            USING
            (
                SELECT T.[LearningStandardId]
                , T.[Description]
                , T.[LearningStandardItemCode]
                , T.[URI]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[CourseTitle]
                , T.[SuccessCriteria]
                , T.[ParentLearningStandardId]
                , T.[Namespace]
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[LearningStandard] AS T
                JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [LearningStandardId]
                    , [Description]
                    , [LearningStandardItemCode]
                    , [URI]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CourseTitle]
                    , [SuccessCriteria]
                    , [ParentLearningStandardId]
                    , [Namespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[LearningStandardId]
                    , S.[Description]
                    , S.[LearningStandardItemCode]
                    , S.[URI]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CourseTitle]
                    , S.[SuccessCriteria]
                    , S.[ParentLearningStandardId]
                    , S.[Namespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LearningStandard]
                , INSERTED.[LearningStandardId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LearningStandardSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LearningStandard]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LearningStandard]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LearningStandard] AS T
            JOIN [edfi].[LearningStandard] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningStandardIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandardContentStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandardGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningStandardIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningStandardIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardIdentificationCode]
            (
                [tid_LearningStandard]
                , [ContentStandardName]
                , [IdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandard]
                , S.[ContentStandardName]
                , S.[IdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ContentStandardName], T.[IdentificationCode], T.[LearningStandardId]
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [edfi].[LearningStandardIdentificationCode] AS T 
                JOIN [edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardContentStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningStandardContentStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningStandardContentStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardContentStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardContentStandardKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardContentStandard]
            (
                [tid_LearningStandard]
                , [Title]
                , [Version]
                , [URI]
                , [PublicationDate]
                , [PublicationYear]
                , [PublicationStatusType]
                , [MandatingEducationOrganizationId]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_LearningStandardContentStandard]
            INTO @Tids
            SELECT T.[tid_LearningStandard]
                , S.[Title]
                , S.[Version]
                , S.[URI]
                , S.[PublicationDate]
                , S.[PublicationYear]
                , S.[PublicationStatusType]
                , S.[MandatingEducationOrganizationId]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[LearningStandardId], T.[Title], T.[Version], T.[URI], T.[PublicationDate], T.[PublicationYear], PublicationStatusType.[ShortDescription] AS PublicationStatusType, T.[MandatingEducationOrganizationId], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [edfi].[LearningStandardContentStandard] AS T 
                LEFT JOIN [edfi].[PublicationStatusType] AS PublicationStatusType
                    ON PublicationStatusType.[PublicationStatusTypeId] = T.[PublicationStatusTypeId]
                JOIN [edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_LearningStandardContentStandard]
                , T.[LearningStandardId]
            FROM [t_edfi].[LearningStandardContentStandard] AS S
            JOIN @pTids AS T
                ON S.[tid_LearningStandard] = T.[tid_LearningStandard]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_LearningStandardContentStandard] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbLearningStandardContentStandardAuthor] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardContentStandardAuthor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningStandardContentStandardAuthor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningStandardContentStandardAuthor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardContentStandardAuthor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardContentStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardContentStandardAuthorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardContentStandardAuthor]
            (
                [tid_LearningStandardContentStandard]
                , [Author]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandardContentStandard]
                , S.[Author]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[Author], T.[LearningStandardId]
                , T.[CreateDate]
                FROM [edfi].[LearningStandardContentStandardAuthor] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[LearningStandardId] = S.[LearningStandardId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningStandardGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningStandardGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardGradeLevel]
            (
                [tid_LearningStandard]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandard]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[LearningStandardId], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [edfi].[LearningStandardGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLearningStandardPrerequisiteLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LearningStandardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LearningStandardPrerequisiteLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LearningStandardPrerequisiteLearningStandard]
            (
                [tid_LearningStandard]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LearningStandard]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[LearningStandardId], T.[PrerequisiteLearningStandardId]
                , T.[CreateDate]
                , LearningStandard.[LastModifiedDate] AS ParentLastModifiedDate
                , LearningStandard.[Id] AS ParentId
                FROM [edfi].[LearningStandardPrerequisiteLearningStandard] AS T 
                JOIN [edfi].[LearningStandard] AS LearningStandard
                    ON LearningStandard.[LearningStandardId] = T.[LearningStandardId]
                    AND LearningStandard.[LearningStandardId] = T.[PrerequisiteLearningStandardId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLeaveEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLeaveEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLeaveEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLeaveEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LeaveEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LeaveEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , [LeaveEventCategoryType].[ShortDescription] AS LeaveEventCategoryType
                , [Staff].[StaffUniqueId]
                , T.[LeaveEventReason]
                , T.[HoursOnLeave]
                , T.[SubstituteAssigned]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[LeaveEvent] AS T
                JOIN [edfi].[LeaveEventCategoryType] AS LeaveEventCategoryType
                    ON [LeaveEventCategoryType].[LeaveEventCategoryTypeId] = T.[LeaveEventCategoryTypeId]
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [LeaveEventCategoryType]
                    , [StaffUniqueId]
                    , [LeaveEventReason]
                    , [HoursOnLeave]
                    , [SubstituteAssigned]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[LeaveEventCategoryType]
                    , S.[StaffUniqueId]
                    , S.[LeaveEventReason]
                    , S.[HoursOnLeave]
                    , S.[SubstituteAssigned]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LeaveEvent]
                , INSERTED.[EventDate]
                , INSERTED.[LeaveEventCategoryType]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LeaveEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LeaveEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LeaveEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LeaveEvent] AS T
            JOIN [edfi].[LeaveEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbLeaveEventExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbLeaveEventExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbLeaveEventExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbLeaveEventExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbLeaveEventExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LeaveEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_LeaveEventExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[LeaveEventExtension]
            (
                [tid_LeaveEvent]
                , [PayCodeID]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LeaveEvent]
                , S.[PayCodeID]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], LeaveEventCategoryType.[ShortDescription] AS LeaveEventCategoryType, [Staff].[StaffUniqueId], T.[PayCodeID]
                , LeaveEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , LeaveEvent.[Id] AS ParentId
                FROM [extension].[LeaveEventExtension] AS T 
                JOIN [edfi].[LeaveEventCategoryType] AS LeaveEventCategoryType
                    ON LeaveEventCategoryType.[LeaveEventCategoryTypeId] = T.[LeaveEventCategoryTypeId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[LeaveEvent] AS LeaveEvent
                    ON LeaveEvent.[EventDate] = T.[EventDate]
                    AND LeaveEvent.[LeaveEventCategoryTypeId] = T.[LeaveEventCategoryTypeId]
                    AND LeaveEvent.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLevelDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLevelDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLevelDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[LevelDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LevelDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[LevelDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLevelDescriptorGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLevelDescriptorGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLevelDescriptorGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLevelDescriptorGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLevelDescriptorGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LevelDescriptorKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LevelDescriptorGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LevelDescriptorGradeLevel]
            (
                [tid_LevelDescriptor]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LevelDescriptor]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , LevelDescriptor.[CodeValue] AS LevelDescriptorCodeValue
                , LevelDescriptor.[Namespace] AS LevelDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[LevelDescriptorGradeLevel] AS T
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS LevelDescriptor
                    ON LevelDescriptor.[DescriptorId] = T.[LevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[CodeValue] = S.[LevelDescriptorCodeValue]
                AND T.[Namespace] = S.[LevelDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLevelOfEducationDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLevelOfEducationDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLevelOfEducationDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLevelOfEducationDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LevelOfEducationDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LevelOfEducationDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LevelOfEducationType].[ShortDescription] AS LevelOfEducationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[LevelOfEducationDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelOfEducationDescriptorId]
                LEFT JOIN [edfi].[LevelOfEducationType] AS LevelOfEducationType
                    ON [LevelOfEducationType].[LevelOfEducationTypeId] = T.[LevelOfEducationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LevelOfEducationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LevelOfEducationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelOfEducationDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LevelOfEducationDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelOfEducationDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelOfEducationDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LevelOfEducationDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[LevelOfEducationDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelOfEducationDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LimitedEnglishProficiencyDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LimitedEnglishProficiencyDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LimitedEnglishProficiencyType].[ShortDescription] AS LimitedEnglishProficiencyType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[LimitedEnglishProficiencyDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LimitedEnglishProficiencyDescriptorId]
                JOIN [edfi].[LimitedEnglishProficiencyType] AS LimitedEnglishProficiencyType
                    ON [LimitedEnglishProficiencyType].[LimitedEnglishProficiencyTypeId] = T.[LimitedEnglishProficiencyTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LimitedEnglishProficiencyType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LimitedEnglishProficiencyType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LimitedEnglishProficiencyDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LimitedEnglishProficiencyDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LimitedEnglishProficiencyDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LimitedEnglishProficiencyDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LimitedEnglishProficiencyDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[LimitedEnglishProficiencyDescriptor] AS S
                ON P.[DescriptorId] = S.[LimitedEnglishProficiencyDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocalEducationAgency] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLocalEducationAgency]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLocalEducationAgency];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLocalEducationAgency]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocalEducationAgencyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[LocalEducationAgency] AS T
            USING
            (
                SELECT T.[LocalEducationAgencyId]
                , [LocalEducationAgencyCategoryType].[ShortDescription] AS LocalEducationAgencyCategoryType
                , [CharterStatusType].[ShortDescription] AS CharterStatusType
                , T.[ParentLocalEducationAgencyId]
                , T.[EducationServiceCenterId]
                , T.[StateEducationAgencyId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[LocalEducationAgency] AS T
                JOIN [edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[LocalEducationAgencyId]
                JOIN [edfi].[LocalEducationAgencyCategoryType] AS LocalEducationAgencyCategoryType
                    ON [LocalEducationAgencyCategoryType].[LocalEducationAgencyCategoryTypeId] = T.[LocalEducationAgencyCategoryTypeId]
                LEFT JOIN [edfi].[CharterStatusType] AS CharterStatusType
                    ON [CharterStatusType].[CharterStatusTypeId] = T.[CharterStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [LocalEducationAgencyId]
                    , [LocalEducationAgencyCategoryType]
                    , [CharterStatusType]
                    , [ParentLocalEducationAgencyId]
                    , [EducationServiceCenterId]
                    , [StateEducationAgencyId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[LocalEducationAgencyId]
                    , S.[LocalEducationAgencyCategoryType]
                    , S.[CharterStatusType]
                    , S.[ParentLocalEducationAgencyId]
                    , S.[EducationServiceCenterId]
                    , S.[StateEducationAgencyId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LocalEducationAgency]
                , INSERTED.[LocalEducationAgencyId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LocalEducationAgencySnapshotRecord]
            (
                [SnapshotId]
                , [tid_LocalEducationAgency]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LocalEducationAgency]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[LocalEducationAgency] AS T
            JOIN [edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[LocalEducationAgency] AS S
                ON P.[EducationOrganizationId] = S.[LocalEducationAgencyId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbLocalEducationAgencyAccountability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbLocalEducationAgencyFederalFunds] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocalEducationAgencyAccountability] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLocalEducationAgencyAccountability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLocalEducationAgencyAccountability];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLocalEducationAgencyAccountability]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LocalEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocalEducationAgencyAccountabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LocalEducationAgencyAccountability]
            (
                [tid_LocalEducationAgency]
                , [SchoolYear]
                , [GunFreeSchoolsActReportingStatusType]
                , [SchoolChoiceImplementStatusType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LocalEducationAgency]
                , S.[SchoolYear]
                , S.[GunFreeSchoolsActReportingStatusType]
                , S.[SchoolChoiceImplementStatusType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[LocalEducationAgencyId], T.[SchoolYear], GunFreeSchoolsActReportingStatusType.[ShortDescription] AS GunFreeSchoolsActReportingStatusType, SchoolChoiceImplementStatusType.[ShortDescription] AS SchoolChoiceImplementStatusType
                , T.[CreateDate]
                FROM [edfi].[LocalEducationAgencyAccountability] AS T 
                LEFT JOIN [edfi].[GunFreeSchoolsActReportingStatusType] AS GunFreeSchoolsActReportingStatusType
                    ON GunFreeSchoolsActReportingStatusType.[GunFreeSchoolsActReportingStatusTypeId] = T.[GunFreeSchoolsActReportingStatusTypeId]
                LEFT JOIN [edfi].[SchoolChoiceImplementStatusType] AS SchoolChoiceImplementStatusType
                    ON SchoolChoiceImplementStatusType.[SchoolChoiceImplementStatusTypeId] = T.[SchoolChoiceImplementStatusTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LocalEducationAgencyId] = S.[LocalEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocalEducationAgencyFederalFunds] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLocalEducationAgencyFederalFunds]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLocalEducationAgencyFederalFunds];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLocalEducationAgencyFederalFunds]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_LocalEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocalEducationAgencyFederalFundsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[LocalEducationAgencyFederalFunds]
            (
                [tid_LocalEducationAgency]
                , [FiscalYear]
                , [InnovativeDollarsSpent]
                , [InnovativeDollarsSpentOnStrategicPriorities]
                , [InnovativeProgramsFundsReceived]
                , [SchoolImprovementAllocation]
                , [SchoolImprovementReservedFundsPercentage]
                , [SupplementalEducationalServicesFundsSpent]
                , [SupplementalEducationalServicesPerPupilExpenditure]
                , [StateAssessmentAdministrationFunding]
                , [CreateDate]
                , [LastModifiedDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_LocalEducationAgency]
                , S.[FiscalYear]
                , S.[InnovativeDollarsSpent]
                , S.[InnovativeDollarsSpentOnStrategicPriorities]
                , S.[InnovativeProgramsFundsReceived]
                , S.[SchoolImprovementAllocation]
                , S.[SchoolImprovementReservedFundsPercentage]
                , S.[SupplementalEducationalServicesFundsSpent]
                , S.[SupplementalEducationalServicesPerPupilExpenditure]
                , S.[StateAssessmentAdministrationFunding]
                , S.[CreateDate]
                , S.[LastModifiedDate]
                , S.[Id]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FiscalYear], T.[LocalEducationAgencyId], T.[InnovativeDollarsSpent], T.[InnovativeDollarsSpentOnStrategicPriorities], T.[InnovativeProgramsFundsReceived], T.[SchoolImprovementAllocation], T.[SchoolImprovementReservedFundsPercentage], T.[SupplementalEducationalServicesFundsSpent], T.[SupplementalEducationalServicesPerPupilExpenditure], T.[StateAssessmentAdministrationFunding]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[LocalEducationAgencyFederalFunds] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[LocalEducationAgencyId] = S.[LocalEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbLocation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbLocation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbLocation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbLocation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_LocationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Location] AS T
            USING
            (
                SELECT T.[ClassroomIdentificationCode]
                , T.[SchoolId]
                , T.[MaximumNumberOfSeats]
                , T.[OptimalNumberOfSeats]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Location] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassroomIdentificationCode]
                    , [SchoolId]
                    , [MaximumNumberOfSeats]
                    , [OptimalNumberOfSeats]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassroomIdentificationCode]
                    , S.[SchoolId]
                    , S.[MaximumNumberOfSeats]
                    , S.[OptimalNumberOfSeats]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Location]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[LocationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Location]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Location]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Location] AS T
            JOIN [edfi].[Location] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessment] ******/

IF OBJECT_ID('[t_edfi].[usp_dbObjectiveAssessment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbObjectiveAssessment];
GO

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ObjectiveAssessment] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , T.[IdentificationCode]
                , T.[Version]
                , T.[MaxRawScore]
                , T.[PercentOfAssessment]
                , T.[Nomenclature]
                , T.[Description]
                , T.[ParentIdentificationCode]
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[ObjectiveAssessment] AS T
                JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN .[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [IdentificationCode]
                    , [Version]
                    , [MaxRawScore]
                    , [PercentOfAssessment]
                    , [Nomenclature]
                    , [Description]
                    , [ParentIdentificationCode]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[IdentificationCode]
                    , S.[Version]
                    , S.[MaxRawScore]
                    , S.[PercentOfAssessment]
                    , S.[Nomenclature]
                    , S.[Description]
                    , S.[ParentIdentificationCode]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ObjectiveAssessment]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[IdentificationCode]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ObjectiveAssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ObjectiveAssessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ObjectiveAssessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ObjectiveAssessment] AS T
            JOIN [edfi].[ObjectiveAssessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessmentAssessmentItem] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessmentLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessmentLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentPerformanceLevel]
            (
                [tid_ObjectiveAssessment]
                , [AssessmentReportingMethodType]
                , [PerformanceLevelDescriptorCodeValue]
                , [MinimumScore]
                , [MaximumScore]
                , [ResultDatatypeType]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[ResultDatatypeType]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[IdentificationCode], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[Version], T.[MinimumScore], T.[MaximumScore], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [edfi].[ObjectiveAssessmentPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                LEFT JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentAssessmentItem] ******/

IF OBJECT_ID('[t_edfi].[usp_dbObjectiveAssessmentAssessmentItem]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentAssessmentItem];
GO

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentAssessmentItem]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentAssessmentItemKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentAssessmentItem]
            (
                [tid_ObjectiveAssessment]
                , [AssessmentItemIdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[AssessmentItemIdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentItemIdentificationCode], T.[AssessmentTitle], T.[IdentificationCode], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [edfi].[ObjectiveAssessmentAssessmentItem] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentLearningObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbObjectiveAssessmentLearningObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentLearningObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentLearningObjective]
            (
                [tid_ObjectiveAssessment]
                , [Objective]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[Objective]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], T.[Objective], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [edfi].[ObjectiveAssessmentLearningObjective] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbObjectiveAssessmentLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbObjectiveAssessmentLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbObjectiveAssessmentLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ObjectiveAssessmentLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ObjectiveAssessmentLearningStandard]
            (
                [tid_ObjectiveAssessment]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ObjectiveAssessment]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], T.[LearningStandardId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ObjectiveAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , ObjectiveAssessment.[Id] AS ParentId
                FROM [edfi].[ObjectiveAssessmentLearningStandard] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[ObjectiveAssessment] AS ObjectiveAssessment
                    ON ObjectiveAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND ObjectiveAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND ObjectiveAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND ObjectiveAssessment.[IdentificationCode] = T.[IdentificationCode]
                    AND ObjectiveAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbOpenStaffPosition] ******/

IF OBJECT_ID('[t_edfi].[usp_dbOpenStaffPosition]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbOpenStaffPosition];
GO

CREATE PROCEDURE [t_edfi].[usp_dbOpenStaffPosition]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_OpenStaffPositionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[OpenStaffPosition] AS T
            USING
            (
                SELECT T.[DatePosted]
                , T.[EducationOrganizationId]
                , EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue
                , T.[RequisitionNumber]
                , StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue
                , T.[PositionTitle]
                , ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue
                , T.[DatePostingRemoved]
                , [PostingResultType].[ShortDescription] AS PostingResultType
                , ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace
                , StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace
                , EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[OpenStaffPosition] AS T
                JOIN .[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON [EmploymentStatusDescriptor].[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN .[edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON [StaffClassificationDescriptor].[DescriptorId] = T.[StaffClassificationDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON [ProgramAssignmentDescriptor].[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                LEFT JOIN [edfi].[PostingResultType] AS PostingResultType
                    ON [PostingResultType].[PostingResultTypeId] = T.[PostingResultTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [DatePosted]
                    , [EducationOrganizationId]
                    , [EmploymentStatusDescriptorCodeValue]
                    , [RequisitionNumber]
                    , [StaffClassificationDescriptorCodeValue]
                    , [PositionTitle]
                    , [ProgramAssignmentDescriptorCodeValue]
                    , [DatePostingRemoved]
                    , [PostingResultType]
                    , [ProgramAssignmentDescriptorNamespace]
                    , [StaffClassificationDescriptorNamespace]
                    , [EmploymentStatusDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[DatePosted]
                    , S.[EducationOrganizationId]
                    , S.[EmploymentStatusDescriptorCodeValue]
                    , S.[RequisitionNumber]
                    , S.[StaffClassificationDescriptorCodeValue]
                    , S.[PositionTitle]
                    , S.[ProgramAssignmentDescriptorCodeValue]
                    , S.[DatePostingRemoved]
                    , S.[PostingResultType]
                    , S.[ProgramAssignmentDescriptorNamespace]
                    , S.[StaffClassificationDescriptorNamespace]
                    , S.[EmploymentStatusDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_OpenStaffPosition]
                , INSERTED.[DatePosted]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EmploymentStatusDescriptorCodeValue]
                , INSERTED.[RequisitionNumber]
                , INSERTED.[StaffClassificationDescriptorCodeValue]
                , INSERTED.[StaffClassificationDescriptorNamespace]
                , INSERTED.[EmploymentStatusDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[OpenStaffPositionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_OpenStaffPosition]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_OpenStaffPosition]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[OpenStaffPosition] AS T
            JOIN [edfi].[OpenStaffPosition] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbOpenStaffPositionAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbOpenStaffPositionInstructionalGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_OpenStaffPositionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_OpenStaffPositionInstructionalGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[OpenStaffPositionInstructionalGradeLevel]
            (
                [tid_OpenStaffPosition]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_OpenStaffPosition]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DatePosted], T.[EducationOrganizationId], EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue, GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[RequisitionNumber], StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue, StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace, EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , T.[CreateDate]
                , OpenStaffPosition.[LastModifiedDate] AS ParentLastModifiedDate
                , OpenStaffPosition.[Id] AS ParentId
                FROM [edfi].[OpenStaffPositionInstructionalGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON EmploymentStatusDescriptor.[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON StaffClassificationDescriptor.[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN [edfi].[OpenStaffPosition] AS OpenStaffPosition
                    ON OpenStaffPosition.[DatePosted] = T.[DatePosted]
                    AND OpenStaffPosition.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND OpenStaffPosition.[EmploymentStatusDescriptorId] = T.[EmploymentStatusDescriptorId]
                    AND OpenStaffPosition.[RequisitionNumber] = T.[RequisitionNumber]
                    AND OpenStaffPosition.[StaffClassificationDescriptorId] = T.[StaffClassificationDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbOpenStaffPositionAcademicSubject] ******/

IF OBJECT_ID('[t_edfi].[usp_dbOpenStaffPositionAcademicSubject]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbOpenStaffPositionAcademicSubject];
GO

CREATE PROCEDURE [t_edfi].[usp_dbOpenStaffPositionAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_OpenStaffPositionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_OpenStaffPositionAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[OpenStaffPositionAcademicSubject]
            (
                [tid_OpenStaffPosition]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_OpenStaffPosition]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[DatePosted], T.[EducationOrganizationId], EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue, T.[RequisitionNumber], StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue, StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace, EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , OpenStaffPosition.[LastModifiedDate] AS ParentLastModifiedDate
                , OpenStaffPosition.[Id] AS ParentId
                FROM [edfi].[OpenStaffPositionAcademicSubject] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON EmploymentStatusDescriptor.[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN [edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON StaffClassificationDescriptor.[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN [edfi].[OpenStaffPosition] AS OpenStaffPosition
                    ON OpenStaffPosition.[DatePosted] = T.[DatePosted]
                    AND OpenStaffPosition.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND OpenStaffPosition.[EmploymentStatusDescriptorId] = T.[EmploymentStatusDescriptorId]
                    AND OpenStaffPosition.[RequisitionNumber] = T.[RequisitionNumber]
                    AND OpenStaffPosition.[StaffClassificationDescriptorId] = T.[StaffClassificationDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbParent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbParent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbParent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbParent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Parent] AS T
            USING
            (
                SELECT T.[ParentUniqueId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[LoginId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Parent] AS T
                LEFT JOIN [edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ParentUniqueId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [LoginId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ParentUniqueId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[LoginId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Parent]
                , INSERTED.[ParentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ParentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Parent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Parent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Parent] AS T
            JOIN [edfi].[Parent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbParentOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbParentIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentOtherName] ******/

IF OBJECT_ID('[t_edfi].[usp_dbParentOtherName]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbParentOtherName];
GO

CREATE PROCEDURE [t_edfi].[usp_dbParentOtherName]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentOtherName]
            (
                [tid_Parent]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, [Parent].[ParentUniqueId], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [edfi].[ParentOtherName] AS T 
                JOIN [edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbParentAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbParentAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbParentAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentAddress]
            (
                [tid_Parent]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Parent].[ParentUniqueId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [edfi].[ParentAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentInternationalAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbParentInternationalAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbParentInternationalAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbParentInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentInternationalAddress]
            (
                [tid_Parent]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Parent].[ParentUniqueId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [edfi].[ParentInternationalAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentTelephone] ******/

IF OBJECT_ID('[t_edfi].[usp_dbParentTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbParentTelephone];
GO

CREATE PROCEDURE [t_edfi].[usp_dbParentTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentTelephone]
            (
                [tid_Parent]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Parent].[ParentUniqueId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [edfi].[ParentTelephone] AS T 
                JOIN [edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentElectronicMail] ******/

IF OBJECT_ID('[t_edfi].[usp_dbParentElectronicMail]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbParentElectronicMail];
GO

CREATE PROCEDURE [t_edfi].[usp_dbParentElectronicMail]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentElectronicMail]
            (
                [tid_Parent]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, [Parent].[ParentUniqueId], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [edfi].[ParentElectronicMail] AS T 
                JOIN [edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbParentIdentificationDocument] ******/

IF OBJECT_ID('[t_edfi].[usp_dbParentIdentificationDocument]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbParentIdentificationDocument];
GO

CREATE PROCEDURE [t_edfi].[usp_dbParentIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ParentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ParentIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ParentIdentificationDocument]
            (
                [tid_Parent]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Parent]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, [Parent].[ParentUniqueId], PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Parent.[LastModifiedDate] AS ParentLastModifiedDate
                , Parent.[Id] AS ParentId
                FROM [edfi].[ParentIdentificationDocument] AS T 
                JOIN [edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [edfi].[Parent] AS Parent
                    ON Parent.[ParentUSI] = T.[ParentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbPayroll] ******/

IF OBJECT_ID('[t_edfi].[usp_dbPayroll]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbPayroll];
GO

CREATE PROCEDURE [t_edfi].[usp_dbPayroll]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PayrollKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Payroll] AS T
            USING
            (
                SELECT T.[AccountNumber]
                , T.[AsOfDate]
                , T.[EducationOrganizationId]
                , T.[FiscalYear]
                , [Staff].[StaffUniqueId]
                , T.[AmountToDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Payroll] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AccountNumber]
                    , [AsOfDate]
                    , [EducationOrganizationId]
                    , [FiscalYear]
                    , [StaffUniqueId]
                    , [AmountToDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AccountNumber]
                    , S.[AsOfDate]
                    , S.[EducationOrganizationId]
                    , S.[FiscalYear]
                    , S.[StaffUniqueId]
                    , S.[AmountToDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Payroll]
                , INSERTED.[AccountNumber]
                , INSERTED.[AsOfDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FiscalYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[PayrollSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Payroll]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Payroll]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Payroll] AS T
            JOIN [edfi].[Payroll] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbPerformanceLevelDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbPerformanceLevelDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbPerformanceLevelDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbPerformanceLevelDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PerformanceLevelDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[PerformanceLevelDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PerformanceBaseConversionType].[ShortDescription] AS PerformanceBaseConversionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[PerformanceLevelDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                LEFT JOIN [edfi].[PerformanceBaseConversionType] AS PerformanceBaseConversionType
                    ON [PerformanceBaseConversionType].[PerformanceBaseConversionTypeId] = T.[PerformanceBaseConversionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PerformanceBaseConversionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PerformanceBaseConversionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceLevelDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[PerformanceLevelDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceLevelDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceLevelDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[PerformanceLevelDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[PerformanceLevelDescriptor] AS S
                ON P.[DescriptorId] = S.[PerformanceLevelDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbPostSecondaryEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbPostSecondaryEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[PostSecondaryEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , [PostSecondaryEventCategoryType].[ShortDescription] AS PostSecondaryEventCategoryType
                , [Student].[StudentUniqueId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[PostSecondaryEvent] AS T
                JOIN [edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON [PostSecondaryEventCategoryType].[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [PostSecondaryEventCategoryType]
                    , [StudentUniqueId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[PostSecondaryEventCategoryType]
                    , S.[StudentUniqueId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PostSecondaryEvent]
                , INSERTED.[EventDate]
                , INSERTED.[PostSecondaryEventCategoryType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[PostSecondaryEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PostSecondaryEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PostSecondaryEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[PostSecondaryEvent] AS T
            JOIN [edfi].[PostSecondaryEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution] ******/

IF OBJECT_ID('[t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution];
GO

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitution]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_PostSecondaryEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[PostSecondaryEventPostSecondaryInstitution]
            (
                [tid_PostSecondaryEvent]
                , [PostSecondaryInstitutionId]
                , [NameOfInstitution]
                , [PostSecondaryInstitutionLevelType]
                , [AdministrativeFundingControlDescriptorCodeValue]
                , [AdministrativeFundingControlDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_PostSecondaryEventPostSecondaryInstitution]
            INTO @Tids
            SELECT T.[tid_PostSecondaryEvent]
                , S.[PostSecondaryInstitutionId]
                , S.[NameOfInstitution]
                , S.[PostSecondaryInstitutionLevelType]
                , S.[AdministrativeFundingControlDescriptorCodeValue]
                , S.[AdministrativeFundingControlDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], PostSecondaryEventCategoryType.[ShortDescription] AS PostSecondaryEventCategoryType, [Student].[StudentUniqueId], T.[PostSecondaryInstitutionId], T.[NameOfInstitution], PostSecondaryInstitutionLevelType.[ShortDescription] AS PostSecondaryInstitutionLevelType, AdministrativeFundingControlDescriptor.[CodeValue] AS AdministrativeFundingControlDescriptorCodeValue, AdministrativeFundingControlDescriptor.[Namespace] AS AdministrativeFundingControlDescriptorNamespace
                , T.[CreateDate]
                , PostSecondaryEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , PostSecondaryEvent.[Id] AS ParentId
                FROM [edfi].[PostSecondaryEventPostSecondaryInstitution] AS T 
                JOIN [edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON PostSecondaryEventCategoryType.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[PostSecondaryInstitutionLevelType] AS PostSecondaryInstitutionLevelType
                    ON PostSecondaryInstitutionLevelType.[PostSecondaryInstitutionLevelTypeId] = T.[PostSecondaryInstitutionLevelTypeId]
                LEFT JOIN [edfi].[Descriptor] AS AdministrativeFundingControlDescriptor
                    ON AdministrativeFundingControlDescriptor.[DescriptorId] = T.[AdministrativeFundingControlDescriptorId]
                JOIN [edfi].[PostSecondaryEvent] AS PostSecondaryEvent
                    ON PostSecondaryEvent.[EventDate] = T.[EventDate]
                    AND PostSecondaryEvent.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                    AND PostSecondaryEvent.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_PostSecondaryEventPostSecondaryInstitution]
                , T.[EventDate]
                , T.[PostSecondaryEventCategoryType]
                , T.[StudentUniqueId]
            FROM [t_edfi].[PostSecondaryEventPostSecondaryInstitution] AS S
            JOIN @pTids AS T
                ON S.[tid_PostSecondaryEvent] = T.[tid_PostSecondaryEvent]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_PostSecondaryEventPostSecondaryInstitution] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode]
            (
                [tid_PostSecondaryEventPostSecondaryInstitution]
                , [EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [EducationOrganizationIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PostSecondaryEventPostSecondaryInstitution]
                , S.[EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[EducationOrganizationIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationIdentificationSystemDescriptor.[CodeValue] AS EducationOrganizationIdentificationSystemDescriptorCodeValue, T.[EventDate], PostSecondaryEventCategoryType.[ShortDescription] AS PostSecondaryEventCategoryType, [Student].[StudentUniqueId], T.[IdentificationCode], EducationOrganizationIdentificationSystemDescriptor.[Namespace] AS EducationOrganizationIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS EducationOrganizationIdentificationSystemDescriptor
                    ON EducationOrganizationIdentificationSystemDescriptor.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                JOIN [edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON PostSecondaryEventCategoryType.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[EventDate] = S.[EventDate]
                AND T.[PostSecondaryEventCategoryType] = S.[PostSecondaryEventCategoryType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ******/

IF OBJECT_ID('[t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction];
GO

CREATE PROCEDURE [t_edfi].[usp_dbPostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]
            (
                [tid_PostSecondaryEventPostSecondaryInstitution]
                , [MediumOfInstructionType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PostSecondaryEventPostSecondaryInstitution]
                , S.[MediumOfInstructionType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], MediumOfInstructionType.[ShortDescription] AS MediumOfInstructionType, PostSecondaryEventCategoryType.[ShortDescription] AS PostSecondaryEventCategoryType, [Student].[StudentUniqueId]
                , T.[CreateDate]
                FROM [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] AS T 
                JOIN [edfi].[MediumOfInstructionType] AS MediumOfInstructionType
                    ON MediumOfInstructionType.[MediumOfInstructionTypeId] = T.[MediumOfInstructionTypeId]
                JOIN [edfi].[PostSecondaryEventCategoryType] AS PostSecondaryEventCategoryType
                    ON PostSecondaryEventCategoryType.[PostSecondaryEventCategoryTypeId] = T.[PostSecondaryEventCategoryTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[EventDate] = S.[EventDate]
                AND T.[PostSecondaryEventCategoryType] = S.[PostSecondaryEventCategoryType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgram] ******/

IF OBJECT_ID('[t_edfi].[usp_dbProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbProgram];
GO

CREATE PROCEDURE [t_edfi].[usp_dbProgram]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Program] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[ProgramId]
                , [ProgramSponsorType].[ShortDescription] AS ProgramSponsorType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Program] AS T
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                LEFT JOIN [edfi].[ProgramSponsorType] AS ProgramSponsorType
                    ON [ProgramSponsorType].[ProgramSponsorTypeId] = T.[ProgramSponsorTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [ProgramId]
                    , [ProgramSponsorType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[ProgramId]
                    , S.[ProgramSponsorType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Program]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ProgramSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Program]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Program]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Program] AS T
            JOIN [edfi].[Program] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbProgramCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbProgramService] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbProgramLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbProgramLearningStandard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramCharacteristic] ******/

IF OBJECT_ID('[t_edfi].[usp_dbProgramCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbProgramCharacteristic];
GO

CREATE PROCEDURE [t_edfi].[usp_dbProgramCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramCharacteristic]
            (
                [tid_Program]
                , [ProgramCharacteristicDescriptorCodeValue]
                , [ProgramCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[ProgramCharacteristicDescriptorCodeValue]
                , S.[ProgramCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], ProgramCharacteristicDescriptor.[CodeValue] AS ProgramCharacteristicDescriptorCodeValue, T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ProgramCharacteristicDescriptor.[Namespace] AS ProgramCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [edfi].[ProgramCharacteristic] AS T 
                JOIN [edfi].[Descriptor] AS ProgramCharacteristicDescriptor
                    ON ProgramCharacteristicDescriptor.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramService] ******/

IF OBJECT_ID('[t_edfi].[usp_dbProgramService]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbProgramService];
GO

CREATE PROCEDURE [t_edfi].[usp_dbProgramService]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramServiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramService]
            (
                [tid_Program]
                , [ServiceDescriptorCodeValue]
                , [ServiceDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[ServiceDescriptorCodeValue]
                , S.[ServiceDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ServiceDescriptor.[CodeValue] AS ServiceDescriptorCodeValue, ServiceDescriptor.[Namespace] AS ServiceDescriptorNamespace
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [edfi].[ProgramService] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Descriptor] AS ServiceDescriptor
                    ON ServiceDescriptor.[DescriptorId] = T.[ServiceDescriptorId]
                JOIN [edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramLearningObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbProgramLearningObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbProgramLearningObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbProgramLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramLearningObjective]
            (
                [tid_Program]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[EducationOrganizationId], T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [edfi].[ProgramLearningObjective] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramLearningStandard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbProgramLearningStandard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbProgramLearningStandard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbProgramLearningStandard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramLearningStandardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ProgramLearningStandard]
            (
                [tid_Program]
                , [LearningStandardId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Program]
                , S.[LearningStandardId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[LearningStandardId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType
                , T.[CreateDate]
                , Program.[LastModifiedDate] AS ParentLastModifiedDate
                , Program.[Id] AS ParentId
                FROM [edfi].[ProgramLearningStandard] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Program] AS Program
                    ON Program.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND Program.[ProgramName] = T.[ProgramName]
                    AND Program.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramAssignmentDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbProgramAssignmentDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbProgramAssignmentDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbProgramAssignmentDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramAssignmentDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ProgramAssignmentDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProgramAssignmentType].[ShortDescription] AS ProgramAssignmentType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ProgramAssignmentDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                LEFT JOIN [edfi].[ProgramAssignmentType] AS ProgramAssignmentType
                    ON [ProgramAssignmentType].[ProgramAssignmentTypeId] = T.[ProgramAssignmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProgramAssignmentType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProgramAssignmentType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProgramAssignmentDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ProgramAssignmentDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProgramAssignmentDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProgramAssignmentDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ProgramAssignmentDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ProgramAssignmentDescriptor] AS S
                ON P.[DescriptorId] = S.[ProgramAssignmentDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbProgramCharacteristicDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbProgramCharacteristicDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbProgramCharacteristicDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbProgramCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ProgramCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ProgramCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProgramCharacteristicType].[ShortDescription] AS ProgramCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ProgramCharacteristicDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                LEFT JOIN [edfi].[ProgramCharacteristicType] AS ProgramCharacteristicType
                    ON [ProgramCharacteristicType].[ProgramCharacteristicTypeId] = T.[ProgramCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProgramCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProgramCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProgramCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ProgramCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProgramCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProgramCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ProgramCharacteristicDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ProgramCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[ProgramCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbReasonExitedDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbReasonExitedDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbReasonExitedDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbReasonExitedDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReasonExitedDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ReasonExitedDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ReasonExitedType].[ShortDescription] AS ReasonExitedType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ReasonExitedDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ReasonExitedDescriptorId]
                LEFT JOIN [edfi].[ReasonExitedType] AS ReasonExitedType
                    ON [ReasonExitedType].[ReasonExitedTypeId] = T.[ReasonExitedTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ReasonExitedType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ReasonExitedType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ReasonExitedDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ReasonExitedDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ReasonExitedDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ReasonExitedDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ReasonExitedDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ReasonExitedDescriptor] AS S
                ON P.[DescriptorId] = S.[ReasonExitedDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbReportCard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbReportCard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbReportCard]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ReportCard] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , T.[GPAGivenGradingPeriod]
                , T.[GPACumulative]
                , T.[NumberOfDaysAbsent]
                , T.[NumberOfDaysInAttendance]
                , T.[NumberOfDaysTardy]
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[ReportCard] AS T
                JOIN .[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [GPAGivenGradingPeriod]
                    , [GPACumulative]
                    , [NumberOfDaysAbsent]
                    , [NumberOfDaysInAttendance]
                    , [NumberOfDaysTardy]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[GPAGivenGradingPeriod]
                    , S.[GPACumulative]
                    , S.[NumberOfDaysAbsent]
                    , S.[NumberOfDaysInAttendance]
                    , S.[NumberOfDaysTardy]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ReportCard]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ReportCardSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ReportCard]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ReportCard]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ReportCard] AS T
            JOIN [edfi].[ReportCard] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbReportCardGrade] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbReportCardStudentCompetencyObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbReportCardStudentLearningObjective] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCardGrade] ******/

IF OBJECT_ID('[t_edfi].[usp_dbReportCardGrade]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbReportCardGrade];
GO

CREATE PROCEDURE [t_edfi].[usp_dbReportCardGrade]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ReportCardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardGradeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ReportCardGrade]
            (
                [tid_ReportCard]
                , [BeginDate]
                , [ClassPeriodName]
                , [ClassroomIdentificationCode]
                , [GradeType]
                , [LocalCourseCode]
                , [SchoolYear]
                , [SequenceOfCourse]
                , [TermDescriptorCodeValue]
                , [UniqueSectionCode]
                , [TermDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ReportCard]
                , S.[BeginDate]
                , S.[ClassPeriodName]
                , S.[ClassroomIdentificationCode]
                , S.[GradeType]
                , S.[LocalCourseCode]
                , S.[SchoolYear]
                , S.[SequenceOfCourse]
                , S.[TermDescriptorCodeValue]
                , S.[UniqueSectionCode]
                , S.[TermDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[EducationOrganizationId], GradeType.[ShortDescription] AS GradeType, T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , ReportCard.[LastModifiedDate] AS ParentLastModifiedDate
                , ReportCard.[Id] AS ParentId
                FROM [edfi].[ReportCardGrade] AS T 
                JOIN [edfi].[GradeType] AS GradeType
                    ON GradeType.[GradeTypeId] = T.[GradeTypeId]
                JOIN [edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[ReportCard] AS ReportCard
                    ON ReportCard.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND ReportCard.[GradingPeriodBeginDate] = T.[GradingPeriodBeginDate]
                    AND ReportCard.[GradingPeriodDescriptorId] = T.[GradingPeriodDescriptorId]
                    AND ReportCard.[SchoolId] = T.[SchoolId]
                    AND ReportCard.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCardStudentCompetencyObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbReportCardStudentCompetencyObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbReportCardStudentCompetencyObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbReportCardStudentCompetencyObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ReportCardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardStudentCompetencyObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ReportCardStudentCompetencyObjective]
            (
                [tid_ReportCard]
                , [Objective]
                , [ObjectiveEducationOrganizationId]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ReportCard]
                , S.[Objective]
                , S.[ObjectiveEducationOrganizationId]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[Objective], T.[ObjectiveEducationOrganizationId], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[ReportCardEducationOrganizationId], T.[SchoolId], [Student].[StudentUniqueId], ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , ReportCard.[LastModifiedDate] AS ParentLastModifiedDate
                , ReportCard.[Id] AS ParentId
                FROM [edfi].[ReportCardStudentCompetencyObjective] AS T 
                JOIN [edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ReportCard] AS ReportCard
                    ON ReportCard.[GradingPeriodBeginDate] = T.[GradingPeriodBeginDate]
                    AND ReportCard.[GradingPeriodDescriptorId] = T.[GradingPeriodDescriptorId]
                    AND ReportCard.[EducationOrganizationId] = T.[ReportCardEducationOrganizationId]
                    AND ReportCard.[SchoolId] = T.[SchoolId]
                    AND ReportCard.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbReportCardStudentLearningObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbReportCardStudentLearningObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbReportCardStudentLearningObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbReportCardStudentLearningObjective]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_ReportCardKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReportCardStudentLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[ReportCardStudentLearningObjective]
            (
                [tid_ReportCard]
                , [AcademicSubjectDescriptorCodeValue]
                , [Objective]
                , [ObjectiveGradeLevelDescriptorCodeValue]
                , [ObjectiveGradeLevelDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ReportCard]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[Objective]
                , S.[ObjectiveGradeLevelDescriptorCodeValue]
                , S.[ObjectiveGradeLevelDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[Objective], ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue, T.[ReportCardEducationOrganizationId], T.[SchoolId], [Student].[StudentUniqueId], ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , ReportCard.[LastModifiedDate] AS ParentLastModifiedDate
                , ReportCard.[Id] AS ParentId
                FROM [edfi].[ReportCardStudentLearningObjective] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON ObjectiveGradeLevelDescriptor.[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ReportCard] AS ReportCard
                    ON ReportCard.[GradingPeriodBeginDate] = T.[GradingPeriodBeginDate]
                    AND ReportCard.[GradingPeriodDescriptorId] = T.[GradingPeriodDescriptorId]
                    AND ReportCard.[EducationOrganizationId] = T.[ReportCardEducationOrganizationId]
                    AND ReportCard.[SchoolId] = T.[SchoolId]
                    AND ReportCard.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbReporterDescriptionDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbReporterDescriptionDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbReporterDescriptionDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbReporterDescriptionDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ReporterDescriptionDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ReporterDescriptionDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ReporterDescriptionType].[ShortDescription] AS ReporterDescriptionType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ReporterDescriptionDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ReporterDescriptionDescriptorId]
                LEFT JOIN [edfi].[ReporterDescriptionType] AS ReporterDescriptionType
                    ON [ReporterDescriptionType].[ReporterDescriptionTypeId] = T.[ReporterDescriptionTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ReporterDescriptionType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ReporterDescriptionType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ReporterDescriptionDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ReporterDescriptionDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ReporterDescriptionDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ReporterDescriptionDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ReporterDescriptionDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ReporterDescriptionDescriptor] AS S
                ON P.[DescriptorId] = S.[ReporterDescriptionDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbResidencyStatusDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbResidencyStatusDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbResidencyStatusDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbResidencyStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ResidencyStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ResidencyStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ResidencyStatusType].[ShortDescription] AS ResidencyStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ResidencyStatusDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ResidencyStatusDescriptorId]
                LEFT JOIN [edfi].[ResidencyStatusType] AS ResidencyStatusType
                    ON [ResidencyStatusType].[ResidencyStatusTypeId] = T.[ResidencyStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ResidencyStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ResidencyStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ResidencyStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ResidencyStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ResidencyStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ResidencyStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ResidencyStatusDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ResidencyStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[ResidencyStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbResponsibilityDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbResponsibilityDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbResponsibilityDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbResponsibilityDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ResponsibilityDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ResponsibilityDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ResponsibilityType].[ShortDescription] AS ResponsibilityType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ResponsibilityDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ResponsibilityDescriptorId]
                LEFT JOIN [edfi].[ResponsibilityType] AS ResponsibilityType
                    ON [ResponsibilityType].[ResponsibilityTypeId] = T.[ResponsibilityTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ResponsibilityType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ResponsibilityType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ResponsibilityDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ResponsibilityDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ResponsibilityDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ResponsibilityDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ResponsibilityDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ResponsibilityDescriptor] AS S
                ON P.[DescriptorId] = S.[ResponsibilityDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbRestraintEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbRestraintEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbRestraintEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbRestraintEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_RestraintEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[RestraintEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , T.[RestraintEventIdentifier]
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[RestraintEvent] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [RestraintEventIdentifier]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [EducationalEnvironmentType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[RestraintEventIdentifier]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[EducationalEnvironmentType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RestraintEvent]
                , INSERTED.[EventDate]
                , INSERTED.[RestraintEventIdentifier]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[RestraintEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RestraintEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RestraintEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[RestraintEvent] AS T
            JOIN [edfi].[RestraintEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbRestraintEventReason] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbRestraintEventProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbRestraintEventReason] ******/

IF OBJECT_ID('[t_edfi].[usp_dbRestraintEventReason]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbRestraintEventReason];
GO

CREATE PROCEDURE [t_edfi].[usp_dbRestraintEventReason]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_RestraintEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_RestraintEventReasonKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[RestraintEventReason]
            (
                [tid_RestraintEvent]
                , [RestraintEventReasonType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RestraintEvent]
                , S.[RestraintEventReasonType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], T.[RestraintEventIdentifier], RestraintEventReasonType.[ShortDescription] AS RestraintEventReasonType, T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , RestraintEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , RestraintEvent.[Id] AS ParentId
                FROM [edfi].[RestraintEventReason] AS T 
                JOIN [edfi].[RestraintEventReasonType] AS RestraintEventReasonType
                    ON RestraintEventReasonType.[RestraintEventReasonTypeId] = T.[RestraintEventReasonTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[RestraintEvent] AS RestraintEvent
                    ON RestraintEvent.[EventDate] = T.[EventDate]
                    AND RestraintEvent.[RestraintEventIdentifier] = T.[RestraintEventIdentifier]
                    AND RestraintEvent.[SchoolId] = T.[SchoolId]
                    AND RestraintEvent.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbRestraintEventProgram] ******/

IF OBJECT_ID('[t_edfi].[usp_dbRestraintEventProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbRestraintEventProgram];
GO

CREATE PROCEDURE [t_edfi].[usp_dbRestraintEventProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_RestraintEventKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_RestraintEventProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[RestraintEventProgram]
            (
                [tid_RestraintEvent]
                , [EducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RestraintEvent]
                , S.[EducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[EventDate], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, T.[RestraintEventIdentifier], T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , RestraintEvent.[LastModifiedDate] AS ParentLastModifiedDate
                , RestraintEvent.[Id] AS ParentId
                FROM [edfi].[RestraintEventProgram] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[RestraintEvent] AS RestraintEvent
                    ON RestraintEvent.[EventDate] = T.[EventDate]
                    AND RestraintEvent.[RestraintEventIdentifier] = T.[RestraintEventIdentifier]
                    AND RestraintEvent.[SchoolId] = T.[SchoolId]
                    AND RestraintEvent.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchool] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSchool]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSchool];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSchool]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[School] AS T
            USING
            (
                SELECT T.[SchoolId]
                , [SchoolType].[ShortDescription] AS SchoolType
                , [CharterStatusType].[ShortDescription] AS CharterStatusType
                , [TitleIPartASchoolDesignationType].[ShortDescription] AS TitleIPartASchoolDesignationType
                , [MagnetSpecialProgramEmphasisSchoolType].[ShortDescription] AS MagnetSpecialProgramEmphasisSchoolType
                , AdministrativeFundingControlDescriptor.[CodeValue] AS AdministrativeFundingControlDescriptorCodeValue
                , [InternetAccessType].[ShortDescription] AS InternetAccessType
                , T.[LocalEducationAgencyId]
                , [CharterApprovalAgencyType].[ShortDescription] AS CharterApprovalAgencyType
                , T.[CharterApprovalSchoolYear]
                , AdministrativeFundingControlDescriptor.[Namespace] AS AdministrativeFundingControlDescriptorNamespace
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[School] AS T
                JOIN [edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[SchoolId]
                LEFT JOIN [edfi].[SchoolType] AS SchoolType
                    ON [SchoolType].[SchoolTypeId] = T.[SchoolTypeId]
                LEFT JOIN [edfi].[CharterStatusType] AS CharterStatusType
                    ON [CharterStatusType].[CharterStatusTypeId] = T.[CharterStatusTypeId]
                LEFT JOIN [edfi].[TitleIPartASchoolDesignationType] AS TitleIPartASchoolDesignationType
                    ON [TitleIPartASchoolDesignationType].[TitleIPartASchoolDesignationTypeId] = T.[TitleIPartASchoolDesignationTypeId]
                LEFT JOIN [edfi].[MagnetSpecialProgramEmphasisSchoolType] AS MagnetSpecialProgramEmphasisSchoolType
                    ON [MagnetSpecialProgramEmphasisSchoolType].[MagnetSpecialProgramEmphasisSchoolTypeId] = T.[MagnetSpecialProgramEmphasisSchoolTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS AdministrativeFundingControlDescriptor
                    ON [AdministrativeFundingControlDescriptor].[DescriptorId] = T.[AdministrativeFundingControlDescriptorId]
                LEFT JOIN [edfi].[InternetAccessType] AS InternetAccessType
                    ON [InternetAccessType].[InternetAccessTypeId] = T.[InternetAccessTypeId]
                LEFT JOIN [edfi].[CharterApprovalAgencyType] AS CharterApprovalAgencyType
                    ON [CharterApprovalAgencyType].[CharterApprovalAgencyTypeId] = T.[CharterApprovalAgencyTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolId]
                    , [SchoolType]
                    , [CharterStatusType]
                    , [TitleIPartASchoolDesignationType]
                    , [MagnetSpecialProgramEmphasisSchoolType]
                    , [AdministrativeFundingControlDescriptorCodeValue]
                    , [InternetAccessType]
                    , [LocalEducationAgencyId]
                    , [CharterApprovalAgencyType]
                    , [CharterApprovalSchoolYear]
                    , [AdministrativeFundingControlDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolId]
                    , S.[SchoolType]
                    , S.[CharterStatusType]
                    , S.[TitleIPartASchoolDesignationType]
                    , S.[MagnetSpecialProgramEmphasisSchoolType]
                    , S.[AdministrativeFundingControlDescriptorCodeValue]
                    , S.[InternetAccessType]
                    , S.[LocalEducationAgencyId]
                    , S.[CharterApprovalAgencyType]
                    , S.[CharterApprovalSchoolYear]
                    , S.[AdministrativeFundingControlDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_School]
                , INSERTED.[SchoolId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SchoolSnapshotRecord]
            (
                [SnapshotId]
                , [tid_School]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_School]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[School] AS T
            JOIN [edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[School] AS S
                ON P.[EducationOrganizationId] = S.[SchoolId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbSchoolGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbSchoolCategory] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSchoolExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSchoolGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSchoolGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSchoolGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SchoolKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SchoolGradeLevel]
            (
                [tid_School]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_School]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[SchoolId], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[SchoolGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[SchoolId] = S.[SchoolId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolCategory] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSchoolCategory]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSchoolCategory];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSchoolCategory]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SchoolKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolCategoryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SchoolCategory]
            (
                [tid_School]
                , [SchoolCategoryType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_School]
                , S.[SchoolCategoryType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT SchoolCategoryType.[ShortDescription] AS SchoolCategoryType, T.[SchoolId]
                , T.[CreateDate]
                FROM [edfi].[SchoolCategory] AS T 
                JOIN [edfi].[SchoolCategoryType] AS SchoolCategoryType
                    ON SchoolCategoryType.[SchoolCategoryTypeId] = T.[SchoolCategoryTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[SchoolId] = S.[SchoolId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbSchoolExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbSchoolExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbSchoolExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbSchoolExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SchoolKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SchoolExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SchoolExtension]
            (
                [tid_School]
                , [SchoolStatusDescriptorCodeValue]
                , [ImprovingSchool]
                , [SchoolStatusDescriptorNamespace]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_School]
                , S.[SchoolStatusDescriptorCodeValue]
                , S.[ImprovingSchool]
                , S.[SchoolStatusDescriptorNamespace]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SchoolId], SchoolStatusDescriptor.[CodeValue] AS SchoolStatusDescriptorCodeValue, T.[ImprovingSchool], SchoolStatusDescriptor.[Namespace] AS SchoolStatusDescriptorNamespace
                FROM [extension].[SchoolExtension] AS T 
                LEFT JOIN [edfi].[Descriptor] AS SchoolStatusDescriptor
                    ON SchoolStatusDescriptor.[DescriptorId] = T.[SchoolStatusDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[SchoolId] = S.[SchoolId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolFoodServicesEligibilityDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SchoolFoodServicesEligibilityDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SchoolFoodServicesEligibilityType].[ShortDescription] AS SchoolFoodServicesEligibilityType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[SchoolFoodServicesEligibilityDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [edfi].[SchoolFoodServicesEligibilityType] AS SchoolFoodServicesEligibilityType
                    ON [SchoolFoodServicesEligibilityType].[SchoolFoodServicesEligibilityTypeId] = T.[SchoolFoodServicesEligibilityTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SchoolFoodServicesEligibilityType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SchoolFoodServicesEligibilityType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolFoodServicesEligibilityDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SchoolFoodServicesEligibilityDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolFoodServicesEligibilityDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolFoodServicesEligibilityDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SchoolFoodServicesEligibilityDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[SchoolFoodServicesEligibilityDescriptor] AS S
                ON P.[DescriptorId] = S.[SchoolFoodServicesEligibilityDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSchoolYearType] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSchoolYearType]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSchoolYearType];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSchoolYearType]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SchoolYearTypeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SchoolYearType] AS T
            USING
            (
                SELECT T.[SchoolYear]
                , T.[SchoolYearDescription]
                , T.[CurrentSchoolYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[SchoolYearType] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolYear]
                    , [SchoolYearDescription]
                    , [CurrentSchoolYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolYear]
                    , S.[SchoolYearDescription]
                    , S.[CurrentSchoolYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolYearType]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SchoolYearTypeSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolYearType]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolYearType]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SchoolYearType] AS T
            JOIN [edfi].[SchoolYearType] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSection] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSection]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSection];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSection]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Section] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , [MediumOfInstructionType].[ShortDescription] AS MediumOfInstructionType
                , [PopulationServedType].[ShortDescription] AS PopulationServedType
                , T.[AvailableCredits]
                , [AvailableCreditType].[ShortDescription] AS AvailableCreditType
                , T.[AvailableCreditConversion]
                , InstructionLanguageDescriptor.[CodeValue] AS InstructionLanguageDescriptorCodeValue
                , InstructionLanguageDescriptor.[Namespace] AS InstructionLanguageDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Section] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
                LEFT JOIN [edfi].[MediumOfInstructionType] AS MediumOfInstructionType
                    ON [MediumOfInstructionType].[MediumOfInstructionTypeId] = T.[MediumOfInstructionTypeId]
                LEFT JOIN [edfi].[PopulationServedType] AS PopulationServedType
                    ON [PopulationServedType].[PopulationServedTypeId] = T.[PopulationServedTypeId]
                LEFT JOIN [edfi].[CreditType] AS AvailableCreditType
                    ON [AvailableCreditType].[CreditTypeId] = T.[AvailableCreditTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS InstructionLanguageDescriptor
                    ON [InstructionLanguageDescriptor].[DescriptorId] = T.[InstructionLanguageDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EducationalEnvironmentType]
                    , [MediumOfInstructionType]
                    , [PopulationServedType]
                    , [AvailableCredits]
                    , [AvailableCreditType]
                    , [AvailableCreditConversion]
                    , [InstructionLanguageDescriptorCodeValue]
                    , [InstructionLanguageDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EducationalEnvironmentType]
                    , S.[MediumOfInstructionType]
                    , S.[PopulationServedType]
                    , S.[AvailableCredits]
                    , S.[AvailableCreditType]
                    , S.[AvailableCreditConversion]
                    , S.[InstructionLanguageDescriptorCodeValue]
                    , S.[InstructionLanguageDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Section]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SectionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Section]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Section]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Section] AS T
            JOIN [edfi].[Section] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbSectionCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbSectionProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionCharacteristic] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSectionCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSectionCharacteristic];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSectionCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SectionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SectionCharacteristic]
            (
                [tid_Section]
                , [SectionCharacteristicDescriptorCodeValue]
                , [SectionCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Section]
                , S.[SectionCharacteristicDescriptorCodeValue]
                , S.[SectionCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], SectionCharacteristicDescriptor.[CodeValue] AS SectionCharacteristicDescriptorCodeValue, T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace, SectionCharacteristicDescriptor.[Namespace] AS SectionCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , Section.[LastModifiedDate] AS ParentLastModifiedDate
                , Section.[Id] AS ParentId
                FROM [edfi].[SectionCharacteristic] AS T 
                JOIN [edfi].[Descriptor] AS SectionCharacteristicDescriptor
                    ON SectionCharacteristicDescriptor.[DescriptorId] = T.[SectionCharacteristicDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[Section] AS Section
                    ON Section.[ClassPeriodName] = T.[ClassPeriodName]
                    AND Section.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND Section.[LocalCourseCode] = T.[LocalCourseCode]
                    AND Section.[SchoolId] = T.[SchoolId]
                    AND Section.[SchoolYear] = T.[SchoolYear]
                    AND Section.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND Section.[TermDescriptorId] = T.[TermDescriptorId]
                    AND Section.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionProgram] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSectionProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSectionProgram];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSectionProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SectionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SectionProgram]
            (
                [tid_Section]
                , [EducationOrganizationId]
                , [ProgramName]
                , [ProgramType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Section]
                , S.[EducationOrganizationId]
                , S.[ProgramName]
                , S.[ProgramType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[EducationOrganizationId], T.[LocalCourseCode], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , Section.[LastModifiedDate] AS ParentLastModifiedDate
                , Section.[Id] AS ParentId
                FROM [edfi].[SectionProgram] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[Section] AS Section
                    ON Section.[ClassPeriodName] = T.[ClassPeriodName]
                    AND Section.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND Section.[LocalCourseCode] = T.[LocalCourseCode]
                    AND Section.[SchoolId] = T.[SchoolId]
                    AND Section.[SchoolYear] = T.[SchoolYear]
                    AND Section.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND Section.[TermDescriptorId] = T.[TermDescriptorId]
                    AND Section.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionAttendanceTakenEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSectionAttendanceTakenEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSectionAttendanceTakenEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSectionAttendanceTakenEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionAttendanceTakenEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SectionAttendanceTakenEvent] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[Date]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[EventDate]
                , [Staff].[StaffUniqueId]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[SectionAttendanceTakenEvent] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [Date]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EventDate]
                    , [StaffUniqueId]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[Date]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EventDate]
                    , S.[StaffUniqueId]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionAttendanceTakenEvent]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[Date]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SectionAttendanceTakenEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionAttendanceTakenEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionAttendanceTakenEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SectionAttendanceTakenEvent] AS T
            JOIN [edfi].[SectionAttendanceTakenEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSectionCharacteristicDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSectionCharacteristicDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSectionCharacteristicDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSectionCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SectionCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SectionCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SectionCharacteristicType].[ShortDescription] AS SectionCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[SectionCharacteristicDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SectionCharacteristicDescriptorId]
                LEFT JOIN [edfi].[SectionCharacteristicType] AS SectionCharacteristicType
                    ON [SectionCharacteristicType].[SectionCharacteristicTypeId] = T.[SectionCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SectionCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SectionCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SectionCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SectionCharacteristicDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[SectionCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[SectionCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSeparationReasonDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSeparationReasonDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSeparationReasonDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSeparationReasonDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SeparationReasonDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SeparationReasonDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SeparationReasonType].[ShortDescription] AS SeparationReasonType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[SeparationReasonDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SeparationReasonDescriptorId]
                LEFT JOIN [edfi].[SeparationReasonType] AS SeparationReasonType
                    ON [SeparationReasonType].[SeparationReasonTypeId] = T.[SeparationReasonTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SeparationReasonType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SeparationReasonType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SeparationReasonDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SeparationReasonDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SeparationReasonDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SeparationReasonDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SeparationReasonDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[SeparationReasonDescriptor] AS S
                ON P.[DescriptorId] = S.[SeparationReasonDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbServiceDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbServiceDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbServiceDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbServiceDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_ServiceDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[ServiceDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , T.[ServiceCategory]
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[ServiceDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ServiceDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ServiceCategory]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ServiceCategory]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ServiceDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[ServiceDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ServiceDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ServiceDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[ServiceDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[ServiceDescriptor] AS S
                ON P.[DescriptorId] = S.[ServiceDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSession] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSession]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSession];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSession]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SessionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Session] AS T
            USING
            (
                SELECT T.[SchoolId]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SessionName]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[TotalInstructionalDays]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Session] AS T
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SchoolId]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SessionName]
                    , [BeginDate]
                    , [EndDate]
                    , [TotalInstructionalDays]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SessionName]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TotalInstructionalDays]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Session]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SessionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Session]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Session]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Session] AS T
            JOIN [edfi].[Session] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbSessionGradingPeriod] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbSessionAcademicWeek] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSessionGradingPeriod] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSessionGradingPeriod]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSessionGradingPeriod];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSessionGradingPeriod]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SessionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SessionGradingPeriodKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SessionGradingPeriod]
            (
                [tid_Session]
                , [BeginDate]
                , [GradingPeriodDescriptorCodeValue]
                , [GradingPeriodDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Session]
                , S.[BeginDate]
                , S.[GradingPeriodDescriptorCodeValue]
                , S.[GradingPeriodDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, TermDescriptor.[Namespace] AS TermDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , Session.[LastModifiedDate] AS ParentLastModifiedDate
                , Session.[Id] AS ParentId
                FROM [edfi].[SessionGradingPeriod] AS T 
                JOIN [edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[Session] AS Session
                    ON Session.[SchoolId] = T.[SchoolId]
                    AND Session.[SchoolYear] = T.[SchoolYear]
                    AND Session.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSessionAcademicWeek] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSessionAcademicWeek]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSessionAcademicWeek];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSessionAcademicWeek]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_SessionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SessionAcademicWeekKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[SessionAcademicWeek]
            (
                [tid_Session]
                , [WeekIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Session]
                , S.[WeekIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SchoolId], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[WeekIdentifier], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , Session.[LastModifiedDate] AS ParentLastModifiedDate
                , Session.[Id] AS ParentId
                FROM [edfi].[SessionAcademicWeek] AS T 
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[Session] AS Session
                    ON Session.[SchoolId] = T.[SchoolId]
                    AND Session.[SchoolYear] = T.[SchoolYear]
                    AND Session.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbSpecialEducationSettingDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbSpecialEducationSettingDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbSpecialEducationSettingDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbSpecialEducationSettingDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_SpecialEducationSettingDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[SpecialEducationSettingDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SpecialEducationSettingType].[ShortDescription] AS SpecialEducationSettingType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[SpecialEducationSettingDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SpecialEducationSettingDescriptorId]
                LEFT JOIN [edfi].[SpecialEducationSettingType] AS SpecialEducationSettingType
                    ON [SpecialEducationSettingType].[SpecialEducationSettingTypeId] = T.[SpecialEducationSettingTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SpecialEducationSettingType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SpecialEducationSettingType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SpecialEducationSettingDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[SpecialEducationSettingDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SpecialEducationSettingDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SpecialEducationSettingDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[SpecialEducationSettingDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[SpecialEducationSettingDescriptor] AS S
                ON P.[DescriptorId] = S.[SpecialEducationSettingDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaff] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaff]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaff];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaff]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Staff] AS T
            USING
            (
                SELECT T.[StaffUniqueId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[HispanicLatinoEthnicity]
                , [OldEthnicityType].[ShortDescription] AS OldEthnicityType
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , HighestCompletedLevelOfEducationDescriptor.[CodeValue] AS HighestCompletedLevelOfEducationDescriptorCodeValue
                , T.[YearsOfPriorProfessionalExperience]
                , T.[YearsOfPriorTeachingExperience]
                , T.[LoginId]
                , T.[HighlyQualifiedTeacher]
                , HighestCompletedLevelOfEducationDescriptor.[Namespace] AS HighestCompletedLevelOfEducationDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Staff] AS T
                LEFT JOIN [edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[OldEthnicityType] AS OldEthnicityType
                    ON [OldEthnicityType].[OldEthnicityTypeId] = T.[OldEthnicityTypeId]
                LEFT JOIN [edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS HighestCompletedLevelOfEducationDescriptor
                    ON [HighestCompletedLevelOfEducationDescriptor].[DescriptorId] = T.[HighestCompletedLevelOfEducationDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StaffUniqueId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [HispanicLatinoEthnicity]
                    , [OldEthnicityType]
                    , [CitizenshipStatusType]
                    , [HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , [YearsOfPriorProfessionalExperience]
                    , [YearsOfPriorTeachingExperience]
                    , [LoginId]
                    , [HighlyQualifiedTeacher]
                    , [HighestCompletedLevelOfEducationDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StaffUniqueId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[HispanicLatinoEthnicity]
                    , S.[OldEthnicityType]
                    , S.[CitizenshipStatusType]
                    , S.[HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , S.[YearsOfPriorProfessionalExperience]
                    , S.[YearsOfPriorTeachingExperience]
                    , S.[LoginId]
                    , S.[HighlyQualifiedTeacher]
                    , S.[HighestCompletedLevelOfEducationDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Staff]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Staff]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Staff]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Staff] AS T
            JOIN [edfi].[Staff] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStaffIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffBackgroundCheck] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffSeniority] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffApplicant] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffSalary] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherEducatorResearch] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffIdentificationCode]
            (
                [tid_Staff]
                , [StaffIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [StaffIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[StaffIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StaffIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT StaffIdentificationSystemDescriptor.[CodeValue] AS StaffIdentificationSystemDescriptorCodeValue, [Staff].[StaffUniqueId], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], StaffIdentificationSystemDescriptor.[Namespace] AS StaffIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS StaffIdentificationSystemDescriptor
                    ON StaffIdentificationSystemDescriptor.[DescriptorId] = T.[StaffIdentificationSystemDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffOtherName] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffOtherName]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffOtherName];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffOtherName]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffOtherName]
            (
                [tid_Staff]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, [Staff].[StaffUniqueId], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffOtherName] AS T 
                JOIN [edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffAddress]
            (
                [tid_Staff]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Staff].[StaffUniqueId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffInternationalAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffInternationalAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffInternationalAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffInternationalAddress]
            (
                [tid_Staff]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Staff].[StaffUniqueId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffInternationalAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffTelephone] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffTelephone];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffTelephone]
            (
                [tid_Staff]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffTelephone] AS T 
                JOIN [edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffElectronicMail] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffElectronicMail]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffElectronicMail];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffElectronicMail]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffElectronicMail]
            (
                [tid_Staff]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, [Staff].[StaffUniqueId], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffElectronicMail] AS T 
                JOIN [edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffRace] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffRace];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffRace]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffRace]
            (
                [tid_Staff]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RaceType.[ShortDescription] AS RaceType, [Staff].[StaffUniqueId]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffVisa] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffVisa]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffVisa];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffVisa]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffVisa]
            (
                [tid_Staff]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffVisa] AS T 
                JOIN [edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffLanguage] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffLanguage];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffLanguage]
            (
                [tid_Staff]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StaffLanguage]
            INTO @Tids
            SELECT T.[tid_Staff]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, [Staff].[StaffUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StaffLanguage]
                , S.[LanguageDescriptorCodeValue]
                , T.[StaffUniqueId]
                , S.[LanguageDescriptorNamespace]
            FROM [t_edfi].[StaffLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_Staff] = T.[tid_Staff]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StaffLanguage] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStaffLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffLanguageUse] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffLanguageUse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffLanguageUse];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffLanguageUse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffLanguageUse]
            (
                [tid_StaffLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, [Staff].[StaffUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[StaffLanguageUse] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[StaffUniqueId] = S.[StaffUniqueId]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffRecognition] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffRecognition]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffRecognition];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffRecognition]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffRecognition]
            (
                [tid_Staff]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RecognitionType.[ShortDescription] AS RecognitionType, [Staff].[StaffUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffRecognition] AS T 
                JOIN [edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffCredential] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffCredential]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffCredential];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffCredential]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffCredential]
            (
                [tid_Staff]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], [Staff].[StaffUniqueId], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffCredential] AS T 
                JOIN [edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffIdentificationDocument] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffIdentificationDocument]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffIdentificationDocument];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffIdentificationDocument]
            (
                [tid_Staff]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, [Staff].[StaffUniqueId], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [edfi].[StaffIdentificationDocument] AS T 
                JOIN [edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffExtension]
            (
                [tid_Staff]
                , [ProbationCompleteDate]
                , [Tenured]
                , [GenderType]
                , [TenureTrack]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ProbationCompleteDate]
                , S.[Tenured]
                , S.[GenderType]
                , S.[TenureTrack]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[ProbationCompleteDate], T.[Tenured], GenderType.[ShortDescription] AS GenderType, T.[TenureTrack]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffExtension] AS T 
                LEFT JOIN [edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffBackgroundCheck] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffBackgroundCheck]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffBackgroundCheck];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffBackgroundCheck]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffBackgroundCheckKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffBackgroundCheck]
            (
                [tid_Staff]
                , [BackgroundCheckTypeDescriptorCodeValue]
                , [BackgroundCheckRequestedDate]
                , [BackgroundCheckStatusDescriptorCodeValue]
                , [BackgroundCheckCompletedDate]
                , [Fingerprint]
                , [BackgroundCheckStatusDescriptorNamespace]
                , [BackgroundCheckTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[BackgroundCheckTypeDescriptorCodeValue]
                , S.[BackgroundCheckRequestedDate]
                , S.[BackgroundCheckStatusDescriptorCodeValue]
                , S.[BackgroundCheckCompletedDate]
                , S.[Fingerprint]
                , S.[BackgroundCheckStatusDescriptorNamespace]
                , S.[BackgroundCheckTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT BackgroundCheckTypeDescriptor.[CodeValue] AS BackgroundCheckTypeDescriptorCodeValue, [Staff].[StaffUniqueId], T.[BackgroundCheckRequestedDate], BackgroundCheckStatusDescriptor.[CodeValue] AS BackgroundCheckStatusDescriptorCodeValue, T.[BackgroundCheckCompletedDate], T.[Fingerprint], BackgroundCheckStatusDescriptor.[Namespace] AS BackgroundCheckStatusDescriptorNamespace, BackgroundCheckTypeDescriptor.[Namespace] AS BackgroundCheckTypeDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffBackgroundCheck] AS T 
                JOIN [edfi].[Descriptor] AS BackgroundCheckTypeDescriptor
                    ON BackgroundCheckTypeDescriptor.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS BackgroundCheckStatusDescriptor
                    ON BackgroundCheckStatusDescriptor.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffHighlyQualifiedAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffHighlyQualifiedAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffHighlyQualifiedAcademicSubject]
            (
                [tid_Staff]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, [Staff].[StaffUniqueId], AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffHighlyQualifiedAcademicSubject] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffSeniority] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffSeniority]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffSeniority];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffSeniority]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffSeniorityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffSeniority]
            (
                [tid_Staff]
                , [CredentialFieldDescriptorCodeValue]
                , [NameOfInstitution]
                , [YearsExperience]
                , [CredentialFieldDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[CredentialFieldDescriptorCodeValue]
                , S.[NameOfInstitution]
                , S.[YearsExperience]
                , S.[CredentialFieldDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CredentialFieldDescriptor.[CodeValue] AS CredentialFieldDescriptorCodeValue, T.[NameOfInstitution], [Staff].[StaffUniqueId], T.[YearsExperience], CredentialFieldDescriptor.[Namespace] AS CredentialFieldDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffSeniority] AS T 
                JOIN [edfi].[Descriptor] AS CredentialFieldDescriptor
                    ON CredentialFieldDescriptor.[DescriptorId] = T.[CredentialFieldDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProgram] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffTeacherPreparationProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProgram];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProgramKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProgram]
            (
                [tid_Staff]
                , [TeacherPreparationProgramName]
                , [TeacherPreparationProgramIdentifier]
                , [TeacherPreparationProgramTypeDescriptorCodeValue]
                , [NameOfInstitution]
                , [MajorSpecialization]
                , [GPA]
                , [LevelOfDegreeAwardedDescriptorCodeValue]
                , [LevelOfDegreeAwardedDescriptorNamespace]
                , [TeacherPreparationProgramTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StaffTeacherPreparationProgram]
            INTO @Tids
            SELECT T.[tid_Staff]
                , S.[TeacherPreparationProgramName]
                , S.[TeacherPreparationProgramIdentifier]
                , S.[TeacherPreparationProgramTypeDescriptorCodeValue]
                , S.[NameOfInstitution]
                , S.[MajorSpecialization]
                , S.[GPA]
                , S.[LevelOfDegreeAwardedDescriptorCodeValue]
                , S.[LevelOfDegreeAwardedDescriptorNamespace]
                , S.[TeacherPreparationProgramTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[TeacherPreparationProgramName], T.[TeacherPreparationProgramIdentifier], TeacherPreparationProgramTypeDescriptor.[CodeValue] AS TeacherPreparationProgramTypeDescriptorCodeValue, T.[NameOfInstitution], T.[MajorSpecialization], T.[GPA], LevelOfDegreeAwardedDescriptor.[CodeValue] AS LevelOfDegreeAwardedDescriptorCodeValue, LevelOfDegreeAwardedDescriptor.[Namespace] AS LevelOfDegreeAwardedDescriptorNamespace, TeacherPreparationProgramTypeDescriptor.[Namespace] AS TeacherPreparationProgramTypeDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffTeacherPreparationProgram] AS T 
                JOIN [edfi].[Descriptor] AS TeacherPreparationProgramTypeDescriptor
                    ON TeacherPreparationProgramTypeDescriptor.[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                JOIN [edfi].[Descriptor] AS LevelOfDegreeAwardedDescriptor
                    ON LevelOfDegreeAwardedDescriptor.[DescriptorId] = T.[LevelOfDegreeAwardedDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StaffTeacherPreparationProgram]
                , T.[StaffUniqueId]
                , S.[TeacherPreparationProgramName]
            FROM [t_extension].[StaffTeacherPreparationProgram] AS S
            JOIN @pTids AS T
                ON S.[tid_Staff] = T.[tid_Staff]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StaffTeacherPreparationProgram] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProgramAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProgramAddress] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffTeacherPreparationProgramAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProgramAddress];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProgramAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffTeacherPreparationProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProgramAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProgramAddress]
            (
                [tid_StaffTeacherPreparationProgram]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffTeacherPreparationProgram]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Staff].[StaffUniqueId], T.[TeacherPreparationProgramName], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                FROM [extension].[StaffTeacherPreparationProgramAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[StaffUniqueId] = S.[StaffUniqueId]
                AND T.[TeacherPreparationProgramName] = S.[TeacherPreparationProgramName];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffApplicant] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffApplicant]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffApplicant];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffApplicant]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffApplicantKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffApplicant]
            (
                [tid_Staff]
                , [ApplicantIdentifier]
                , [EducationOrganizationId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ApplicantIdentifier]
                , S.[EducationOrganizationId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], [Staff].[StaffUniqueId]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffApplicant] AS T 
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffSalary] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffSalary]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffSalary];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffSalary]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffSalaryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffSalary]
            (
                [tid_Staff]
                , [SalaryMinRange]
                , [SalaryMaxRange]
                , [SalaryTypeDescriptorCodeValue]
                , [SalaryAmount]
                , [SalaryTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[SalaryMinRange]
                , S.[SalaryMaxRange]
                , S.[SalaryTypeDescriptorCodeValue]
                , S.[SalaryAmount]
                , S.[SalaryTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[SalaryMinRange], T.[SalaryMaxRange], SalaryTypeDescriptor.[CodeValue] AS SalaryTypeDescriptorCodeValue, T.[SalaryAmount], SalaryTypeDescriptor.[Namespace] AS SalaryTypeDescriptorNamespace
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffSalary] AS T 
                LEFT JOIN [edfi].[Descriptor] AS SalaryTypeDescriptor
                    ON SalaryTypeDescriptor.[DescriptorId] = T.[SalaryTypeDescriptorId]
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherEducatorResearch] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffTeacherEducatorResearch]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffTeacherEducatorResearch];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherEducatorResearch]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherEducatorResearchKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherEducatorResearch]
            (
                [tid_Staff]
                , [ResearchExperienceDate]
                , [ResearchExperienceTitle]
                , [ResearchExperienceDescription]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Staff]
                , S.[ResearchExperienceDate]
                , S.[ResearchExperienceTitle]
                , S.[ResearchExperienceDescription]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Staff].[StaffUniqueId], T.[ResearchExperienceDate], T.[ResearchExperienceTitle], T.[ResearchExperienceDescription]
                , T.[CreateDate]
                , Staff.[LastModifiedDate] AS ParentLastModifiedDate
                , Staff.[Id] AS ParentId
                FROM [extension].[StaffTeacherEducatorResearch] AS T 
                JOIN [edfi].[Staff] AS Staff
                    ON Staff.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffClassificationDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffClassificationDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffClassificationDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffClassificationDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffClassificationDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffClassificationDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StaffClassificationType].[ShortDescription] AS StaffClassificationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StaffClassificationDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StaffClassificationDescriptorId]
                LEFT JOIN [edfi].[StaffClassificationType] AS StaffClassificationType
                    ON [StaffClassificationType].[StaffClassificationTypeId] = T.[StaffClassificationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StaffClassificationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StaffClassificationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffClassificationDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffClassificationDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffClassificationDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffClassificationDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffClassificationDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StaffClassificationDescriptor] AS S
                ON P.[DescriptorId] = S.[StaffClassificationDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffCohortAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffCohortAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffCohortAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffCohortAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffCohortAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffCohortAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[CohortIdentifier]
                , T.[EducationOrganizationId]
                , [Staff].[StaffUniqueId]
                , T.[EndDate]
                , T.[StudentRecordAccess]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StaffCohortAssociation] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [CohortIdentifier]
                    , [EducationOrganizationId]
                    , [StaffUniqueId]
                    , [EndDate]
                    , [StudentRecordAccess]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[CohortIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[StaffUniqueId]
                    , S.[EndDate]
                    , S.[StudentRecordAccess]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffCohortAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[CohortIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffCohortAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffCohortAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffCohortAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffCohortAssociation] AS T
            JOIN [edfi].[StaffCohortAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffEducationOrganizationAssignmentAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue
                , [Staff].[StaffUniqueId]
                , T.[PositionTitle]
                , T.[EndDate]
                , T.[OrderOfAssignment]
                , T.[EmploymentEducationOrganizationId]
                , EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue
                , T.[EmploymentHireDate]
                , EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StaffEducationOrganizationAssignmentAssociation] AS T
                JOIN .[edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON [StaffClassificationDescriptor].[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN .[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON [EmploymentStatusDescriptor].[DescriptorId] = T.[EmploymentStatusDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [StaffClassificationDescriptorCodeValue]
                    , [StaffUniqueId]
                    , [PositionTitle]
                    , [EndDate]
                    , [OrderOfAssignment]
                    , [EmploymentEducationOrganizationId]
                    , [EmploymentStatusDescriptorCodeValue]
                    , [EmploymentHireDate]
                    , [EmploymentStatusDescriptorNamespace]
                    , [StaffClassificationDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[StaffClassificationDescriptorCodeValue]
                    , S.[StaffUniqueId]
                    , S.[PositionTitle]
                    , S.[EndDate]
                    , S.[OrderOfAssignment]
                    , S.[EmploymentEducationOrganizationId]
                    , S.[EmploymentStatusDescriptorCodeValue]
                    , S.[EmploymentHireDate]
                    , S.[EmploymentStatusDescriptorNamespace]
                    , S.[StaffClassificationDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffEducationOrganizationAssignmentAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[StaffClassificationDescriptorCodeValue]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[StaffClassificationDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffEducationOrganizationAssignmentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffEducationOrganizationAssignmentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffEducationOrganizationAssignmentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffEducationOrganizationAssignmentAssociation] AS T
            JOIN [edfi].[StaffEducationOrganizationAssignmentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbStaffEducationOrganizationAssignmentAssociationExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffEducationOrganizationAssignmentAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffEducationOrganizationAssignmentAssociationExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffEducationOrganizationAssignmentAssociationExtension]
            (
                [tid_StaffEducationOrganizationAssignmentAssociation]
                , [YearsOfExperienceAtCurrentEducationOrganization]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffEducationOrganizationAssignmentAssociation]
                , S.[YearsOfExperienceAtCurrentEducationOrganization]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[EducationOrganizationId], StaffClassificationDescriptor.[CodeValue] AS StaffClassificationDescriptorCodeValue, [Staff].[StaffUniqueId], T.[YearsOfExperienceAtCurrentEducationOrganization], StaffClassificationDescriptor.[Namespace] AS StaffClassificationDescriptorNamespace
                , StaffEducationOrganizationAssignmentAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffEducationOrganizationAssignmentAssociation.[Id] AS ParentId
                FROM [extension].[StaffEducationOrganizationAssignmentAssociationExtension] AS T 
                JOIN [edfi].[Descriptor] AS StaffClassificationDescriptor
                    ON StaffClassificationDescriptor.[DescriptorId] = T.[StaffClassificationDescriptorId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[StaffEducationOrganizationAssignmentAssociation] AS StaffEducationOrganizationAssignmentAssociation
                    ON StaffEducationOrganizationAssignmentAssociation.[BeginDate] = T.[BeginDate]
                    AND StaffEducationOrganizationAssignmentAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StaffEducationOrganizationAssignmentAssociation.[StaffClassificationDescriptorId] = T.[StaffClassificationDescriptorId]
                    AND StaffEducationOrganizationAssignmentAssociation.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffEducationOrganizationEmploymentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffEducationOrganizationEmploymentAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , EmploymentStatusDescriptor.[CodeValue] AS EmploymentStatusDescriptorCodeValue
                , T.[HireDate]
                , [Staff].[StaffUniqueId]
                , T.[EndDate]
                , [SeparationType].[ShortDescription] AS SeparationType
                , SeparationReasonDescriptor.[CodeValue] AS SeparationReasonDescriptorCodeValue
                , T.[Department]
                , T.[FullTimeEquivalency]
                , T.[OfferDate]
                , T.[HourlyWage]
                , SeparationReasonDescriptor.[Namespace] AS SeparationReasonDescriptorNamespace
                , EmploymentStatusDescriptor.[Namespace] AS EmploymentStatusDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StaffEducationOrganizationEmploymentAssociation] AS T
                JOIN .[edfi].[Descriptor] AS EmploymentStatusDescriptor
                    ON [EmploymentStatusDescriptor].[DescriptorId] = T.[EmploymentStatusDescriptorId]
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN [edfi].[SeparationType] AS SeparationType
                    ON [SeparationType].[SeparationTypeId] = T.[SeparationTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS SeparationReasonDescriptor
                    ON [SeparationReasonDescriptor].[DescriptorId] = T.[SeparationReasonDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [EmploymentStatusDescriptorCodeValue]
                    , [HireDate]
                    , [StaffUniqueId]
                    , [EndDate]
                    , [SeparationType]
                    , [SeparationReasonDescriptorCodeValue]
                    , [Department]
                    , [FullTimeEquivalency]
                    , [OfferDate]
                    , [HourlyWage]
                    , [SeparationReasonDescriptorNamespace]
                    , [EmploymentStatusDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[EmploymentStatusDescriptorCodeValue]
                    , S.[HireDate]
                    , S.[StaffUniqueId]
                    , S.[EndDate]
                    , S.[SeparationType]
                    , S.[SeparationReasonDescriptorCodeValue]
                    , S.[Department]
                    , S.[FullTimeEquivalency]
                    , S.[OfferDate]
                    , S.[HourlyWage]
                    , S.[SeparationReasonDescriptorNamespace]
                    , S.[EmploymentStatusDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffEducationOrganizationEmploymentAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EmploymentStatusDescriptorCodeValue]
                , INSERTED.[HireDate]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[EmploymentStatusDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffEducationOrganizationEmploymentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffEducationOrganizationEmploymentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffEducationOrganizationEmploymentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffEducationOrganizationEmploymentAssociation] AS T
            JOIN [edfi].[StaffEducationOrganizationEmploymentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffIdentificationSystemDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffIdentificationSystemDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffIdentificationSystemDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StaffIdentificationSystemType].[ShortDescription] AS StaffIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StaffIdentificationSystemDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StaffIdentificationSystemDescriptorId]
                LEFT JOIN [edfi].[StaffIdentificationSystemType] AS StaffIdentificationSystemType
                    ON [StaffIdentificationSystemType].[StaffIdentificationSystemTypeId] = T.[StaffIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StaffIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StaffIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffIdentificationSystemDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StaffIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[StaffIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffProgramAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffProgramAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Staff].[StaffUniqueId]
                , T.[EndDate]
                , T.[StudentRecordAccess]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StaffProgramAssociation] AS T
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StaffUniqueId]
                    , [EndDate]
                    , [StudentRecordAccess]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StaffUniqueId]
                    , S.[EndDate]
                    , S.[StudentRecordAccess]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffProgramAssociation] AS T
            JOIN [edfi].[StaffProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSchoolAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffSchoolAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSchoolAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffSchoolAssociation] AS T
            USING
            (
                SELECT ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue
                , T.[SchoolId]
                , [Staff].[StaffUniqueId]
                , T.[SchoolYear]
                , ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StaffSchoolAssociation] AS T
                JOIN .[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON [ProgramAssignmentDescriptor].[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ProgramAssignmentDescriptorCodeValue]
                    , [SchoolId]
                    , [StaffUniqueId]
                    , [SchoolYear]
                    , [ProgramAssignmentDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ProgramAssignmentDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StaffUniqueId]
                    , S.[SchoolYear]
                    , S.[ProgramAssignmentDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffSchoolAssociation]
                , INSERTED.[ProgramAssignmentDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[ProgramAssignmentDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffSchoolAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffSchoolAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffSchoolAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffSchoolAssociation] AS T
            JOIN [edfi].[StaffSchoolAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStaffSchoolAssociationGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSchoolAssociationGradeLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffSchoolAssociationGradeLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociationGradeLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociationGradeLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffSchoolAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSchoolAssociationGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffSchoolAssociationGradeLevel]
            (
                [tid_StaffSchoolAssociation]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffSchoolAssociation]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue, T.[SchoolId], [Staff].[StaffUniqueId], ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , StaffSchoolAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffSchoolAssociation.[Id] AS ParentId
                FROM [edfi].[StaffSchoolAssociationGradeLevel] AS T 
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON ProgramAssignmentDescriptor.[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[StaffSchoolAssociation] AS StaffSchoolAssociation
                    ON StaffSchoolAssociation.[ProgramAssignmentDescriptorId] = T.[ProgramAssignmentDescriptorId]
                    AND StaffSchoolAssociation.[SchoolId] = T.[SchoolId]
                    AND StaffSchoolAssociation.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffSchoolAssociationAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StaffSchoolAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSchoolAssociationAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StaffSchoolAssociationAcademicSubject]
            (
                [tid_StaffSchoolAssociation]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffSchoolAssociation]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue, T.[SchoolId], [Staff].[StaffUniqueId], ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StaffSchoolAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffSchoolAssociation.[Id] AS ParentId
                FROM [edfi].[StaffSchoolAssociationAcademicSubject] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON ProgramAssignmentDescriptor.[DescriptorId] = T.[ProgramAssignmentDescriptorId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[StaffSchoolAssociation] AS StaffSchoolAssociation
                    ON StaffSchoolAssociation.[ProgramAssignmentDescriptorId] = T.[ProgramAssignmentDescriptorId]
                    AND StaffSchoolAssociation.[SchoolId] = T.[SchoolId]
                    AND StaffSchoolAssociation.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStaffSectionAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStaffSectionAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStaffSectionAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStaffSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StaffSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StaffSectionAssociation] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Staff].[StaffUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , ClassroomPositionDescriptor.[CodeValue] AS ClassroomPositionDescriptorCodeValue
                , T.[BeginDate]
                , T.[EndDate]
                , T.[HighlyQualifiedTeacher]
                , T.[TeacherStudentDataLinkExclusion]
                , T.[PercentageContribution]
                , ClassroomPositionDescriptor.[Namespace] AS ClassroomPositionDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StaffSectionAssociation] AS T
                JOIN .[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                JOIN .[edfi].[Descriptor] AS ClassroomPositionDescriptor
                    ON [ClassroomPositionDescriptor].[DescriptorId] = T.[ClassroomPositionDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StaffUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [ClassroomPositionDescriptorCodeValue]
                    , [BeginDate]
                    , [EndDate]
                    , [HighlyQualifiedTeacher]
                    , [TeacherStudentDataLinkExclusion]
                    , [PercentageContribution]
                    , [ClassroomPositionDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StaffUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[ClassroomPositionDescriptorCodeValue]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[HighlyQualifiedTeacher]
                    , S.[TeacherStudentDataLinkExclusion]
                    , S.[PercentageContribution]
                    , S.[ClassroomPositionDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffSectionAssociation]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StaffSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StaffSectionAssociation] AS T
            JOIN [edfi].[StaffSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStateEducationAgency] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStateEducationAgency]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStateEducationAgency];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStateEducationAgency]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StateEducationAgencyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StateEducationAgency] AS T
            USING
            (
                SELECT T.[StateEducationAgencyId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StateEducationAgency] AS T
                JOIN [edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[StateEducationAgencyId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StateEducationAgencyId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StateEducationAgencyId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StateEducationAgency]
                , INSERTED.[StateEducationAgencyId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StateEducationAgencySnapshotRecord]
            (
                [SnapshotId]
                , [tid_StateEducationAgency]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StateEducationAgency]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StateEducationAgency] AS T
            JOIN [edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StateEducationAgency] AS S
                ON P.[EducationOrganizationId] = S.[StateEducationAgencyId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStateEducationAgencyAccountability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStateEducationAgencyFederalFunds] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStateEducationAgencyAccountability] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStateEducationAgencyAccountability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStateEducationAgencyAccountability];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStateEducationAgencyAccountability]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StateEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StateEducationAgencyAccountabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StateEducationAgencyAccountability]
            (
                [tid_StateEducationAgency]
                , [SchoolYear]
                , [CTEGraduationRateInclusion]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StateEducationAgency]
                , S.[SchoolYear]
                , S.[CTEGraduationRateInclusion]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SchoolYear], T.[StateEducationAgencyId], T.[CTEGraduationRateInclusion]
                , T.[CreateDate]
                FROM [edfi].[StateEducationAgencyAccountability] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[StateEducationAgencyId] = S.[StateEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStateEducationAgencyFederalFunds] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStateEducationAgencyFederalFunds]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStateEducationAgencyFederalFunds];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStateEducationAgencyFederalFunds]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StateEducationAgencyKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StateEducationAgencyFederalFundsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StateEducationAgencyFederalFunds]
            (
                [tid_StateEducationAgency]
                , [FiscalYear]
                , [FederalProgramsFundingAllocation]
                , [CreateDate]
                , [LastModifiedDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StateEducationAgency]
                , S.[FiscalYear]
                , S.[FederalProgramsFundingAllocation]
                , S.[CreateDate]
                , S.[LastModifiedDate]
                , S.[Id]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FiscalYear], T.[StateEducationAgencyId], T.[FederalProgramsFundingAllocation]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StateEducationAgencyFederalFunds] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[StateEducationAgencyId] = S.[StateEducationAgencyId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[Student] AS T
            USING
            (
                SELECT T.[StudentUniqueId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[BirthCity]
                , [BirthStateAbbreviationType].[ShortDescription] AS BirthStateAbbreviationType
                , T.[BirthInternationalProvince]
                , BirthCountryDescriptor.[CodeValue] AS BirthCountryDescriptorCodeValue
                , T.[DateEnteredUS]
                , T.[MultipleBirthStatus]
                , T.[ProfileThumbnail]
                , T.[HispanicLatinoEthnicity]
                , [OldEthnicityType].[ShortDescription] AS OldEthnicityType
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , T.[EconomicDisadvantaged]
                , SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue
                , LimitedEnglishProficiencyDescriptor.[CodeValue] AS LimitedEnglishProficiencyDescriptorCodeValue
                , T.[DisplacementStatus]
                , T.[LoginId]
                , LimitedEnglishProficiencyDescriptor.[Namespace] AS LimitedEnglishProficiencyDescriptorNamespace
                , SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , BirthCountryDescriptor.[Namespace] AS BirthCountryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[Student] AS T
                JOIN [edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [edfi].[StateAbbreviationType] AS BirthStateAbbreviationType
                    ON [BirthStateAbbreviationType].[StateAbbreviationTypeId] = T.[BirthStateAbbreviationTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS BirthCountryDescriptor
                    ON [BirthCountryDescriptor].[DescriptorId] = T.[BirthCountryDescriptorId]
                LEFT JOIN [edfi].[OldEthnicityType] AS OldEthnicityType
                    ON [OldEthnicityType].[OldEthnicityTypeId] = T.[OldEthnicityTypeId]
                LEFT JOIN [edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON [SchoolFoodServicesEligibilityDescriptor].[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS LimitedEnglishProficiencyDescriptor
                    ON [LimitedEnglishProficiencyDescriptor].[DescriptorId] = T.[LimitedEnglishProficiencyDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StudentUniqueId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [BirthCity]
                    , [BirthStateAbbreviationType]
                    , [BirthInternationalProvince]
                    , [BirthCountryDescriptorCodeValue]
                    , [DateEnteredUS]
                    , [MultipleBirthStatus]
                    , [ProfileThumbnail]
                    , [HispanicLatinoEthnicity]
                    , [OldEthnicityType]
                    , [CitizenshipStatusType]
                    , [EconomicDisadvantaged]
                    , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , [LimitedEnglishProficiencyDescriptorCodeValue]
                    , [DisplacementStatus]
                    , [LoginId]
                    , [LimitedEnglishProficiencyDescriptorNamespace]
                    , [SchoolFoodServicesEligibilityDescriptorNamespace]
                    , [BirthCountryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StudentUniqueId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[BirthCity]
                    , S.[BirthStateAbbreviationType]
                    , S.[BirthInternationalProvince]
                    , S.[BirthCountryDescriptorCodeValue]
                    , S.[DateEnteredUS]
                    , S.[MultipleBirthStatus]
                    , S.[ProfileThumbnail]
                    , S.[HispanicLatinoEthnicity]
                    , S.[OldEthnicityType]
                    , S.[CitizenshipStatusType]
                    , S.[EconomicDisadvantaged]
                    , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , S.[LimitedEnglishProficiencyDescriptorCodeValue]
                    , S.[DisplacementStatus]
                    , S.[LoginId]
                    , S.[LimitedEnglishProficiencyDescriptorNamespace]
                    , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                    , S.[BirthCountryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Student]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Student]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Student]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[Student] AS T
            JOIN [edfi].[Student] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentProgramParticipation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentLearningStyle] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCohortYear] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentIndicator] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIdentificationCode] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentIdentificationCode]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentIdentificationCode];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentIdentificationCode]
            (
                [tid_Student]
                , [AssigningOrganizationIdentificationCode]
                , [StudentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [StudentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StudentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[StudentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssigningOrganizationIdentificationCode], StudentIdentificationSystemDescriptor.[CodeValue] AS StudentIdentificationSystemDescriptorCodeValue, [Student].[StudentUniqueId], T.[IdentificationCode], StudentIdentificationSystemDescriptor.[Namespace] AS StudentIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentIdentificationCode] AS T 
                JOIN [edfi].[Descriptor] AS StudentIdentificationSystemDescriptor
                    ON StudentIdentificationSystemDescriptor.[DescriptorId] = T.[StudentIdentificationSystemDescriptorId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentOtherName] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentOtherName]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentOtherName];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentOtherName]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentOtherName]
            (
                [tid_Student]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, [Student].[StudentUniqueId], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentOtherName] AS T 
                JOIN [edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAddress]
            (
                [tid_Student]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Student].[StudentUniqueId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInternationalAddress] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentInternationalAddress]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentInternationalAddress];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentInternationalAddress]
            (
                [tid_Student]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, [Student].[StudentUniqueId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentInternationalAddress] AS T 
                JOIN [edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentTelephone] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentTelephone]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentTelephone];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentTelephone]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentTelephone]
            (
                [tid_Student]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Student].[StudentUniqueId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentTelephone] AS T 
                JOIN [edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentElectronicMail] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentElectronicMail]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentElectronicMail];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentElectronicMail]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentElectronicMail]
            (
                [tid_Student]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, [Student].[StudentUniqueId], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentElectronicMail] AS T 
                JOIN [edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentRace] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentRace]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentRace];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentRace]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentRace]
            (
                [tid_Student]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RaceType.[ShortDescription] AS RaceType, [Student].[StudentUniqueId]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentRace] AS T 
                JOIN [edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentVisa] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentVisa]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentVisa];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentVisa]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentVisa]
            (
                [tid_Student]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Student].[StudentUniqueId], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentVisa] AS T 
                JOIN [edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCharacteristic] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCharacteristic];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCharacteristic]
            (
                [tid_Student]
                , [StudentCharacteristicDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [StudentCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[StudentCharacteristicDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[StudentCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT StudentCharacteristicDescriptor.[CodeValue] AS StudentCharacteristicDescriptorCodeValue, [Student].[StudentUniqueId], T.[BeginDate], T.[EndDate], T.[DesignatedBy], StudentCharacteristicDescriptor.[Namespace] AS StudentCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentCharacteristic] AS T 
                JOIN [edfi].[Descriptor] AS StudentCharacteristicDescriptor
                    ON StudentCharacteristicDescriptor.[DescriptorId] = T.[StudentCharacteristicDescriptorId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLanguage] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentLanguage]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentLanguage];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentLanguage]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentLanguage]
            (
                [tid_Student]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StudentLanguage]
            INTO @Tids
            SELECT T.[tid_Student]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, [Student].[StudentUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentLanguage] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StudentLanguage]
                , S.[LanguageDescriptorCodeValue]
                , T.[StudentUniqueId]
                , S.[LanguageDescriptorNamespace]
            FROM [t_edfi].[StudentLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_Student] = T.[tid_Student]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StudentLanguage] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLanguageUse] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentLanguageUse]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentLanguageUse];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentLanguageUse]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentLanguageUse]
            (
                [tid_StudentLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, [Student].[StudentUniqueId], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[StudentLanguageUse] AS T 
                JOIN [edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[StudentUniqueId] = S.[StudentUniqueId]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentDisability] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentDisability]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentDisability];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentDisability]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentDisability]
            (
                [tid_Student]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, [Student].[StudentUniqueId], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentDisability] AS T 
                JOIN [edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramParticipation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentProgramParticipation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentProgramParticipation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramParticipation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramParticipationKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentProgramParticipation]
            (
                [tid_Student]
                , [ProgramType]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StudentProgramParticipation]
            INTO @Tids
            SELECT T.[tid_Student]
                , S.[ProgramType]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramType.[ShortDescription] AS ProgramType, [Student].[StudentUniqueId], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentProgramParticipation] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StudentProgramParticipation]
                , S.[ProgramType]
                , T.[StudentUniqueId]
            FROM [t_edfi].[StudentProgramParticipation] AS S
            JOIN @pTids AS T
                ON S.[tid_Student] = T.[tid_Student]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StudentProgramParticipation] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramParticipationProgramCharacteristic]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentProgramParticipationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramParticipationProgramCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentProgramParticipationProgramCharacteristic]
            (
                [tid_StudentProgramParticipation]
                , [ProgramCharacteristicDescriptorCodeValue]
                , [ProgramCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentProgramParticipation]
                , S.[ProgramCharacteristicDescriptorCodeValue]
                , S.[ProgramCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramCharacteristicDescriptor.[CodeValue] AS ProgramCharacteristicDescriptorCodeValue, ProgramType.[ShortDescription] AS ProgramType, [Student].[StudentUniqueId], ProgramCharacteristicDescriptor.[Namespace] AS ProgramCharacteristicDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[StudentProgramParticipationProgramCharacteristic] AS T 
                JOIN [edfi].[Descriptor] AS ProgramCharacteristicDescriptor
                    ON ProgramCharacteristicDescriptor.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[ProgramType] = S.[ProgramType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLearningStyle] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentLearningStyle]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentLearningStyle];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentLearningStyle]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLearningStyleKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentLearningStyle]
            (
                [tid_Student]
                , [VisualLearning]
                , [AuditoryLearning]
                , [TactileLearning]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[VisualLearning]
                , S.[AuditoryLearning]
                , S.[TactileLearning]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT [Student].[StudentUniqueId], T.[VisualLearning], T.[AuditoryLearning], T.[TactileLearning]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentLearningStyle] AS T 
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCohortYear] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCohortYear]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCohortYear];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCohortYear]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCohortYearKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCohortYear]
            (
                [tid_Student]
                , [CohortYearType]
                , [SchoolYear]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[CohortYearType]
                , S.[SchoolYear]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CohortYearType.[ShortDescription] AS CohortYearType, T.[SchoolYear], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentCohortYear] AS T 
                JOIN [edfi].[CohortYearType] AS CohortYearType
                    ON CohortYearType.[CohortYearTypeId] = T.[CohortYearTypeId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIndicator] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentIndicator]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentIndicator];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentIndicator]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIndicatorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentIndicator]
            (
                [tid_Student]
                , [IndicatorName]
                , [IndicatorGroup]
                , [Indicator]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[IndicatorName]
                , S.[IndicatorGroup]
                , S.[Indicator]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[IndicatorName], [Student].[StudentUniqueId], T.[IndicatorGroup], T.[Indicator], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentIndicator] AS T 
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIdentificationDocument] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentIdentificationDocument]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentIdentificationDocument];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentIdentificationDocument]
            (
                [tid_Student]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Student]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, [Student].[StudentUniqueId], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Student.[LastModifiedDate] AS ParentLastModifiedDate
                , Student.[Id] AS ParentId
                FROM [edfi].[StudentIdentificationDocument] AS T 
                JOIN [edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [edfi].[Student] AS Student
                    ON Student.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecord] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAcademicRecord]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAcademicRecord];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentAcademicRecord] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CumulativeEarnedCredits]
                , [CumulativeEarnedCreditType].[ShortDescription] AS CumulativeEarnedCreditType
                , T.[CumulativeEarnedCreditConversion]
                , T.[CumulativeAttemptedCredits]
                , [CumulativeAttemptedCreditType].[ShortDescription] AS CumulativeAttemptedCreditType
                , T.[CumulativeAttemptedCreditConversion]
                , T.[CumulativeGradePointsEarned]
                , T.[CumulativeGradePointAverage]
                , T.[GradeValueQualifier]
                , T.[ProjectedGraduationDate]
                , T.[SessionEarnedCredits]
                , [SessionEarnedCreditType].[ShortDescription] AS SessionEarnedCreditType
                , T.[SessionEarnedCreditConversion]
                , T.[SessionAttemptedCredits]
                , [SessionAttemptedCreditType].[ShortDescription] AS SessionAttemptedCreditType
                , T.[SessionAttemptedCreditConversion]
                , T.[SessionGradePointsEarned]
                , T.[SessionGradePointAverage]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentAcademicRecord] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[CreditType] AS CumulativeEarnedCreditType
                    ON [CumulativeEarnedCreditType].[CreditTypeId] = T.[CumulativeEarnedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS CumulativeAttemptedCreditType
                    ON [CumulativeAttemptedCreditType].[CreditTypeId] = T.[CumulativeAttemptedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS SessionEarnedCreditType
                    ON [SessionEarnedCreditType].[CreditTypeId] = T.[SessionEarnedCreditTypeId]
                LEFT JOIN [edfi].[CreditType] AS SessionAttemptedCreditType
                    ON [SessionAttemptedCreditType].[CreditTypeId] = T.[SessionAttemptedCreditTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [CumulativeEarnedCredits]
                    , [CumulativeEarnedCreditType]
                    , [CumulativeEarnedCreditConversion]
                    , [CumulativeAttemptedCredits]
                    , [CumulativeAttemptedCreditType]
                    , [CumulativeAttemptedCreditConversion]
                    , [CumulativeGradePointsEarned]
                    , [CumulativeGradePointAverage]
                    , [GradeValueQualifier]
                    , [ProjectedGraduationDate]
                    , [SessionEarnedCredits]
                    , [SessionEarnedCreditType]
                    , [SessionEarnedCreditConversion]
                    , [SessionAttemptedCredits]
                    , [SessionAttemptedCreditType]
                    , [SessionAttemptedCreditConversion]
                    , [SessionGradePointsEarned]
                    , [SessionGradePointAverage]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[CumulativeEarnedCredits]
                    , S.[CumulativeEarnedCreditType]
                    , S.[CumulativeEarnedCreditConversion]
                    , S.[CumulativeAttemptedCredits]
                    , S.[CumulativeAttemptedCreditType]
                    , S.[CumulativeAttemptedCreditConversion]
                    , S.[CumulativeGradePointsEarned]
                    , S.[CumulativeGradePointAverage]
                    , S.[GradeValueQualifier]
                    , S.[ProjectedGraduationDate]
                    , S.[SessionEarnedCredits]
                    , S.[SessionEarnedCreditType]
                    , S.[SessionEarnedCreditConversion]
                    , S.[SessionAttemptedCredits]
                    , S.[SessionAttemptedCreditType]
                    , S.[SessionAttemptedCreditConversion]
                    , S.[SessionGradePointsEarned]
                    , S.[SessionGradePointAverage]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentAcademicRecord]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentAcademicRecord] AS T
            JOIN [edfi].[StudentAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentAcademicRecordClassRanking] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordAcademicHonor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordDiploma] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecordReportCard] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordClassRanking] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAcademicRecordClassRanking]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordClassRanking];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordClassRanking]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordClassRankingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordClassRanking]
            (
                [tid_StudentAcademicRecord]
                , [ClassRank]
                , [TotalNumberInClass]
                , [PercentageRanking]
                , [ClassRankingDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[ClassRank]
                , S.[TotalNumberInClass]
                , S.[PercentageRanking]
                , S.[ClassRankingDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[ClassRank], T.[TotalNumberInClass], T.[PercentageRanking], T.[ClassRankingDate], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [edfi].[StudentAcademicRecordClassRanking] AS T 
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordAcademicHonor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAcademicRecordAcademicHonor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordAcademicHonor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordAcademicHonor]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordAcademicHonorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordAcademicHonor]
            (
                [tid_StudentAcademicRecord]
                , [AcademicHonorCategoryType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [HonorDescription]
                , [HonorAwardDate]
                , [HonorAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[AcademicHonorCategoryType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[HonorDescription]
                , S.[HonorAwardDate]
                , S.[HonorAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicHonorCategoryType.[ShortDescription] AS AcademicHonorCategoryType, T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[HonorDescription], T.[HonorAwardDate], T.[HonorAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [edfi].[StudentAcademicRecordAcademicHonor] AS T 
                JOIN [edfi].[AcademicHonorCategoryType] AS AcademicHonorCategoryType
                    ON AcademicHonorCategoryType.[AcademicHonorCategoryTypeId] = T.[AcademicHonorCategoryTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordRecognition] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAcademicRecordRecognition]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordRecognition];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordRecognition]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordRecognition]
            (
                [tid_StudentAcademicRecord]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], RecognitionType.[ShortDescription] AS RecognitionType, T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [edfi].[StudentAcademicRecordRecognition] AS T 
                JOIN [edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordDiploma] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAcademicRecordDiploma]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordDiploma];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordDiploma]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordDiplomaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordDiploma]
            (
                [tid_StudentAcademicRecord]
                , [DiplomaAwardDate]
                , [DiplomaType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [DiplomaLevelType]
                , [CTECompleter]
                , [DiplomaDescription]
                , [DiplomaAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[DiplomaAwardDate]
                , S.[DiplomaType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[DiplomaLevelType]
                , S.[CTECompleter]
                , S.[DiplomaDescription]
                , S.[DiplomaAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DiplomaAwardDate], DiplomaType.[ShortDescription] AS DiplomaType, T.[EducationOrganizationId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], DiplomaLevelType.[ShortDescription] AS DiplomaLevelType, T.[CTECompleter], T.[DiplomaDescription], T.[DiplomaAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [edfi].[StudentAcademicRecordDiploma] AS T 
                JOIN [edfi].[DiplomaType] AS DiplomaType
                    ON DiplomaType.[DiplomaTypeId] = T.[DiplomaTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [edfi].[DiplomaLevelType] AS DiplomaLevelType
                    ON DiplomaLevelType.[DiplomaLevelTypeId] = T.[DiplomaLevelTypeId]
                JOIN [edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAcademicRecordReportCard] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAcademicRecordReportCard]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordReportCard];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAcademicRecordReportCard]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAcademicRecordReportCardKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAcademicRecordReportCard]
            (
                [tid_StudentAcademicRecord]
                , [GradingPeriodBeginDate]
                , [GradingPeriodDescriptorCodeValue]
                , [SchoolId]
                , [GradingPeriodDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAcademicRecord]
                , S.[GradingPeriodBeginDate]
                , S.[GradingPeriodDescriptorCodeValue]
                , S.[SchoolId]
                , S.[GradingPeriodDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[GradingPeriodBeginDate], GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, TermDescriptor.[Namespace] AS TermDescriptorNamespace, GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , StudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAcademicRecord.[Id] AS ParentId
                FROM [edfi].[StudentAcademicRecordReportCard] AS T 
                JOIN [edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON GradingPeriodDescriptor.[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[StudentAcademicRecord] AS StudentAcademicRecord
                    ON StudentAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND StudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
                    AND StudentAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessment] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessment];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentAssessment] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[AdministrationDate]
                , AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue
                , T.[AssessmentTitle]
                , [Student].[StudentUniqueId]
                , T.[Version]
                , T.[AdministrationEndDate]
                , T.[SerialNumber]
                , AdministrationLanguageDescriptor.[CodeValue] AS AdministrationLanguageDescriptorCodeValue
                , [AdministrationEnvironmentType].[ShortDescription] AS AdministrationEnvironmentType
                , [RetestIndicatorType].[ShortDescription] AS RetestIndicatorType
                , [ReasonNotTestedType].[ShortDescription] AS ReasonNotTestedType
                , WhenAssessedGradeLevelDescriptor.[CodeValue] AS WhenAssessedGradeLevelDescriptorCodeValue
                , [EventCircumstanceType].[ShortDescription] AS EventCircumstanceType
                , T.[EventDescription]
                , WhenAssessedGradeLevelDescriptor.[Namespace] AS WhenAssessedGradeLevelDescriptorNamespace
                , AdministrationLanguageDescriptor.[Namespace] AS AdministrationLanguageDescriptorNamespace
                , AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentAssessment] AS T
                JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN .[edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON [AssessedGradeLevelDescriptor].[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN .[edfi].[Descriptor] AS AdministrationLanguageDescriptor
                    ON [AdministrationLanguageDescriptor].[DescriptorId] = T.[AdministrationLanguageDescriptorId]
                LEFT JOIN [edfi].[AdministrationEnvironmentType] AS AdministrationEnvironmentType
                    ON [AdministrationEnvironmentType].[AdministrationEnvironmentTypeId] = T.[AdministrationEnvironmentTypeId]
                LEFT JOIN [edfi].[RetestIndicatorType] AS RetestIndicatorType
                    ON [RetestIndicatorType].[RetestIndicatorTypeId] = T.[RetestIndicatorTypeId]
                LEFT JOIN [edfi].[ReasonNotTestedType] AS ReasonNotTestedType
                    ON [ReasonNotTestedType].[ReasonNotTestedTypeId] = T.[ReasonNotTestedTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS WhenAssessedGradeLevelDescriptor
                    ON [WhenAssessedGradeLevelDescriptor].[DescriptorId] = T.[WhenAssessedGradeLevelDescriptorId]
                LEFT JOIN [edfi].[EventCircumstanceType] AS EventCircumstanceType
                    ON [EventCircumstanceType].[EventCircumstanceTypeId] = T.[EventCircumstanceTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [AdministrationDate]
                    , [AssessedGradeLevelDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [StudentUniqueId]
                    , [Version]
                    , [AdministrationEndDate]
                    , [SerialNumber]
                    , [AdministrationLanguageDescriptorCodeValue]
                    , [AdministrationEnvironmentType]
                    , [RetestIndicatorType]
                    , [ReasonNotTestedType]
                    , [WhenAssessedGradeLevelDescriptorCodeValue]
                    , [EventCircumstanceType]
                    , [EventDescription]
                    , [WhenAssessedGradeLevelDescriptorNamespace]
                    , [AdministrationLanguageDescriptorNamespace]
                    , [AssessedGradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[AssessedGradeLevelDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[StudentUniqueId]
                    , S.[Version]
                    , S.[AdministrationEndDate]
                    , S.[SerialNumber]
                    , S.[AdministrationLanguageDescriptorCodeValue]
                    , S.[AdministrationEnvironmentType]
                    , S.[RetestIndicatorType]
                    , S.[ReasonNotTestedType]
                    , S.[WhenAssessedGradeLevelDescriptorCodeValue]
                    , S.[EventCircumstanceType]
                    , S.[EventDescription]
                    , S.[WhenAssessedGradeLevelDescriptorNamespace]
                    , S.[AdministrationLanguageDescriptorNamespace]
                    , S.[AssessedGradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentAssessment]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[AdministrationDate]
                , INSERTED.[AssessedGradeLevelDescriptorCodeValue]
                , INSERTED.[AssessmentTitle]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[Version]
                , INSERTED.[AssessedGradeLevelDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentAssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentAssessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentAssessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentAssessment] AS T
            JOIN [edfi].[StudentAssessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentAssessmentAccommodation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentItem] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentAccommodation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessmentAccommodation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessmentAccommodation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentAccommodation]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentAccommodationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentAccommodation]
            (
                [tid_StudentAssessment]
                , [AccommodationDescriptorCodeValue]
                , [AccommodationDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[AccommodationDescriptorCodeValue]
                , S.[AccommodationDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AccommodationDescriptor.[CodeValue] AS AccommodationDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], [Student].[StudentUniqueId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AccommodationDescriptor.[Namespace] AS AccommodationDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [edfi].[StudentAssessmentAccommodation] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AccommodationDescriptor
                    ON AccommodationDescriptor.[DescriptorId] = T.[AccommodationDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentScoreResult] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessmentScoreResult]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessmentScoreResult];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentScoreResult]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentScoreResult]
            (
                [tid_StudentAssessment]
                , [AssessmentReportingMethodType]
                , [Result]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], [Student].[StudentUniqueId], T.[Version], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [edfi].[StudentAssessmentScoreResult] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentPerformanceLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessmentPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessmentPerformanceLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentPerformanceLevel]
            (
                [tid_StudentAssessment]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMet]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMet]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, [Student].[StudentUniqueId], T.[Version], T.[PerformanceLevelMet], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [edfi].[StudentAssessmentPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentItem] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessmentItem]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessmentItem];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentItem]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentItemKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentItem]
            (
                [tid_StudentAssessment]
                , [IdentificationCode]
                , [AssessmentResponse]
                , [DescriptiveFeedback]
                , [ResponseIndicatorType]
                , [AssessmentItemResultType]
                , [RawScoreResult]
                , [TimeAssessed]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessment]
                , S.[IdentificationCode]
                , S.[AssessmentResponse]
                , S.[DescriptiveFeedback]
                , S.[ResponseIndicatorType]
                , S.[AssessmentItemResultType]
                , S.[RawScoreResult]
                , S.[TimeAssessed]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], [Student].[StudentUniqueId], T.[Version], T.[AssessmentResponse], T.[DescriptiveFeedback], ResponseIndicatorType.[ShortDescription] AS ResponseIndicatorType, AssessmentItemResultType.[ShortDescription] AS AssessmentItemResultType, T.[RawScoreResult], T.[TimeAssessed], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [edfi].[StudentAssessmentItem] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[ResponseIndicatorType] AS ResponseIndicatorType
                    ON ResponseIndicatorType.[ResponseIndicatorTypeId] = T.[ResponseIndicatorTypeId]
                JOIN [edfi].[AssessmentItemResultType] AS AssessmentItemResultType
                    ON AssessmentItemResultType.[AssessmentItemResultTypeId] = T.[AssessmentItemResultTypeId]
                JOIN [edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessment]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentStudentObjectiveAssessment]
            (
                [tid_StudentAssessment]
                , [IdentificationCode]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_StudentAssessmentStudentObjectiveAssessment]
            INTO @Tids
            SELECT T.[tid_StudentAssessment]
                , S.[IdentificationCode]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], [Student].[StudentUniqueId], T.[Version], AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentAssessment.[Id] AS ParentId
                FROM [edfi].[StudentAssessmentStudentObjectiveAssessment] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[StudentAssessment] AS StudentAssessment
                    ON StudentAssessment.[AcademicSubjectDescriptorId] = T.[AcademicSubjectDescriptorId]
                    AND StudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND StudentAssessment.[AssessedGradeLevelDescriptorId] = T.[AssessedGradeLevelDescriptorId]
                    AND StudentAssessment.[AssessmentTitle] = T.[AssessmentTitle]
                    AND StudentAssessment.[StudentUSI] = T.[StudentUSI]
                    AND StudentAssessment.[Version] = T.[Version]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_StudentAssessmentStudentObjectiveAssessment]
                , T.[AcademicSubjectDescriptorCodeValue]
                , T.[AdministrationDate]
                , T.[AssessedGradeLevelDescriptorCodeValue]
                , T.[AssessmentTitle]
                , S.[IdentificationCode]
                , T.[StudentUniqueId]
                , T.[Version]
                , T.[AssessedGradeLevelDescriptorNamespace]
                , T.[AcademicSubjectDescriptorNamespace]
            FROM [t_edfi].[StudentAssessmentStudentObjectiveAssessment] AS S
            JOIN @pTids AS T
                ON S.[tid_StudentAssessment] = T.[tid_StudentAssessment]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_StudentAssessmentStudentObjectiveAssessment] = I.List;

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentScoreResult]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult]
            (
                [tid_StudentAssessmentStudentObjectiveAssessment]
                , [AssessmentReportingMethodType]
                , [Result]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessmentStudentObjectiveAssessment]
                , S.[AssessmentReportingMethodType]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[AssessmentTitle], T.[IdentificationCode], [Student].[StudentUniqueId], T.[Version], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AdministrationDate] = S.[AdministrationDate]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[IdentificationCode] = S.[IdentificationCode]
                AND T.[StudentUniqueId] = S.[StudentUniqueId]
                AND T.[Version] = S.[Version]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentAssessmentStudentObjectiveAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentAssessmentStudentObjectiveAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel]
            (
                [tid_StudentAssessmentStudentObjectiveAssessment]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMet]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentAssessmentStudentObjectiveAssessment]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMet]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[AdministrationDate], AssessedGradeLevelDescriptor.[CodeValue] AS AssessedGradeLevelDescriptorCodeValue, T.[AssessmentTitle], T.[IdentificationCode], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, [Student].[StudentUniqueId], T.[Version], T.[PerformanceLevelMet], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace, AssessedGradeLevelDescriptor.[Namespace] AS AssessedGradeLevelDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                FROM [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] AS T 
                JOIN [edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [edfi].[Descriptor] AS AssessedGradeLevelDescriptor
                    ON AssessedGradeLevelDescriptor.[DescriptorId] = T.[AssessedGradeLevelDescriptorId]
                JOIN [edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[AcademicSubjectDescriptorCodeValue] = S.[AcademicSubjectDescriptorCodeValue]
                AND T.[AdministrationDate] = S.[AdministrationDate]
                AND T.[AssessedGradeLevelDescriptorCodeValue] = S.[AssessedGradeLevelDescriptorCodeValue]
                AND T.[AssessmentTitle] = S.[AssessmentTitle]
                AND T.[IdentificationCode] = S.[IdentificationCode]
                AND T.[StudentUniqueId] = S.[StudentUniqueId]
                AND T.[Version] = S.[Version]
                AND T.[AssessedGradeLevelDescriptorNamespace] = S.[AssessedGradeLevelDescriptorNamespace]
                AND T.[AcademicSubjectDescriptorNamespace] = S.[AcademicSubjectDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCharacteristicDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCharacteristicDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCharacteristicDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StudentCharacteristicType].[ShortDescription] AS StudentCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StudentCharacteristicDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StudentCharacteristicDescriptorId]
                LEFT JOIN [edfi].[StudentCharacteristicType] AS StudentCharacteristicType
                    ON [StudentCharacteristicType].[StudentCharacteristicTypeId] = T.[StudentCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StudentCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StudentCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCharacteristicDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StudentCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[StudentCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCohortAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCohortAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCohortAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCohortAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCohortAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCohortAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[CohortIdentifier]
                , T.[EducationOrganizationId]
                , [Student].[StudentUniqueId]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentCohortAssociation] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [CohortIdentifier]
                    , [EducationOrganizationId]
                    , [StudentUniqueId]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[CohortIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[StudentUniqueId]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCohortAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[CohortIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCohortAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCohortAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCohortAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCohortAssociation] AS T
            JOIN [edfi].[StudentCohortAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentCohortAssociationSection] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCohortAssociationSection] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCohortAssociationSection]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCohortAssociationSection];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCohortAssociationSection]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentCohortAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCohortAssociationSectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCohortAssociationSection]
            (
                [tid_StudentCohortAssociation]
                , [ClassPeriodName]
                , [ClassroomIdentificationCode]
                , [LocalCourseCode]
                , [SchoolId]
                , [SchoolYear]
                , [SequenceOfCourse]
                , [TermDescriptorCodeValue]
                , [UniqueSectionCode]
                , [TermDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentCohortAssociation]
                , S.[ClassPeriodName]
                , S.[ClassroomIdentificationCode]
                , S.[LocalCourseCode]
                , S.[SchoolId]
                , S.[SchoolYear]
                , S.[SequenceOfCourse]
                , S.[TermDescriptorCodeValue]
                , S.[UniqueSectionCode]
                , S.[TermDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[CohortIdentifier], T.[EducationOrganizationId], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , StudentCohortAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentCohortAssociation.[Id] AS ParentId
                FROM [edfi].[StudentCohortAssociationSection] AS T 
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[StudentCohortAssociation] AS StudentCohortAssociation
                    ON StudentCohortAssociation.[BeginDate] = T.[BeginDate]
                    AND StudentCohortAssociation.[CohortIdentifier] = T.[CohortIdentifier]
                    AND StudentCohortAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentCohortAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCompetencyObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCompetencyObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCompetencyObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCompetencyObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCompetencyObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCompetencyObjective] AS T
            USING
            (
                SELECT T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[Objective]
                , T.[ObjectiveEducationOrganizationId]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue
                , T.[DiagnosticStatement]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , T.[BeginDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[EducationOrganizationId]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentCompetencyObjective] AS T
                JOIN .[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN .[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON [CompetencyLevelDescriptor].[DescriptorId] = T.[CompetencyLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [Objective]
                    , [ObjectiveEducationOrganizationId]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [CompetencyLevelDescriptorCodeValue]
                    , [DiagnosticStatement]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [BeginDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [EducationOrganizationId]
                    , [TermDescriptorNamespace]
                    , [CompetencyLevelDescriptorNamespace]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [GradingPeriodDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[Objective]
                    , S.[ObjectiveEducationOrganizationId]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[CompetencyLevelDescriptorCodeValue]
                    , S.[DiagnosticStatement]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[BeginDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[EducationOrganizationId]
                    , S.[TermDescriptorNamespace]
                    , S.[CompetencyLevelDescriptorNamespace]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCompetencyObjective]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveEducationOrganizationId]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCompetencyObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCompetencyObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCompetencyObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCompetencyObjective] AS T
            JOIN [edfi].[StudentCompetencyObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCTEProgramAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCTEProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCTEProgramAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCTEProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCTEProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentCTEProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StudentCTEProgramAssociation] AS T
                JOIN [edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentCTEProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentCTEProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentCTEProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentCTEProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentCTEProgramAssociation] AS T
            JOIN [edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StudentCTEProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentCTEProgramAssociationCTEProgram]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentCTEProgramAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentCTEProgramAssociationCTEProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentCTEProgramAssociationCTEProgram]
            (
                [tid_StudentCTEProgramAssociation]
                , [CareerPathwayType]
                , [CIPCode]
                , [PrimaryCTEProgramIndicator]
                , [CTEProgramCompletionIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentCTEProgramAssociation]
                , S.[CareerPathwayType]
                , S.[CIPCode]
                , S.[PrimaryCTEProgramIndicator]
                , S.[CTEProgramCompletionIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], CareerPathwayType.[ShortDescription] AS CareerPathwayType, T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, [Student].[StudentUniqueId], T.[CIPCode], T.[PrimaryCTEProgramIndicator], T.[CTEProgramCompletionIndicator]
                , T.[CreateDate]
                FROM [edfi].[StudentCTEProgramAssociationCTEProgram] AS T 
                JOIN [edfi].[CareerPathwayType] AS CareerPathwayType
                    ON CareerPathwayType.[CareerPathwayTypeId] = T.[CareerPathwayTypeId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[BeginDate] = S.[BeginDate]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND T.[ProgramName] = S.[ProgramName]
                AND T.[ProgramType] = S.[ProgramType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentDisciplineIncidentAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentDisciplineIncidentAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentDisciplineIncidentAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentDisciplineIncidentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentDisciplineIncidentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentDisciplineIncidentAssociation] AS T
            USING
            (
                SELECT T.[IncidentIdentifier]
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , [StudentParticipationCodeType].[ShortDescription] AS StudentParticipationCodeType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentDisciplineIncidentAssociation] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[StudentParticipationCodeType] AS StudentParticipationCodeType
                    ON [StudentParticipationCodeType].[StudentParticipationCodeTypeId] = T.[StudentParticipationCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [IncidentIdentifier]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [StudentParticipationCodeType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[IncidentIdentifier]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[StudentParticipationCodeType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentDisciplineIncidentAssociation]
                , INSERTED.[IncidentIdentifier]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentDisciplineIncidentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentDisciplineIncidentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentDisciplineIncidentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentDisciplineIncidentAssociation] AS T
            JOIN [edfi].[StudentDisciplineIncidentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentDisciplineIncidentAssociationBehavior]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentDisciplineIncidentAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentDisciplineIncidentAssociationBehaviorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentDisciplineIncidentAssociationBehavior]
            (
                [tid_StudentDisciplineIncidentAssociation]
                , [BehaviorDescriptorCodeValue]
                , [BehaviorDetailedDescription]
                , [BehaviorDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentDisciplineIncidentAssociation]
                , S.[BehaviorDescriptorCodeValue]
                , S.[BehaviorDetailedDescription]
                , S.[BehaviorDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT BehaviorDescriptor.[CodeValue] AS BehaviorDescriptorCodeValue, T.[IncidentIdentifier], T.[SchoolId], [Student].[StudentUniqueId], T.[BehaviorDetailedDescription], BehaviorDescriptor.[Namespace] AS BehaviorDescriptorNamespace
                , T.[CreateDate]
                , StudentDisciplineIncidentAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentDisciplineIncidentAssociation.[Id] AS ParentId
                FROM [edfi].[StudentDisciplineIncidentAssociationBehavior] AS T 
                JOIN [edfi].[Descriptor] AS BehaviorDescriptor
                    ON BehaviorDescriptor.[DescriptorId] = T.[BehaviorDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[StudentDisciplineIncidentAssociation] AS StudentDisciplineIncidentAssociation
                    ON StudentDisciplineIncidentAssociation.[IncidentIdentifier] = T.[IncidentIdentifier]
                    AND StudentDisciplineIncidentAssociation.[SchoolId] = T.[SchoolId]
                    AND StudentDisciplineIncidentAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentEducationOrganizationAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentEducationOrganizationAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentEducationOrganizationAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , ResponsibilityDescriptor.[CodeValue] AS ResponsibilityDescriptorCodeValue
                , [Student].[StudentUniqueId]
                , ResponsibilityDescriptor.[Namespace] AS ResponsibilityDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentEducationOrganizationAssociation] AS T
                JOIN .[edfi].[Descriptor] AS ResponsibilityDescriptor
                    ON [ResponsibilityDescriptor].[DescriptorId] = T.[ResponsibilityDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ResponsibilityDescriptorCodeValue]
                    , [StudentUniqueId]
                    , [ResponsibilityDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ResponsibilityDescriptorCodeValue]
                    , S.[StudentUniqueId]
                    , S.[ResponsibilityDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentEducationOrganizationAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ResponsibilityDescriptorCodeValue]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[ResponsibilityDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentEducationOrganizationAssociation] AS T
            JOIN [edfi].[StudentEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentGradebookEntry] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentGradebookEntry]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentGradebookEntry];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentGradebookEntry]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentGradebookEntryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentGradebookEntry] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[DateAssigned]
                , T.[GradebookEntryTitle]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[DateFulfilled]
                , T.[LetterGradeEarned]
                , T.[NumericGradeEarned]
                , CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue
                , T.[DiagnosticStatement]
                , CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentGradebookEntry] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON [CompetencyLevelDescriptor].[DescriptorId] = T.[CompetencyLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [DateAssigned]
                    , [GradebookEntryTitle]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [DateFulfilled]
                    , [LetterGradeEarned]
                    , [NumericGradeEarned]
                    , [CompetencyLevelDescriptorCodeValue]
                    , [DiagnosticStatement]
                    , [CompetencyLevelDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[DateAssigned]
                    , S.[GradebookEntryTitle]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[DateFulfilled]
                    , S.[LetterGradeEarned]
                    , S.[NumericGradeEarned]
                    , S.[CompetencyLevelDescriptorCodeValue]
                    , S.[DiagnosticStatement]
                    , S.[CompetencyLevelDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentGradebookEntry]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[DateAssigned]
                , INSERTED.[GradebookEntryTitle]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentGradebookEntrySnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentGradebookEntry]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentGradebookEntry]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentGradebookEntry] AS T
            JOIN [edfi].[StudentGradebookEntry] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStudentGradebookEntryExtension] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_extension].[usp_dbStudentGradebookEntryExtension] ******/

IF OBJECT_ID('[t_extension].[usp_dbStudentGradebookEntryExtension]', 'P') IS NOT NULL
    DROP PROCEDURE [t_extension].[usp_dbStudentGradebookEntryExtension];
GO

CREATE PROCEDURE [t_extension].[usp_dbStudentGradebookEntryExtension]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentGradebookEntryKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StudentGradebookEntryExtensionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StudentGradebookEntryExtension]
            (
                [tid_StudentGradebookEntry]
                , [DateCompleted]
                , [AssignmentPassed]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentGradebookEntry]
                , S.[DateCompleted]
                , S.[AssignmentPassed]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[DateAssigned], T.[GradebookEntryTitle], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], [Student].[StudentUniqueId], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[DateCompleted], T.[AssignmentPassed], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , StudentGradebookEntry.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentGradebookEntry.[Id] AS ParentId
                FROM [extension].[StudentGradebookEntryExtension] AS T 
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [edfi].[StudentGradebookEntry] AS StudentGradebookEntry
                    ON StudentGradebookEntry.[BeginDate] = T.[BeginDate]
                    AND StudentGradebookEntry.[ClassPeriodName] = T.[ClassPeriodName]
                    AND StudentGradebookEntry.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND StudentGradebookEntry.[DateAssigned] = T.[DateAssigned]
                    AND StudentGradebookEntry.[GradebookEntryTitle] = T.[GradebookEntryTitle]
                    AND StudentGradebookEntry.[LocalCourseCode] = T.[LocalCourseCode]
                    AND StudentGradebookEntry.[SchoolId] = T.[SchoolId]
                    AND StudentGradebookEntry.[SchoolYear] = T.[SchoolYear]
                    AND StudentGradebookEntry.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND StudentGradebookEntry.[StudentUSI] = T.[StudentUSI]
                    AND StudentGradebookEntry.[TermDescriptorId] = T.[TermDescriptorId]
                    AND StudentGradebookEntry.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentIdentificationSystemDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentIdentificationSystemDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentIdentificationSystemDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentIdentificationSystemDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentIdentificationSystemDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentIdentificationSystemDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StudentIdentificationSystemType].[ShortDescription] AS StudentIdentificationSystemType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StudentIdentificationSystemDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StudentIdentificationSystemDescriptorId]
                LEFT JOIN [edfi].[StudentIdentificationSystemType] AS StudentIdentificationSystemType
                    ON [StudentIdentificationSystemType].[StudentIdentificationSystemTypeId] = T.[StudentIdentificationSystemTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StudentIdentificationSystemType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StudentIdentificationSystemType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentIdentificationSystemDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentIdentificationSystemDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentIdentificationSystemDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentIdentificationSystemDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentIdentificationSystemDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StudentIdentificationSystemDescriptor] AS S
                ON P.[DescriptorId] = S.[StudentIdentificationSystemDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInterventionAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentInterventionAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentInterventionAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentInterventionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInterventionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentInterventionAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[InterventionIdentificationCode]
                , [Student].[StudentUniqueId]
                , T.[CohortIdentifier]
                , T.[CohortEducationOrganizationId]
                , T.[DiagnosticStatement]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentInterventionAssociation] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [InterventionIdentificationCode]
                    , [StudentUniqueId]
                    , [CohortIdentifier]
                    , [CohortEducationOrganizationId]
                    , [DiagnosticStatement]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[InterventionIdentificationCode]
                    , S.[StudentUniqueId]
                    , S.[CohortIdentifier]
                    , S.[CohortEducationOrganizationId]
                    , S.[DiagnosticStatement]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentInterventionAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[InterventionIdentificationCode]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentInterventionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentInterventionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentInterventionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentInterventionAssociation] AS T
            JOIN [edfi].[StudentInterventionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentInterventionAssociationInterventionEffectiveness]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentInterventionAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInterventionAssociationInterventionEffectivenessKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentInterventionAssociationInterventionEffectiveness]
            (
                [tid_StudentInterventionAssociation]
                , [DiagnosisDescriptorCodeValue]
                , [GradeLevelDescriptorCodeValue]
                , [PopulationServedType]
                , [ImprovementIndex]
                , [InterventionEffectivenessRatingType]
                , [GradeLevelDescriptorNamespace]
                , [DiagnosisDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentInterventionAssociation]
                , S.[DiagnosisDescriptorCodeValue]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[PopulationServedType]
                , S.[ImprovementIndex]
                , S.[InterventionEffectivenessRatingType]
                , S.[GradeLevelDescriptorNamespace]
                , S.[DiagnosisDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DiagnosisDescriptor.[CodeValue] AS DiagnosisDescriptorCodeValue, T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[InterventionIdentificationCode], PopulationServedType.[ShortDescription] AS PopulationServedType, [Student].[StudentUniqueId], T.[ImprovementIndex], InterventionEffectivenessRatingType.[ShortDescription] AS InterventionEffectivenessRatingType, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace, DiagnosisDescriptor.[Namespace] AS DiagnosisDescriptorNamespace
                , T.[CreateDate]
                , StudentInterventionAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentInterventionAssociation.[Id] AS ParentId
                FROM [edfi].[StudentInterventionAssociationInterventionEffectiveness] AS T 
                JOIN [edfi].[Descriptor] AS DiagnosisDescriptor
                    ON DiagnosisDescriptor.[DescriptorId] = T.[DiagnosisDescriptorId]
                JOIN [edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [edfi].[PopulationServedType] AS PopulationServedType
                    ON PopulationServedType.[PopulationServedTypeId] = T.[PopulationServedTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[InterventionEffectivenessRatingType] AS InterventionEffectivenessRatingType
                    ON InterventionEffectivenessRatingType.[InterventionEffectivenessRatingTypeId] = T.[InterventionEffectivenessRatingTypeId]
                JOIN [edfi].[StudentInterventionAssociation] AS StudentInterventionAssociation
                    ON StudentInterventionAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentInterventionAssociation.[InterventionIdentificationCode] = T.[InterventionIdentificationCode]
                    AND StudentInterventionAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentInterventionAttendanceEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentInterventionAttendanceEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentInterventionAttendanceEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentInterventionAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentInterventionAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentInterventionAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[EducationOrganizationId]
                , T.[EventDate]
                , T.[InterventionIdentificationCode]
                , [Student].[StudentUniqueId]
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentInterventionAttendanceEvent] AS T
                JOIN .[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [EducationOrganizationId]
                    , [EventDate]
                    , [InterventionIdentificationCode]
                    , [StudentUniqueId]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[EducationOrganizationId]
                    , S.[EventDate]
                    , S.[InterventionIdentificationCode]
                    , S.[StudentUniqueId]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentInterventionAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EventDate]
                , INSERTED.[InterventionIdentificationCode]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentInterventionAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentInterventionAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentInterventionAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentInterventionAttendanceEvent] AS T
            JOIN [edfi].[StudentInterventionAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentLearningObjective] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentLearningObjective]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentLearningObjective];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentLearningObjective]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentLearningObjectiveKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentLearningObjective] AS T
            USING
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[GradingPeriodBeginDate]
                , GradingPeriodDescriptor.[CodeValue] AS GradingPeriodDescriptorCodeValue
                , T.[Objective]
                , ObjectiveGradeLevelDescriptor.[CodeValue] AS ObjectiveGradeLevelDescriptorCodeValue
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , CompetencyLevelDescriptor.[CodeValue] AS CompetencyLevelDescriptorCodeValue
                , T.[DiagnosticStatement]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , T.[BeginDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[EducationOrganizationId]
                , T.[StudentSectionAssociationBeginDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , CompetencyLevelDescriptor.[Namespace] AS CompetencyLevelDescriptorNamespace
                , ObjectiveGradeLevelDescriptor.[Namespace] AS ObjectiveGradeLevelDescriptorNamespace
                , GradingPeriodDescriptor.[Namespace] AS GradingPeriodDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentLearningObjective] AS T
                JOIN .[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN .[edfi].[Descriptor] AS GradingPeriodDescriptor
                    ON [GradingPeriodDescriptor].[DescriptorId] = T.[GradingPeriodDescriptorId]
                JOIN .[edfi].[Descriptor] AS ObjectiveGradeLevelDescriptor
                    ON [ObjectiveGradeLevelDescriptor].[DescriptorId] = T.[ObjectiveGradeLevelDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS CompetencyLevelDescriptor
                    ON [CompetencyLevelDescriptor].[DescriptorId] = T.[CompetencyLevelDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AcademicSubjectDescriptorCodeValue]
                    , [GradingPeriodBeginDate]
                    , [GradingPeriodDescriptorCodeValue]
                    , [Objective]
                    , [ObjectiveGradeLevelDescriptorCodeValue]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [CompetencyLevelDescriptorCodeValue]
                    , [DiagnosticStatement]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [BeginDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [EducationOrganizationId]
                    , [StudentSectionAssociationBeginDate]
                    , [TermDescriptorNamespace]
                    , [CompetencyLevelDescriptorNamespace]
                    , [ObjectiveGradeLevelDescriptorNamespace]
                    , [GradingPeriodDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradingPeriodBeginDate]
                    , S.[GradingPeriodDescriptorCodeValue]
                    , S.[Objective]
                    , S.[ObjectiveGradeLevelDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[CompetencyLevelDescriptorCodeValue]
                    , S.[DiagnosticStatement]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[BeginDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[EducationOrganizationId]
                    , S.[StudentSectionAssociationBeginDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CompetencyLevelDescriptorNamespace]
                    , S.[ObjectiveGradeLevelDescriptorNamespace]
                    , S.[GradingPeriodDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentLearningObjective]
                , INSERTED.[AcademicSubjectDescriptorCodeValue]
                , INSERTED.[GradingPeriodBeginDate]
                , INSERTED.[GradingPeriodDescriptorCodeValue]
                , INSERTED.[Objective]
                , INSERTED.[ObjectiveGradeLevelDescriptorCodeValue]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[ObjectiveGradeLevelDescriptorNamespace]
                , INSERTED.[GradingPeriodDescriptorNamespace]
                , INSERTED.[AcademicSubjectDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentLearningObjectiveSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentLearningObjective]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentLearningObjective]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentLearningObjective] AS T
            JOIN [edfi].[StudentLearningObjective] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentMigrantEducationProgramAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentMigrantEducationProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentMigrantEducationProgramAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentMigrantEducationProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentMigrantEducationProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentMigrantEducationProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[PriorityForServices]
                , T.[LastQualifyingMove]
                , ContinuationOfServicesReasonDescriptor.[CodeValue] AS ContinuationOfServicesReasonDescriptorCodeValue
                , T.[USInitialEntry]
                , T.[USMostRecentEntry]
                , T.[USInitialSchoolEntry]
                , ContinuationOfServicesReasonDescriptor.[Namespace] AS ContinuationOfServicesReasonDescriptorNamespace
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StudentMigrantEducationProgramAssociation] AS T
                JOIN [edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN .[edfi].[Descriptor] AS ContinuationOfServicesReasonDescriptor
                    ON [ContinuationOfServicesReasonDescriptor].[DescriptorId] = T.[ContinuationOfServicesReasonDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [PriorityForServices]
                    , [LastQualifyingMove]
                    , [ContinuationOfServicesReasonDescriptorCodeValue]
                    , [USInitialEntry]
                    , [USMostRecentEntry]
                    , [USInitialSchoolEntry]
                    , [ContinuationOfServicesReasonDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[PriorityForServices]
                    , S.[LastQualifyingMove]
                    , S.[ContinuationOfServicesReasonDescriptorCodeValue]
                    , S.[USInitialEntry]
                    , S.[USMostRecentEntry]
                    , S.[USInitialSchoolEntry]
                    , S.[ContinuationOfServicesReasonDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentMigrantEducationProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentMigrantEducationProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentMigrantEducationProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentMigrantEducationProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentMigrantEducationProgramAssociation] AS T
            JOIN [edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StudentMigrantEducationProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentParentAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentParentAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentParentAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentParentAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentParentAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentParentAssociation] AS T
            USING
            (
                SELECT [Parent].[ParentUniqueId]
                , [Student].[StudentUniqueId]
                , [RelationType].[ShortDescription] AS RelationType
                , T.[PrimaryContactStatus]
                , T.[LivesWith]
                , T.[EmergencyContactStatus]
                , T.[ContactPriority]
                , T.[ContactRestrictions]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentParentAssociation] AS T
                JOIN .[edfi].[Parent]
                    ON [Parent].[ParentUSI] = T.[ParentUSI]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[RelationType] AS RelationType
                    ON [RelationType].[RelationTypeId] = T.[RelationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ParentUniqueId]
                    , [StudentUniqueId]
                    , [RelationType]
                    , [PrimaryContactStatus]
                    , [LivesWith]
                    , [EmergencyContactStatus]
                    , [ContactPriority]
                    , [ContactRestrictions]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ParentUniqueId]
                    , S.[StudentUniqueId]
                    , S.[RelationType]
                    , S.[PrimaryContactStatus]
                    , S.[LivesWith]
                    , S.[EmergencyContactStatus]
                    , S.[ContactPriority]
                    , S.[ContactRestrictions]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentParentAssociation]
                , INSERTED.[ParentUniqueId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentParentAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentParentAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentParentAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentParentAssociation] AS T
            JOIN [edfi].[StudentParentAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentProgramAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[EndDate]
                , ReasonExitedDescriptor.[CodeValue] AS ReasonExitedDescriptorCodeValue
                , T.[ServedOutsideOfRegularSession]
                , ReasonExitedDescriptor.[Namespace] AS ReasonExitedDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentProgramAssociation] AS T
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN .[edfi].[Descriptor] AS ReasonExitedDescriptor
                    ON [ReasonExitedDescriptor].[DescriptorId] = T.[ReasonExitedDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [EndDate]
                    , [ReasonExitedDescriptorCodeValue]
                    , [ServedOutsideOfRegularSession]
                    , [ReasonExitedDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[EndDate]
                    , S.[ReasonExitedDescriptorCodeValue]
                    , S.[ServedOutsideOfRegularSession]
                    , S.[ReasonExitedDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentProgramAssociation] AS T
            JOIN [edfi].[StudentProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentProgramAssociationService] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramAssociationService] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentProgramAssociationService]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentProgramAssociationService];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramAssociationService]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentProgramAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramAssociationServiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentProgramAssociationService]
            (
                [tid_StudentProgramAssociation]
                , [ServiceDescriptorCodeValue]
                , [PrimaryIndicator]
                , [ServiceBeginDate]
                , [ServiceEndDate]
                , [ServiceDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentProgramAssociation]
                , S.[ServiceDescriptorCodeValue]
                , S.[PrimaryIndicator]
                , S.[ServiceBeginDate]
                , S.[ServiceEndDate]
                , S.[ServiceDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, ServiceDescriptor.[CodeValue] AS ServiceDescriptorCodeValue, [Student].[StudentUniqueId], T.[PrimaryIndicator], T.[ServiceBeginDate], T.[ServiceEndDate], ServiceDescriptor.[Namespace] AS ServiceDescriptorNamespace
                , T.[CreateDate]
                , StudentProgramAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentProgramAssociation.[Id] AS ParentId
                FROM [edfi].[StudentProgramAssociationService] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Descriptor] AS ServiceDescriptor
                    ON ServiceDescriptor.[DescriptorId] = T.[ServiceDescriptorId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[StudentProgramAssociation] AS StudentProgramAssociation
                    ON StudentProgramAssociation.[BeginDate] = T.[BeginDate]
                    AND StudentProgramAssociation.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND StudentProgramAssociation.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND StudentProgramAssociation.[ProgramName] = T.[ProgramName]
                    AND StudentProgramAssociation.[ProgramTypeId] = T.[ProgramTypeId]
                    AND StudentProgramAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentProgramAttendanceEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentProgramAttendanceEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentProgramAttendanceEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentProgramAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentProgramAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentProgramAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[EducationOrganizationId]
                , T.[EventDate]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentProgramAttendanceEvent] AS T
                JOIN .[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [EducationOrganizationId]
                    , [EventDate]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[EducationOrganizationId]
                    , S.[EventDate]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentProgramAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[EventDate]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentProgramAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentProgramAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentProgramAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentProgramAttendanceEvent] AS T
            JOIN [edfi].[StudentProgramAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSchoolAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentSchoolAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentSchoolAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentSchoolAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSchoolAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSchoolAssociation] AS T
            USING
            (
                SELECT T.[EntryDate]
                , T.[SchoolId]
                , [Student].[StudentUniqueId]
                , T.[PrimarySchool]
                , T.[SchoolYear]
                , EntryGradeLevelDescriptor.[CodeValue] AS EntryGradeLevelDescriptorCodeValue
                , [EntryGradeLevelReasonType].[ShortDescription] AS EntryGradeLevelReasonType
                , EntryTypeDescriptor.[CodeValue] AS EntryTypeDescriptorCodeValue
                , T.[RepeatGradeIndicator]
                , T.[ClassOfSchoolYear]
                , T.[SchoolChoiceTransfer]
                , T.[ExitWithdrawDate]
                , ExitWithdrawTypeDescriptor.[CodeValue] AS ExitWithdrawTypeDescriptorCodeValue
                , ResidencyStatusDescriptor.[CodeValue] AS ResidencyStatusDescriptorCodeValue
                , GraduationPlanTypeDescriptor.[CodeValue] AS GraduationPlanTypeDescriptorCodeValue
                , T.[EducationOrganizationId]
                , T.[GraduationSchoolYear]
                , T.[EmployedWhileEnrolled]
                , GraduationPlanTypeDescriptor.[Namespace] AS GraduationPlanTypeDescriptorNamespace
                , ResidencyStatusDescriptor.[Namespace] AS ResidencyStatusDescriptorNamespace
                , ExitWithdrawTypeDescriptor.[Namespace] AS ExitWithdrawTypeDescriptorNamespace
                , EntryTypeDescriptor.[Namespace] AS EntryTypeDescriptorNamespace
                , EntryGradeLevelDescriptor.[Namespace] AS EntryGradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentSchoolAssociation] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS EntryGradeLevelDescriptor
                    ON [EntryGradeLevelDescriptor].[DescriptorId] = T.[EntryGradeLevelDescriptorId]
                LEFT JOIN [edfi].[EntryGradeLevelReasonType] AS EntryGradeLevelReasonType
                    ON [EntryGradeLevelReasonType].[EntryGradeLevelReasonTypeId] = T.[EntryGradeLevelReasonTypeId]
                LEFT JOIN .[edfi].[Descriptor] AS EntryTypeDescriptor
                    ON [EntryTypeDescriptor].[DescriptorId] = T.[EntryTypeDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ExitWithdrawTypeDescriptor
                    ON [ExitWithdrawTypeDescriptor].[DescriptorId] = T.[ExitWithdrawTypeDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS ResidencyStatusDescriptor
                    ON [ResidencyStatusDescriptor].[DescriptorId] = T.[ResidencyStatusDescriptorId]
                LEFT JOIN .[edfi].[Descriptor] AS GraduationPlanTypeDescriptor
                    ON [GraduationPlanTypeDescriptor].[DescriptorId] = T.[GraduationPlanTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EntryDate]
                    , [SchoolId]
                    , [StudentUniqueId]
                    , [PrimarySchool]
                    , [SchoolYear]
                    , [EntryGradeLevelDescriptorCodeValue]
                    , [EntryGradeLevelReasonType]
                    , [EntryTypeDescriptorCodeValue]
                    , [RepeatGradeIndicator]
                    , [ClassOfSchoolYear]
                    , [SchoolChoiceTransfer]
                    , [ExitWithdrawDate]
                    , [ExitWithdrawTypeDescriptorCodeValue]
                    , [ResidencyStatusDescriptorCodeValue]
                    , [GraduationPlanTypeDescriptorCodeValue]
                    , [EducationOrganizationId]
                    , [GraduationSchoolYear]
                    , [EmployedWhileEnrolled]
                    , [GraduationPlanTypeDescriptorNamespace]
                    , [ResidencyStatusDescriptorNamespace]
                    , [ExitWithdrawTypeDescriptorNamespace]
                    , [EntryTypeDescriptorNamespace]
                    , [EntryGradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EntryDate]
                    , S.[SchoolId]
                    , S.[StudentUniqueId]
                    , S.[PrimarySchool]
                    , S.[SchoolYear]
                    , S.[EntryGradeLevelDescriptorCodeValue]
                    , S.[EntryGradeLevelReasonType]
                    , S.[EntryTypeDescriptorCodeValue]
                    , S.[RepeatGradeIndicator]
                    , S.[ClassOfSchoolYear]
                    , S.[SchoolChoiceTransfer]
                    , S.[ExitWithdrawDate]
                    , S.[ExitWithdrawTypeDescriptorCodeValue]
                    , S.[ResidencyStatusDescriptorCodeValue]
                    , S.[GraduationPlanTypeDescriptorCodeValue]
                    , S.[EducationOrganizationId]
                    , S.[GraduationSchoolYear]
                    , S.[EmployedWhileEnrolled]
                    , S.[GraduationPlanTypeDescriptorNamespace]
                    , S.[ResidencyStatusDescriptorNamespace]
                    , S.[ExitWithdrawTypeDescriptorNamespace]
                    , S.[EntryTypeDescriptorNamespace]
                    , S.[EntryGradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSchoolAssociation]
                , INSERTED.[EntryDate]
                , INSERTED.[SchoolId]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSchoolAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSchoolAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSchoolAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSchoolAssociation] AS T
            JOIN [edfi].[StudentSchoolAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentSchoolAssociationEducationPlan] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSchoolAssociationEducationPlan] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentSchoolAssociationEducationPlan]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentSchoolAssociationEducationPlan];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentSchoolAssociationEducationPlan]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentSchoolAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSchoolAssociationEducationPlanKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentSchoolAssociationEducationPlan]
            (
                [tid_StudentSchoolAssociation]
                , [EducationPlanType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentSchoolAssociation]
                , S.[EducationPlanType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationPlanType.[ShortDescription] AS EducationPlanType, T.[EntryDate], T.[SchoolId], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , StudentSchoolAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StudentSchoolAssociation.[Id] AS ParentId
                FROM [edfi].[StudentSchoolAssociationEducationPlan] AS T 
                JOIN [edfi].[EducationPlanType] AS EducationPlanType
                    ON EducationPlanType.[EducationPlanTypeId] = T.[EducationPlanTypeId]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[StudentSchoolAssociation] AS StudentSchoolAssociation
                    ON StudentSchoolAssociation.[EntryDate] = T.[EntryDate]
                    AND StudentSchoolAssociation.[SchoolId] = T.[SchoolId]
                    AND StudentSchoolAssociation.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSchoolAttendanceEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentSchoolAttendanceEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentSchoolAttendanceEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentSchoolAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSchoolAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSchoolAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[EventDate]
                , T.[SchoolId]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentSchoolAttendanceEvent] AS T
                JOIN .[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [EventDate]
                    , [SchoolId]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [TermDescriptorNamespace]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[EventDate]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[TermDescriptorNamespace]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSchoolAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[EventDate]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSchoolAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSchoolAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSchoolAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSchoolAttendanceEvent] AS T
            JOIN [edfi].[StudentSchoolAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSectionAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentSectionAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentSectionAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSectionAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[EndDate]
                , T.[HomeroomIndicator]
                , [RepeatIdentifierType].[ShortDescription] AS RepeatIdentifierType
                , T.[TeacherStudentDataLinkExclusion]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentSectionAssociation] AS T
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[RepeatIdentifierType] AS RepeatIdentifierType
                    ON [RepeatIdentifierType].[RepeatIdentifierTypeId] = T.[RepeatIdentifierTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EndDate]
                    , [HomeroomIndicator]
                    , [RepeatIdentifierType]
                    , [TeacherStudentDataLinkExclusion]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EndDate]
                    , S.[HomeroomIndicator]
                    , S.[RepeatIdentifierType]
                    , S.[TeacherStudentDataLinkExclusion]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSectionAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSectionAssociation] AS T
            JOIN [edfi].[StudentSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSectionAttendanceEvent] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentSectionAttendanceEvent]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentSectionAttendanceEvent];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentSectionAttendanceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSectionAttendanceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSectionAttendanceEvent] AS T
            USING
            (
                SELECT AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[EventDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Student].[StudentUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[AttendanceEventReason]
                , [EducationalEnvironmentType].[ShortDescription] AS EducationalEnvironmentType
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [edfi].[StudentSectionAttendanceEvent] AS T
                JOIN .[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN .[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[EducationalEnvironmentType] AS EducationalEnvironmentType
                    ON [EducationalEnvironmentType].[EducationalEnvironmentTypeId] = T.[EducationalEnvironmentTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceEventCategoryDescriptorCodeValue]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [EventDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StudentUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [AttendanceEventReason]
                    , [EducationalEnvironmentType]
                    , [TermDescriptorNamespace]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[EventDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StudentUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[AttendanceEventReason]
                    , S.[EducationalEnvironmentType]
                    , S.[TermDescriptorNamespace]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSectionAttendanceEvent]
                , INSERTED.[AttendanceEventCategoryDescriptorCodeValue]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[EventDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[AttendanceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSectionAttendanceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSectionAttendanceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSectionAttendanceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSectionAttendanceEvent] AS T
            JOIN [edfi].[StudentSectionAttendanceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSpecialEducationProgramAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentSpecialEducationProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentSpecialEducationProgramAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentSpecialEducationProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSpecialEducationProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentSpecialEducationProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , T.[IdeaEligibility]
                , SpecialEducationSettingDescriptor.[CodeValue] AS SpecialEducationSettingDescriptorCodeValue
                , T.[SpecialEducationHoursPerWeek]
                , T.[SchoolHoursPerWeek]
                , T.[MultiplyDisabled]
                , T.[MedicallyFragile]
                , T.[LastEvaluationDate]
                , T.[IEPReviewDate]
                , T.[IEPBeginDate]
                , T.[IEPEndDate]
                , SpecialEducationSettingDescriptor.[Namespace] AS SpecialEducationSettingDescriptorNamespace
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StudentSpecialEducationProgramAssociation] AS T
                JOIN [edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN .[edfi].[Descriptor] AS SpecialEducationSettingDescriptor
                    ON [SpecialEducationSettingDescriptor].[DescriptorId] = T.[SpecialEducationSettingDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [IdeaEligibility]
                    , [SpecialEducationSettingDescriptorCodeValue]
                    , [SpecialEducationHoursPerWeek]
                    , [SchoolHoursPerWeek]
                    , [MultiplyDisabled]
                    , [MedicallyFragile]
                    , [LastEvaluationDate]
                    , [IEPReviewDate]
                    , [IEPBeginDate]
                    , [IEPEndDate]
                    , [SpecialEducationSettingDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[IdeaEligibility]
                    , S.[SpecialEducationSettingDescriptorCodeValue]
                    , S.[SpecialEducationHoursPerWeek]
                    , S.[SchoolHoursPerWeek]
                    , S.[MultiplyDisabled]
                    , S.[MedicallyFragile]
                    , S.[LastEvaluationDate]
                    , S.[IEPReviewDate]
                    , S.[IEPBeginDate]
                    , S.[IEPEndDate]
                    , S.[SpecialEducationSettingDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentSpecialEducationProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentSpecialEducationProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentSpecialEducationProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentSpecialEducationProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentSpecialEducationProgramAssociation] AS T
            JOIN [edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StudentSpecialEducationProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentSpecialEducationProgramAssociationServiceProvider]
    @pSnapshotId INT
    , @pTids [t_edfi].[udt_StudentSpecialEducationProgramAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentSpecialEducationProgramAssociationServiceProviderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_edfi].[StudentSpecialEducationProgramAssociationServiceProvider]
            (
                [tid_StudentSpecialEducationProgramAssociation]
                , [StaffUniqueId]
                , [PrimaryProvider]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StudentSpecialEducationProgramAssociation]
                , S.[StaffUniqueId]
                , S.[PrimaryProvider]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[EducationOrganizationId], T.[ProgramEducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, [Staff].[StaffUniqueId], [Student].[StudentUniqueId], T.[PrimaryProvider]
                , T.[CreateDate]
                FROM [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] AS T 
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[BeginDate] = S.[BeginDate]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND T.[ProgramName] = S.[ProgramName]
                AND T.[ProgramType] = S.[ProgramType]
                AND T.[StudentUniqueId] = S.[StudentUniqueId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbStudentTitleIPartAProgramAssociation] ******/

IF OBJECT_ID('[t_edfi].[usp_dbStudentTitleIPartAProgramAssociation]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbStudentTitleIPartAProgramAssociation];
GO

CREATE PROCEDURE [t_edfi].[usp_dbStudentTitleIPartAProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_StudentTitleIPartAProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[StudentTitleIPartAProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramEducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Student].[StudentUniqueId]
                , [TitleIPartAParticipantType].[ShortDescription] AS TitleIPartAParticipantType
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[StudentTitleIPartAProgramAssociation] AS T
                JOIN [edfi].[StudentProgramAssociation] AS P
                    ON P.[BeginDate] = T.[BeginDate]
                    AND P.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND P.[ProgramEducationOrganizationId] = T.[ProgramEducationOrganizationId]
                    AND P.[ProgramName] = T.[ProgramName]
                    AND P.[ProgramTypeId] = T.[ProgramTypeId]
                    AND P.[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN .[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [edfi].[TitleIPartAParticipantType] AS TitleIPartAParticipantType
                    ON [TitleIPartAParticipantType].[TitleIPartAParticipantTypeId] = T.[TitleIPartAParticipantTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramEducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StudentUniqueId]
                    , [TitleIPartAParticipantType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramEducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StudentUniqueId]
                    , S.[TitleIPartAParticipantType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentTitleIPartAProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramEducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[StudentTitleIPartAProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentTitleIPartAProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentTitleIPartAProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[StudentTitleIPartAProgramAssociation] AS T
            JOIN [edfi].[StudentProgramAssociation] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[StudentTitleIPartAProgramAssociation] AS S
                ON P.[BeginDate] = S.[BeginDate]
                AND P.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND P.[ProgramEducationOrganizationId] = S.[ProgramEducationOrganizationId]
                AND P.[ProgramName] = S.[ProgramName]
                AND P.[ProgramTypeId] = S.[ProgramTypeId]
                AND P.[StudentUSI] = S.[StudentUSI]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbTeachingCredentialDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbTeachingCredentialDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbTeachingCredentialDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbTeachingCredentialDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_TeachingCredentialDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[TeachingCredentialDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TeachingCredentialType].[ShortDescription] AS TeachingCredentialType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[TeachingCredentialDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TeachingCredentialDescriptorId]
                LEFT JOIN [edfi].[TeachingCredentialType] AS TeachingCredentialType
                    ON [TeachingCredentialType].[TeachingCredentialTypeId] = T.[TeachingCredentialTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TeachingCredentialType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TeachingCredentialType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeachingCredentialDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[TeachingCredentialDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeachingCredentialDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeachingCredentialDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[TeachingCredentialDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[TeachingCredentialDescriptor] AS S
                ON P.[DescriptorId] = S.[TeachingCredentialDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbTermDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbTermDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbTermDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbTermDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_TermDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[TermDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TermType].[ShortDescription] AS TermType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[TermDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [edfi].[TermType] AS TermType
                    ON [TermType].[TermTypeId] = T.[TermTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TermType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TermType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TermDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[TermDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TermDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TermDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[TermDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[TermDescriptor] AS S
                ON P.[DescriptorId] = S.[TermDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [t_edfi].[usp_dbWeaponDescriptor] ******/

IF OBJECT_ID('[t_edfi].[usp_dbWeaponDescriptor]', 'P') IS NOT NULL
    DROP PROCEDURE [t_edfi].[usp_dbWeaponDescriptor];
GO

CREATE PROCEDURE [t_edfi].[usp_dbWeaponDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_edfi].[udt_WeaponDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_edfi].[WeaponDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [WeaponType].[ShortDescription] AS WeaponType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [edfi].[WeaponDescriptor] AS T
                JOIN [edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[WeaponDescriptorId]
                LEFT JOIN [edfi].[WeaponType] AS WeaponType
                    ON [WeaponType].[WeaponTypeId] = T.[WeaponTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [WeaponType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[WeaponType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_WeaponDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_edfi].[WeaponDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_WeaponDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_WeaponDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_edfi].[WeaponDescriptor] AS T
            JOIN [edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [edfi].[WeaponDescriptor] AS S
                ON P.[DescriptorId] = S.[WeaponDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_LoadSnapshotData] ******/

IF OBJECT_ID('[tods].[usp_LoadSnapshotData]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_LoadSnapshotData];
GO

CREATE PROCEDURE [tods].[usp_LoadSnapshotData]
    @pId UNIQUEIDENTIFIER
    , @pDatabase NVARCHAR(128) = NULL
    , @pBypassSqlServerSnapshot BIT = 0
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @SnapshotDate DATE;
    DECLARE @BeginDate DATE;
    DECLARE @EndDate DATE;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @NeedToResetOnError BIT = 0;      -- to indicate if need to reset IsLockedForProcessing on Error
    DECLARE @Message NVARCHAR(2048);

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

            -- target snapshot metadata record does not exist
            IF @SnapshotId IS NULL
            BEGIN
                SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                THROW 50015, @Message, 1;
            END;

            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50016, CAST(@pId AS NVARCHAR(36)));
                THROW 50016, @Message, 1;
            END;

            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50017, CAST(@pId AS NVARCHAR(36)));
                THROW 50017, @Message, 1;
            END;

            -- check if Status is NULL
            IF '' <>
            (
                SELECT ISNULL([Status], '')
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50018, CAST(@pId AS NVARCHAR(36)));
                THROW 50018, @Message, 1;
            END;

            SET @NeedToResetOnError = 1;

            UPDATE [tods].[Snapshot]
                SET [LoadStartTime] = CURRENT_TIMESTAMP,
                    [IsLockedForProcessing] = 1
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION

        BEGIN TRANSACTION
            SELECT @BeginDate = 
            ( 
                SELECT [EffectiveBeginDate] 
                FROM [tods].[Snapshot] 
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @EndDate = 
            (   
                SELECT [EffectiveEndDate] 
                FROM [tods].[Snapshot] 
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @SnapshotDate =
            (   
                SELECT [SnapshotDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );

            EXEC [tods].[usp_DerivePartitionYearId] @SnapshotId, @SnapshotDate, @pPartitionYearId = @PartitionYearId OUTPUT;

            --for each top level entity

            EXEC [t_edfi].[usp_dbAcademicSubjectDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAcademicWeek] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccommodationDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccount] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccountabilityRating] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAccountCodeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAchievementCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbActual] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAdministrativeFundingControlDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentFamily] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentItem] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAssessmentPeriodDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbAttendanceEventCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbBehaviorDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbBellSchedule] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbBudget] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCalendarDate] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCalendarEventDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbClassPeriod] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbClassroomPositionDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCohort] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCompetencyLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCompetencyObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbContinuationOfServicesReasonDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbContractedStaff] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCountryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourseIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourseOffering] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCredential] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbCredentialFieldDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDiagnosisDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisabilityDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineAction] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbDisciplineIncident] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationContent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganization] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationInterventionPrescriptionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationNetwork] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationNetworkAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationOrganizationPeerAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEducationServiceCenter] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEmploymentStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbEntryTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbExitWithdrawTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbFederalLocaleCodeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbFeederSchoolAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGrade] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradebookEntry] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradeLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradingPeriod] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGradingPeriodDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlan] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbGraduationPlanTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbIntervention] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionPrescription] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbInterventionStudy] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLanguageDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLearningObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLearningStandard] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLeaveEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLevelOfEducationDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLimitedEnglishProficiencyDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLocalEducationAgency] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbLocation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbObjectiveAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbOpenStaffPosition] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbParent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbPayroll] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbPerformanceLevelDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbPostSecondaryEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbProgram] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbProgramAssignmentDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbProgramCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbReasonExitedDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbReportCard] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbReporterDescriptionDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbResidencyStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbResponsibilityDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbRestraintEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSchool] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSchoolFoodServicesEligibilityDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSchoolYearType] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSection] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSectionAttendanceTakenEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSectionCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSeparationReasonDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbServiceDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSession] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbSpecialEducationSettingDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaff] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffClassificationDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffCohortAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffEducationOrganizationAssignmentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffEducationOrganizationEmploymentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffSchoolAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStaffSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStateEducationAgency] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCohortAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCompetencyObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentCTEProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentDisciplineIncidentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentGradebookEntry] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentIdentificationSystemDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentInterventionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentInterventionAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentLearningObjective] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentMigrantEducationProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentParentAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentProgramAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSchoolAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSchoolAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSectionAttendanceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentSpecialEducationProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbStudentTitleIPartAProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbTeachingCredentialDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbTermDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_edfi].[usp_dbWeaponDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [Status] = 'ACTIVE',
                    [LoadEndTime] = CURRENT_TIMESTAMP,
                    [LastModifiedDate] = CURRENT_TIMESTAMP,
                    [t_PartitionYearId] = @PartitionYearId
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @SnapshotId, @SprocName;

        IF (@NeedToResetOnError = 1)
        BEGIN
            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [LastModifiedDate] = CURRENT_TIMESTAMP
                WHERE [SnapshotId] = @SnapshotId;
        END;
        THROW;
    END CATCH;
END;
GO