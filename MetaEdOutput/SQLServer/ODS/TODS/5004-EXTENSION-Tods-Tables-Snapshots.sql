/****** TABLE: [t_extension].[AbsenceEventCategoryDescriptor] ******/

CREATE TABLE [t_extension].[AbsenceEventCategoryDescriptor]
(
    [tid_AbsenceEventCategoryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AbsenceEventCategoryType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AbsenceEventCategoryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AbsenceEventCategoryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AbsenceEventCategoryDescriptor] ADD CONSTRAINT [AbsenceEventCategoryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AbsenceEventCategoryDescriptor] ADD CONSTRAINT [AbsenceEventCategoryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AbsenceEventCategoryDescriptor] ADD CONSTRAINT [AbsenceEventCategoryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the code describing the type of leave taken, for example: Sick, Personal, Vacation.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AbsenceEventCategoryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AbsenceEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAbsenceEventCategoryDescriptor_Id ON [t_extension].[AbsenceEventCategoryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AbsenceEventCategoryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AbsenceEventCategoryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AbsenceEventCategoryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AbsenceEventCategoryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AbsenceEventCategoryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AbsenceEventCategoryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AbsenceEventCategoryDescriptor])
REFERENCES [t_extension].[AbsenceEventCategoryDescriptor] ([tid_AbsenceEventCategoryDescriptor]);
ALTER TABLE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AbsenceEventCategoryDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[AbsenceEventCategoryType] ******/

CREATE TABLE [t_extension].[AbsenceEventCategoryType]
(
	[tid_AbsenceEventCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AbsenceEventCategoryType] PRIMARY KEY NONCLUSTERED
(
	[tid_AbsenceEventCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AbsenceEventCategoryType] ADD CONSTRAINT [AbsenceEventCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AbsenceEventCategoryType] ADD CONSTRAINT [AbsenceEventCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AbsenceEventCategoryType] ADD CONSTRAINT [AbsenceEventCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the code describing the type of leave taken, for example: Sick, Personal, Vacation.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AbsenceEventCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AbsenceEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AbsenceEventCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AbsenceEventCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[AidTypeDescriptor] ******/

CREATE TABLE [t_extension].[AidTypeDescriptor]
(
    [tid_AidTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[AidType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AidTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_AidTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AidTypeDescriptor] ADD CONSTRAINT [AidTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AidTypeDescriptor] ADD CONSTRAINT [AidTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AidTypeDescriptor] ADD CONSTRAINT [AidTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the classification of financial aid awarded to a person for the academic term/year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AidTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidTypeDescriptor', @level2type=N'COLUMN', @level2name=N'AidType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAidTypeDescriptor_Id ON [t_extension].[AidTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AidTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[AidTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AidTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AidTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AidTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AidTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AidTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AidTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AidTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AidTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_AidTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AidTypeDescriptor])
REFERENCES [t_extension].[AidTypeDescriptor] ([tid_AidTypeDescriptor]);
ALTER TABLE [t_extension].[AidTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_AidTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[AidType] ******/

CREATE TABLE [t_extension].[AidType]
(
	[tid_AidType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_AidType] PRIMARY KEY NONCLUSTERED
(
	[tid_AidType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AidType] ADD CONSTRAINT [AidType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AidType] ADD CONSTRAINT [AidType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AidType] ADD CONSTRAINT [AidType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The classification of financial aid awarded to a person for the academic term/year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AidType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Aid type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Aid type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AidType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[AnonymizedStudent] ******/

CREATE TABLE [t_extension].[AnonymizedStudent]
(
    [tid_AnonymizedStudent] [INT] IDENTITY(1,1) NOT NULL,
	[AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[EducationOrganizationId] [INT] NULL,
	[CourseCode] [NVARCHAR](60) NULL,
	[UniqueSectionCode] [NVARCHAR](255) NULL,
	[SequenceOfCourse] [INT] NULL,
	[LocalCourseCode] [NVARCHAR](60) NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[SchoolId] [INT] NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NULL,
	[ClassPeriodName] [NVARCHAR](20) NULL,
	[SexType] [NVARCHAR](450) NULL,
	[GenderType] [NVARCHAR](450) NULL,
	[HispanicLatinoEthnicity] [BIT] NULL,
	[SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NULL,
	[Section504Enrollment] [BIT] NULL,
	[ELLEnrollment] [BIT] NULL,
	[ESLEnrollment] [BIT] NULL,
	[SPEDEnrollment] [BIT] NULL,
	[TitleIEnrollment] [BIT] NULL,
	[AtriskIndicator] [BIT] NULL,
	[Mobility] [INT] NULL,
	[SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudent] PRIMARY KEY NONCLUSTERED
(
    [tid_AnonymizedStudent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudent] ADD CONSTRAINT [AnonymizedStudent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudent] ADD CONSTRAINT [AnonymizedStudent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AnonymizedStudent] ADD CONSTRAINT [AnonymizedStudent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Domain entity to collect data for indiviudal students with whom the teacher candidate is associated through field work or student teaching', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'AnonymizedStudentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'Section504Enrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ELL enrollment of the student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'ELLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ESL enrollment of the student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'ESLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in SPED of the student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'SPEDEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in Title I of the student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'TitleIEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator that identifies if the student has been flagged as being at risk according to the District''s definition of at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'AtriskIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of times a student has moved schools during the current school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'Mobility';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudent', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAnonymizedStudent_Id ON [t_extension].[AnonymizedStudent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AnonymizedStudentSnapshotRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AnonymizedStudent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AnonymizedStudent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AnonymizedStudentSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AnonymizedStudent])
REFERENCES [t_extension].[AnonymizedStudent] ([tid_AnonymizedStudent]);
ALTER TABLE [t_extension].[AnonymizedStudentSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[AnonymizedStudentRace] ******/

CREATE TABLE [t_extension].[AnonymizedStudentRace]
(
	[tid_AnonymizedStudentRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AnonymizedStudent] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentRace] PRIMARY KEY NONCLUSTERED
(
	[tid_AnonymizedStudentRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentRace] ADD CONSTRAINT [AnonymizedStudentRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentRace] ADD CONSTRAINT [FK_AnonymizedStudentRace_ParentTable] FOREIGN KEY ([tid_AnonymizedStudent])
REFERENCES [t_extension].[AnonymizedStudent] ([tid_AnonymizedStudent]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentRace] CHECK CONSTRAINT [FK_AnonymizedStudentRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s
                   recognition of his or her community or with which the individual most
                   identifies. The data model allows for multiple entries so that each individual
                   can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentRace', @level2type=N'COLUMN', @level2name=N'RaceType';
GO

/****** TABLE: [t_extension].[AnonymizedStudentLanguage] ******/

CREATE TABLE [t_extension].[AnonymizedStudentLanguage]
(
	[tid_AnonymizedStudentLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AnonymizedStudent] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_AnonymizedStudentLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentLanguage] ADD CONSTRAINT [AnonymizedStudentLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentLanguage] ADD CONSTRAINT [FK_AnonymizedStudentLanguage_ParentTable] FOREIGN KEY ([tid_AnonymizedStudent])
REFERENCES [t_extension].[AnonymizedStudent] ([tid_AnonymizedStudent]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentLanguage] CHECK CONSTRAINT [FK_AnonymizedStudentLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language(s) the individual uses to communicate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_extension].[AnonymizedStudentLanguageUse] ******/

CREATE TABLE [t_extension].[AnonymizedStudentLanguageUse]
(
	[tid_AnonymizedStudentLanguageUse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AnonymizedStudentLanguage] [INT] NOT NULL,
	[LanguageUseType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentLanguageUse] PRIMARY KEY NONCLUSTERED
(
	[tid_AnonymizedStudentLanguageUse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentLanguageUse] ADD CONSTRAINT [AnonymizedStudentLanguageUse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentLanguageUse] ADD CONSTRAINT [FK_AnonymizedStudentLanguageUse_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentLanguage])
REFERENCES [t_extension].[AnonymizedStudentLanguage] ([tid_AnonymizedStudentLanguage]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentLanguageUse] CHECK CONSTRAINT [FK_AnonymizedStudentLanguageUse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentLanguageUse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageUseType';
GO

/****** TABLE: [t_extension].[AnonymizedStudentDisability] ******/

CREATE TABLE [t_extension].[AnonymizedStudentDisability]
(
	[tid_AnonymizedStudentDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AnonymizedStudent] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DisabilityDiagnosis] [NVARCHAR](80) NULL,
	[OrderOfDisability] [INT] NULL,
	[DisabilityDeterminationSourceType] [NVARCHAR](450) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_AnonymizedStudentDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentDisability] ADD CONSTRAINT [AnonymizedStudentDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentDisability] ADD CONSTRAINT [FK_AnonymizedStudentDisability_ParentTable] FOREIGN KEY ([tid_AnonymizedStudent])
REFERENCES [t_extension].[AnonymizedStudent] ([tid_AnonymizedStudent]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentDisability] CHECK CONSTRAINT [FK_AnonymizedStudentDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A disability category that describes a child''s impairment.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the disability diagnosis.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDiagnosis';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order by severity of student''s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentDisability', @level2type=N'COLUMN', @level2name=N'OrderOfDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDeterminationSourceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO
/****** TABLE: [t_extension].[AnonymizedStudentAcademicRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentAcademicRecord]
(
    [tid_AnonymizedStudentAcademicRecord] [INT] IDENTITY(1,1) NOT NULL,
	[AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SessionGradePointAverage] [DECIMAL](18, 4) NULL,
	[CumulativeGradePointAverage] [DECIMAL](18, 4) NULL,
	[GPAMax] [DECIMAL](18, 4) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentAcademicRecord] PRIMARY KEY NONCLUSTERED
(
    [tid_AnonymizedStudentAcademicRecord] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentAcademicRecord] ADD CONSTRAINT [AnonymizedStudentAcademicRecord_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentAcademicRecord] ADD CONSTRAINT [AnonymizedStudentAcademicRecord_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AnonymizedStudentAcademicRecord] ADD CONSTRAINT [AnonymizedStudentAcademicRecord_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic record for an anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentAcademicRecord';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'AnonymizedStudentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of grade points an individual earned for this session.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average cumulative grade point average for a student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum grade point average that can be achieved by a student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'GPAMax';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAnonymizedStudentAcademicRecord_Id ON [t_extension].[AnonymizedStudentAcademicRecord]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AnonymizedStudentAcademicRecord] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentAcademicRecordSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AnonymizedStudentAcademicRecord], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentAcademicRecordSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentAcademicRecordSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentAcademicRecordSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentAcademicRecord])
REFERENCES [t_extension].[AnonymizedStudentAcademicRecord] ([tid_AnonymizedStudentAcademicRecord]);
ALTER TABLE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentAcademicRecordSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[AnonymizedStudentAssessment] ******/

CREATE TABLE [t_extension].[AnonymizedStudentAssessment]
(
    [tid_AnonymizedStudentAssessment] [INT] IDENTITY(1,1) NOT NULL,
	[AdministrationDate] [DATE] NOT NULL,
	[AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL,
	[AssessmentIdentifier] [NVARCHAR](60) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TakenSchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AssessmentTitle] [NVARCHAR](60) NULL,
	[AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[CourseCode] [NVARCHAR](60) NULL,
	[EducationOrganizationId] [INT] NULL,
	[UniqueSectionCode] [NVARCHAR](255) NULL,
	[SequenceOfCourse] [INT] NULL,
	[LocalCourseCode] [NVARCHAR](60) NULL,
	[SchoolId] [INT] NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NULL,
	[ClassPeriodName] [NVARCHAR](20) NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentAssessment] PRIMARY KEY NONCLUSTERED
(
    [tid_AnonymizedStudentAssessment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentAssessment] ADD CONSTRAINT [AnonymizedStudentAssessment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentAssessment] ADD CONSTRAINT [AnonymizedStudentAssessment_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AnonymizedStudentAssessment] ADD CONSTRAINT [AnonymizedStudentAssessment_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the analysis or scoring of a Student''s response on an assessment. The analysis results in a value that represents a Student''s performance on a set of items on a test.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentAssessment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the assessment was administered', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AnonymizedStudentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An identifier that uniquely identifies the assessment to which the student results are associated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the assessment was taken', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'TakenSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title if any specific assessment given to a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessment', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAnonymizedStudentAssessment_Id ON [t_extension].[AnonymizedStudentAssessment]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AnonymizedStudentAssessmentSnapshotRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AnonymizedStudentAssessment] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentAssessmentSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AnonymizedStudentAssessment], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentAssessmentSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentAssessmentSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentAssessmentSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentAssessment])
REFERENCES [t_extension].[AnonymizedStudentAssessment] ([tid_AnonymizedStudentAssessment]);
ALTER TABLE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentAssessmentSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[AnonymizedStudentAssessmentScoreResult] ******/

CREATE TABLE [t_extension].[AnonymizedStudentAssessmentScoreResult]
(
	[tid_AnonymizedStudentAssessmentScoreResult] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AnonymizedStudentAssessment] [INT] NOT NULL,
	[Result] [NVARCHAR](35) NOT NULL,
	[ResultDatatypeType] [NVARCHAR](450) NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentAssessmentScoreResult] PRIMARY KEY NONCLUSTERED
(
	[tid_AnonymizedStudentAssessmentScoreResult] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentAssessmentScoreResult] ADD CONSTRAINT [AnonymizedStudentAssessmentScoreResult_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentAssessmentScoreResult] ADD CONSTRAINT [FK_AnonymizedStudentAssessmentScoreResult_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentAssessment])
REFERENCES [t_extension].[AnonymizedStudentAssessment] ([tid_AnonymizedStudentAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentAssessmentScoreResult] CHECK CONSTRAINT [FK_AnonymizedStudentAssessmentScoreResult_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A specification of which performance level value describes the student proficiency.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentAssessmentScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'Result';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
GO

/****** TABLE: [t_extension].[AnonymizedStudentAssessmentPerformanceLevel] ******/

CREATE TABLE [t_extension].[AnonymizedStudentAssessmentPerformanceLevel]
(
	[tid_AnonymizedStudentAssessmentPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_AnonymizedStudentAssessment] [INT] NOT NULL,
	[PerformanceLevelMet] [BIT] NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentAssessmentPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_AnonymizedStudentAssessmentPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentAssessmentPerformanceLevel] ADD CONSTRAINT [AnonymizedStudentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_AnonymizedStudentAssessmentPerformanceLevel_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentAssessment])
REFERENCES [t_extension].[AnonymizedStudentAssessment] ([tid_AnonymizedStudentAssessment]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentAssessmentPerformanceLevel] CHECK CONSTRAINT [FK_AnonymizedStudentAssessmentPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The performance level(s) achieved for the StudentAssessment.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentAssessmentPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional indicator of whether the performance level was met.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMet';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO
/****** TABLE: [t_extension].[AnonymizedStudentCourseAssociation] ******/

CREATE TABLE [t_extension].[AnonymizedStudentCourseAssociation]
(
    [tid_AnonymizedStudentCourseAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentCourseAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_AnonymizedStudentCourseAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentCourseAssociation] ADD CONSTRAINT [AnonymizedStudentCourseAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentCourseAssociation] ADD CONSTRAINT [AnonymizedStudentCourseAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AnonymizedStudentCourseAssociation] ADD CONSTRAINT [AnonymizedStudentCourseAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the association between an anonymized student and the course they are enrolled in', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentCourseAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseAssociation', @level2type=N'COLUMN', @level2name=N'AnonymizedStudentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseAssociation', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseAssociation', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAnonymizedStudentCourseAssociation_Id ON [t_extension].[AnonymizedStudentCourseAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AnonymizedStudentCourseAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentCourseAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AnonymizedStudentCourseAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentCourseAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentCourseAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentCourseAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentCourseAssociation])
REFERENCES [t_extension].[AnonymizedStudentCourseAssociation] ([tid_AnonymizedStudentCourseAssociation]);
ALTER TABLE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentCourseAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[AnonymizedStudentCourseTranscript] ******/

CREATE TABLE [t_extension].[AnonymizedStudentCourseTranscript]
(
    [tid_AnonymizedStudentCourseTranscript] [INT] IDENTITY(1,1) NOT NULL,
	[AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[FinalLetterGradeEarned] [NVARCHAR](20) NULL,
	[FinalNumericGradeEarned] [DECIMAL](9, 2) NULL,
	[CourseRepeatCodeType] [NVARCHAR](450) NULL,
	[CourseTitle] [NVARCHAR](60) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentCourseTranscript] PRIMARY KEY NONCLUSTERED
(
    [tid_AnonymizedStudentCourseTranscript] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentCourseTranscript] ADD CONSTRAINT [AnonymizedStudentCourseTranscript_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentCourseTranscript] ADD CONSTRAINT [AnonymizedStudentCourseTranscript_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AnonymizedStudentCourseTranscript] ADD CONSTRAINT [AnonymizedStudentCourseTranscript_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentCourseTranscript';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'AnonymizedStudentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalLetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseRepeatCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in a school or other institution or organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentCourseTranscript', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAnonymizedStudentCourseTranscript_Id ON [t_extension].[AnonymizedStudentCourseTranscript]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AnonymizedStudentCourseTranscript] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentCourseTranscriptSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AnonymizedStudentCourseTranscript], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentCourseTranscriptSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentCourseTranscriptSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentCourseTranscriptSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentCourseTranscript])
REFERENCES [t_extension].[AnonymizedStudentCourseTranscript] ([tid_AnonymizedStudentCourseTranscript]);
ALTER TABLE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentCourseTranscriptSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[AnonymizedStudentEducationOrganizationAssociation] ******/

CREATE TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociation]
(
    [tid_AnonymizedStudentEducationOrganizationAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentEducationOrganizationAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_AnonymizedStudentEducationOrganizationAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociation] ADD CONSTRAINT [AnonymizedStudentEducationOrganizationAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociation] ADD CONSTRAINT [AnonymizedStudentEducationOrganizationAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociation] ADD CONSTRAINT [AnonymizedStudentEducationOrganizationAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the association between an anonymized student and the Education Organziation they are enrolled in', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentEducationOrganizationAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'AnonymizedStudentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAnonymizedStudentEducationOrganizationAssociation_Id ON [t_extension].[AnonymizedStudentEducationOrganizationAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AnonymizedStudentEducationOrganizationAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentEducationOrganizationAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AnonymizedStudentEducationOrganizationAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentEducationOrganizationAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentEducationOrganizationAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentEducationOrganizationAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentEducationOrganizationAssociation])
REFERENCES [t_extension].[AnonymizedStudentEducationOrganizationAssociation] ([tid_AnonymizedStudentEducationOrganizationAssociation]);
ALTER TABLE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentEducationOrganizationAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[AnonymizedStudentSectionAssociation] ******/

CREATE TABLE [t_extension].[AnonymizedStudentSectionAssociation]
(
    [tid_AnonymizedStudentSectionAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[EndDate] [DATE] NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentSectionAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_AnonymizedStudentSectionAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentSectionAssociation] ADD CONSTRAINT [AnonymizedStudentSectionAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[AnonymizedStudentSectionAssociation] ADD CONSTRAINT [AnonymizedStudentSectionAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[AnonymizedStudentSectionAssociation] ADD CONSTRAINT [AnonymizedStudentSectionAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the association between an anonymized student and the Section they are enrolled in', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'AnonymizedStudentSectionAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for anonymized student', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'AnonymizedStudentIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'AnonymizedStudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TAnonymizedStudentSectionAssociation_Id ON [t_extension].[AnonymizedStudentSectionAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_AnonymizedStudentSectionAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_AnonymizedStudentSectionAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_AnonymizedStudentSectionAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentSectionAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentSectionAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_AnonymizedStudentSectionAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_AnonymizedStudentSectionAssociation])
REFERENCES [t_extension].[AnonymizedStudentSectionAssociation] ([tid_AnonymizedStudentSectionAssociation]);
ALTER TABLE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_AnonymizedStudentSectionAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[Applicant] ******/

CREATE TABLE [t_extension].[Applicant]
(
    [tid_Applicant] [INT] IDENTITY(1,1) NOT NULL,
	[ApplicantIdentifier] [NVARCHAR](32) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[MaidenName] [NVARCHAR](75) NULL,
	[SexType] [NVARCHAR](450) NULL,
	[BirthDate] [DATE] NULL,
	[HispanicLatinoEthnicity] [BIT] NULL,
	[CitizenshipStatusType] [NVARCHAR](450) NULL,
	[HighestCompletedLevelOfEducationDescriptorCodeValue] [NVARCHAR](50) NULL,
	[YearsOfPriorProfessionalExperience] [DECIMAL](5, 2) NULL,
	[YearsOfPriorTeachingExperience] [DECIMAL](5, 2) NULL,
	[LoginId] [NVARCHAR](60) NULL,
	[HighlyQualifiedTeacher] [BIT] NULL,
	[HighlyQualifiedAcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ProspectIdentifier] [NVARCHAR](32) NULL,
	[ProspectEducationOrganizationId] [INT] NULL,
	[GenderType] [NVARCHAR](450) NULL,
	[HighlyQualifiedAcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[HighestCompletedLevelOfEducationDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Applicant] PRIMARY KEY NONCLUSTERED
(
    [tid_Applicant] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[Applicant] ADD CONSTRAINT [Applicant_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[Applicant] ADD CONSTRAINT [Applicant_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[Applicant] ADD CONSTRAINT [Applicant_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person who makes a formal application for an OpenStaffPosition.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'Applicant';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned to a person making formal application for an open staff position.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'ApplicantIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'MaidenName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was born.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'BirthDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino".', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'CitizenshipStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'HighestCompletedLevelOfEducationDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years that an individual has previously held a similar professional position in one or more education institutions.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'YearsOfPriorProfessionalExperience';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years that an individual has previously held a teaching position in one or more education institutions.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'YearsOfPriorTeachingExperience';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'LoginId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'HighlyQualifiedTeacher';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'HighlyQualifiedAcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'ProspectIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'ProspectEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'HighlyQualifiedAcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Applicant', @level2type=N'COLUMN', @level2name=N'HighestCompletedLevelOfEducationDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TApplicant_Id ON [t_extension].[Applicant]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ApplicantSnapshotRecord] ******/

CREATE TABLE [t_extension].[ApplicantSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Applicant], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantSnapshotRecord] ADD CONSTRAINT [FK_ApplicantSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantSnapshotRecord] CHECK CONSTRAINT [FK_ApplicantSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ApplicantSnapshotRecord] ADD CONSTRAINT [FK_ApplicantSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]);
ALTER TABLE [t_extension].[ApplicantSnapshotRecord] CHECK CONSTRAINT [FK_ApplicantSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ApplicantStaffIdentificationCode] ******/

CREATE TABLE [t_extension].[ApplicantStaffIdentificationCode]
(
	[tid_ApplicantStaffIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[StaffIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
	[StaffIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantStaffIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantStaffIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantStaffIdentificationCode] ADD CONSTRAINT [ApplicantStaffIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantStaffIdentificationCode] ADD CONSTRAINT [FK_ApplicantStaffIdentificationCode_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantStaffIdentificationCode] CHECK CONSTRAINT [FK_ApplicantStaffIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an applicant by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantStaffIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantStaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantStaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the staff Identification Code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantStaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantStaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ApplicantAddress] ******/

CREATE TABLE [t_extension].[ApplicantAddress]
(
	[tid_ApplicantAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantAddress] ADD CONSTRAINT [ApplicantAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantAddress] ADD CONSTRAINT [FK_ApplicantAddress_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantAddress] CHECK CONSTRAINT [FK_ApplicantAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an address, including the street address, city, state, and ZIP code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_extension].[ApplicantInternationalAddress] ******/

CREATE TABLE [t_extension].[ApplicantInternationalAddress]
(
	[tid_ApplicantInternationalAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[AddressLine1] [NVARCHAR](150) NOT NULL,
	[AddressLine2] [NVARCHAR](150) NULL,
	[AddressLine3] [NVARCHAR](150) NULL,
	[AddressLine4] [NVARCHAR](150) NULL,
	[CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantInternationalAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantInternationalAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantInternationalAddress] ADD CONSTRAINT [ApplicantInternationalAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantInternationalAddress] ADD CONSTRAINT [FK_ApplicantInternationalAddress_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantInternationalAddress] CHECK CONSTRAINT [FK_ApplicantInternationalAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantInternationalAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ApplicantTelephone] ******/

CREATE TABLE [t_extension].[ApplicantTelephone]
(
	[tid_ApplicantTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[TelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[OrderOfPriority] [INT] NULL,
	[TextMessageCapabilityIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantTelephone] ADD CONSTRAINT [ApplicantTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantTelephone] ADD CONSTRAINT [FK_ApplicantTelephone_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantTelephone] CHECK CONSTRAINT [FK_ApplicantTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator';
GO

/****** TABLE: [t_extension].[ApplicantElectronicMail] ******/

CREATE TABLE [t_extension].[ApplicantElectronicMail]
(
	[tid_ApplicantElectronicMail] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[ElectronicMailType] [NVARCHAR](450) NOT NULL,
	[ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
	[PrimaryEmailAddressIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantElectronicMail] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantElectronicMail] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantElectronicMail] ADD CONSTRAINT [ApplicantElectronicMail_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantElectronicMail] ADD CONSTRAINT [FK_ApplicantElectronicMail_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantElectronicMail] CHECK CONSTRAINT [FK_ApplicantElectronicMail_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantElectronicMail';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator';
GO

/****** TABLE: [t_extension].[ApplicantRace] ******/

CREATE TABLE [t_extension].[ApplicantRace]
(
	[tid_ApplicantRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantRace] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantRace] ADD CONSTRAINT [ApplicantRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantRace] ADD CONSTRAINT [FK_ApplicantRace_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantRace] CHECK CONSTRAINT [FK_ApplicantRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantRace', @level2type=N'COLUMN', @level2name=N'RaceType';
GO

/****** TABLE: [t_extension].[ApplicantVisa] ******/

CREATE TABLE [t_extension].[ApplicantVisa]
(
	[tid_ApplicantVisa] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[VisaType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantVisa] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantVisa] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantVisa] ADD CONSTRAINT [ApplicantVisa_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantVisa] ADD CONSTRAINT [FK_ApplicantVisa_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantVisa] CHECK CONSTRAINT [FK_ApplicantVisa_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantVisa';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantVisa', @level2type=N'COLUMN', @level2name=N'VisaType';
GO

/****** TABLE: [t_extension].[ApplicantLanguage] ******/

CREATE TABLE [t_extension].[ApplicantLanguage]
(
	[tid_ApplicantLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantLanguage] ADD CONSTRAINT [ApplicantLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantLanguage] ADD CONSTRAINT [FK_ApplicantLanguage_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantLanguage] CHECK CONSTRAINT [FK_ApplicantLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language(s) the individual uses to communicate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ApplicantLanguageUse] ******/

CREATE TABLE [t_extension].[ApplicantLanguageUse]
(
	[tid_ApplicantLanguageUse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ApplicantLanguage] [INT] NOT NULL,
	[LanguageUseType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantLanguageUse] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantLanguageUse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantLanguageUse] ADD CONSTRAINT [ApplicantLanguageUse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantLanguageUse] ADD CONSTRAINT [FK_ApplicantLanguageUse_ParentTable] FOREIGN KEY ([tid_ApplicantLanguage])
REFERENCES [t_extension].[ApplicantLanguage] ([tid_ApplicantLanguage]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantLanguageUse] CHECK CONSTRAINT [FK_ApplicantLanguageUse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantLanguageUse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageUseType';
GO

/****** TABLE: [t_extension].[ApplicantCredential] ******/

CREATE TABLE [t_extension].[ApplicantCredential]
(
	[tid_ApplicantCredential] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[CredentialIdentifier] [NVARCHAR](60) NOT NULL,
	[StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantCredential] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantCredential] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantCredential] ADD CONSTRAINT [ApplicantCredential_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantCredential] ADD CONSTRAINT [FK_ApplicantCredential_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantCredential] CHECK CONSTRAINT [FK_ApplicantCredential_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The legal document or authorization giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantCredential';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier or serial number assigned to the credential.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantCredential', @level2type=N'COLUMN', @level2name=N'CredentialIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantCredential', @level2type=N'COLUMN', @level2name=N'StateOfIssueStateAbbreviationType';
GO

/****** TABLE: [t_extension].[ApplicantBackgroundCheck] ******/

CREATE TABLE [t_extension].[ApplicantBackgroundCheck]
(
	[tid_ApplicantBackgroundCheck] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BackgroundCheckRequestedDate] [DATE] NOT NULL,
	[BackgroundCheckStatusDescriptorCodeValue] [NVARCHAR](50) NULL,
	[BackgroundCheckCompletedDate] [DATE] NULL,
	[Fingerprint] [BIT] NULL,
	[BackgroundCheckStatusDescriptorNamespace] [NVARCHAR](255) NULL,
	[BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantBackgroundCheck] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantBackgroundCheck] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantBackgroundCheck] ADD CONSTRAINT [ApplicantBackgroundCheck_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantBackgroundCheck] ADD CONSTRAINT [FK_ApplicantBackgroundCheck_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantBackgroundCheck] CHECK CONSTRAINT [FK_ApplicantBackgroundCheck_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Applicant background check history and disposition.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantBackgroundCheck';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the background check was requested.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckRequestedDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the background check was completed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckCompletedDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that a person has or has not completed a fingerprint.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantBackgroundCheck', @level2type=N'COLUMN', @level2name=N'Fingerprint';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckStatusDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ApplicantTeacherPreparationProgram] ******/

CREATE TABLE [t_extension].[ApplicantTeacherPreparationProgram]
(
	[tid_ApplicantTeacherPreparationProgram] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL,
	[TeacherPreparationProgramIdentifier] [NVARCHAR](75) NULL,
	[TeacherPreparationProgramTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[MajorSpecialization] [NVARCHAR](75) NOT NULL,
	[GPA] [DECIMAL](18, 4) NULL,
	[LevelOfDegreeAwardedDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LevelOfDegreeAwardedDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[TeacherPreparationProgramTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantTeacherPreparationProgram] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantTeacherPreparationProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantTeacherPreparationProgram] ADD CONSTRAINT [ApplicantTeacherPreparationProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantTeacherPreparationProgram] ADD CONSTRAINT [FK_ApplicantTeacherPreparationProgram_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantTeacherPreparationProgram] CHECK CONSTRAINT [FK_ApplicantTeacherPreparationProgram_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Teacher Preparation Program(s) completed by the teacher.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantTeacherPreparationProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the Teacher Preparation Program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An identifier assigned to the teacher preparation program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the organization providing the teacher preparation program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The major area for a degree or area of specialization for a certificate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'MajorSpecialization';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final GPA the teacher achieved in the program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'GPA';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'LevelOfDegreeAwardedDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'LevelOfDegreeAwardedDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ApplicantTeacherPreparationProgramAddress] ******/

CREATE TABLE [t_extension].[ApplicantTeacherPreparationProgramAddress]
(
	[tid_ApplicantTeacherPreparationProgramAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ApplicantTeacherPreparationProgram] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantTeacherPreparationProgramAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantTeacherPreparationProgramAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantTeacherPreparationProgramAddress] ADD CONSTRAINT [ApplicantTeacherPreparationProgramAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantTeacherPreparationProgramAddress] ADD CONSTRAINT [FK_ApplicantTeacherPreparationProgramAddress_ParentTable] FOREIGN KEY ([tid_ApplicantTeacherPreparationProgram])
REFERENCES [t_extension].[ApplicantTeacherPreparationProgram] ([tid_ApplicantTeacherPreparationProgram]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantTeacherPreparationProgramAddress] CHECK CONSTRAINT [FK_ApplicantTeacherPreparationProgramAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The address of the institution providing the teacher prep program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantTeacherPreparationProgramAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantTeacherPreparationProgramAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_extension].[ApplicantDisability] ******/

CREATE TABLE [t_extension].[ApplicantDisability]
(
	[tid_ApplicantDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DisabilityDiagnosis] [NVARCHAR](80) NULL,
	[OrderOfDisability] [INT] NULL,
	[DisabilityDeterminationSourceType] [NVARCHAR](450) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantDisability] ADD CONSTRAINT [ApplicantDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantDisability] ADD CONSTRAINT [FK_ApplicantDisability_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantDisability] CHECK CONSTRAINT [FK_ApplicantDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The disability condition(s) that best describes an individual''s impairment.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the disability diagnosis.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDiagnosis';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order by severity of student''s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantDisability', @level2type=N'COLUMN', @level2name=N'OrderOfDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDeterminationSourceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ApplicantAid] ******/

CREATE TABLE [t_extension].[ApplicantAid]
(
	[tid_ApplicantAid] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[AidTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EndDate] [DATE] NULL,
	[AidConditionDescription] [NVARCHAR](1024) NULL,
	[AidAmount] [MONEY] NULL,
	[PellGrantRecipient] [BIT] NULL,
	[AidTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantAid] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantAid] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantAid] ADD CONSTRAINT [ApplicantAid_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantAid] ADD CONSTRAINT [FK_ApplicantAid_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantAid] CHECK CONSTRAINT [FK_ApplicantAid_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the financial aid a person is awarded.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantAid';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAid', @level2type=N'COLUMN', @level2name=N'AidTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the award was designated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAid', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the award was removed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAid', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the condition (e.g., placement in a high need school) under which the aid was given.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAid', @level2type=N'COLUMN', @level2name=N'AidConditionDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of financial aid awarded to a person for the term/year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAid', @level2type=N'COLUMN', @level2name=N'AidAmount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates a person who receives Pell Grant aid.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAid', @level2type=N'COLUMN', @level2name=N'PellGrantRecipient';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantAid', @level2type=N'COLUMN', @level2name=N'AidTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ApplicantScoreResult] ******/

CREATE TABLE [t_extension].[ApplicantScoreResult]
(
	[tid_ApplicantScoreResult] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[Result] [NVARCHAR](35) NOT NULL,
	[ResultDatatypeType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantScoreResult] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantScoreResult] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantScoreResult] ADD CONSTRAINT [ApplicantScoreResult_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantScoreResult] ADD CONSTRAINT [FK_ApplicantScoreResult_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantScoreResult] CHECK CONSTRAINT [FK_ApplicantScoreResult_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantScoreResult', @level2type=N'COLUMN', @level2name=N'Result';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantScoreResult', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
GO

/****** TABLE: [t_extension].[ApplicantIdentificationDocument] ******/

CREATE TABLE [t_extension].[ApplicantIdentificationDocument]
(
	[tid_ApplicantIdentificationDocument] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Applicant] [INT] NOT NULL,
	[IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL,
	[PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL,
	[DocumentTitle] [NVARCHAR](60) NULL,
	[DocumentExpirationDate] [DATE] NULL,
	[IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ApplicantIdentificationDocument] PRIMARY KEY NONCLUSTERED
(
	[tid_ApplicantIdentificationDocument] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ApplicantIdentificationDocument] ADD CONSTRAINT [ApplicantIdentificationDocument_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ApplicantIdentificationDocument] ADD CONSTRAINT [FK_ApplicantIdentificationDocument_ParentTable] FOREIGN KEY ([tid_Applicant])
REFERENCES [t_extension].[Applicant] ([tid_Applicant]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ApplicantIdentificationDocument] CHECK CONSTRAINT [FK_ApplicantIdentificationDocument_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ApplicantIdentificationDocument';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ApplicantIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorNamespace';
GO
/****** TABLE: [t_extension].[BackgroundCheckStatusDescriptor] ******/

CREATE TABLE [t_extension].[BackgroundCheckStatusDescriptor]
(
    [tid_BackgroundCheckStatusDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[BackgroundCheckStatusType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BackgroundCheckStatusDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_BackgroundCheckStatusDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BackgroundCheckStatusDescriptor] ADD CONSTRAINT [BackgroundCheckStatusDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[BackgroundCheckStatusDescriptor] ADD CONSTRAINT [BackgroundCheckStatusDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[BackgroundCheckStatusDescriptor] ADD CONSTRAINT [BackgroundCheckStatusDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the  status of the background check (e.g., pending, under investigation, offense(s) found, etc.).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'BackgroundCheckStatusDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusDescriptor', @level2type=N'COLUMN', @level2name=N'BackgroundCheckStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TBackgroundCheckStatusDescriptor_Id ON [t_extension].[BackgroundCheckStatusDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_BackgroundCheckStatusDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BackgroundCheckStatusDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_BackgroundCheckStatusDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BackgroundCheckStatusDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BackgroundCheckStatusDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BackgroundCheckStatusDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_BackgroundCheckStatusDescriptor])
REFERENCES [t_extension].[BackgroundCheckStatusDescriptor] ([tid_BackgroundCheckStatusDescriptor]);
ALTER TABLE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BackgroundCheckStatusDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[BackgroundCheckStatusType] ******/

CREATE TABLE [t_extension].[BackgroundCheckStatusType]
(
	[tid_BackgroundCheckStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_BackgroundCheckStatusType] PRIMARY KEY NONCLUSTERED
(
	[tid_BackgroundCheckStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BackgroundCheckStatusType] ADD CONSTRAINT [BackgroundCheckStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[BackgroundCheckStatusType] ADD CONSTRAINT [BackgroundCheckStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[BackgroundCheckStatusType] ADD CONSTRAINT [BackgroundCheckStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The status of the background check (e.g., pending, under investigation, offense(s) found, etc.).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'BackgroundCheckStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the BackgroundCheckStatus type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the BackgroundCheckStatus type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[BackgroundCheckTypeDescriptor] ******/

CREATE TABLE [t_extension].[BackgroundCheckTypeDescriptor]
(
    [tid_BackgroundCheckTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[BackgroundCheckType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BackgroundCheckTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_BackgroundCheckTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BackgroundCheckTypeDescriptor] ADD CONSTRAINT [BackgroundCheckTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[BackgroundCheckTypeDescriptor] ADD CONSTRAINT [BackgroundCheckTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[BackgroundCheckTypeDescriptor] ADD CONSTRAINT [BackgroundCheckTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the classification of the background check a person receives.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'BackgroundCheckTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckTypeDescriptor', @level2type=N'COLUMN', @level2name=N'BackgroundCheckType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TBackgroundCheckTypeDescriptor_Id ON [t_extension].[BackgroundCheckTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_BackgroundCheckTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BackgroundCheckTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_BackgroundCheckTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BackgroundCheckTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BackgroundCheckTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BackgroundCheckTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_BackgroundCheckTypeDescriptor])
REFERENCES [t_extension].[BackgroundCheckTypeDescriptor] ([tid_BackgroundCheckTypeDescriptor]);
ALTER TABLE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BackgroundCheckTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[BackgroundCheckType] ******/

CREATE TABLE [t_extension].[BackgroundCheckType]
(
	[tid_BackgroundCheckType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_BackgroundCheckType] PRIMARY KEY NONCLUSTERED
(
	[tid_BackgroundCheckType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BackgroundCheckType] ADD CONSTRAINT [BackgroundCheckType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[BackgroundCheckType] ADD CONSTRAINT [BackgroundCheckType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[BackgroundCheckType] ADD CONSTRAINT [BackgroundCheckType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the classification of the background check a person receives.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'BackgroundCheckType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the BackgroundCheck type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the BackgroundCheck type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BackgroundCheckType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[BoardCertificationTypeDescriptor] ******/

CREATE TABLE [t_extension].[BoardCertificationTypeDescriptor]
(
    [tid_BoardCertificationTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[BoardCertificationType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BoardCertificationTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_BoardCertificationTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BoardCertificationTypeDescriptor] ADD CONSTRAINT [BoardCertificationTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[BoardCertificationTypeDescriptor] ADD CONSTRAINT [BoardCertificationTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[BoardCertificationTypeDescriptor] ADD CONSTRAINT [BoardCertificationTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the type of board certification awarded to an individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'BoardCertificationTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationTypeDescriptor', @level2type=N'COLUMN', @level2name=N'BoardCertificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TBoardCertificationTypeDescriptor_Id ON [t_extension].[BoardCertificationTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_BoardCertificationTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_BoardCertificationTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_BoardCertificationTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BoardCertificationTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BoardCertificationTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_BoardCertificationTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_BoardCertificationTypeDescriptor])
REFERENCES [t_extension].[BoardCertificationTypeDescriptor] ([tid_BoardCertificationTypeDescriptor]);
ALTER TABLE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_BoardCertificationTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[BoardCertificationType] ******/

CREATE TABLE [t_extension].[BoardCertificationType]
(
	[tid_BoardCertificationType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_BoardCertificationType] PRIMARY KEY NONCLUSTERED
(
	[tid_BoardCertificationType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[BoardCertificationType] ADD CONSTRAINT [BoardCertificationType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[BoardCertificationType] ADD CONSTRAINT [BoardCertificationType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[BoardCertificationType] ADD CONSTRAINT [BoardCertificationType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the board certification board types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'BoardCertificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the BoardCertification type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the BoardCertification type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'BoardCertificationType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[CertificationExamTypeDescriptor] ******/

CREATE TABLE [t_extension].[CertificationExamTypeDescriptor]
(
    [tid_CertificationExamTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[CertificationExamType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CertificationExamTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_CertificationExamTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CertificationExamTypeDescriptor] ADD CONSTRAINT [CertificationExamTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CertificationExamTypeDescriptor] ADD CONSTRAINT [CertificationExamTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CertificationExamTypeDescriptor] ADD CONSTRAINT [CertificationExamTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the type of certification exam that was taken.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CertificationExamTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CertificationExamType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCertificationExamTypeDescriptor_Id ON [t_extension].[CertificationExamTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CertificationExamTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CertificationExamTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CertificationExamTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CertificationExamTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CertificationExamTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CertificationExamTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_CertificationExamTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CertificationExamTypeDescriptor])
REFERENCES [t_extension].[CertificationExamTypeDescriptor] ([tid_CertificationExamTypeDescriptor]);
ALTER TABLE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_CertificationExamTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[CertificationExamType] ******/

CREATE TABLE [t_extension].[CertificationExamType]
(
	[tid_CertificationExamType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_CertificationExamType] PRIMARY KEY NONCLUSTERED
(
	[tid_CertificationExamType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CertificationExamType] ADD CONSTRAINT [CertificationExamType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CertificationExamType] ADD CONSTRAINT [CertificationExamType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CertificationExamType] ADD CONSTRAINT [CertificationExamType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the certification exam types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CertificationExamType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CertificationExam type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CertificationExam type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CertificationExamType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[CourseCourseTranscriptFacts] ******/

CREATE TABLE [t_extension].[CourseCourseTranscriptFacts]
(
    [tid_CourseCourseTranscriptFacts] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[CourseTitle] [NVARCHAR](60) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseCourseTranscriptFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseCourseTranscriptFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseCourseTranscriptFacts] ADD CONSTRAINT [CourseCourseTranscriptFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseCourseTranscriptFacts] ADD CONSTRAINT [CourseCourseTranscriptFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CourseCourseTranscriptFacts] ADD CONSTRAINT [CourseCourseTranscriptFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final grade earned of the group.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseCourseTranscriptFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final letter grade earned of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseCourseTranscriptFacts_Id ON [t_extension].[CourseCourseTranscriptFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CourseCourseTranscriptFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseCourseTranscriptFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseCourseTranscriptFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseCourseTranscriptFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseCourseTranscriptFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseCourseTranscriptFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseCourseTranscriptFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseCourseTranscriptFacts])
REFERENCES [t_extension].[CourseCourseTranscriptFacts] ([tid_CourseCourseTranscriptFacts]);
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseCourseTranscriptFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled]
(
	[tid_CourseCourseTranscriptFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseCourseTranscriptFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseCourseTranscriptFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseCourseTranscriptFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled] ADD CONSTRAINT [CourseCourseTranscriptFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled] ADD CONSTRAINT [FK_CourseCourseTranscriptFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_CourseCourseTranscriptFacts])
REFERENCES [t_extension].[CourseCourseTranscriptFacts] ([tid_CourseCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled] CHECK CONSTRAINT [FK_CourseCourseTranscriptFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseCourseTranscriptFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
(
	[tid_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseCourseTranscriptFacts] [INT] NOT NULL,
	[FinalLetterGrade] [NVARCHAR](20) NOT NULL,
	[LetterGradeTypeNumber] [INT] NULL,
	[LetterGradeTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ADD CONSTRAINT [CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ADD CONSTRAINT [FK_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned_ParentTable] FOREIGN KEY ([tid_CourseCourseTranscriptFacts])
REFERENCES [t_extension].[CourseCourseTranscriptFacts] ([tid_CourseCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] CHECK CONSTRAINT [FK_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final letter grade earned of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'FinalLetterGrade';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students receiving a letter grade by letter grade type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'LetterGradeTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students receiving a letter grade by type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'LetterGradeTypePercentage';
GO

/****** TABLE: [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned]
(
	[tid_CourseCourseTranscriptFactsAggregatedNumericGradeEarned] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseCourseTranscriptFacts] [INT] NOT NULL,
	[AverageFinalNumericGradeEarned] [DECIMAL](9, 2) NOT NULL,
	[NumericGradeNCount] [INT] NULL,
	[NumericGradeStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseCourseTranscriptFactsAggregatedNumericGradeEarned] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseCourseTranscriptFactsAggregatedNumericGradeEarned] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned] ADD CONSTRAINT [CourseCourseTranscriptFactsAggregatedNumericGradeEarned_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned] ADD CONSTRAINT [FK_CourseCourseTranscriptFactsAggregatedNumericGradeEarned_ParentTable] FOREIGN KEY ([tid_CourseCourseTranscriptFacts])
REFERENCES [t_extension].[CourseCourseTranscriptFacts] ([tid_CourseCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned] CHECK CONSTRAINT [FK_CourseCourseTranscriptFactsAggregatedNumericGradeEarned_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the numeric grade received by the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseCourseTranscriptFactsAggregatedNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average final numeric grade for the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'AverageFinalNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'NumericGradeNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'NumericGradeStandardDeviation';
GO
/****** TABLE: [t_extension].[CourseStudentAcademicRecordFacts] ******/

CREATE TABLE [t_extension].[CourseStudentAcademicRecordFacts]
(
    [tid_CourseStudentAcademicRecordFacts] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AggregatedGPAMax] [DECIMAL](18, 4) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAcademicRecordFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseStudentAcademicRecordFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAcademicRecordFacts] ADD CONSTRAINT [CourseStudentAcademicRecordFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFacts] ADD CONSTRAINT [CourseStudentAcademicRecordFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFacts] ADD CONSTRAINT [CourseStudentAcademicRecordFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of student and their academic record', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAcademicRecordFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum grade point average a student can receive in the course', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'AggregatedGPAMax';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseStudentAcademicRecordFacts_Id ON [t_extension].[CourseStudentAcademicRecordFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseStudentAcademicRecordFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAcademicRecordFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseStudentAcademicRecordFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseStudentAcademicRecordFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseStudentAcademicRecordFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseStudentAcademicRecordFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseStudentAcademicRecordFacts])
REFERENCES [t_extension].[CourseStudentAcademicRecordFacts] ([tid_CourseStudentAcademicRecordFacts]);
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseStudentAcademicRecordFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled]
(
	[tid_CourseStudentAcademicRecordFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentAcademicRecordFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAcademicRecordFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentAcademicRecordFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled] ADD CONSTRAINT [CourseStudentAcademicRecordFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled] ADD CONSTRAINT [FK_CourseStudentAcademicRecordFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_CourseStudentAcademicRecordFacts])
REFERENCES [t_extension].[CourseStudentAcademicRecordFacts] ([tid_CourseStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled] CHECK CONSTRAINT [FK_CourseStudentAcademicRecordFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAcademicRecordFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
(
	[tid_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentAcademicRecordFacts] [INT] NOT NULL,
	[GradePointAverage] [DECIMAL](18, 4) NOT NULL,
	[GradePointNCount] [INT] NULL,
	[GradePointStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ADD CONSTRAINT [CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ADD CONSTRAINT [FK_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_ParentTable] FOREIGN KEY ([tid_CourseStudentAcademicRecordFacts])
REFERENCES [t_extension].[CourseStudentAcademicRecordFacts] ([tid_CourseStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] CHECK CONSTRAINT [FK_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the cumulative grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average cumulative grade point average for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average grade point for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointStandardDeviation';
GO

/****** TABLE: [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
(
	[tid_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentAcademicRecordFacts] [INT] NOT NULL,
	[GradePointAverage] [DECIMAL](18, 4) NOT NULL,
	[GradePointNCount] [INT] NULL,
	[GradePointStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ADD CONSTRAINT [CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ADD CONSTRAINT [FK_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage_ParentTable] FOREIGN KEY ([tid_CourseStudentAcademicRecordFacts])
REFERENCES [t_extension].[CourseStudentAcademicRecordFacts] ([tid_CourseStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] CHECK CONSTRAINT [FK_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the cumulative grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average cumulative grade point average for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average grade point for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointStandardDeviation';
GO
/****** TABLE: [t_extension].[CourseStudentAssessmentFacts] ******/

CREATE TABLE [t_extension].[CourseStudentAssessmentFacts]
(
    [tid_CourseStudentAssessmentFacts] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[TakenSchoolYear] [SMALLINT] NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NULL,
	[AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AdministrationDate] [DATE] NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAssessmentFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseStudentAssessmentFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAssessmentFacts] ADD CONSTRAINT [CourseStudentAssessmentFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAssessmentFacts] ADD CONSTRAINT [CourseStudentAssessmentFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CourseStudentAssessmentFacts] ADD CONSTRAINT [CourseStudentAssessmentFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of students and their assesssment score results and performance levels', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAssessmentFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the assessment was taken', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TakenSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of a specific assessment given to a group.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date a specific assessment was administered to a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AdministrationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseStudentAssessmentFacts_Id ON [t_extension].[CourseStudentAssessmentFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CourseStudentAssessmentFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseStudentAssessmentFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAssessmentFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseStudentAssessmentFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseStudentAssessmentFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseStudentAssessmentFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseStudentAssessmentFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseStudentAssessmentFacts])
REFERENCES [t_extension].[CourseStudentAssessmentFacts] ([tid_CourseStudentAssessmentFacts]);
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseStudentAssessmentFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled]
(
	[tid_CourseStudentAssessmentFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentAssessmentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAssessmentFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentAssessmentFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled] ADD CONSTRAINT [CourseStudentAssessmentFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled] ADD CONSTRAINT [FK_CourseStudentAssessmentFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_CourseStudentAssessmentFacts])
REFERENCES [t_extension].[CourseStudentAssessmentFacts] ([tid_CourseStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled] CHECK CONSTRAINT [FK_CourseStudentAssessmentFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAssessmentFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult]
(
	[tid_CourseStudentAssessmentFactsAggregatedScoreResult] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentAssessmentFacts] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[AverageScoreResultDatatypeType] [NVARCHAR](450) NOT NULL,
	[AverageScoreResult] [NVARCHAR](35) NOT NULL,
	[ScoreNCount] [INT] NULL,
	[ScoreStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAssessmentFactsAggregatedScoreResult] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentAssessmentFactsAggregatedScoreResult] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult] ADD CONSTRAINT [CourseStudentAssessmentFactsAggregatedScoreResult_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult] ADD CONSTRAINT [FK_CourseStudentAssessmentFactsAggregatedScoreResult_ParentTable] FOREIGN KEY ([tid_CourseStudentAssessmentFacts])
REFERENCES [t_extension].[CourseStudentAssessmentFacts] ([tid_CourseStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult] CHECK CONSTRAINT [FK_CourseStudentAssessmentFactsAggregatedScoreResult_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the score from an assessment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAssessmentFactsAggregatedScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AverageScoreResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful average score or statistical expression of the performance of an group. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AverageScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average assessment score for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'ScoreNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average assessment score for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'ScoreStandardDeviation';
GO

/****** TABLE: [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel]
(
	[tid_CourseStudentAssessmentFactsAggregatedPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentAssessmentFacts] [INT] NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceLevelMetNumber] [INT] NULL,
	[PerformanceLevelMetPercentage] [DECIMAL](5, 4) NULL,
	[PerformanceLevelTypeNumber] [INT] NULL,
	[PerformanceLevelTypePercentage] [DECIMAL](5, 4) NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentAssessmentFactsAggregatedPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentAssessmentFactsAggregatedPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel] ADD CONSTRAINT [CourseStudentAssessmentFactsAggregatedPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel] ADD CONSTRAINT [FK_CourseStudentAssessmentFactsAggregatedPerformanceLevel_ParentTable] FOREIGN KEY ([tid_CourseStudentAssessmentFacts])
REFERENCES [t_extension].[CourseStudentAssessmentFacts] ([tid_CourseStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel] CHECK CONSTRAINT [FK_CourseStudentAssessmentFactsAggregatedPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the performance level for an assessment of a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentAssessmentFactsAggregatedPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who met the performance level', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMetNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who met the performance level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMetPercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who achieved each performance level by performance level type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who achieved performance level by each performance level type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelTypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO
/****** TABLE: [t_extension].[CourseStudentFacts] ******/

CREATE TABLE [t_extension].[CourseStudentFacts]
(
    [tid_CourseStudentFacts] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseStudentFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFacts] ADD CONSTRAINT [CourseStudentFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFacts] ADD CONSTRAINT [CourseStudentFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CourseStudentFacts] ADD CONSTRAINT [CourseStudentFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This domain entity collects data for aggregated level students with whom the teacher candidate is associated through field work or student teaching	AggregatedStudentFact', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFacts', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseStudentFacts_Id ON [t_extension].[CourseStudentFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CourseStudentFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[CourseStudentFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseStudentFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseStudentFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseStudentFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CourseStudentFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseStudentFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]);
ALTER TABLE [t_extension].[CourseStudentFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseStudentFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[CourseStudentFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[CourseStudentFactsStudentsEnrolled]
(
	[tid_CourseStudentFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsStudentsEnrolled] ADD CONSTRAINT [CourseStudentFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsStudentsEnrolled] ADD CONSTRAINT [FK_CourseStudentFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsStudentsEnrolled] CHECK CONSTRAINT [FK_CourseStudentFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedSex] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedSex]
(
	[tid_CourseStudentFactsAggregatedSex] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[SexTypeNumber] [INT] NULL,
	[SexTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedSex] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedSex] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSex] ADD CONSTRAINT [CourseStudentFactsAggregatedSex_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSex] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedSex_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSex] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedSex_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the sex of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedSex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each sex type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by each sex type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexTypePercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedGender] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedGender]
(
	[tid_CourseStudentFactsAggregatedGender] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[GenderType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[GenderTypeNumber] [INT] NULL,
	[GenderTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedGender] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedGender] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedGender] ADD CONSTRAINT [CourseStudentFactsAggregatedGender_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedGender] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedGender_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedGender] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedGender_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the gender', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedGender';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who identify by each gender type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who associate with each gender type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderTypePercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity]
(
	[tid_CourseStudentFactsAggregatedHispanicLatinoEthnicity] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[HispanicLatinoEthnicity] [BIT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[HispanicLatinoEthnicityNumber] [INT] NULL,
	[HispanicLatinoEthnicityPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedHispanicLatinoEthnicity] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedHispanicLatinoEthnicity] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity] ADD CONSTRAINT [CourseStudentFactsAggregatedHispanicLatinoEthnicity_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedHispanicLatinoEthnicity_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedHispanicLatinoEthnicity_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the Eth ethnicity of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedHispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are hispanic/latino', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicityNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as hispanic/latino.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicityPercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedRace] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedRace]
(
	[tid_CourseStudentFactsAggregatedRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[RaceTypeNumber] [INT] NULL,
	[RaceTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedRace] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedRace] ADD CONSTRAINT [CourseStudentFactsAggregatedRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedRace] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedRace_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedRace] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the race of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each race type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by each race type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceTypePercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility]
(
	[tid_CourseStudentFactsAggregatedSchoolFoodServicesEligibility] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TypeNumber] [INT] NULL,
	[TypePercentage] [INT] NULL,
	[SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedSchoolFoodServicesEligibility] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedSchoolFoodServicesEligibility] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility] ADD CONSTRAINT [CourseStudentFactsAggregatedSchoolFoodServicesEligibility_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedSchoolFoodServicesEligibility_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedSchoolFoodServicesEligibility_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies if the student is eligible for Free and Reduce Price Lunch', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedSchoolFoodServicesEligibility';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students eligibile for SchoolFoodServicesEligibility by category', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'TypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are eligible for SchoolFoodServicesEligibility by type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'TypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedLanguage] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedLanguage]
(
	[tid_CourseStudentFactsAggregatedLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[LanguageTypeNumber] [INT] NULL,
	[LanguageTypePercentage] [DECIMAL](5, 4) NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedLanguage] ADD CONSTRAINT [CourseStudentFactsAggregatedLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedLanguage] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedLanguage_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedLanguage] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The data about the language', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each language type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by language type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageTypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedByDisability] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedByDisability]
(
	[tid_CourseStudentFactsAggregatedByDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TypeNumber] [INT] NULL,
	[Percentage] [DECIMAL](5, 4) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedByDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedByDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedByDisability] ADD CONSTRAINT [CourseStudentFactsAggregatedByDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedByDisability] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedByDisability_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedByDisability] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedByDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the disability of a group aggregated by course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedByDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of student who have a disability by disability type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'TypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have a disability by each specific disability type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'Percentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled]
(
	[tid_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[StudentsDisabledNumber] [INT] NULL,
	[StudentsDisabledPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] ADD CONSTRAINT [CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the disability of a group aggregated by course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who have a disability.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'StudentsDisabledNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Percentage of students who have a disability', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'StudentsDisabledPercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedELLEnrollment] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedELLEnrollment]
(
	[tid_CourseStudentFactsAggregatedELLEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[ELLEnrollmentNumber] [INT] NULL,
	[ELLEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedELLEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedELLEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedELLEnrollment] ADD CONSTRAINT [CourseStudentFactsAggregatedELLEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedELLEnrollment] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedELLEnrollment_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedELLEnrollment] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedELLEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ELL enrollment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedELLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are ELL.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ELLEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as ELL', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ELLEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedESLEnrollment] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedESLEnrollment]
(
	[tid_CourseStudentFactsAggregatedESLEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[ESLEnrollmentNumber] [INT] NULL,
	[ESLEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedESLEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedESLEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedESLEnrollment] ADD CONSTRAINT [CourseStudentFactsAggregatedESLEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedESLEnrollment] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedESLEnrollment_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedESLEnrollment] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedESLEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ESL enrollment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedESLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are ESL.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ESLEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as ESL', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ESLEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedSection504Enrollment] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedSection504Enrollment]
(
	[tid_CourseStudentFactsAggregatedSection504Enrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[Number504Enrolled] [INT] NULL,
	[Percentage504Enrolled] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedSection504Enrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedSection504Enrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSection504Enrollment] ADD CONSTRAINT [CourseStudentFactsAggregatedSection504Enrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSection504Enrollment] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedSection504Enrollment_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSection504Enrollment] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedSection504Enrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedSection504Enrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'Number504Enrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'Percentage504Enrolled';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedSPED] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedSPED]
(
	[tid_CourseStudentFactsAggregatedSPED] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[SPEDEnrollmentNumber] [INT] NULL,
	[SPEDEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedSPED] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedSPED] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSPED] ADD CONSTRAINT [CourseStudentFactsAggregatedSPED_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSPED] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedSPED_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedSPED] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedSPED_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in SPED of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedSPED';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students enrolled in SPED', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'SPEDEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students enrolled in a SPED program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'SPEDEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment] ******/

CREATE TABLE [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment]
(
	[tid_CourseStudentFactsAggregatedTitleIEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TitleIEnrollmentNumber] [INT] NULL,
	[TitleIEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseStudentFactsAggregatedTitleIEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseStudentFactsAggregatedTitleIEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment] ADD CONSTRAINT [CourseStudentFactsAggregatedTitleIEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment] ADD CONSTRAINT [FK_CourseStudentFactsAggregatedTitleIEnrollment_ParentTable] FOREIGN KEY ([tid_CourseStudentFacts])
REFERENCES [t_extension].[CourseStudentFacts] ([tid_CourseStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment] CHECK CONSTRAINT [FK_CourseStudentFactsAggregatedTitleIEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in Title I of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseStudentFactsAggregatedTitleIEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students eligible for Title I', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'TitleIEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are Title I eligible.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'TitleIEnrollmentPercentage';
GO
/****** TABLE: [t_extension].[CourseSurveyQuestionResponseFacts] ******/

CREATE TABLE [t_extension].[CourseSurveyQuestionResponseFacts]
(
    [tid_CourseSurveyQuestionResponseFacts] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[QuestionCode] [NVARCHAR](20) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveyQuestionResponseFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseSurveyQuestionResponseFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFacts] ADD CONSTRAINT [CourseSurveyQuestionResponseFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFacts] ADD CONSTRAINT [CourseSurveyQuestionResponseFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFacts] ADD CONSTRAINT [CourseSurveyQuestionResponseFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Survey question response data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseSurveyQuestionResponseFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'QuestionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseSurveyQuestionResponseFacts_Id ON [t_extension].[CourseSurveyQuestionResponseFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseSurveyQuestionResponseFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveyQuestionResponseFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseSurveyQuestionResponseFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseSurveyQuestionResponseFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseSurveyQuestionResponseFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseSurveyQuestionResponseFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseSurveyQuestionResponseFacts])
REFERENCES [t_extension].[CourseSurveyQuestionResponseFacts] ([tid_CourseSurveyQuestionResponseFacts]);
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseSurveyQuestionResponseFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse]
(
	[tid_CourseSurveyQuestionResponseFactsAggregatedNumericResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseSurveyQuestionResponseFacts] [INT] NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveyQuestionResponseFactsAggregatedNumericResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseSurveyQuestionResponseFactsAggregatedNumericResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [CourseSurveyQuestionResponseFactsAggregatedNumericResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [FK_CourseSurveyQuestionResponseFactsAggregatedNumericResponse_ParentTable] FOREIGN KEY ([tid_CourseSurveyQuestionResponseFacts])
REFERENCES [t_extension].[CourseSurveyQuestionResponseFacts] ([tid_CourseSurveyQuestionResponseFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse] CHECK CONSTRAINT [FK_CourseSurveyQuestionResponseFactsAggregatedNumericResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Numeric response survey data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseSurveyQuestionResponseFactsAggregatedNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO

/****** TABLE: [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
(
	[tid_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseSurveyQuestionResponseFacts] [INT] NOT NULL,
	[AggregatedMatrixElement] [NVARCHAR](50) NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [FK_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_ParentTable] FOREIGN KEY ([tid_CourseSurveyQuestionResponseFacts])
REFERENCES [t_extension].[CourseSurveyQuestionResponseFacts] ([tid_CourseSurveyQuestionResponseFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] CHECK CONSTRAINT [FK_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Matrix element response survey data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For aggregated matrix questions, the text identifying each row of the matrix.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'AggregatedMatrixElement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO
/****** TABLE: [t_extension].[CourseSurveyResponseFacts] ******/

CREATE TABLE [t_extension].[CourseSurveyResponseFacts]
(
    [tid_CourseSurveyResponseFacts] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveyResponseFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseSurveyResponseFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveyResponseFacts] ADD CONSTRAINT [CourseSurveyResponseFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseSurveyResponseFacts] ADD CONSTRAINT [CourseSurveyResponseFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CourseSurveyResponseFacts] ADD CONSTRAINT [CourseSurveyResponseFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Survey response data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseSurveyResponseFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseSurveyResponseFacts_Id ON [t_extension].[CourseSurveyResponseFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CourseSurveyResponseFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseSurveyResponseFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveyResponseFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseSurveyResponseFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveyResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseSurveyResponseFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseSurveyResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseSurveyResponseFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CourseSurveyResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseSurveyResponseFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseSurveyResponseFacts])
REFERENCES [t_extension].[CourseSurveyResponseFacts] ([tid_CourseSurveyResponseFacts]);
ALTER TABLE [t_extension].[CourseSurveyResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseSurveyResponseFactsSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[CourseSurveySectionResponseRatingFacts] ******/

CREATE TABLE [t_extension].[CourseSurveySectionResponseRatingFacts]
(
    [tid_CourseSurveySectionResponseRatingFacts] [INT] IDENTITY(1,1) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveySectionTitle] [NVARCHAR](50) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveySectionResponseRatingFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_CourseSurveySectionResponseRatingFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFacts] ADD CONSTRAINT [CourseSurveySectionResponseRatingFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFacts] ADD CONSTRAINT [CourseSurveySectionResponseRatingFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFacts] ADD CONSTRAINT [CourseSurveySectionResponseRatingFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Responses to survey sections collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseSurveySectionResponseRatingFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or label for the survey section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SurveySectionTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TCourseSurveySectionResponseRatingFacts_Id ON [t_extension].[CourseSurveySectionResponseRatingFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_CourseSurveySectionResponseRatingFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveySectionResponseRatingFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_CourseSurveySectionResponseRatingFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseSurveySectionResponseRatingFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseSurveySectionResponseRatingFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord] ADD CONSTRAINT [FK_CourseSurveySectionResponseRatingFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_CourseSurveySectionResponseRatingFacts])
REFERENCES [t_extension].[CourseSurveySectionResponseRatingFacts] ([tid_CourseSurveySectionResponseRatingFacts]);
ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord] CHECK CONSTRAINT [FK_CourseSurveySectionResponseRatingFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE TABLE [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse]
(
	[tid_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_CourseSurveySectionResponseRatingFacts] [INT] NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] ADD CONSTRAINT [CourseSurveySectionResponseRatingFactsAggregatedNumericResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] ADD CONSTRAINT [FK_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse_ParentTable] FOREIGN KEY ([tid_CourseSurveySectionResponseRatingFacts])
REFERENCES [t_extension].[CourseSurveySectionResponseRatingFacts] ([tid_CourseSurveySectionResponseRatingFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] CHECK CONSTRAINT [FK_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average of the numeric responses to survey sections collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'CourseSurveySectionResponseRatingFactsAggregatedNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'CourseSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO
/****** TABLE: [t_extension].[EducationOrganizationCourseTranscriptFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationCourseTranscriptFacts]
(
    [tid_EducationOrganizationCourseTranscriptFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[CourseTitle] [NVARCHAR](60) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationCourseTranscriptFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationCourseTranscriptFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFacts] ADD CONSTRAINT [EducationOrganizationCourseTranscriptFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFacts] ADD CONSTRAINT [EducationOrganizationCourseTranscriptFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFacts] ADD CONSTRAINT [EducationOrganizationCourseTranscriptFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final grade earned of the group.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationCourseTranscriptFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final letter grade earned of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationCourseTranscriptFacts_Id ON [t_extension].[EducationOrganizationCourseTranscriptFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationCourseTranscriptFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationCourseTranscriptFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationCourseTranscriptFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationCourseTranscriptFacts])
REFERENCES [t_extension].[EducationOrganizationCourseTranscriptFacts] ([tid_EducationOrganizationCourseTranscriptFacts]);
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled]
(
	[tid_EducationOrganizationCourseTranscriptFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationCourseTranscriptFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationCourseTranscriptFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationCourseTranscriptFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled] ADD CONSTRAINT [EducationOrganizationCourseTranscriptFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled] ADD CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_EducationOrganizationCourseTranscriptFacts])
REFERENCES [t_extension].[EducationOrganizationCourseTranscriptFacts] ([tid_EducationOrganizationCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled] CHECK CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationCourseTranscriptFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
(
	[tid_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationCourseTranscriptFacts] [INT] NOT NULL,
	[FinalLetterGrade] [NVARCHAR](20) NOT NULL,
	[LetterGradeTypeNumber] [INT] NULL,
	[LetterGradeTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ADD CONSTRAINT [EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ADD CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned_ParentTable] FOREIGN KEY ([tid_EducationOrganizationCourseTranscriptFacts])
REFERENCES [t_extension].[EducationOrganizationCourseTranscriptFacts] ([tid_EducationOrganizationCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] CHECK CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final letter grade earned of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'FinalLetterGrade';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students receiving a letter grade by letter grade type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'LetterGradeTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students receiving a letter grade by type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'LetterGradeTypePercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned]
(
	[tid_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationCourseTranscriptFacts] [INT] NOT NULL,
	[AverageFinalNumericGradeEarned] [DECIMAL](9, 2) NOT NULL,
	[NumericGradeNCount] [INT] NULL,
	[NumericGradeStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] ADD CONSTRAINT [EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] ADD CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned_ParentTable] FOREIGN KEY ([tid_EducationOrganizationCourseTranscriptFacts])
REFERENCES [t_extension].[EducationOrganizationCourseTranscriptFacts] ([tid_EducationOrganizationCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] CHECK CONSTRAINT [FK_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the numeric grade received by the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average final numeric grade for the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'AverageFinalNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'NumericGradeNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'NumericGradeStandardDeviation';
GO
/****** TABLE: [t_extension].[EducationOrganizationFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationFacts]
(
    [tid_EducationOrganizationFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[NumberAdministratorsEmployed] [INT] NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[NumberTeachersEmployed] [INT] NULL,
	[PercentStudentsFreeReducedLunch] [DECIMAL](5, 4) NULL,
	[PercentStudentsLimitedEnglishProficiency] [DECIMAL](5, 4) NULL,
	[PercentStudentsSpecialEducation] [DECIMAL](5, 4) NULL,
	[HiringRate] [DECIMAL](5, 4) NULL,
	[RetentionRate] [DECIMAL](5, 4) NULL,
	[RetirementRate] [DECIMAL](5, 4) NULL,
	[AverageYearsInDistrictEmployed] [DECIMAL](5, 2) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationFacts] ADD CONSTRAINT [EducationOrganizationFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationFacts] ADD CONSTRAINT [EducationOrganizationFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationFacts] ADD CONSTRAINT [EducationOrganizationFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Selective fact(s) about the education organization used for comparative analysis.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of date for the fact(s) about the Education Organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year associated with the fact(s).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number of administrators employed by education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'NumberAdministratorsEmployed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enrollment count of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number of teachers employed by education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'NumberTeachersEmployed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students eligible for free and reduced lunches.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'PercentStudentsFreeReducedLunch';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Percent of students in education organization with limited English proficiency.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'PercentStudentsLimitedEnglishProficiency';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Percent of students in education organization in special education program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'PercentStudentsSpecialEducation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of staff hired for the education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'HiringRate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of staff retained for the education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'RetentionRate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of staff retired for the education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'RetirementRate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average number of years that all staff have been employed in the current district of employment.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFacts', @level2type=N'COLUMN', @level2name=N'AverageYearsInDistrictEmployed';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationFacts_Id ON [t_extension].[EducationOrganizationFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationFacts])
REFERENCES [t_extension].[EducationOrganizationFacts] ([tid_EducationOrganizationFacts]);
ALTER TABLE [t_extension].[EducationOrganizationFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EducationOrganizationFactsVacancies] ******/

CREATE TABLE [t_extension].[EducationOrganizationFactsVacancies]
(
	[tid_EducationOrganizationFactsVacancies] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationFacts] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberOfVacancies] [INT] NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationFactsVacancies] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationFactsVacancies] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationFactsVacancies] ADD CONSTRAINT [EducationOrganizationFactsVacancies_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationFactsVacancies] ADD CONSTRAINT [FK_EducationOrganizationFactsVacancies_ParentTable] FOREIGN KEY ([tid_EducationOrganizationFacts])
REFERENCES [t_extension].[EducationOrganizationFacts] ([tid_EducationOrganizationFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationFactsVacancies] CHECK CONSTRAINT [FK_EducationOrganizationFactsVacancies_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents actual and projected vacancies for the education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationFactsVacancies';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsVacancies', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsVacancies', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of vacancies, projected or actual, associated with an education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsVacancies', @level2type=N'COLUMN', @level2name=N'NumberOfVacancies';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsVacancies', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

/****** TABLE: [t_extension].[EducationOrganizationFactsAggregatedSalary] ******/

CREATE TABLE [t_extension].[EducationOrganizationFactsAggregatedSalary]
(
	[tid_EducationOrganizationFactsAggregatedSalary] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationFacts] [INT] NOT NULL,
	[AverageSalary] [MONEY] NOT NULL,
	[CountOfSalariesAveraged] [INT] NULL,
	[StandardDeviation] [INT] NULL,
	[SalaryMinRange] [INT] NULL,
	[SalaryMaxRange] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationFactsAggregatedSalary] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationFactsAggregatedSalary] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationFactsAggregatedSalary] ADD CONSTRAINT [EducationOrganizationFactsAggregatedSalary_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationFactsAggregatedSalary] ADD CONSTRAINT [FK_EducationOrganizationFactsAggregatedSalary_ParentTable] FOREIGN KEY ([tid_EducationOrganizationFacts])
REFERENCES [t_extension].[EducationOrganizationFacts] ([tid_EducationOrganizationFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationFactsAggregatedSalary] CHECK CONSTRAINT [FK_EducationOrganizationFactsAggregatedSalary_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Salary information collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationFactsAggregatedSalary';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average of salaries collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsAggregatedSalary', @level2type=N'COLUMN', @level2name=N'AverageSalary';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of salaries averaged that were collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsAggregatedSalary', @level2type=N'COLUMN', @level2name=N'CountOfSalariesAveraged';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The standard deviation of the salaries collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsAggregatedSalary', @level2type=N'COLUMN', @level2name=N'StandardDeviation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum value in a salary range for staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsAggregatedSalary', @level2type=N'COLUMN', @level2name=N'SalaryMinRange';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum value in a salary range for staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationFactsAggregatedSalary', @level2type=N'COLUMN', @level2name=N'SalaryMaxRange';
GO
/****** TABLE: [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFacts]
(
    [tid_EducationOrganizationStudentAcademicRecordFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AggregatedGPAMax] [DECIMAL](18, 4) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAcademicRecordFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationStudentAcademicRecordFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ADD CONSTRAINT [EducationOrganizationStudentAcademicRecordFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ADD CONSTRAINT [EducationOrganizationStudentAcademicRecordFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ADD CONSTRAINT [EducationOrganizationStudentAcademicRecordFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of student and their academic record', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAcademicRecordFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum grade point average a student can receive in the education organization', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'AggregatedGPAMax';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationStudentAcademicRecordFacts_Id ON [t_extension].[EducationOrganizationStudentAcademicRecordFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationStudentAcademicRecordFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAcademicRecordFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationStudentAcademicRecordFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAcademicRecordFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ([tid_EducationOrganizationStudentAcademicRecordFacts]);
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled]
(
	[tid_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentAcademicRecordFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] ADD CONSTRAINT [EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] ADD CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAcademicRecordFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ([tid_EducationOrganizationStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] CHECK CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
(
	[tid_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentAcademicRecordFacts] [INT] NOT NULL,
	[GradePointAverage] [DECIMAL](18, 4) NOT NULL,
	[GradePointNCount] [INT] NULL,
	[GradePointStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ADD CONSTRAINT [EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ADD CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAcademicRecordFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ([tid_EducationOrganizationStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] CHECK CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the cumulative grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average cumulative grade point average for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average grade point for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointStandardDeviation';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
(
	[tid_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentAcademicRecordFacts] [INT] NOT NULL,
	[GradePointAverage] [DECIMAL](18, 4) NOT NULL,
	[GradePointNCount] [INT] NULL,
	[GradePointStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ADD CONSTRAINT [EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ADD CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAcademicRecordFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAcademicRecordFacts] ([tid_EducationOrganizationStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] CHECK CONSTRAINT [FK_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the cumulative grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average cumulative grade point average for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average grade point for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointStandardDeviation';
GO
/****** TABLE: [t_extension].[EducationOrganizationStudentAssessmentFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAssessmentFacts]
(
    [tid_EducationOrganizationStudentAssessmentFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[TakenSchoolYear] [SMALLINT] NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NULL,
	[AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AdministrationDate] [DATE] NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAssessmentFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationStudentAssessmentFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFacts] ADD CONSTRAINT [EducationOrganizationStudentAssessmentFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFacts] ADD CONSTRAINT [EducationOrganizationStudentAssessmentFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFacts] ADD CONSTRAINT [EducationOrganizationStudentAssessmentFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of students and their assesssment score results and performance levels', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAssessmentFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the assessment was taken', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TakenSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of a specific assessment given to a group.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date a specific assessment was administered to a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AdministrationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationStudentAssessmentFacts_Id ON [t_extension].[EducationOrganizationStudentAssessmentFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationStudentAssessmentFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAssessmentFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationStudentAssessmentFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAssessmentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAssessmentFacts] ([tid_EducationOrganizationStudentAssessmentFacts]);
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled]
(
	[tid_EducationOrganizationStudentAssessmentFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentAssessmentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAssessmentFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentAssessmentFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled] ADD CONSTRAINT [EducationOrganizationStudentAssessmentFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled] ADD CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAssessmentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAssessmentFacts] ([tid_EducationOrganizationStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled] CHECK CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAssessmentFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult]
(
	[tid_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentAssessmentFacts] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[AverageScoreResultDatatypeType] [NVARCHAR](450) NOT NULL,
	[AverageScoreResult] [NVARCHAR](35) NOT NULL,
	[ScoreNCount] [INT] NULL,
	[ScoreStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] ADD CONSTRAINT [EducationOrganizationStudentAssessmentFactsAggregatedScoreResult_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] ADD CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAssessmentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAssessmentFacts] ([tid_EducationOrganizationStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] CHECK CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the score from an assessment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AverageScoreResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful average score or statistical expression of the performance of an group. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AverageScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average assessment score for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'ScoreNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average assessment score for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'ScoreStandardDeviation';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel]
(
	[tid_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentAssessmentFacts] [INT] NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceLevelMetNumber] [INT] NULL,
	[PerformanceLevelMetPercentage] [DECIMAL](5, 4) NULL,
	[PerformanceLevelTypeNumber] [INT] NULL,
	[PerformanceLevelTypePercentage] [DECIMAL](5, 4) NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] ADD CONSTRAINT [EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] ADD CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentAssessmentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentAssessmentFacts] ([tid_EducationOrganizationStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] CHECK CONSTRAINT [FK_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the performance level for an assessment of a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who met the performance level', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMetNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who met the performance level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMetPercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who achieved each performance level by performance level type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who achieved performance level by each performance level type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelTypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO
/****** TABLE: [t_extension].[EducationOrganizationStudentFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFacts]
(
    [tid_EducationOrganizationStudentFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationStudentFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFacts] ADD CONSTRAINT [EducationOrganizationStudentFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFacts] ADD CONSTRAINT [EducationOrganizationStudentFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationStudentFacts] ADD CONSTRAINT [EducationOrganizationStudentFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This domain entity collects data for aggregated level students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationStudentFacts_Id ON [t_extension].[EducationOrganizationStudentFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationStudentFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]);
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled]
(
	[tid_EducationOrganizationStudentFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled] ADD CONSTRAINT [EducationOrganizationStudentFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedSex] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSex]
(
	[tid_EducationOrganizationStudentFactsAggregatedSex] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[SexTypeNumber] [INT] NULL,
	[SexTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedSex] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedSex] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSex] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedSex_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSex] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSex_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSex] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSex_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the sex of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedSex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each sex type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by each sex type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexTypePercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedGender] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedGender]
(
	[tid_EducationOrganizationStudentFactsAggregatedGender] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[GenderType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[GenderTypeNumber] [INT] NULL,
	[GenderTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedGender] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedGender] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedGender] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedGender_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedGender] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedGender_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedGender] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedGender_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the gender', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedGender';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who identify by each gender type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who associate with each gender type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderTypePercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity]
(
	[tid_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[HispanicLatinoEthnicity] [BIT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[HispanicLatinoEthnicityNumber] [INT] NULL,
	[HispanicLatinoEthnicityPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ethnicity of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are hispanic/latino', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicityNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as hispanic/latino.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicityPercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedRace] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedRace]
(
	[tid_EducationOrganizationStudentFactsAggregatedRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[RaceTypeNumber] [INT] NULL,
	[RaceTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedRace] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedRace] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedRace] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedRace_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedRace] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the race of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each race type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by each race type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceTypePercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility]
(
	[tid_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TypeNumber] [INT] NULL,
	[TypePercentage] [INT] NULL,
	[SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies if the student is eligible for Free and Reduce Price Lunch', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students eligibile for SchoolFoodServicesEligibility by category', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'TypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are eligible for SchoolFoodServicesEligibility by type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'TypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage]
(
	[tid_EducationOrganizationStudentFactsAggregatedLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[LanguageTypeNumber] [INT] NULL,
	[LanguageTypePercentage] [DECIMAL](5, 4) NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedLanguage_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The data about the language', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each language type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by language type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageTypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability]
(
	[tid_EducationOrganizationStudentFactsAggregatedByDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TypeNumber] [INT] NULL,
	[Percentage] [DECIMAL](5, 4) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedByDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedByDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedByDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedByDisability_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedByDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the disability of a group aggregated by course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedByDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of student who have a disability by disability type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'TypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have a disability by each specific disability type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'Percentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled]
(
	[tid_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[StudentsDisabledNumber] [INT] NULL,
	[StudentsDisabledPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the disability of a group aggregated by course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who have a disability.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'StudentsDisabledNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Percentage of students who have a disability', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'StudentsDisabledPercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment]
(
	[tid_EducationOrganizationStudentFactsAggregatedELLEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[ELLEnrollmentNumber] [INT] NULL,
	[ELLEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedELLEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedELLEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedELLEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedELLEnrollment_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedELLEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ELL enrollment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedELLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are ELL.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ELLEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as ELL', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ELLEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment]
(
	[tid_EducationOrganizationStudentFactsAggregatedESLEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[ESLEnrollmentNumber] [INT] NULL,
	[ESLEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedESLEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedESLEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedESLEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedESLEnrollment_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedESLEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ESL enrollment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedESLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are ESL.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ESLEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as ESL', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ESLEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment]
(
	[tid_EducationOrganizationStudentFactsAggregatedSection504Enrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[Number504Enrolled] [INT] NULL,
	[Percentage504Enrolled] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedSection504Enrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedSection504Enrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedSection504Enrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSection504Enrollment_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSection504Enrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedSection504Enrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'Number504Enrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'Percentage504Enrolled';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedSPED] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSPED]
(
	[tid_EducationOrganizationStudentFactsAggregatedSPED] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[SPEDEnrollmentNumber] [INT] NULL,
	[SPEDEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedSPED] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedSPED] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSPED] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedSPED_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSPED] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSPED_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedSPED] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedSPED_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in SPED of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedSPED';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students enrolled in SPED', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'SPEDEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students enrolled in a SPED program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'SPEDEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment] ******/

CREATE TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment]
(
	[tid_EducationOrganizationStudentFactsAggregatedTitleIEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TitleIEnrollmentNumber] [INT] NULL,
	[TitleIEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationStudentFactsAggregatedTitleIEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationStudentFactsAggregatedTitleIEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment] ADD CONSTRAINT [EducationOrganizationStudentFactsAggregatedTitleIEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment] ADD CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedTitleIEnrollment_ParentTable] FOREIGN KEY ([tid_EducationOrganizationStudentFacts])
REFERENCES [t_extension].[EducationOrganizationStudentFacts] ([tid_EducationOrganizationStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment] CHECK CONSTRAINT [FK_EducationOrganizationStudentFactsAggregatedTitleIEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in Title I of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationStudentFactsAggregatedTitleIEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students eligible for Title I', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'TitleIEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are Title I eligible.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'TitleIEnrollmentPercentage';
GO
/****** TABLE: [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFacts]
(
    [tid_EducationOrganizationSurveyQuestionResponseFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[QuestionCode] [NVARCHAR](20) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveyQuestionResponseFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationSurveyQuestionResponseFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] ADD CONSTRAINT [EducationOrganizationSurveyQuestionResponseFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] ADD CONSTRAINT [EducationOrganizationSurveyQuestionResponseFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] ADD CONSTRAINT [EducationOrganizationSurveyQuestionResponseFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Survey question response data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationSurveyQuestionResponseFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'QuestionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationSurveyQuestionResponseFacts_Id ON [t_extension].[EducationOrganizationSurveyQuestionResponseFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationSurveyQuestionResponseFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationSurveyQuestionResponseFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationSurveyQuestionResponseFacts])
REFERENCES [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] ([tid_EducationOrganizationSurveyQuestionResponseFacts]);
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse]
(
	[tid_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationSurveyQuestionResponseFacts] [INT] NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse_ParentTable] FOREIGN KEY ([tid_EducationOrganizationSurveyQuestionResponseFacts])
REFERENCES [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] ([tid_EducationOrganizationSurveyQuestionResponseFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] CHECK CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Numeric response survey data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO

/****** TABLE: [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
(
	[tid_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationSurveyQuestionResponseFacts] [INT] NOT NULL,
	[AggregatedMatrixElement] [NVARCHAR](50) NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_ParentTable] FOREIGN KEY ([tid_EducationOrganizationSurveyQuestionResponseFacts])
REFERENCES [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] ([tid_EducationOrganizationSurveyQuestionResponseFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] CHECK CONSTRAINT [FK_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Matrix element response survey data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For aggregated matrix questions, the text identifying each row of the matrix.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'AggregatedMatrixElement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO
/****** TABLE: [t_extension].[EducationOrganizationSurveyResponseFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveyResponseFacts]
(
    [tid_EducationOrganizationSurveyResponseFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveyResponseFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationSurveyResponseFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveyResponseFacts] ADD CONSTRAINT [EducationOrganizationSurveyResponseFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationSurveyResponseFacts] ADD CONSTRAINT [EducationOrganizationSurveyResponseFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationSurveyResponseFacts] ADD CONSTRAINT [EducationOrganizationSurveyResponseFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Survey response data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationSurveyResponseFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationSurveyResponseFacts_Id ON [t_extension].[EducationOrganizationSurveyResponseFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationSurveyResponseFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveyResponseFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationSurveyResponseFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSurveyResponseFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSurveyResponseFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSurveyResponseFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationSurveyResponseFacts])
REFERENCES [t_extension].[EducationOrganizationSurveyResponseFacts] ([tid_EducationOrganizationSurveyResponseFacts]);
ALTER TABLE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSurveyResponseFactsSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts]
(
    [tid_EducationOrganizationSurveySectionResponseRatingFacts] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveySectionTitle] [NVARCHAR](50) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveySectionResponseRatingFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_EducationOrganizationSurveySectionResponseRatingFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] ADD CONSTRAINT [EducationOrganizationSurveySectionResponseRatingFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] ADD CONSTRAINT [EducationOrganizationSurveySectionResponseRatingFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] ADD CONSTRAINT [EducationOrganizationSurveySectionResponseRatingFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Responses to survey sections collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationSurveySectionResponseRatingFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or label for the survey section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SurveySectionTitle';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEducationOrganizationSurveySectionResponseRatingFacts_Id ON [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EducationOrganizationSurveySectionResponseRatingFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EducationOrganizationSurveySectionResponseRatingFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord] ADD CONSTRAINT [FK_EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EducationOrganizationSurveySectionResponseRatingFacts])
REFERENCES [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] ([tid_EducationOrganizationSurveySectionResponseRatingFacts]);
ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord] CHECK CONSTRAINT [FK_EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse]
(
	[tid_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_EducationOrganizationSurveySectionResponseRatingFacts] [INT] NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] ADD CONSTRAINT [EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] ADD CONSTRAINT [FK_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse_ParentTable] FOREIGN KEY ([tid_EducationOrganizationSurveySectionResponseRatingFacts])
REFERENCES [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] ([tid_EducationOrganizationSurveySectionResponseRatingFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] CHECK CONSTRAINT [FK_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the numeric response for an aggregated survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO
/****** TABLE: [t_extension].[EnglishLanguageExamDescriptor] ******/

CREATE TABLE [t_extension].[EnglishLanguageExamDescriptor]
(
    [tid_EnglishLanguageExamDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[EnglishLanguageExamType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EnglishLanguageExamDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_EnglishLanguageExamDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EnglishLanguageExamDescriptor] ADD CONSTRAINT [EnglishLanguageExamDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EnglishLanguageExamDescriptor] ADD CONSTRAINT [EnglishLanguageExamDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EnglishLanguageExamDescriptor] ADD CONSTRAINT [EnglishLanguageExamDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EnglishLanguageExamDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamDescriptor', @level2type=N'COLUMN', @level2name=N'EnglishLanguageExamType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TEnglishLanguageExamDescriptor_Id ON [t_extension].[EnglishLanguageExamDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_EnglishLanguageExamDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_EnglishLanguageExamDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_EnglishLanguageExamDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EnglishLanguageExamDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EnglishLanguageExamDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord] ADD CONSTRAINT [FK_EnglishLanguageExamDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_EnglishLanguageExamDescriptor])
REFERENCES [t_extension].[EnglishLanguageExamDescriptor] ([tid_EnglishLanguageExamDescriptor]);
ALTER TABLE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_EnglishLanguageExamDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[EnglishLanguageExamType] ******/

CREATE TABLE [t_extension].[EnglishLanguageExamType]
(
	[tid_EnglishLanguageExamType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_EnglishLanguageExamType] PRIMARY KEY NONCLUSTERED
(
	[tid_EnglishLanguageExamType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[EnglishLanguageExamType] ADD CONSTRAINT [EnglishLanguageExamType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[EnglishLanguageExamType] ADD CONSTRAINT [EnglishLanguageExamType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[EnglishLanguageExamType] ADD CONSTRAINT [EnglishLanguageExamType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The rating the individual received on the English Language assessment.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'EnglishLanguageExamType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EnglishLanguageExam type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EnglishLanguageExam type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'EnglishLanguageExamType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[ExternalCourseTranscript] ******/

CREATE TABLE [t_extension].[ExternalCourseTranscript]
(
    [tid_ExternalCourseTranscript] [INT] IDENTITY(1,1) NOT NULL,
	[ExternalCourseCode] [NVARCHAR](60) NOT NULL,
	[ExternalTerm] [NVARCHAR](75) NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[CourseAttemptResultType] [NVARCHAR](450) NOT NULL,
	[AttemptedCredits] [DECIMAL](9, 2) NULL,
	[AttemptedCreditType] [NVARCHAR](450) NULL,
	[AttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[EarnedCredits] [DECIMAL](9, 2) NOT NULL,
	[EarnedCreditType] [NVARCHAR](450) NULL,
	[EarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[OfferedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[MethodCreditEarnedType] [NVARCHAR](450) NULL,
	[FinalLetterGradeEarned] [NVARCHAR](20) NULL,
	[FinalNumericGradeEarned] [DECIMAL](9, 2) NULL,
	[CourseRepeatCodeType] [NVARCHAR](450) NULL,
	[CourseCode] [NVARCHAR](60) NULL,
	[CourseEducationOrganizationId] [INT] NULL,
	[ExternalCourseTitle] [NVARCHAR](60) NOT NULL,
	[AlternativeCourseTitle] [NVARCHAR](60) NULL,
	[AlternativeCourseCode] [NVARCHAR](60) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[CareerPathwayType] [NVARCHAR](450) NULL,
	[CourseDescription] [NVARCHAR](1024) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[OfferedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalCourseTranscript] PRIMARY KEY NONCLUSTERED
(
    [tid_ExternalCourseTranscript] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalCourseTranscript] ADD CONSTRAINT [ExternalCourseTranscript_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalCourseTranscript] ADD CONSTRAINT [ExternalCourseTranscript_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ExternalCourseTranscript] ADD CONSTRAINT [ExternalCourseTranscript_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is the final record of a student''s performance in their courses at the end of a semester or school year of an ExternalEducationOrgnaization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalCourseTranscript';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'ExternalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The external term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'ExternalTerm';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The full, legally accepted name of the institution.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseAttemptResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'OfferedGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'MethodCreditEarnedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalLetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseRepeatCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'ExternalCourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'CareerPathwayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'OfferedGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscript', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TExternalCourseTranscript_Id ON [t_extension].[ExternalCourseTranscript]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ExternalCourseTranscriptSnapshotRecord] ******/

CREATE TABLE [t_extension].[ExternalCourseTranscriptSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ExternalCourseTranscript] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalCourseTranscriptSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ExternalCourseTranscript], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalCourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_ExternalCourseTranscriptSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalCourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_ExternalCourseTranscriptSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ExternalCourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_ExternalCourseTranscriptSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ExternalCourseTranscript])
REFERENCES [t_extension].[ExternalCourseTranscript] ([tid_ExternalCourseTranscript]);
ALTER TABLE [t_extension].[ExternalCourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_ExternalCourseTranscriptSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits] ******/

CREATE TABLE [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits]
(
	[tid_ExternalCourseTranscriptEarnedAdditionalCredits] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalCourseTranscript] [INT] NOT NULL,
	[AdditionalCreditType] [NVARCHAR](450) NOT NULL,
	[Credits] [DECIMAL](9, 2) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalCourseTranscriptEarnedAdditionalCredits] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalCourseTranscriptEarnedAdditionalCredits] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [ExternalCourseTranscriptEarnedAdditionalCredits_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [FK_ExternalCourseTranscriptEarnedAdditionalCredits_ParentTable] FOREIGN KEY ([tid_ExternalCourseTranscript])
REFERENCES [t_extension].[ExternalCourseTranscript] ([tid_ExternalCourseTranscript]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits] CHECK CONSTRAINT [FK_ExternalCourseTranscriptEarnedAdditionalCredits_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalCourseTranscriptEarnedAdditionalCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'AdditionalCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'Credits';
GO

/****** TABLE: [t_extension].[ExternalCourseTranscriptCourseIdentificationCode] ******/

CREATE TABLE [t_extension].[ExternalCourseTranscriptCourseIdentificationCode]
(
	[tid_ExternalCourseTranscriptCourseIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalCourseTranscript] [INT] NOT NULL,
	[CourseIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
	[CourseIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalCourseTranscriptCourseIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalCourseTranscriptCourseIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalCourseTranscriptCourseIdentificationCode] ADD CONSTRAINT [ExternalCourseTranscriptCourseIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalCourseTranscriptCourseIdentificationCode] ADD CONSTRAINT [FK_ExternalCourseTranscriptCourseIdentificationCode_ParentTable] FOREIGN KEY ([tid_ExternalCourseTranscript])
REFERENCES [t_extension].[ExternalCourseTranscript] ([tid_ExternalCourseTranscript]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalCourseTranscriptCourseIdentificationCode] CHECK CONSTRAINT [FK_ExternalCourseTranscriptCourseIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalCourseTranscriptCourseIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscriptCourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a "/". For example, consider the following SCED code-    subject = 20 Math    course = 272 Geometry    level = G General    credits = 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscriptCourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the staff Identification Code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscriptCourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscriptCourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic] ******/

CREATE TABLE [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic]
(
	[tid_ExternalCourseTranscriptCourseLevelCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalCourseTranscript] [INT] NOT NULL,
	[CourseLevelCharacteristicType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalCourseTranscriptCourseLevelCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalCourseTranscriptCourseLevelCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic] ADD CONSTRAINT [ExternalCourseTranscriptCourseLevelCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic] ADD CONSTRAINT [FK_ExternalCourseTranscriptCourseLevelCharacteristic_ParentTable] FOREIGN KEY ([tid_ExternalCourseTranscript])
REFERENCES [t_extension].[ExternalCourseTranscript] ([tid_ExternalCourseTranscript]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic] CHECK CONSTRAINT [FK_ExternalCourseTranscriptCourseLevelCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalCourseTranscriptCourseLevelCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalCourseTranscriptCourseLevelCharacteristic', @level2type=N'COLUMN', @level2name=N'CourseLevelCharacteristicType';
GO
/****** TABLE: [t_extension].[ExternalEducationOrganization] ******/

CREATE TABLE [t_extension].[ExternalEducationOrganization]
(
    [tid_ExternalEducationOrganization] [INT] IDENTITY(1,1) NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[ShortNameOfInstitution] [NVARCHAR](75) NULL,
	[WebSite] [NVARCHAR](255) NULL,
	[OperationalStatusType] [NVARCHAR](450) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalEducationOrganization] PRIMARY KEY NONCLUSTERED
(
    [tid_ExternalEducationOrganization] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalEducationOrganization] ADD CONSTRAINT [ExternalEducationOrganization_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalEducationOrganization] ADD CONSTRAINT [ExternalEducationOrganization_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ExternalEducationOrganization] ADD CONSTRAINT [ExternalEducationOrganization_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents any external public or private institution, organization, or agency that provides instructional or support services to students or staff at any level. This entity is provided to refer to organizations about which local school and districts have little to no information.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalEducationOrganization';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The full, legally accepted name of the institution.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganization', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A short name for the institution.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganization', @level2type=N'COLUMN', @level2name=N'ShortNameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The public web site address (URL) for the EducationOrganization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganization', @level2type=N'COLUMN', @level2name=N'WebSite';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganization', @level2type=N'COLUMN', @level2name=N'OperationalStatusType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TExternalEducationOrganization_Id ON [t_extension].[ExternalEducationOrganization]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ExternalEducationOrganizationSnapshotRecord] ******/

CREATE TABLE [t_extension].[ExternalEducationOrganizationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ExternalEducationOrganization] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalEducationOrganizationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ExternalEducationOrganization], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalEducationOrganizationSnapshotRecord] ADD CONSTRAINT [FK_ExternalEducationOrganizationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalEducationOrganizationSnapshotRecord] CHECK CONSTRAINT [FK_ExternalEducationOrganizationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ExternalEducationOrganizationSnapshotRecord] ADD CONSTRAINT [FK_ExternalEducationOrganizationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ExternalEducationOrganization])
REFERENCES [t_extension].[ExternalEducationOrganization] ([tid_ExternalEducationOrganization]);
ALTER TABLE [t_extension].[ExternalEducationOrganizationSnapshotRecord] CHECK CONSTRAINT [FK_ExternalEducationOrganizationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ExternalEducationOrganizationIdentificationCode] ******/

CREATE TABLE [t_extension].[ExternalEducationOrganizationIdentificationCode]
(
	[tid_ExternalEducationOrganizationIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalEducationOrganization] [INT] NOT NULL,
	[EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalEducationOrganizationIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalEducationOrganizationIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalEducationOrganizationIdentificationCode] ADD CONSTRAINT [ExternalEducationOrganizationIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalEducationOrganizationIdentificationCode] ADD CONSTRAINT [FK_ExternalEducationOrganizationIdentificationCode_ParentTable] FOREIGN KEY ([tid_ExternalEducationOrganization])
REFERENCES [t_extension].[ExternalEducationOrganization] ([tid_ExternalEducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalEducationOrganizationIdentificationCode] CHECK CONSTRAINT [FK_ExternalEducationOrganizationIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalEducationOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ExternalEducationOrganizationCategory] ******/

CREATE TABLE [t_extension].[ExternalEducationOrganizationCategory]
(
	[tid_ExternalEducationOrganizationCategory] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalEducationOrganization] [INT] NOT NULL,
	[EducationOrganizationCategoryType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalEducationOrganizationCategory] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalEducationOrganizationCategory] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalEducationOrganizationCategory] ADD CONSTRAINT [ExternalEducationOrganizationCategory_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalEducationOrganizationCategory] ADD CONSTRAINT [FK_ExternalEducationOrganizationCategory_ParentTable] FOREIGN KEY ([tid_ExternalEducationOrganization])
REFERENCES [t_extension].[ExternalEducationOrganization] ([tid_ExternalEducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalEducationOrganizationCategory] CHECK CONSTRAINT [FK_ExternalEducationOrganizationCategory_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalEducationOrganizationCategory';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationCategory', @level2type=N'COLUMN', @level2name=N'EducationOrganizationCategoryType';
GO

/****** TABLE: [t_extension].[ExternalEducationOrganizationAddress] ******/

CREATE TABLE [t_extension].[ExternalEducationOrganizationAddress]
(
	[tid_ExternalEducationOrganizationAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalEducationOrganization] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalEducationOrganizationAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalEducationOrganizationAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalEducationOrganizationAddress] ADD CONSTRAINT [ExternalEducationOrganizationAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalEducationOrganizationAddress] ADD CONSTRAINT [FK_ExternalEducationOrganizationAddress_ParentTable] FOREIGN KEY ([tid_ExternalEducationOrganization])
REFERENCES [t_extension].[ExternalEducationOrganization] ([tid_ExternalEducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalEducationOrganizationAddress] CHECK CONSTRAINT [FK_ExternalEducationOrganizationAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalEducationOrganizationAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_extension].[ExternalEducationOrganizationInternationalAddress] ******/

CREATE TABLE [t_extension].[ExternalEducationOrganizationInternationalAddress]
(
	[tid_ExternalEducationOrganizationInternationalAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalEducationOrganization] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[AddressLine1] [NVARCHAR](150) NOT NULL,
	[AddressLine2] [NVARCHAR](150) NULL,
	[AddressLine3] [NVARCHAR](150) NULL,
	[AddressLine4] [NVARCHAR](150) NULL,
	[CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalEducationOrganizationInternationalAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalEducationOrganizationInternationalAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalEducationOrganizationInternationalAddress] ADD CONSTRAINT [ExternalEducationOrganizationInternationalAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalEducationOrganizationInternationalAddress] ADD CONSTRAINT [FK_ExternalEducationOrganizationInternationalAddress_ParentTable] FOREIGN KEY ([tid_ExternalEducationOrganization])
REFERENCES [t_extension].[ExternalEducationOrganization] ([tid_ExternalEducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalEducationOrganizationInternationalAddress] CHECK CONSTRAINT [FK_ExternalEducationOrganizationInternationalAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes the international physical location of the education entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalEducationOrganizationInternationalAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ExternalEducationOrganizationInstitutionTelephone] ******/

CREATE TABLE [t_extension].[ExternalEducationOrganizationInstitutionTelephone]
(
	[tid_ExternalEducationOrganizationInstitutionTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalEducationOrganization] [INT] NOT NULL,
	[InstitutionTelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalEducationOrganizationInstitutionTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalEducationOrganizationInstitutionTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalEducationOrganizationInstitutionTelephone] ADD CONSTRAINT [ExternalEducationOrganizationInstitutionTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalEducationOrganizationInstitutionTelephone] ADD CONSTRAINT [FK_ExternalEducationOrganizationInstitutionTelephone_ParentTable] FOREIGN KEY ([tid_ExternalEducationOrganization])
REFERENCES [t_extension].[ExternalEducationOrganization] ([tid_ExternalEducationOrganization]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalEducationOrganizationInstitutionTelephone] CHECK CONSTRAINT [FK_ExternalEducationOrganizationInstitutionTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the education entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalEducationOrganizationInstitutionTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInstitutionTelephone', @level2type=N'COLUMN', @level2name=N'InstitutionTelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalEducationOrganizationInstitutionTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
GO
/****** TABLE: [t_extension].[ExternalStudentAcademicRecord] ******/

CREATE TABLE [t_extension].[ExternalStudentAcademicRecord]
(
    [tid_ExternalStudentAcademicRecord] [INT] IDENTITY(1,1) NOT NULL,
	[ExternalTerm] [NVARCHAR](75) NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[CumulativeEarnedCredits] [DECIMAL](9, 2) NULL,
	[CumulativeEarnedCreditType] [NVARCHAR](450) NULL,
	[CumulativeEarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[CumulativeAttemptedCredits] [DECIMAL](9, 2) NULL,
	[CumulativeAttemptedCreditType] [NVARCHAR](450) NULL,
	[CumulativeAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[CumulativeGradePointsEarned] [DECIMAL](18, 4) NULL,
	[CumulativeGradePointAverage] [DECIMAL](18, 4) NULL,
	[GradeValueQualifier] [NVARCHAR](80) NULL,
	[ProjectedGraduationDate] [DATE] NULL,
	[SessionEarnedCredits] [DECIMAL](9, 2) NULL,
	[SessionEarnedCreditType] [NVARCHAR](450) NULL,
	[SessionEarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[SessionAttemptedCredits] [DECIMAL](9, 2) NULL,
	[SessionAttemptedCreditType] [NVARCHAR](450) NULL,
	[SessionAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[SessionGradePointsEarned] [DECIMAL](18, 4) NULL,
	[SessionGradePointAverage] [DECIMAL](18, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalStudentAcademicRecord] PRIMARY KEY NONCLUSTERED
(
    [tid_ExternalStudentAcademicRecord] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalStudentAcademicRecord] ADD CONSTRAINT [ExternalStudentAcademicRecord_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalStudentAcademicRecord] ADD CONSTRAINT [ExternalStudentAcademicRecord_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ExternalStudentAcademicRecord] ADD CONSTRAINT [ExternalStudentAcademicRecord_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the cumulative record of academic achievement for a student that is being collected from an extrnal education organization about which local school and districts have little to no information.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalStudentAcademicRecord';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The external term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'ExternalTerm';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The full, legally accepted name of the institution.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the ExternalEducationOrganizationas well as those transferred from schools in which the individual had been previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointsEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her ExternalEducationOrganizaiton as well as those transferred from schools in which the individual was previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student''s Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'GradeValueQualifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month and year the student is projected to graduate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'ProjectedGraduationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of grade points an individual earned for the session.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointsEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointAverage';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TExternalStudentAcademicRecord_Id ON [t_extension].[ExternalStudentAcademicRecord]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ExternalStudentAcademicRecordSnapshotRecord] ******/

CREATE TABLE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ExternalStudentAcademicRecord] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalStudentAcademicRecordSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ExternalStudentAcademicRecord], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_ExternalStudentAcademicRecordSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_ExternalStudentAcademicRecordSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_ExternalStudentAcademicRecordSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ExternalStudentAcademicRecord])
REFERENCES [t_extension].[ExternalStudentAcademicRecord] ([tid_ExternalStudentAcademicRecord]);
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_ExternalStudentAcademicRecordSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ExternalStudentAcademicRecordClassRanking] ******/

CREATE TABLE [t_extension].[ExternalStudentAcademicRecordClassRanking]
(
	[tid_ExternalStudentAcademicRecordClassRanking] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalStudentAcademicRecord] [INT] NOT NULL,
	[ClassRank] [INT] NOT NULL,
	[TotalNumberInClass] [INT] NOT NULL,
	[PercentageRanking] [INT] NULL,
	[ClassRankingDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalStudentAcademicRecordClassRanking] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalStudentAcademicRecordClassRanking] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalStudentAcademicRecordClassRanking] ADD CONSTRAINT [ExternalStudentAcademicRecordClassRanking_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordClassRanking] ADD CONSTRAINT [FK_ExternalStudentAcademicRecordClassRanking_ParentTable] FOREIGN KEY ([tid_ExternalStudentAcademicRecord])
REFERENCES [t_extension].[ExternalStudentAcademicRecord] ([tid_ExternalStudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordClassRanking] CHECK CONSTRAINT [FK_ExternalStudentAcademicRecordClassRanking_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank information of a student in relation to his or her graduating class.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalStudentAcademicRecordClassRanking';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRank';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students in the student''s graduating class.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'TotalNumberInClass';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'PercentageRanking';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date class ranking was determined.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRankingDate';
GO

/****** TABLE: [t_extension].[ExternalStudentAcademicRecordAcademicHonor] ******/

CREATE TABLE [t_extension].[ExternalStudentAcademicRecordAcademicHonor]
(
	[tid_ExternalStudentAcademicRecordAcademicHonor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalStudentAcademicRecord] [INT] NOT NULL,
	[AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[HonorDescription] [NVARCHAR](80) NULL,
	[HonorAwardDate] [DATE] NULL,
	[HonorAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalStudentAcademicRecordAcademicHonor] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalStudentAcademicRecordAcademicHonor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalStudentAcademicRecordAcademicHonor] ADD CONSTRAINT [ExternalStudentAcademicRecordAcademicHonor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordAcademicHonor] ADD CONSTRAINT [FK_ExternalStudentAcademicRecordAcademicHonor_ParentTable] FOREIGN KEY ([tid_ExternalStudentAcademicRecord])
REFERENCES [t_extension].[ExternalStudentAcademicRecord] ([tid_ExternalStudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordAcademicHonor] CHECK CONSTRAINT [FK_ExternalStudentAcademicRecordAcademicHonor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Academic distinctions earned by or awarded to the student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalStudentAcademicRecordAcademicHonor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AcademicHonorCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the honor was awarded or earned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ExternalStudentAcademicRecordRecognition] ******/

CREATE TABLE [t_extension].[ExternalStudentAcademicRecordRecognition]
(
	[tid_ExternalStudentAcademicRecordRecognition] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalStudentAcademicRecord] [INT] NOT NULL,
	[RecognitionType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[RecognitionDescription] [NVARCHAR](80) NULL,
	[RecognitionAwardDate] [DATE] NULL,
	[RecognitionAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalStudentAcademicRecordRecognition] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalStudentAcademicRecordRecognition] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalStudentAcademicRecordRecognition] ADD CONSTRAINT [ExternalStudentAcademicRecordRecognition_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordRecognition] ADD CONSTRAINT [FK_ExternalStudentAcademicRecordRecognition_ParentTable] FOREIGN KEY ([tid_ExternalStudentAcademicRecord])
REFERENCES [t_extension].[ExternalStudentAcademicRecord] ([tid_ExternalStudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordRecognition] CHECK CONSTRAINT [FK_ExternalStudentAcademicRecordRecognition_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalStudentAcademicRecordRecognition';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the recognition was awarded or earned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ExternalStudentAcademicRecordDiploma] ******/

CREATE TABLE [t_extension].[ExternalStudentAcademicRecordDiploma]
(
	[tid_ExternalStudentAcademicRecordDiploma] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ExternalStudentAcademicRecord] [INT] NOT NULL,
	[DiplomaAwardDate] [DATE] NOT NULL,
	[DiplomaType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[DiplomaLevelType] [NVARCHAR](450) NULL,
	[CTECompleter] [BIT] NULL,
	[DiplomaDescription] [NVARCHAR](80) NULL,
	[DiplomaAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ExternalStudentAcademicRecordDiploma] PRIMARY KEY NONCLUSTERED
(
	[tid_ExternalStudentAcademicRecordDiploma] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ExternalStudentAcademicRecordDiploma] ADD CONSTRAINT [ExternalStudentAcademicRecordDiploma_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordDiploma] ADD CONSTRAINT [FK_ExternalStudentAcademicRecordDiploma_ParentTable] FOREIGN KEY ([tid_ExternalStudentAcademicRecord])
REFERENCES [t_extension].[ExternalStudentAcademicRecord] ([tid_ExternalStudentAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ExternalStudentAcademicRecordDiploma] CHECK CONSTRAINT [FK_ExternalStudentAcademicRecordDiploma_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Diploma(s) earned by the student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ExternalStudentAcademicRecordDiploma';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the student met  graduation requirements and was awarded a diploma.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CTECompleter';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of diploma given to the student for accomplishments.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ExternalStudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO
/****** TABLE: [t_extension].[FieldworkTypeDescriptor] ******/

CREATE TABLE [t_extension].[FieldworkTypeDescriptor]
(
    [tid_FieldworkTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[FieldworkType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_FieldworkTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_FieldworkTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[FieldworkTypeDescriptor] ADD CONSTRAINT [FieldworkTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[FieldworkTypeDescriptor] ADD CONSTRAINT [FieldworkTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[FieldworkTypeDescriptor] ADD CONSTRAINT [FieldworkTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the type of fieldwork being executed by a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'FieldworkTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkTypeDescriptor', @level2type=N'COLUMN', @level2name=N'FieldworkType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TFieldworkTypeDescriptor_Id ON [t_extension].[FieldworkTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[FieldworkTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_FieldworkTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_FieldworkTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_FieldworkTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[FieldworkTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_FieldworkTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[FieldworkTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_FieldworkTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[FieldworkTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_FieldworkTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_FieldworkTypeDescriptor])
REFERENCES [t_extension].[FieldworkTypeDescriptor] ([tid_FieldworkTypeDescriptor]);
ALTER TABLE [t_extension].[FieldworkTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_FieldworkTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[FieldworkType] ******/

CREATE TABLE [t_extension].[FieldworkType]
(
	[tid_FieldworkType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_FieldworkType] PRIMARY KEY NONCLUSTERED
(
	[tid_FieldworkType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[FieldworkType] ADD CONSTRAINT [FieldworkType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[FieldworkType] ADD CONSTRAINT [FieldworkType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[FieldworkType] ADD CONSTRAINT [FieldworkType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the fieldwork types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'FieldworkType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Fieldwork type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Fieldwork type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'FieldworkType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[GenderType] ******/

CREATE TABLE [t_extension].[GenderType]
(
    [tid_GenderType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_GenderType] PRIMARY KEY NONCLUSTERED
(
    [tid_GenderType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[GenderType] ADD CONSTRAINT [GenderType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[GenderType] ADD CONSTRAINT [GenderType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[GenderType] ADD CONSTRAINT [GenderType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The gender with with a person associates.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'GenderType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Gender type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'GenderType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Gender type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'GenderType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[LevelOfDegreeAwardedDescriptor] ******/

CREATE TABLE [t_extension].[LevelOfDegreeAwardedDescriptor]
(
    [tid_LevelOfDegreeAwardedDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[LevelOfDegreeAwardedType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelOfDegreeAwardedDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_LevelOfDegreeAwardedDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[LevelOfDegreeAwardedDescriptor] ADD CONSTRAINT [LevelOfDegreeAwardedDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[LevelOfDegreeAwardedDescriptor] ADD CONSTRAINT [LevelOfDegreeAwardedDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[LevelOfDegreeAwardedDescriptor] ADD CONSTRAINT [LevelOfDegreeAwardedDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the level of degree awarded by the teacher prep program to the person (e.g., Certificate Only, Bachelor''s, Master''s, etc.).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'LevelOfDegreeAwardedDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedDescriptor', @level2type=N'COLUMN', @level2name=N'LevelOfDegreeAwardedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLevelOfDegreeAwardedDescriptor_Id ON [t_extension].[LevelOfDegreeAwardedDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LevelOfDegreeAwardedDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelOfDegreeAwardedDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LevelOfDegreeAwardedDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelOfDegreeAwardedDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelOfDegreeAwardedDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelOfDegreeAwardedDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LevelOfDegreeAwardedDescriptor])
REFERENCES [t_extension].[LevelOfDegreeAwardedDescriptor] ([tid_LevelOfDegreeAwardedDescriptor]);
ALTER TABLE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelOfDegreeAwardedDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[LevelOfDegreeAwardedType] ******/

CREATE TABLE [t_extension].[LevelOfDegreeAwardedType]
(
	[tid_LevelOfDegreeAwardedType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_LevelOfDegreeAwardedType] PRIMARY KEY NONCLUSTERED
(
	[tid_LevelOfDegreeAwardedType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[LevelOfDegreeAwardedType] ADD CONSTRAINT [LevelOfDegreeAwardedType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[LevelOfDegreeAwardedType] ADD CONSTRAINT [LevelOfDegreeAwardedType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[LevelOfDegreeAwardedType] ADD CONSTRAINT [LevelOfDegreeAwardedType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the level of degree awarded by the teacher prep program to the person (e.g., Certificate Only, Bachelor''s, Master''s, etc.).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'LevelOfDegreeAwardedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LevelOfDegreeAwarded type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LevelOfDegreeAwarded type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelOfDegreeAwardedType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[LevelTypeDescriptor] ******/

CREATE TABLE [t_extension].[LevelTypeDescriptor]
(
    [tid_LevelTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[LevelType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_LevelTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[LevelTypeDescriptor] ADD CONSTRAINT [LevelTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[LevelTypeDescriptor] ADD CONSTRAINT [LevelTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[LevelTypeDescriptor] ADD CONSTRAINT [LevelTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the level (e.g., 1, 2, 3, etc.) of the rubric at which the data is captured.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'LevelTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelTypeDescriptor', @level2type=N'COLUMN', @level2name=N'LevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TLevelTypeDescriptor_Id ON [t_extension].[LevelTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[LevelTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[LevelTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_LevelTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_LevelTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_LevelTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[LevelTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[LevelTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[LevelTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_LevelTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_LevelTypeDescriptor])
REFERENCES [t_extension].[LevelTypeDescriptor] ([tid_LevelTypeDescriptor]);
ALTER TABLE [t_extension].[LevelTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_LevelTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[LevelType] ******/

CREATE TABLE [t_extension].[LevelType]
(
	[tid_LevelType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_LevelType] PRIMARY KEY NONCLUSTERED
(
	[tid_LevelType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[LevelType] ADD CONSTRAINT [LevelType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[LevelType] ADD CONSTRAINT [LevelType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[LevelType] ADD CONSTRAINT [LevelType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the level types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'LevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Level type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Level type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'LevelType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[PerformanceMeasure] ******/

CREATE TABLE [t_extension].[PerformanceMeasure]
(
    [tid_PerformanceMeasure] [INT] IDENTITY(1,1) NOT NULL,
	[PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL,
	[PerformanceMeasureTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[RubricEducationOrganizationId] [INT] NOT NULL,
	[RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[RubricTitle] [NVARCHAR](60) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[CourseCode] [NVARCHAR](60) NULL,
	[EducationOrganizationId] [INT] NULL,
	[ScheduleDateOfPerformanceMeasure] [DATE] NULL,
	[ActualDateOfPerformanceMeasure] [DATE] NOT NULL,
	[TimeOfPerformanceMeasure] [TIME](7) NULL,
	[DurationOfPerformanceMeasure] [INT] NULL,
	[Announced] [BIT] NULL,
	[CoteachingObserved] [BIT] NULL,
	[Comments] [NVARCHAR](1024) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[PerformanceMeasureTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasure] PRIMARY KEY NONCLUSTERED
(
    [tid_PerformanceMeasure] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasure] ADD CONSTRAINT [PerformanceMeasure_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasure] ADD CONSTRAINT [PerformanceMeasure_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PerformanceMeasure] ADD CONSTRAINT [PerformanceMeasure_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the performance measure', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An assigned unique identifier for the performance measure instance.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'PerformanceMeasureIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'PerformanceMeasureTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'RubricEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'RubricTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the performance measure was to be conducted.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'ScheduleDateOfPerformanceMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the performance measure was conducted.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'ActualDateOfPerformanceMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the the time at which the performance measure was conducted.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'TimeOfPerformanceMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The actual or estimated number of clock minutes during which the performance measure was conducted.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'DurationOfPerformanceMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether the performance measure was announced or not.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'Announced';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether co-teaching was part of the performance measure or not.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'CoteachingObserved';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Any comments about the performance measure to be captured', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'Comments';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasure', @level2type=N'COLUMN', @level2name=N'PerformanceMeasureTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPerformanceMeasure_Id ON [t_extension].[PerformanceMeasure]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[PerformanceMeasureSnapshotRecord] ******/

CREATE TABLE [t_extension].[PerformanceMeasureSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PerformanceMeasure] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PerformanceMeasure], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureSnapshotRecord] ADD CONSTRAINT [FK_PerformanceMeasureSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceMeasureSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[PerformanceMeasureSnapshotRecord] ADD CONSTRAINT [FK_PerformanceMeasureSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PerformanceMeasure])
REFERENCES [t_extension].[PerformanceMeasure] ([tid_PerformanceMeasure]);
ALTER TABLE [t_extension].[PerformanceMeasureSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceMeasureSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[PerformanceMeasureProgramGateway] ******/

CREATE TABLE [t_extension].[PerformanceMeasureProgramGateway]
(
	[tid_PerformanceMeasureProgramGateway] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PerformanceMeasure] [INT] NOT NULL,
	[ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureProgramGateway] PRIMARY KEY NONCLUSTERED
(
	[tid_PerformanceMeasureProgramGateway] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureProgramGateway] ADD CONSTRAINT [PerformanceMeasureProgramGateway_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureProgramGateway] ADD CONSTRAINT [FK_PerformanceMeasureProgramGateway_ParentTable] FOREIGN KEY ([tid_PerformanceMeasure])
REFERENCES [t_extension].[PerformanceMeasure] ([tid_PerformanceMeasure]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureProgramGateway] CHECK CONSTRAINT [FK_PerformanceMeasureProgramGateway_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the program gateway that may be associated for continuation in the program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureProgramGateway';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureProgramGateway', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureProgramGateway', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorNamespace';
GO

/****** TABLE: [t_extension].[PerformanceMeasureGradeLevel] ******/

CREATE TABLE [t_extension].[PerformanceMeasureGradeLevel]
(
	[tid_PerformanceMeasureGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PerformanceMeasure] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_PerformanceMeasureGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureGradeLevel] ADD CONSTRAINT [PerformanceMeasureGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureGradeLevel] ADD CONSTRAINT [FK_PerformanceMeasureGradeLevel_ParentTable] FOREIGN KEY ([tid_PerformanceMeasure])
REFERENCES [t_extension].[PerformanceMeasure] ([tid_PerformanceMeasure]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureGradeLevel] CHECK CONSTRAINT [FK_PerformanceMeasureGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels for the performance measure.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_extension].[PerformanceMeasurePersonBeingReviewed] ******/

CREATE TABLE [t_extension].[PerformanceMeasurePersonBeingReviewed]
(
	[tid_PerformanceMeasurePersonBeingReviewed] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PerformanceMeasure] [INT] NOT NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[ProspectIdentifier] [NVARCHAR](32) NULL,
	[ProspectEducationOrganizationId] [INT] NULL,
	[PersonBeingReviewedStaffUniqueId] [NVARCHAR](32) NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasurePersonBeingReviewed] PRIMARY KEY NONCLUSTERED
(
	[tid_PerformanceMeasurePersonBeingReviewed] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasurePersonBeingReviewed] ADD CONSTRAINT [PerformanceMeasurePersonBeingReviewed_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasurePersonBeingReviewed] ADD CONSTRAINT [FK_PerformanceMeasurePersonBeingReviewed_ParentTable] FOREIGN KEY ([tid_PerformanceMeasure])
REFERENCES [t_extension].[PerformanceMeasure] ([tid_PerformanceMeasure]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasurePersonBeingReviewed] CHECK CONSTRAINT [FK_PerformanceMeasurePersonBeingReviewed_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information regarding the person taking the performance measure.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasurePersonBeingReviewed';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasurePersonBeingReviewed', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasurePersonBeingReviewed', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasurePersonBeingReviewed', @level2type=N'COLUMN', @level2name=N'ProspectIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasurePersonBeingReviewed', @level2type=N'COLUMN', @level2name=N'ProspectEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasurePersonBeingReviewed', @level2type=N'COLUMN', @level2name=N'PersonBeingReviewedStaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasurePersonBeingReviewed', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
GO

/****** TABLE: [t_extension].[PerformanceMeasureReviewer] ******/

CREATE TABLE [t_extension].[PerformanceMeasureReviewer]
(
	[tid_PerformanceMeasureReviewer] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PerformanceMeasure] [INT] NOT NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[ReviewerStaffUniqueId] [NVARCHAR](32) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureReviewer] PRIMARY KEY NONCLUSTERED
(
	[tid_PerformanceMeasureReviewer] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureReviewer] ADD CONSTRAINT [PerformanceMeasureReviewer_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureReviewer] ADD CONSTRAINT [FK_PerformanceMeasureReviewer_ParentTable] FOREIGN KEY ([tid_PerformanceMeasure])
REFERENCES [t_extension].[PerformanceMeasure] ([tid_PerformanceMeasure]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureReviewer] CHECK CONSTRAINT [FK_PerformanceMeasureReviewer_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person that conducted the performance measure.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureReviewer';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureReviewer', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureReviewer', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureReviewer', @level2type=N'COLUMN', @level2name=N'ReviewerStaffUniqueId';
GO

/****** TABLE: [t_extension].[PerformanceMeasureReviewerReceivedTraining] ******/

CREATE TABLE [t_extension].[PerformanceMeasureReviewerReceivedTraining]
(
	[tid_PerformanceMeasureReviewerReceivedTraining] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PerformanceMeasureReviewer] [INT] NOT NULL,
	[ReceivedTrainingDate] [DATE] NULL,
	[InterRaterReliabilityScore] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureReviewerReceivedTraining] PRIMARY KEY NONCLUSTERED
(
	[tid_PerformanceMeasureReviewerReceivedTraining] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureReviewerReceivedTraining] ADD CONSTRAINT [PerformanceMeasureReviewerReceivedTraining_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureReviewerReceivedTraining] ADD CONSTRAINT [FK_PerformanceMeasureReviewerReceivedTraining_ParentTable] FOREIGN KEY ([tid_PerformanceMeasureReviewer])
REFERENCES [t_extension].[PerformanceMeasureReviewer] ([tid_PerformanceMeasureReviewer]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureReviewerReceivedTraining] CHECK CONSTRAINT [FK_PerformanceMeasureReviewerReceivedTraining_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the person administering the performance measure has or has not received training on conducting performance measures.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureReviewerReceivedTraining';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which the person administering the performance meausre received training on how to conduct performance measures.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureReviewerReceivedTraining', @level2type=N'COLUMN', @level2name=N'ReceivedTrainingDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A score indicating how much homogeneity, or consensus, there is in the ratings given by judges.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureReviewerReceivedTraining', @level2type=N'COLUMN', @level2name=N'InterRaterReliabilityScore';
GO
/****** TABLE: [t_extension].[PerformanceMeasureFacts] ******/

CREATE TABLE [t_extension].[PerformanceMeasureFacts]
(
    [tid_PerformanceMeasureFacts] [INT] IDENTITY(1,1) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[RubricEducationOrganizationId] [INT] NOT NULL,
	[RubricTitle] [NVARCHAR](60) NOT NULL,
	[RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[PerformanceMeasureTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[PerformanceMeasureTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_PerformanceMeasureFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureFacts] ADD CONSTRAINT [PerformanceMeasureFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureFacts] ADD CONSTRAINT [PerformanceMeasureFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PerformanceMeasureFacts] ADD CONSTRAINT [PerformanceMeasureFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents aggregated information regarding performance measure data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated observation data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'RubricEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'RubricTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'PerformanceMeasureTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'PerformanceMeasureTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFacts', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPerformanceMeasureFacts_Id ON [t_extension].[PerformanceMeasureFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[PerformanceMeasureFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[PerformanceMeasureFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PerformanceMeasureFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PerformanceMeasureFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureFactsSnapshotRecord] ADD CONSTRAINT [FK_PerformanceMeasureFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureFactsSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceMeasureFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[PerformanceMeasureFactsSnapshotRecord] ADD CONSTRAINT [FK_PerformanceMeasureFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PerformanceMeasureFacts])
REFERENCES [t_extension].[PerformanceMeasureFacts] ([tid_PerformanceMeasureFacts]);
ALTER TABLE [t_extension].[PerformanceMeasureFactsSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceMeasureFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[PerformanceMeasureFactsGradeLevel] ******/

CREATE TABLE [t_extension].[PerformanceMeasureFactsGradeLevel]
(
	[tid_PerformanceMeasureFactsGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_PerformanceMeasureFacts] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureFactsGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_PerformanceMeasureFactsGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureFactsGradeLevel] ADD CONSTRAINT [PerformanceMeasureFactsGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureFactsGradeLevel] ADD CONSTRAINT [FK_PerformanceMeasureFactsGradeLevel_ParentTable] FOREIGN KEY ([tid_PerformanceMeasureFacts])
REFERENCES [t_extension].[PerformanceMeasureFacts] ([tid_PerformanceMeasureFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureFactsGradeLevel] CHECK CONSTRAINT [FK_PerformanceMeasureFactsGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels for the aggregated performance measure data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureFactsGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFactsGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureFactsGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO
/****** TABLE: [t_extension].[PerformanceMeasureTypeDescriptor] ******/

CREATE TABLE [t_extension].[PerformanceMeasureTypeDescriptor]
(
    [tid_PerformanceMeasureTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceMeasureType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_PerformanceMeasureTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureTypeDescriptor] ADD CONSTRAINT [PerformanceMeasureTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureTypeDescriptor] ADD CONSTRAINT [PerformanceMeasureTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PerformanceMeasureTypeDescriptor] ADD CONSTRAINT [PerformanceMeasureTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the type (e.g., walkthrough, summative) of observation conducted.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureTypeDescriptor', @level2type=N'COLUMN', @level2name=N'PerformanceMeasureType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPerformanceMeasureTypeDescriptor_Id ON [t_extension].[PerformanceMeasureTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PerformanceMeasureTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PerformanceMeasureTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PerformanceMeasureTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PerformanceMeasureTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceMeasureTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PerformanceMeasureTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PerformanceMeasureTypeDescriptor])
REFERENCES [t_extension].[PerformanceMeasureTypeDescriptor] ([tid_PerformanceMeasureTypeDescriptor]);
ALTER TABLE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PerformanceMeasureTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[PerformanceMeasureType] ******/

CREATE TABLE [t_extension].[PerformanceMeasureType]
(
	[tid_PerformanceMeasureType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_PerformanceMeasureType] PRIMARY KEY NONCLUSTERED
(
	[tid_PerformanceMeasureType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PerformanceMeasureType] ADD CONSTRAINT [PerformanceMeasureType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PerformanceMeasureType] ADD CONSTRAINT [PerformanceMeasureType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PerformanceMeasureType] ADD CONSTRAINT [PerformanceMeasureType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the performance measure types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PerformanceMeasureType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PerformanceMeasure type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PerformanceMeasure type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PerformanceMeasureType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[PopulationCategoryDescriptor] ******/

CREATE TABLE [t_extension].[PopulationCategoryDescriptor]
(
    [tid_PopulationCategoryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[PopulationCategoryType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PopulationCategoryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_PopulationCategoryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PopulationCategoryDescriptor] ADD CONSTRAINT [PopulationCategoryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PopulationCategoryDescriptor] ADD CONSTRAINT [PopulationCategoryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PopulationCategoryDescriptor] ADD CONSTRAINT [PopulationCategoryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Section of the school that is associated with a VAM', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PopulationCategoryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'PopulationCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPopulationCategoryDescriptor_Id ON [t_extension].[PopulationCategoryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[PopulationCategoryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PopulationCategoryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PopulationCategoryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PopulationCategoryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PopulationCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PopulationCategoryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PopulationCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PopulationCategoryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[PopulationCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PopulationCategoryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PopulationCategoryDescriptor])
REFERENCES [t_extension].[PopulationCategoryDescriptor] ([tid_PopulationCategoryDescriptor]);
ALTER TABLE [t_extension].[PopulationCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PopulationCategoryDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[PopulationCategoryType] ******/

CREATE TABLE [t_extension].[PopulationCategoryType]
(
	[tid_PopulationCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_PopulationCategoryType] PRIMARY KEY NONCLUSTERED
(
	[tid_PopulationCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PopulationCategoryType] ADD CONSTRAINT [PopulationCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PopulationCategoryType] ADD CONSTRAINT [PopulationCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PopulationCategoryType] ADD CONSTRAINT [PopulationCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Section of the school that is associated with a VAM', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PopulationCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PopulationCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PopulationCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[PopulationSubCategoryDescriptor] ******/

CREATE TABLE [t_extension].[PopulationSubCategoryDescriptor]
(
    [tid_PopulationSubCategoryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[PopulationSubCategoryType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PopulationSubCategoryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_PopulationSubCategoryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PopulationSubCategoryDescriptor] ADD CONSTRAINT [PopulationSubCategoryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PopulationSubCategoryDescriptor] ADD CONSTRAINT [PopulationSubCategoryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PopulationSubCategoryDescriptor] ADD CONSTRAINT [PopulationSubCategoryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Section of the school that is associated with a VAM', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PopulationSubCategoryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'PopulationSubCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPopulationSubCategoryDescriptor_Id ON [t_extension].[PopulationSubCategoryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PopulationSubCategoryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PopulationSubCategoryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PopulationSubCategoryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PopulationSubCategoryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PopulationSubCategoryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PopulationSubCategoryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PopulationSubCategoryDescriptor])
REFERENCES [t_extension].[PopulationSubCategoryDescriptor] ([tid_PopulationSubCategoryDescriptor]);
ALTER TABLE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PopulationSubCategoryDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[PopulationSubCategoryType] ******/

CREATE TABLE [t_extension].[PopulationSubCategoryType]
(
	[tid_PopulationSubCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_PopulationSubCategoryType] PRIMARY KEY NONCLUSTERED
(
	[tid_PopulationSubCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PopulationSubCategoryType] ADD CONSTRAINT [PopulationSubCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PopulationSubCategoryType] ADD CONSTRAINT [PopulationSubCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PopulationSubCategoryType] ADD CONSTRAINT [PopulationSubCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Section of the school that is associated with a VAM', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PopulationSubCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PopulationSubCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PopulationSubCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PopulationSubCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[PreviousCareerDescriptor] ******/

CREATE TABLE [t_extension].[PreviousCareerDescriptor]
(
    [tid_PreviousCareerDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[PreviousCareerType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PreviousCareerDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_PreviousCareerDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PreviousCareerDescriptor] ADD CONSTRAINT [PreviousCareerDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PreviousCareerDescriptor] ADD CONSTRAINT [PreviousCareerDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PreviousCareerDescriptor] ADD CONSTRAINT [PreviousCareerDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the previous career of an individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PreviousCareerDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerDescriptor', @level2type=N'COLUMN', @level2name=N'PreviousCareerType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TPreviousCareerDescriptor_Id ON [t_extension].[PreviousCareerDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[PreviousCareerDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[PreviousCareerDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_PreviousCareerDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_PreviousCareerDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_PreviousCareerDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PreviousCareerDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PreviousCareerDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[PreviousCareerDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PreviousCareerDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[PreviousCareerDescriptorSnapshotRecord] ADD CONSTRAINT [FK_PreviousCareerDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_PreviousCareerDescriptor])
REFERENCES [t_extension].[PreviousCareerDescriptor] ([tid_PreviousCareerDescriptor]);
ALTER TABLE [t_extension].[PreviousCareerDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_PreviousCareerDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[PreviousCareerType] ******/

CREATE TABLE [t_extension].[PreviousCareerType]
(
	[tid_PreviousCareerType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_PreviousCareerType] PRIMARY KEY NONCLUSTERED
(
	[tid_PreviousCareerType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[PreviousCareerType] ADD CONSTRAINT [PreviousCareerType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[PreviousCareerType] ADD CONSTRAINT [PreviousCareerType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[PreviousCareerType] ADD CONSTRAINT [PreviousCareerType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the type of previous careers.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'PreviousCareerType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PreviousCareer type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PreviousCareer type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'PreviousCareerType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[ProfessionalDevelopmentEvent] ******/

CREATE TABLE [t_extension].[ProfessionalDevelopmentEvent]
(
    [tid_ProfessionalDevelopmentEvent] [INT] IDENTITY(1,1) NOT NULL,
	[ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL,
	[ProfessionalDevelopmentOfferedByDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TotalHours] [INT] NULL,
	[Required] [BIT] NULL,
	[MultipleSession] [BIT] NULL,
	[ProfessionalDevelopmentReason] [NVARCHAR](60) NULL,
	[ProfessionalDevelopmentOfferedByDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProfessionalDevelopmentEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_ProfessionalDevelopmentEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProfessionalDevelopmentEvent] ADD CONSTRAINT [ProfessionalDevelopmentEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProfessionalDevelopmentEvent] ADD CONSTRAINT [ProfessionalDevelopmentEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ProfessionalDevelopmentEvent] ADD CONSTRAINT [ProfessionalDevelopmentEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about a professional development event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProfessionalDevelopmentEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name for a professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentEvent', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentEvent', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentOfferedByDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of total hours the professional development contains.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentEvent', @level2type=N'COLUMN', @level2name=N'TotalHours';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a teacher candidate is active in a professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentEvent', @level2type=N'COLUMN', @level2name=N'Required';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether or not a professional development event is comprised of multiple sessions or not.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentEvent', @level2type=N'COLUMN', @level2name=N'MultipleSession';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a teacher candidate''s professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentEvent', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentEvent', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentOfferedByDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProfessionalDevelopmentEvent_Id ON [t_extension].[ProfessionalDevelopmentEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ProfessionalDevelopmentEventSnapshotRecord] ******/

CREATE TABLE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ProfessionalDevelopmentEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProfessionalDevelopmentEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ProfessionalDevelopmentEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord] ADD CONSTRAINT [FK_ProfessionalDevelopmentEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord] CHECK CONSTRAINT [FK_ProfessionalDevelopmentEventSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord] ADD CONSTRAINT [FK_ProfessionalDevelopmentEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ProfessionalDevelopmentEvent])
REFERENCES [t_extension].[ProfessionalDevelopmentEvent] ([tid_ProfessionalDevelopmentEvent]);
ALTER TABLE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord] CHECK CONSTRAINT [FK_ProfessionalDevelopmentEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] ******/

CREATE TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptor]
(
    [tid_ProfessionalDevelopmentOfferedByDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ProfessionalDevelopmentOfferedByType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProfessionalDevelopmentOfferedByDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ProfessionalDevelopmentOfferedByDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] ADD CONSTRAINT [ProfessionalDevelopmentOfferedByDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] ADD CONSTRAINT [ProfessionalDevelopmentOfferedByDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] ADD CONSTRAINT [ProfessionalDevelopmentOfferedByDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the organization that a professional development is offered by.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProfessionalDevelopmentOfferedByDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByDescriptor', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentOfferedByType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProfessionalDevelopmentOfferedByDescriptor_Id ON [t_extension].[ProfessionalDevelopmentOfferedByDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ProfessionalDevelopmentOfferedByDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ProfessionalDevelopmentOfferedByDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ProfessionalDevelopmentOfferedByDescriptor])
REFERENCES [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] ([tid_ProfessionalDevelopmentOfferedByDescriptor]);
ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ProfessionalDevelopmentOfferedByType] ******/

CREATE TABLE [t_extension].[ProfessionalDevelopmentOfferedByType]
(
	[tid_ProfessionalDevelopmentOfferedByType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ProfessionalDevelopmentOfferedByType] PRIMARY KEY NONCLUSTERED
(
	[tid_ProfessionalDevelopmentOfferedByType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByType] ADD CONSTRAINT [ProfessionalDevelopmentOfferedByType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByType] ADD CONSTRAINT [ProfessionalDevelopmentOfferedByType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ProfessionalDevelopmentOfferedByType] ADD CONSTRAINT [ProfessionalDevelopmentOfferedByType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the type of organizations that the professional development is offered by.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProfessionalDevelopmentOfferedByType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProfessionalDevelopmentOfferedBy type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProfessionalDevelopmentOfferedBy type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProfessionalDevelopmentOfferedByType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[ProgramGatewayDescriptor] ******/

CREATE TABLE [t_extension].[ProgramGatewayDescriptor]
(
    [tid_ProgramGatewayDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramGatewayType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramGatewayDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ProgramGatewayDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProgramGatewayDescriptor] ADD CONSTRAINT [ProgramGatewayDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProgramGatewayDescriptor] ADD CONSTRAINT [ProgramGatewayDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ProgramGatewayDescriptor] ADD CONSTRAINT [ProgramGatewayDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the program gateway that is associated with continuation in a program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProgramGatewayDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayDescriptor', @level2type=N'COLUMN', @level2name=N'ProgramGatewayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProgramGatewayDescriptor_Id ON [t_extension].[ProgramGatewayDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ProgramGatewayDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ProgramGatewayDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProgramGatewayDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ProgramGatewayDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProgramGatewayDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProgramGatewayDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProgramGatewayDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProgramGatewayDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ProgramGatewayDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ProgramGatewayDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ProgramGatewayDescriptor])
REFERENCES [t_extension].[ProgramGatewayDescriptor] ([tid_ProgramGatewayDescriptor]);
ALTER TABLE [t_extension].[ProgramGatewayDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ProgramGatewayDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ProgramGatewayType] ******/

CREATE TABLE [t_extension].[ProgramGatewayType]
(
	[tid_ProgramGatewayType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ProgramGatewayType] PRIMARY KEY NONCLUSTERED
(
	[tid_ProgramGatewayType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProgramGatewayType] ADD CONSTRAINT [ProgramGatewayType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProgramGatewayType] ADD CONSTRAINT [ProgramGatewayType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ProgramGatewayType] ADD CONSTRAINT [ProgramGatewayType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the type of program gateway.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProgramGatewayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProgramGateway type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProgramGateway type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProgramGatewayType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[Prospect] ******/

CREATE TABLE [t_extension].[Prospect]
(
    [tid_Prospect] [INT] IDENTITY(1,1) NOT NULL,
	[ProspectEducationOrganizationId] [INT] NOT NULL,
	[ProspectIdentifier] [NVARCHAR](32) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[MaidenName] [NVARCHAR](75) NULL,
	[ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
	[Applied] [BIT] NULL,
	[HispanicLatinoEthnicity] [BIT] NULL,
	[Met] [BIT] NULL,
	[Notes] [NVARCHAR](255) NULL,
	[PreScreeningRating] [INT] NULL,
	[Referral] [BIT] NULL,
	[ReferredBy] [NVARCHAR](50) NULL,
	[SexType] [NVARCHAR](450) NULL,
	[SocialMediaUserName] [NVARCHAR](50) NULL,
	[SocialMediaNetworkName] [NVARCHAR](50) NULL,
	[GenderType] [NVARCHAR](450) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Prospect] PRIMARY KEY NONCLUSTERED
(
    [tid_Prospect] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[Prospect] ADD CONSTRAINT [Prospect_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[Prospect] ADD CONSTRAINT [Prospect_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[Prospect] ADD CONSTRAINT [Prospect_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prospect for employment or contract that has not yet made formal application, often obtained from job fairs or university recruiting visits.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'Prospect';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'ProspectEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'ProspectIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'MaidenName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the prospect applied for a position.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'Applied';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino".', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator whether the person was met by a representative of the education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'Met';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Additional notes about the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'Notes';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The rating initially assigned to the prospect prior to an official screening.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'PreScreeningRating';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the prospect was a referral.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'Referral';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person making the referral.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'ReferredBy';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The user name of the person on social media.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'SocialMediaUserName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'SocialMediaNetworkName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Prospect', @level2type=N'COLUMN', @level2name=N'GenderType';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProspect_Id ON [t_extension].[Prospect]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ProspectSnapshotRecord] ******/

CREATE TABLE [t_extension].[ProspectSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Prospect], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectSnapshotRecord] ADD CONSTRAINT [FK_ProspectSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectSnapshotRecord] CHECK CONSTRAINT [FK_ProspectSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ProspectSnapshotRecord] ADD CONSTRAINT [FK_ProspectSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]);
ALTER TABLE [t_extension].[ProspectSnapshotRecord] CHECK CONSTRAINT [FK_ProspectSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ProspectCurrentPosition] ******/

CREATE TABLE [t_extension].[ProspectCurrentPosition]
(
	[tid_ProspectCurrentPosition] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[NameOfInstitution] [NVARCHAR](75) NOT NULL,
	[Location] [NVARCHAR](75) NOT NULL,
	[PositionTitle] [NVARCHAR](100) NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectCurrentPosition] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectCurrentPosition] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectCurrentPosition] ADD CONSTRAINT [ProspectCurrentPosition_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectCurrentPosition] ADD CONSTRAINT [FK_ProspectCurrentPosition_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectCurrentPosition] CHECK CONSTRAINT [FK_ProspectCurrentPosition_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The current position of the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectCurrentPosition';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the education organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCurrentPosition', @level2type=N'COLUMN', @level2name=N'NameOfInstitution';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The location, typically City and State, for the institution.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCurrentPosition', @level2type=N'COLUMN', @level2name=N'Location';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name of an individual''s position.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCurrentPosition', @level2type=N'COLUMN', @level2name=N'PositionTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCurrentPosition', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCurrentPosition', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ProspectCurrentPositionGradeLevel] ******/

CREATE TABLE [t_extension].[ProspectCurrentPositionGradeLevel]
(
	[tid_ProspectCurrentPositionGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_ProspectCurrentPosition] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectCurrentPositionGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectCurrentPositionGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectCurrentPositionGradeLevel] ADD CONSTRAINT [ProspectCurrentPositionGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectCurrentPositionGradeLevel] ADD CONSTRAINT [FK_ProspectCurrentPositionGradeLevel_ParentTable] FOREIGN KEY ([tid_ProspectCurrentPosition])
REFERENCES [t_extension].[ProspectCurrentPosition] ([tid_ProspectCurrentPosition]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectCurrentPositionGradeLevel] CHECK CONSTRAINT [FK_ProspectCurrentPositionGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of grade levels for which the individual''s assignment is responsible.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectCurrentPositionGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCurrentPositionGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCurrentPositionGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ProspectRace] ******/

CREATE TABLE [t_extension].[ProspectRace]
(
	[tid_ProspectRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectRace] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectRace] ADD CONSTRAINT [ProspectRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectRace] ADD CONSTRAINT [FK_ProspectRace_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectRace] CHECK CONSTRAINT [FK_ProspectRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectRace', @level2type=N'COLUMN', @level2name=N'RaceType';
GO

/****** TABLE: [t_extension].[ProspectRecruitmentEvent] ******/

CREATE TABLE [t_extension].[ProspectRecruitmentEvent]
(
	[tid_ProspectRecruitmentEvent] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[EventTitle] [NVARCHAR](50) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectRecruitmentEvent] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectRecruitmentEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectRecruitmentEvent] ADD CONSTRAINT [ProspectRecruitmentEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectRecruitmentEvent] ADD CONSTRAINT [FK_ProspectRecruitmentEvent_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectRecruitmentEvent] CHECK CONSTRAINT [FK_ProspectRecruitmentEvent_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reference(s) to events associated with the recruitment process.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectRecruitmentEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectRecruitmentEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectRecruitmentEvent', @level2type=N'COLUMN', @level2name=N'EventTitle';
GO

/****** TABLE: [t_extension].[ProspectTelephone] ******/

CREATE TABLE [t_extension].[ProspectTelephone]
(
	[tid_ProspectTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[TelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[OrderOfPriority] [INT] NULL,
	[TextMessageCapabilityIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectTelephone] ADD CONSTRAINT [ProspectTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectTelephone] ADD CONSTRAINT [FK_ProspectTelephone_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectTelephone] CHECK CONSTRAINT [FK_ProspectTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator';
GO

/****** TABLE: [t_extension].[ProspectTouchpoint] ******/

CREATE TABLE [t_extension].[ProspectTouchpoint]
(
	[tid_ProspectTouchpoint] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[TouchpointContent] [NVARCHAR](255) NOT NULL,
	[TouchpointDate] [DATE] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectTouchpoint] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectTouchpoint] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectTouchpoint] ADD CONSTRAINT [ProspectTouchpoint_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectTouchpoint] ADD CONSTRAINT [FK_ProspectTouchpoint_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectTouchpoint] CHECK CONSTRAINT [FK_ProspectTouchpoint_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Content associated with different touchpoints with the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectTouchpoint';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The content associated with or an artifact from the touchpoint.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectTouchpoint', @level2type=N'COLUMN', @level2name=N'TouchpointContent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the touchpoint.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectTouchpoint', @level2type=N'COLUMN', @level2name=N'TouchpointDate';
GO

/****** TABLE: [t_extension].[ProspectCredential] ******/

CREATE TABLE [t_extension].[ProspectCredential]
(
	[tid_ProspectCredential] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[CredentialIdentifier] [NVARCHAR](60) NOT NULL,
	[StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectCredential] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectCredential] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectCredential] ADD CONSTRAINT [ProspectCredential_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectCredential] ADD CONSTRAINT [FK_ProspectCredential_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectCredential] CHECK CONSTRAINT [FK_ProspectCredential_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The legal document or authorization giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectCredential';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier or serial number assigned to the credential.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCredential', @level2type=N'COLUMN', @level2name=N'CredentialIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectCredential', @level2type=N'COLUMN', @level2name=N'StateOfIssueStateAbbreviationType';
GO

/****** TABLE: [t_extension].[ProspectDisability] ******/

CREATE TABLE [t_extension].[ProspectDisability]
(
	[tid_ProspectDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DisabilityDiagnosis] [NVARCHAR](80) NULL,
	[OrderOfDisability] [INT] NULL,
	[DisabilityDeterminationSourceType] [NVARCHAR](450) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectDisability] ADD CONSTRAINT [ProspectDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectDisability] ADD CONSTRAINT [FK_ProspectDisability_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectDisability] CHECK CONSTRAINT [FK_ProspectDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The disability condition(s) that best describes an individual''s impairment.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the disability diagnosis.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDiagnosis';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order by severity of student''s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectDisability', @level2type=N'COLUMN', @level2name=N'OrderOfDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDeterminationSourceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[ProspectQualifications] ******/

CREATE TABLE [t_extension].[ProspectQualifications]
(
	[tid_ProspectQualifications] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[Eligible] [BIT] NOT NULL,
	[CapacityToServe] [BIT] NULL,
	[YearsOfServiceCurrentPlacement] [DECIMAL](5, 2) NULL,
	[YearsOfServiceTotal] [DECIMAL](5, 2) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectQualifications] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectQualifications] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectQualifications] ADD CONSTRAINT [ProspectQualifications_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectQualifications] ADD CONSTRAINT [FK_ProspectQualifications_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectQualifications] CHECK CONSTRAINT [FK_ProspectQualifications_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The qualifications of a prospective mentor teacher.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectQualifications';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether the prospect is eligible for the position.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectQualifications', @level2type=N'COLUMN', @level2name=N'Eligible';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether or not a prospect mentor teacher has capacity to serve.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectQualifications', @level2type=N'COLUMN', @level2name=N'CapacityToServe';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years of service at the current school.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectQualifications', @level2type=N'COLUMN', @level2name=N'YearsOfServiceCurrentPlacement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years of service as a teacher.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectQualifications', @level2type=N'COLUMN', @level2name=N'YearsOfServiceTotal';
GO

/****** TABLE: [t_extension].[ProspectIdentificationDocument] ******/

CREATE TABLE [t_extension].[ProspectIdentificationDocument]
(
	[tid_ProspectIdentificationDocument] [INT] IDENTITY(1,1) NOT NULL,
    [tid_Prospect] [INT] NOT NULL,
	[IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL,
	[PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL,
	[DocumentTitle] [NVARCHAR](60) NULL,
	[DocumentExpirationDate] [DATE] NULL,
	[IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectIdentificationDocument] PRIMARY KEY NONCLUSTERED
(
	[tid_ProspectIdentificationDocument] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectIdentificationDocument] ADD CONSTRAINT [ProspectIdentificationDocument_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectIdentificationDocument] ADD CONSTRAINT [FK_ProspectIdentificationDocument_ParentTable] FOREIGN KEY ([tid_Prospect])
REFERENCES [t_extension].[Prospect] ([tid_Prospect]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectIdentificationDocument] CHECK CONSTRAINT [FK_ProspectIdentificationDocument_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectIdentificationDocument';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorNamespace';
GO
/****** TABLE: [t_extension].[ProspectProfessionalDevelopmentEventAttendance] ******/

CREATE TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendance]
(
    [tid_ProspectProfessionalDevelopmentEventAttendance] [INT] IDENTITY(1,1) NOT NULL,
	[AttendanceDate] [DATE] NOT NULL,
	[ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL,
	[ProspectEducationOrganizationId] [INT] NOT NULL,
	[ProspectIdentifier] [NVARCHAR](32) NOT NULL,
	[AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AttendanceEventReason] [NVARCHAR](40) NULL,
	[AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectProfessionalDevelopmentEventAttendance] PRIMARY KEY NONCLUSTERED
(
    [tid_ProspectProfessionalDevelopmentEventAttendance] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [ProspectProfessionalDevelopmentEventAttendance_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [ProspectProfessionalDevelopmentEventAttendance_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [ProspectProfessionalDevelopmentEventAttendance_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a prospect is in attendance for professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ProspectProfessionalDevelopmentEventAttendance';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name for a professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'ProspectEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'ProspectIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a teacher candidate''s absence.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ProspectProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TProspectProfessionalDevelopmentEventAttendance_Id ON [t_extension].[ProspectProfessionalDevelopmentEventAttendance]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord] ******/

CREATE TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ProspectProfessionalDevelopmentEventAttendance] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ProspectProfessionalDevelopmentEventAttendance], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord] ADD CONSTRAINT [FK_ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord] CHECK CONSTRAINT [FK_ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord] ADD CONSTRAINT [FK_ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ProspectProfessionalDevelopmentEventAttendance])
REFERENCES [t_extension].[ProspectProfessionalDevelopmentEventAttendance] ([tid_ProspectProfessionalDevelopmentEventAttendance]);
ALTER TABLE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord] CHECK CONSTRAINT [FK_ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[QuestionFormType] ******/

CREATE TABLE [t_extension].[QuestionFormType]
(
    [tid_QuestionFormType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_QuestionFormType] PRIMARY KEY NONCLUSTERED
(
    [tid_QuestionFormType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[QuestionFormType] ADD CONSTRAINT [QuestionFormType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[QuestionFormType] ADD CONSTRAINT [QuestionFormType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[QuestionFormType] ADD CONSTRAINT [QuestionFormType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The form of question: 1) Radio box: multiple choice, single selection; 2) Checkbox: Multiple choice, multiple selection; 3) Dropdown: multiple choice, single selection; 4) Matrix, numeric rating scale; 5) Matrix of dropdowns; 6) Ranking; 7) Single textbox; 8) Matrix of text boxes.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'QuestionFormType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'QuestionFormType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the QuestionForm type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'QuestionFormType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the QuestionForm type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'QuestionFormType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[RecruitmentEvent] ******/

CREATE TABLE [t_extension].[RecruitmentEvent]
(
    [tid_RecruitmentEvent] [INT] IDENTITY(1,1) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[EventTitle] [NVARCHAR](50) NOT NULL,
	[EventDescription] [NVARCHAR](255) NULL,
	[EventLocation] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RecruitmentEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_RecruitmentEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RecruitmentEvent] ADD CONSTRAINT [RecruitmentEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RecruitmentEvent] ADD CONSTRAINT [RecruitmentEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[RecruitmentEvent] ADD CONSTRAINT [RecruitmentEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Events associated with the recruitment process.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RecruitmentEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RecruitmentEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RecruitmentEvent', @level2type=N'COLUMN', @level2name=N'EventTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The long description of the event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RecruitmentEvent', @level2type=N'COLUMN', @level2name=N'EventDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The location of the event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RecruitmentEvent', @level2type=N'COLUMN', @level2name=N'EventLocation';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TRecruitmentEvent_Id ON [t_extension].[RecruitmentEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[RecruitmentEventSnapshotRecord] ******/

CREATE TABLE [t_extension].[RecruitmentEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_RecruitmentEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RecruitmentEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_RecruitmentEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RecruitmentEventSnapshotRecord] ADD CONSTRAINT [FK_RecruitmentEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RecruitmentEventSnapshotRecord] CHECK CONSTRAINT [FK_RecruitmentEventSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[RecruitmentEventSnapshotRecord] ADD CONSTRAINT [FK_RecruitmentEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_RecruitmentEvent])
REFERENCES [t_extension].[RecruitmentEvent] ([tid_RecruitmentEvent]);
ALTER TABLE [t_extension].[RecruitmentEventSnapshotRecord] CHECK CONSTRAINT [FK_RecruitmentEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[Rubric] ******/

CREATE TABLE [t_extension].[Rubric]
(
    [tid_Rubric] [INT] IDENTITY(1,1) NOT NULL,
	[RubricEducationOrganizationId] [INT] NOT NULL,
	[RubricTitle] [NVARCHAR](60) NOT NULL,
	[RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[RubricDescription] [NVARCHAR](255) NULL,
	[InterRaterReliabilityScore] [INT] NULL,
	[RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Rubric] PRIMARY KEY NONCLUSTERED
(
    [tid_Rubric] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[Rubric] ADD CONSTRAINT [Rubric_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[Rubric] ADD CONSTRAINT [Rubric_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[Rubric] ADD CONSTRAINT [Rubric_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the rubric used to conduct the observation.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'Rubric';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Rubric', @level2type=N'COLUMN', @level2name=N'RubricEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Rubric', @level2type=N'COLUMN', @level2name=N'RubricTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Rubric', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Rubric', @level2type=N'COLUMN', @level2name=N'RubricDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A score indicating how much homogeneity, or consensus, there is in the ratings given by judges.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Rubric', @level2type=N'COLUMN', @level2name=N'InterRaterReliabilityScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Rubric', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TRubric_Id ON [t_extension].[Rubric]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[RubricSnapshotRecord] ******/

CREATE TABLE [t_extension].[RubricSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Rubric] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Rubric], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricSnapshotRecord] ADD CONSTRAINT [FK_RubricSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricSnapshotRecord] CHECK CONSTRAINT [FK_RubricSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[RubricSnapshotRecord] ADD CONSTRAINT [FK_RubricSnapshotRecord_ParentTable] FOREIGN KEY ([tid_Rubric])
REFERENCES [t_extension].[Rubric] ([tid_Rubric]);
ALTER TABLE [t_extension].[RubricSnapshotRecord] CHECK CONSTRAINT [FK_RubricSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[RubricLevel] ******/

CREATE TABLE [t_extension].[RubricLevel]
(
    [tid_RubricLevel] [INT] IDENTITY(1,1) NOT NULL,
	[RubricEducationOrganizationId] [INT] NOT NULL,
	[RubricLevelCode] [NVARCHAR](20) NOT NULL,
	[RubricTitle] [NVARCHAR](60) NOT NULL,
	[RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevel] PRIMARY KEY NONCLUSTERED
(
    [tid_RubricLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevel] ADD CONSTRAINT [RubricLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricLevel] ADD CONSTRAINT [RubricLevel_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[RubricLevel] ADD CONSTRAINT [RubricLevel_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the level of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevel', @level2type=N'COLUMN', @level2name=N'RubricEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevel', @level2type=N'COLUMN', @level2name=N'RubricLevelCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevel', @level2type=N'COLUMN', @level2name=N'RubricTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevel', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevel', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TRubricLevel_Id ON [t_extension].[RubricLevel]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[RubricLevelSnapshotRecord] ******/

CREATE TABLE [t_extension].[RubricLevelSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_RubricLevel] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_RubricLevel], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelSnapshotRecord] ADD CONSTRAINT [FK_RubricLevelSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricLevelSnapshotRecord] CHECK CONSTRAINT [FK_RubricLevelSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[RubricLevelSnapshotRecord] ADD CONSTRAINT [FK_RubricLevelSnapshotRecord_ParentTable] FOREIGN KEY ([tid_RubricLevel])
REFERENCES [t_extension].[RubricLevel] ([tid_RubricLevel]);
ALTER TABLE [t_extension].[RubricLevelSnapshotRecord] CHECK CONSTRAINT [FK_RubricLevelSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[RubricLevelInformation] ******/

CREATE TABLE [t_extension].[RubricLevelInformation]
(
	[tid_RubricLevelInformation] [INT] IDENTITY(1,1) NOT NULL,
    [tid_RubricLevel] [INT] NOT NULL,
	[LevelTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LevelTitle] [NVARCHAR](60) NOT NULL,
	[LevelDescription] [NVARCHAR](255) NULL,
	[MinimumScore] [NVARCHAR](35) NULL,
	[MaximumScore] [NVARCHAR](35) NULL,
	[LevelTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelInformation] PRIMARY KEY NONCLUSTERED
(
	[tid_RubricLevelInformation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelInformation] ADD CONSTRAINT [RubricLevelInformation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricLevelInformation] ADD CONSTRAINT [FK_RubricLevelInformation_ParentTable] FOREIGN KEY ([tid_RubricLevel])
REFERENCES [t_extension].[RubricLevel] ([tid_RubricLevel]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricLevelInformation] CHECK CONSTRAINT [FK_RubricLevelInformation_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the level of the rubric at which the data is captured.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricLevelInformation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelInformation', @level2type=N'COLUMN', @level2name=N'LevelTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the level of the rubric at which the data is captured.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelInformation', @level2type=N'COLUMN', @level2name=N'LevelTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the level of the rubric at which the data is captured.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelInformation', @level2type=N'COLUMN', @level2name=N'LevelDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score for the level of the rubic.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelInformation', @level2type=N'COLUMN', @level2name=N'MinimumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score for the level of the rubic.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelInformation', @level2type=N'COLUMN', @level2name=N'MaximumScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelInformation', @level2type=N'COLUMN', @level2name=N'LevelTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[RubricLevelTheme] ******/

CREATE TABLE [t_extension].[RubricLevelTheme]
(
	[tid_RubricLevelTheme] [INT] IDENTITY(1,1) NOT NULL,
    [tid_RubricLevel] [INT] NOT NULL,
	[ThemeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ThemeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelTheme] PRIMARY KEY NONCLUSTERED
(
	[tid_RubricLevelTheme] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelTheme] ADD CONSTRAINT [RubricLevelTheme_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricLevelTheme] ADD CONSTRAINT [FK_RubricLevelTheme_ParentTable] FOREIGN KEY ([tid_RubricLevel])
REFERENCES [t_extension].[RubricLevel] ([tid_RubricLevel]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricLevelTheme] CHECK CONSTRAINT [FK_RubricLevelTheme_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The theme of the specified level of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricLevelTheme';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelTheme', @level2type=N'COLUMN', @level2name=N'ThemeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelTheme', @level2type=N'COLUMN', @level2name=N'ThemeDescriptorNamespace';
GO
/****** TABLE: [t_extension].[RubricLevelResponse] ******/

CREATE TABLE [t_extension].[RubricLevelResponse]
(
    [tid_RubricLevelResponse] [INT] IDENTITY(1,1) NOT NULL,
	[PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL,
	[RubricEducationOrganizationId] [INT] NOT NULL,
	[RubricLevelCode] [NVARCHAR](20) NOT NULL,
	[RubricTitle] [NVARCHAR](60) NOT NULL,
	[RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[NumericResponse] [INT] NOT NULL,
	[TextResponse] [NVARCHAR](255) NULL,
	[AreaOfRefinement] [BIT] NULL,
	[AreaOfReinforcement] [BIT] NULL,
	[HalfIndicatorsScored] [BIT] NULL,
	[RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelResponse] PRIMARY KEY NONCLUSTERED
(
    [tid_RubricLevelResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelResponse] ADD CONSTRAINT [RubricLevelResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricLevelResponse] ADD CONSTRAINT [RubricLevelResponse_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[RubricLevelResponse] ADD CONSTRAINT [RubricLevelResponse_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the response to the rubric level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricLevelResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An assigned unique identifier for the performance measure instance.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'PerformanceMeasureIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'RubricEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'RubricLevelCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'RubricTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The score for the specified level of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'NumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text response(s) for the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'TextResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator that the rubric component is an area of refinement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'AreaOfRefinement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator that the rubric component is an area of reinforcement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'AreaOfReinforcement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates if at least 50% of indicators for each domain scored', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'HalfIndicatorsScored';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponse', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TRubricLevelResponse_Id ON [t_extension].[RubricLevelResponse]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[RubricLevelResponseSnapshotRecord] ******/

CREATE TABLE [t_extension].[RubricLevelResponseSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_RubricLevelResponse] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelResponseSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_RubricLevelResponse], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelResponseSnapshotRecord] ADD CONSTRAINT [FK_RubricLevelResponseSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricLevelResponseSnapshotRecord] CHECK CONSTRAINT [FK_RubricLevelResponseSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[RubricLevelResponseSnapshotRecord] ADD CONSTRAINT [FK_RubricLevelResponseSnapshotRecord_ParentTable] FOREIGN KEY ([tid_RubricLevelResponse])
REFERENCES [t_extension].[RubricLevelResponse] ([tid_RubricLevelResponse]);
ALTER TABLE [t_extension].[RubricLevelResponseSnapshotRecord] CHECK CONSTRAINT [FK_RubricLevelResponseSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[RubricLevelResponseFacts] ******/

CREATE TABLE [t_extension].[RubricLevelResponseFacts]
(
    [tid_RubricLevelResponseFacts] [INT] IDENTITY(1,1) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[RubricEducationOrganizationId] [INT] NOT NULL,
	[RubricLevelCode] [NVARCHAR](20) NOT NULL,
	[RubricTitle] [NVARCHAR](60) NOT NULL,
	[RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelResponseFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_RubricLevelResponseFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelResponseFacts] ADD CONSTRAINT [RubricLevelResponseFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricLevelResponseFacts] ADD CONSTRAINT [RubricLevelResponseFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[RubricLevelResponseFacts] ADD CONSTRAINT [RubricLevelResponseFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the rubric level response at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricLevelResponseFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated observation data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFacts', @level2type=N'COLUMN', @level2name=N'RubricEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFacts', @level2type=N'COLUMN', @level2name=N'RubricLevelCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFacts', @level2type=N'COLUMN', @level2name=N'RubricTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFacts', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFacts', @level2type=N'COLUMN', @level2name=N'RubricTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TRubricLevelResponseFacts_Id ON [t_extension].[RubricLevelResponseFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[RubricLevelResponseFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[RubricLevelResponseFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_RubricLevelResponseFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelResponseFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_RubricLevelResponseFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_RubricLevelResponseFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricLevelResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_RubricLevelResponseFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[RubricLevelResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_RubricLevelResponseFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_RubricLevelResponseFacts])
REFERENCES [t_extension].[RubricLevelResponseFacts] ([tid_RubricLevelResponseFacts]);
ALTER TABLE [t_extension].[RubricLevelResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_RubricLevelResponseFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse] ******/

CREATE TABLE [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse]
(
	[tid_RubricLevelResponseFactsAggregatedNumericResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_RubricLevelResponseFacts] [INT] NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricLevelResponseFactsAggregatedNumericResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_RubricLevelResponseFactsAggregatedNumericResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [RubricLevelResponseFactsAggregatedNumericResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [FK_RubricLevelResponseFactsAggregatedNumericResponse_ParentTable] FOREIGN KEY ([tid_RubricLevelResponseFacts])
REFERENCES [t_extension].[RubricLevelResponseFacts] ([tid_RubricLevelResponseFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse] CHECK CONSTRAINT [FK_RubricLevelResponseFactsAggregatedNumericResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Numeric response survey data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricLevelResponseFactsAggregatedNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricLevelResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO
/****** TABLE: [t_extension].[RubricTypeDescriptor] ******/

CREATE TABLE [t_extension].[RubricTypeDescriptor]
(
    [tid_RubricTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[RubricType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_RubricTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricTypeDescriptor] ADD CONSTRAINT [RubricTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricTypeDescriptor] ADD CONSTRAINT [RubricTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[RubricTypeDescriptor] ADD CONSTRAINT [RubricTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the rubric types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricTypeDescriptor', @level2type=N'COLUMN', @level2name=N'RubricType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TRubricTypeDescriptor_Id ON [t_extension].[RubricTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[RubricTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[RubricTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_RubricTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_RubricTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_RubricTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_RubricTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[RubricTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_RubricTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[RubricTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_RubricTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_RubricTypeDescriptor])
REFERENCES [t_extension].[RubricTypeDescriptor] ([tid_RubricTypeDescriptor]);
ALTER TABLE [t_extension].[RubricTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_RubricTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[RubricType] ******/

CREATE TABLE [t_extension].[RubricType]
(
	[tid_RubricType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_RubricType] PRIMARY KEY NONCLUSTERED
(
	[tid_RubricType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[RubricType] ADD CONSTRAINT [RubricType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[RubricType] ADD CONSTRAINT [RubricType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[RubricType] ADD CONSTRAINT [RubricType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the rubric types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'RubricType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Rubric type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Rubric type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'RubricType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[SalaryTypeDescriptor] ******/

CREATE TABLE [t_extension].[SalaryTypeDescriptor]
(
    [tid_SalaryTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[SalaryType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SalaryTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_SalaryTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SalaryTypeDescriptor] ADD CONSTRAINT [SalaryTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SalaryTypeDescriptor] ADD CONSTRAINT [SalaryTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SalaryTypeDescriptor] ADD CONSTRAINT [SalaryTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the type of salary that a staff member is receiving.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SalaryTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'SalaryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSalaryTypeDescriptor_Id ON [t_extension].[SalaryTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SalaryTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[SalaryTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SalaryTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SalaryTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SalaryTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SalaryTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SalaryTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SalaryTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SalaryTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SalaryTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SalaryTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SalaryTypeDescriptor])
REFERENCES [t_extension].[SalaryTypeDescriptor] ([tid_SalaryTypeDescriptor]);
ALTER TABLE [t_extension].[SalaryTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SalaryTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SalaryType] ******/

CREATE TABLE [t_extension].[SalaryType]
(
	[tid_SalaryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_SalaryType] PRIMARY KEY NONCLUSTERED
(
	[tid_SalaryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SalaryType] ADD CONSTRAINT [SalaryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SalaryType] ADD CONSTRAINT [SalaryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SalaryType] ADD CONSTRAINT [SalaryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the salary types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SalaryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Salary type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Salary type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SalaryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[SchoolStatusDescriptor] ******/

CREATE TABLE [t_extension].[SchoolStatusDescriptor]
(
    [tid_SchoolStatusDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[SchoolStatusType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolStatusDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_SchoolStatusDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SchoolStatusDescriptor] ADD CONSTRAINT [SchoolStatusDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SchoolStatusDescriptor] ADD CONSTRAINT [SchoolStatusDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SchoolStatusDescriptor] ADD CONSTRAINT [SchoolStatusDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the status of a school e.g. priority or focus.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SchoolStatusDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusDescriptor', @level2type=N'COLUMN', @level2name=N'SchoolStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSchoolStatusDescriptor_Id ON [t_extension].[SchoolStatusDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SchoolStatusDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[SchoolStatusDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SchoolStatusDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolStatusDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SchoolStatusDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SchoolStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SchoolStatusDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SchoolStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SchoolStatusDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SchoolStatusDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SchoolStatusDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SchoolStatusDescriptor])
REFERENCES [t_extension].[SchoolStatusDescriptor] ([tid_SchoolStatusDescriptor]);
ALTER TABLE [t_extension].[SchoolStatusDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SchoolStatusDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SchoolStatusType] ******/

CREATE TABLE [t_extension].[SchoolStatusType]
(
	[tid_SchoolStatusType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_SchoolStatusType] PRIMARY KEY NONCLUSTERED
(
	[tid_SchoolStatusType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SchoolStatusType] ADD CONSTRAINT [SchoolStatusType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SchoolStatusType] ADD CONSTRAINT [SchoolStatusType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SchoolStatusType] ADD CONSTRAINT [SchoolStatusType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the type of the school status.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SchoolStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolStatus type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SchoolStatus type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[SchoolStudentGrowthMeasure] ******/

CREATE TABLE [t_extension].[SchoolStudentGrowthMeasure]
(
    [tid_SchoolStudentGrowthMeasure] [INT] IDENTITY(1,1) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StudentGrowthActualScore] [INT] NOT NULL,
	[StudentGrowthMet] [BIT] NOT NULL,
	[StudentGrowthNCount] [INT] NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[PopulationCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PopulationSubCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[SupLowN] [BIT] NOT NULL,
	[SupressionFlag] [BIT] NOT NULL,
	[PopulationSubCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[PopulationCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolStudentGrowthMeasure] PRIMARY KEY NONCLUSTERED
(
    [tid_SchoolStudentGrowthMeasure] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SchoolStudentGrowthMeasure] ADD CONSTRAINT [SchoolStudentGrowthMeasure_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SchoolStudentGrowthMeasure] ADD CONSTRAINT [SchoolStudentGrowthMeasure_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SchoolStudentGrowthMeasure] ADD CONSTRAINT [SchoolStudentGrowthMeasure_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of students and their student growth as it pertains to a school', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SchoolStudentGrowthMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The actual score a group of students receives on their student growth assessment', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthActualScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies if the student has met the student growth target score', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthMet';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students included in the average score result.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'PopulationCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'PopulationSubCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Denotes reason for suppression', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'SupLowN';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Denotes if suppressed or not', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'SupressionFlag';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'PopulationSubCategoryDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'PopulationCategoryDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SchoolStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSchoolStudentGrowthMeasure_Id ON [t_extension].[SchoolStudentGrowthMeasure]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord] ******/

CREATE TABLE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SchoolStudentGrowthMeasure] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SchoolStudentGrowthMeasureSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SchoolStudentGrowthMeasure], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord] ADD CONSTRAINT [FK_SchoolStudentGrowthMeasureSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord] CHECK CONSTRAINT [FK_SchoolStudentGrowthMeasureSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord] ADD CONSTRAINT [FK_SchoolStudentGrowthMeasureSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SchoolStudentGrowthMeasure])
REFERENCES [t_extension].[SchoolStudentGrowthMeasure] ([tid_SchoolStudentGrowthMeasure]);
ALTER TABLE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord] CHECK CONSTRAINT [FK_SchoolStudentGrowthMeasureSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[SectionCourseTranscriptFacts] ******/

CREATE TABLE [t_extension].[SectionCourseTranscriptFacts]
(
    [tid_SectionCourseTranscriptFacts] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[CourseTitle] [NVARCHAR](60) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCourseTranscriptFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionCourseTranscriptFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionCourseTranscriptFacts] ADD CONSTRAINT [SectionCourseTranscriptFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionCourseTranscriptFacts] ADD CONSTRAINT [SectionCourseTranscriptFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SectionCourseTranscriptFacts] ADD CONSTRAINT [SectionCourseTranscriptFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final grade earned of the group.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionCourseTranscriptFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final letter grade earned of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionCourseTranscriptFacts_Id ON [t_extension].[SectionCourseTranscriptFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SectionCourseTranscriptFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionCourseTranscriptFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCourseTranscriptFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionCourseTranscriptFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionCourseTranscriptFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionCourseTranscriptFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionCourseTranscriptFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionCourseTranscriptFacts])
REFERENCES [t_extension].[SectionCourseTranscriptFacts] ([tid_SectionCourseTranscriptFacts]);
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionCourseTranscriptFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled]
(
	[tid_SectionCourseTranscriptFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionCourseTranscriptFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCourseTranscriptFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionCourseTranscriptFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled] ADD CONSTRAINT [SectionCourseTranscriptFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled] ADD CONSTRAINT [FK_SectionCourseTranscriptFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_SectionCourseTranscriptFacts])
REFERENCES [t_extension].[SectionCourseTranscriptFacts] ([tid_SectionCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled] CHECK CONSTRAINT [FK_SectionCourseTranscriptFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionCourseTranscriptFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
(
	[tid_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionCourseTranscriptFacts] [INT] NOT NULL,
	[FinalLetterGrade] [NVARCHAR](20) NOT NULL,
	[LetterGradeTypeNumber] [INT] NULL,
	[LetterGradeTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ADD CONSTRAINT [SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ADD CONSTRAINT [FK_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned_ParentTable] FOREIGN KEY ([tid_SectionCourseTranscriptFacts])
REFERENCES [t_extension].[SectionCourseTranscriptFacts] ([tid_SectionCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] CHECK CONSTRAINT [FK_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the final letter grade earned of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'FinalLetterGrade';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students receiving a letter grade by letter grade type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'LetterGradeTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students receiving a letter grade by type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned', @level2type=N'COLUMN', @level2name=N'LetterGradeTypePercentage';
GO

/****** TABLE: [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned]
(
	[tid_SectionCourseTranscriptFactsAggregatedNumericGradeEarned] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionCourseTranscriptFacts] [INT] NOT NULL,
	[AverageFinalNumericGradeEarned] [DECIMAL](9, 2) NOT NULL,
	[NumericGradeNCount] [INT] NULL,
	[NumericGradeStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionCourseTranscriptFactsAggregatedNumericGradeEarned] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionCourseTranscriptFactsAggregatedNumericGradeEarned] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned] ADD CONSTRAINT [SectionCourseTranscriptFactsAggregatedNumericGradeEarned_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned] ADD CONSTRAINT [FK_SectionCourseTranscriptFactsAggregatedNumericGradeEarned_ParentTable] FOREIGN KEY ([tid_SectionCourseTranscriptFacts])
REFERENCES [t_extension].[SectionCourseTranscriptFacts] ([tid_SectionCourseTranscriptFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned] CHECK CONSTRAINT [FK_SectionCourseTranscriptFactsAggregatedNumericGradeEarned_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the numeric grade received by the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionCourseTranscriptFactsAggregatedNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average final numeric grade for the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'AverageFinalNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'NumericGradeNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionCourseTranscriptFactsAggregatedNumericGradeEarned', @level2type=N'COLUMN', @level2name=N'NumericGradeStandardDeviation';
GO
/****** TABLE: [t_extension].[SectionStudentAcademicRecordFacts] ******/

CREATE TABLE [t_extension].[SectionStudentAcademicRecordFacts]
(
    [tid_SectionStudentAcademicRecordFacts] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[AggregatedGPAMax] [DECIMAL](18, 4) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAcademicRecordFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionStudentAcademicRecordFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAcademicRecordFacts] ADD CONSTRAINT [SectionStudentAcademicRecordFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFacts] ADD CONSTRAINT [SectionStudentAcademicRecordFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFacts] ADD CONSTRAINT [SectionStudentAcademicRecordFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of students and their academic record.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAcademicRecordFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum GPA a student can earn for the section', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'AggregatedGPAMax';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionStudentAcademicRecordFacts_Id ON [t_extension].[SectionStudentAcademicRecordFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionStudentAcademicRecordFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAcademicRecordFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionStudentAcademicRecordFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionStudentAcademicRecordFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionStudentAcademicRecordFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionStudentAcademicRecordFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionStudentAcademicRecordFacts])
REFERENCES [t_extension].[SectionStudentAcademicRecordFacts] ([tid_SectionStudentAcademicRecordFacts]);
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionStudentAcademicRecordFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled]
(
	[tid_SectionStudentAcademicRecordFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentAcademicRecordFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAcademicRecordFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentAcademicRecordFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled] ADD CONSTRAINT [SectionStudentAcademicRecordFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled] ADD CONSTRAINT [FK_SectionStudentAcademicRecordFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_SectionStudentAcademicRecordFacts])
REFERENCES [t_extension].[SectionStudentAcademicRecordFacts] ([tid_SectionStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled] CHECK CONSTRAINT [FK_SectionStudentAcademicRecordFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAcademicRecordFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
(
	[tid_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentAcademicRecordFacts] [INT] NOT NULL,
	[GradePointAverage] [DECIMAL](18, 4) NOT NULL,
	[GradePointNCount] [INT] NULL,
	[GradePointStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ADD CONSTRAINT [SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ADD CONSTRAINT [FK_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_ParentTable] FOREIGN KEY ([tid_SectionStudentAcademicRecordFacts])
REFERENCES [t_extension].[SectionStudentAcademicRecordFacts] ([tid_SectionStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] CHECK CONSTRAINT [FK_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the cumulative grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average cumulative grade point average for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average grade point for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointStandardDeviation';
GO

/****** TABLE: [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
(
	[tid_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentAcademicRecordFacts] [INT] NOT NULL,
	[GradePointAverage] [DECIMAL](18, 4) NOT NULL,
	[GradePointNCount] [INT] NULL,
	[GradePointStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ADD CONSTRAINT [SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ADD CONSTRAINT [FK_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage_ParentTable] FOREIGN KEY ([tid_SectionStudentAcademicRecordFacts])
REFERENCES [t_extension].[SectionStudentAcademicRecordFacts] ([tid_SectionStudentAcademicRecordFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] CHECK CONSTRAINT [FK_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the cumulative grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average cumulative grade point average for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average grade point for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average grade point for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage', @level2type=N'COLUMN', @level2name=N'GradePointStandardDeviation';
GO
/****** TABLE: [t_extension].[SectionStudentAssessmentFacts] ******/

CREATE TABLE [t_extension].[SectionStudentAssessmentFacts]
(
    [tid_SectionStudentAssessmentFacts] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TakenSchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[AssessmentTitle] [NVARCHAR](60) NULL,
	[AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AdministrationDate] [DATE] NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL,
	[AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAssessmentFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionStudentAssessmentFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAssessmentFacts] ADD CONSTRAINT [SectionStudentAssessmentFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAssessmentFacts] ADD CONSTRAINT [SectionStudentAssessmentFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SectionStudentAssessmentFacts] ADD CONSTRAINT [SectionStudentAssessmentFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This domain entity collects data for aggregated level students with whom the teacher candidate is associated through field work or student teaching.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAssessmentFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the assessment was taken', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TakenSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of any specific assessment given to a group.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date a specific assessment was administered to a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AdministrationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionStudentAssessmentFacts_Id ON [t_extension].[SectionStudentAssessmentFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SectionStudentAssessmentFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionStudentAssessmentFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAssessmentFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionStudentAssessmentFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionStudentAssessmentFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionStudentAssessmentFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionStudentAssessmentFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionStudentAssessmentFacts])
REFERENCES [t_extension].[SectionStudentAssessmentFacts] ([tid_SectionStudentAssessmentFacts]);
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionStudentAssessmentFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled]
(
	[tid_SectionStudentAssessmentFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentAssessmentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAssessmentFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentAssessmentFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled] ADD CONSTRAINT [SectionStudentAssessmentFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled] ADD CONSTRAINT [FK_SectionStudentAssessmentFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_SectionStudentAssessmentFacts])
REFERENCES [t_extension].[SectionStudentAssessmentFacts] ([tid_SectionStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled] CHECK CONSTRAINT [FK_SectionStudentAssessmentFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAssessmentFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult]
(
	[tid_SectionStudentAssessmentFactsAggregatedScoreResult] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentAssessmentFacts] [INT] NOT NULL,
	[AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL,
	[AverageScoreResultDatatypeType] [NVARCHAR](450) NOT NULL,
	[AverageScoreResult] [NVARCHAR](35) NOT NULL,
	[ScoreNCount] [INT] NULL,
	[ScoreStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAssessmentFactsAggregatedScoreResult] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentAssessmentFactsAggregatedScoreResult] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult] ADD CONSTRAINT [SectionStudentAssessmentFactsAggregatedScoreResult_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult] ADD CONSTRAINT [FK_SectionStudentAssessmentFactsAggregatedScoreResult_ParentTable] FOREIGN KEY ([tid_SectionStudentAssessmentFacts])
REFERENCES [t_extension].[SectionStudentAssessmentFacts] ([tid_SectionStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult] CHECK CONSTRAINT [FK_SectionStudentAssessmentFactsAggregatedScoreResult_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the score from an assessment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAssessmentFactsAggregatedScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AverageScoreResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful average score or statistical expression of the performance of an group. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'AverageScoreResult';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average assessment score for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'ScoreNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average assessment score for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedScoreResult', @level2type=N'COLUMN', @level2name=N'ScoreStandardDeviation';
GO

/****** TABLE: [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel]
(
	[tid_SectionStudentAssessmentFactsAggregatedPerformanceLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentAssessmentFacts] [INT] NOT NULL,
	[PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[PerformanceLevelMetNumber] [INT] NULL,
	[PerformanceLevelMetPercentage] [DECIMAL](5, 4) NULL,
	[PerformanceLevelTypeNumber] [INT] NULL,
	[PerformanceLevelTypePercentage] [DECIMAL](5, 4) NULL,
	[PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentAssessmentFactsAggregatedPerformanceLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentAssessmentFactsAggregatedPerformanceLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel] ADD CONSTRAINT [SectionStudentAssessmentFactsAggregatedPerformanceLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel] ADD CONSTRAINT [FK_SectionStudentAssessmentFactsAggregatedPerformanceLevel_ParentTable] FOREIGN KEY ([tid_SectionStudentAssessmentFacts])
REFERENCES [t_extension].[SectionStudentAssessmentFacts] ([tid_SectionStudentAssessmentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel] CHECK CONSTRAINT [FK_SectionStudentAssessmentFactsAggregatedPerformanceLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the performance level for an assessment of a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentAssessmentFactsAggregatedPerformanceLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who met the performance level', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMetNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who met the performance level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMetPercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who achieved each performance level by performance level type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who achieved performance level by each performance level type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelTypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentAssessmentFactsAggregatedPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorNamespace';
GO
/****** TABLE: [t_extension].[SectionStudentFacts] ******/

CREATE TABLE [t_extension].[SectionStudentFacts]
(
    [tid_SectionStudentFacts] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionStudentFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFacts] ADD CONSTRAINT [SectionStudentFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFacts] ADD CONSTRAINT [SectionStudentFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SectionStudentFacts] ADD CONSTRAINT [SectionStudentFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This domain entity collects data for aggregated level students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionStudentFacts_Id ON [t_extension].[SectionStudentFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SectionStudentFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[SectionStudentFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionStudentFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionStudentFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionStudentFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SectionStudentFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionStudentFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]);
ALTER TABLE [t_extension].[SectionStudentFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionStudentFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SectionStudentFactsStudentsEnrolled] ******/

CREATE TABLE [t_extension].[SectionStudentFactsStudentsEnrolled]
(
	[tid_SectionStudentFactsStudentsEnrolled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[NumberStudentsEnrolled] [INT] NULL,
	[PercentAtRisk] [DECIMAL](5, 4) NULL,
	[PercentMobility] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsStudentsEnrolled] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsStudentsEnrolled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsStudentsEnrolled] ADD CONSTRAINT [SectionStudentFactsStudentsEnrolled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsStudentsEnrolled] ADD CONSTRAINT [FK_SectionStudentFactsStudentsEnrolled_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsStudentsEnrolled] CHECK CONSTRAINT [FK_SectionStudentFactsStudentsEnrolled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the number of students enrolled', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students enrolled in the respective Section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'NumberStudentsEnrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of students who have been identified as at risk.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentAtRisk';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have moved at least once during the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsStudentsEnrolled', @level2type=N'COLUMN', @level2name=N'PercentMobility';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedSex] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedSex]
(
	[tid_SectionStudentFactsAggregatedSex] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[SexTypeNumber] [INT] NULL,
	[SexTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedSex] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedSex] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSex] ADD CONSTRAINT [SectionStudentFactsAggregatedSex_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSex] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedSex_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSex] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedSex_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the sex of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedSex';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each sex type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by each sex type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSex', @level2type=N'COLUMN', @level2name=N'SexTypePercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedGender] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedGender]
(
	[tid_SectionStudentFactsAggregatedGender] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[GenderType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[GenderTypeNumber] [INT] NULL,
	[GenderTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedGender] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedGender] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedGender] ADD CONSTRAINT [SectionStudentFactsAggregatedGender_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedGender] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedGender_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedGender] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedGender_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the gender', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedGender';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who identify by each gender type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who associate with each gender type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedGender', @level2type=N'COLUMN', @level2name=N'GenderTypePercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity]
(
	[tid_SectionStudentFactsAggregatedHispanicLatinoEthnicity] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[HispanicLatinoEthnicity] [BIT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[HispanicLatinoEthnicityNumber] [INT] NULL,
	[HispanicLatinoEthnicityPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedHispanicLatinoEthnicity] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedHispanicLatinoEthnicity] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity] ADD CONSTRAINT [SectionStudentFactsAggregatedHispanicLatinoEthnicity_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedHispanicLatinoEthnicity_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedHispanicLatinoEthnicity_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ethnicity of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedHispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are hispanic/latino', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicityNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as hispanic/latino.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedHispanicLatinoEthnicity', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicityPercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedRace] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedRace]
(
	[tid_SectionStudentFactsAggregatedRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[RaceTypeNumber] [INT] NULL,
	[RaceTypePercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedRace] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedRace] ADD CONSTRAINT [SectionStudentFactsAggregatedRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedRace] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedRace_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedRace] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the race of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each race type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by each race type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedRace', @level2type=N'COLUMN', @level2name=N'RaceTypePercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility]
(
	[tid_SectionStudentFactsAggregatedSchoolFoodServicesEligibility] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TypeNumber] [INT] NULL,
	[TypePercentage] [INT] NULL,
	[SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedSchoolFoodServicesEligibility] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedSchoolFoodServicesEligibility] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility] ADD CONSTRAINT [SectionStudentFactsAggregatedSchoolFoodServicesEligibility_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedSchoolFoodServicesEligibility_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedSchoolFoodServicesEligibility_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies if the student is eligible for Free and Reduce Price Lunch', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedSchoolFoodServicesEligibility';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students eligibile for SchoolFoodServicesEligibility by category', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'TypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are eligible for SchoolFoodServicesEligibility by type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'TypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSchoolFoodServicesEligibility', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedLanguage] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedLanguage]
(
	[tid_SectionStudentFactsAggregatedLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[LanguageTypeNumber] [INT] NULL,
	[LanguageTypePercentage] [DECIMAL](5, 4) NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedLanguage] ADD CONSTRAINT [SectionStudentFactsAggregatedLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedLanguage] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedLanguage_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedLanguage] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The data about the language', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students by each language type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageTypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students by language type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageTypePercentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedByDisability] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedByDisability]
(
	[tid_SectionStudentFactsAggregatedByDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TypeNumber] [INT] NULL,
	[Percentage] [DECIMAL](5, 4) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedByDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedByDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedByDisability] ADD CONSTRAINT [SectionStudentFactsAggregatedByDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedByDisability] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedByDisability_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedByDisability] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedByDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the disability of a group aggregated by course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedByDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of student who have a disability by disability type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'TypeNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who have a disability by each specific disability type', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'Percentage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedByDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled]
(
	[tid_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[StudentsDisabledNumber] [INT] NULL,
	[StudentsDisabledPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] ADD CONSTRAINT [SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the disability of a group aggregated by course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who have a disability.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'StudentsDisabledNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Percentage of students who have a disability', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled', @level2type=N'COLUMN', @level2name=N'StudentsDisabledPercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedELLEnrollment] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedELLEnrollment]
(
	[tid_SectionStudentFactsAggregatedELLEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[ELLEnrollmentNumber] [INT] NULL,
	[ELLEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedELLEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedELLEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedELLEnrollment] ADD CONSTRAINT [SectionStudentFactsAggregatedELLEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedELLEnrollment] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedELLEnrollment_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedELLEnrollment] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedELLEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ELL enrollment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedELLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are ELL.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ELLEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as ELL', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedELLEnrollment', @level2type=N'COLUMN', @level2name=N'ELLEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedESLEnrollment] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedESLEnrollment]
(
	[tid_SectionStudentFactsAggregatedESLEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[ESLEnrollmentNumber] [INT] NULL,
	[ESLEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedESLEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedESLEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedESLEnrollment] ADD CONSTRAINT [SectionStudentFactsAggregatedESLEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedESLEnrollment] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedESLEnrollment_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedESLEnrollment] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedESLEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the ESL enrollment of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedESLEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are ESL.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ESLEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are identified as ESL', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedESLEnrollment', @level2type=N'COLUMN', @level2name=N'ESLEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedSection504Enrollment] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedSection504Enrollment]
(
	[tid_SectionStudentFactsAggregatedSection504Enrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[Number504Enrolled] [INT] NULL,
	[Percentage504Enrolled] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedSection504Enrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedSection504Enrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSection504Enrollment] ADD CONSTRAINT [SectionStudentFactsAggregatedSection504Enrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSection504Enrollment] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedSection504Enrollment_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSection504Enrollment] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedSection504Enrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedSection504Enrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'Number504Enrolled';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are enrolled in a 504 program', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSection504Enrollment', @level2type=N'COLUMN', @level2name=N'Percentage504Enrolled';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedSPED] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedSPED]
(
	[tid_SectionStudentFactsAggregatedSPED] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[SPEDEnrollmentNumber] [INT] NULL,
	[SPEDEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedSPED] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedSPED] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSPED] ADD CONSTRAINT [SectionStudentFactsAggregatedSPED_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSPED] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedSPED_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedSPED] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedSPED_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in SPED of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedSPED';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students enrolled in SPED', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'SPEDEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students enrolled in a SPED program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedSPED', @level2type=N'COLUMN', @level2name=N'SPEDEnrollmentPercentage';
GO

/****** TABLE: [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment] ******/

CREATE TABLE [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment]
(
	[tid_SectionStudentFactsAggregatedTitleIEnrollment] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionStudentFacts] [INT] NOT NULL,
	[ValueType] [NVARCHAR](450) NULL,
	[TitleIEnrollmentNumber] [INT] NULL,
	[TitleIEnrollmentPercentage] [DECIMAL](5, 4) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionStudentFactsAggregatedTitleIEnrollment] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionStudentFactsAggregatedTitleIEnrollment] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment] ADD CONSTRAINT [SectionStudentFactsAggregatedTitleIEnrollment_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment] ADD CONSTRAINT [FK_SectionStudentFactsAggregatedTitleIEnrollment_ParentTable] FOREIGN KEY ([tid_SectionStudentFacts])
REFERENCES [t_extension].[SectionStudentFacts] ([tid_SectionStudentFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment] CHECK CONSTRAINT [FK_SectionStudentFactsAggregatedTitleIEnrollment_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Data about the enrollment in Title I of the group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionStudentFactsAggregatedTitleIEnrollment';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students eligible for Title I', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'TitleIEnrollmentNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of students who are Title I eligible.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionStudentFactsAggregatedTitleIEnrollment', @level2type=N'COLUMN', @level2name=N'TitleIEnrollmentPercentage';
GO
/****** TABLE: [t_extension].[SectionSurveyQuestionResponseFacts] ******/

CREATE TABLE [t_extension].[SectionSurveyQuestionResponseFacts]
(
    [tid_SectionSurveyQuestionResponseFacts] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[QuestionCode] [NVARCHAR](20) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveyQuestionResponseFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionSurveyQuestionResponseFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFacts] ADD CONSTRAINT [SectionSurveyQuestionResponseFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFacts] ADD CONSTRAINT [SectionSurveyQuestionResponseFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFacts] ADD CONSTRAINT [SectionSurveyQuestionResponseFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Survey question response data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionSurveyQuestionResponseFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'QuestionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionSurveyQuestionResponseFacts_Id ON [t_extension].[SectionSurveyQuestionResponseFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionSurveyQuestionResponseFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveyQuestionResponseFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionSurveyQuestionResponseFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionSurveyQuestionResponseFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionSurveyQuestionResponseFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionSurveyQuestionResponseFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionSurveyQuestionResponseFacts])
REFERENCES [t_extension].[SectionSurveyQuestionResponseFacts] ([tid_SectionSurveyQuestionResponseFacts]);
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionSurveyQuestionResponseFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse]
(
	[tid_SectionSurveyQuestionResponseFactsAggregatedNumericResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionSurveyQuestionResponseFacts] [INT] NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveyQuestionResponseFactsAggregatedNumericResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionSurveyQuestionResponseFactsAggregatedNumericResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [SectionSurveyQuestionResponseFactsAggregatedNumericResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse] ADD CONSTRAINT [FK_SectionSurveyQuestionResponseFactsAggregatedNumericResponse_ParentTable] FOREIGN KEY ([tid_SectionSurveyQuestionResponseFacts])
REFERENCES [t_extension].[SectionSurveyQuestionResponseFacts] ([tid_SectionSurveyQuestionResponseFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse] CHECK CONSTRAINT [FK_SectionSurveyQuestionResponseFactsAggregatedNumericResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Numeric response survey data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionSurveyQuestionResponseFactsAggregatedNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO

/****** TABLE: [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
(
	[tid_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionSurveyQuestionResponseFacts] [INT] NOT NULL,
	[AggregatedMatrixElement] [NVARCHAR](50) NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [FK_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_ParentTable] FOREIGN KEY ([tid_SectionSurveyQuestionResponseFacts])
REFERENCES [t_extension].[SectionSurveyQuestionResponseFacts] ([tid_SectionSurveyQuestionResponseFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] CHECK CONSTRAINT [FK_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Matrix element response survey data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For aggregated matrix questions, the text identifying each row of the matrix.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'AggregatedMatrixElement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO
/****** TABLE: [t_extension].[SectionSurveyResponseFacts] ******/

CREATE TABLE [t_extension].[SectionSurveyResponseFacts]
(
    [tid_SectionSurveyResponseFacts] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveyResponseFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionSurveyResponseFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveyResponseFacts] ADD CONSTRAINT [SectionSurveyResponseFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionSurveyResponseFacts] ADD CONSTRAINT [SectionSurveyResponseFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SectionSurveyResponseFacts] ADD CONSTRAINT [SectionSurveyResponseFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Survey response data provided at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionSurveyResponseFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveyResponseFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionSurveyResponseFacts_Id ON [t_extension].[SectionSurveyResponseFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SectionSurveyResponseFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionSurveyResponseFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveyResponseFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionSurveyResponseFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveyResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionSurveyResponseFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionSurveyResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionSurveyResponseFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SectionSurveyResponseFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionSurveyResponseFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionSurveyResponseFacts])
REFERENCES [t_extension].[SectionSurveyResponseFacts] ([tid_SectionSurveyResponseFacts]);
ALTER TABLE [t_extension].[SectionSurveyResponseFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionSurveyResponseFactsSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[SectionSurveySectionResponseRatingFacts] ******/

CREATE TABLE [t_extension].[SectionSurveySectionResponseRatingFacts]
(
    [tid_SectionSurveySectionResponseRatingFacts] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactsAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveySectionTitle] [NVARCHAR](50) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveySectionResponseRatingFacts] PRIMARY KEY NONCLUSTERED
(
    [tid_SectionSurveySectionResponseRatingFacts] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFacts] ADD CONSTRAINT [SectionSurveySectionResponseRatingFacts_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFacts] ADD CONSTRAINT [SectionSurveySectionResponseRatingFacts_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFacts] ADD CONSTRAINT [SectionSurveySectionResponseRatingFacts_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Responses to survey sections collected at the aggregate level.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionSurveySectionResponseRatingFacts';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The as-of-date for the aggregated survey data.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'FactsAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or label for the survey section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'SurveySectionTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFacts', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSectionSurveySectionResponseRatingFacts_Id ON [t_extension].[SectionSurveySectionResponseRatingFacts]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord] ******/

CREATE TABLE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SectionSurveySectionResponseRatingFacts] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveySectionResponseRatingFactsSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SectionSurveySectionResponseRatingFacts], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionSurveySectionResponseRatingFactsSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionSurveySectionResponseRatingFactsSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord] ADD CONSTRAINT [FK_SectionSurveySectionResponseRatingFactsSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SectionSurveySectionResponseRatingFacts])
REFERENCES [t_extension].[SectionSurveySectionResponseRatingFacts] ([tid_SectionSurveySectionResponseRatingFacts]);
ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord] CHECK CONSTRAINT [FK_SectionSurveySectionResponseRatingFactsSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE TABLE [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse]
(
	[tid_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SectionSurveySectionResponseRatingFacts] [INT] NOT NULL,
	[AverageNumericResponse] [DECIMAL](18, 4) NOT NULL,
	[NumericResponseNCount] [INT] NULL,
	[NumericResponseStandardDeviation] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] ADD CONSTRAINT [SectionSurveySectionResponseRatingFactsAggregatedNumericResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] ADD CONSTRAINT [FK_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse_ParentTable] FOREIGN KEY ([tid_SectionSurveySectionResponseRatingFacts])
REFERENCES [t_extension].[SectionSurveySectionResponseRatingFacts] ([tid_SectionSurveySectionResponseRatingFacts]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] CHECK CONSTRAINT [FK_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information about the numeric response for an aggregated survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SectionSurveySectionResponseRatingFactsAggregatedNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The average numeric response for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'AverageNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of data values in set of data that makes up the average numeric grade for a group', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure used to quantify the amount of variation or dispersion of a set of data values, in this case specific to the average numeric grade for a group of students', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SectionSurveySectionResponseRatingFactsAggregatedNumericResponse', @level2type=N'COLUMN', @level2name=N'NumericResponseStandardDeviation';
GO
/****** TABLE: [t_extension].[StaffFieldworkAbsenceEvent] ******/

CREATE TABLE [t_extension].[StaffFieldworkAbsenceEvent]
(
    [tid_StaffFieldworkAbsenceEvent] [INT] IDENTITY(1,1) NOT NULL,
	[AbsenceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[AbsenceEventReason] [NVARCHAR](40) NULL,
	[HoursAbsent] [DECIMAL](3, 2) NULL,
	[AbsenceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffFieldworkAbsenceEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffFieldworkAbsenceEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffFieldworkAbsenceEvent] ADD CONSTRAINT [StaffFieldworkAbsenceEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffFieldworkAbsenceEvent] ADD CONSTRAINT [StaffFieldworkAbsenceEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffFieldworkAbsenceEvent] ADD CONSTRAINT [StaffFieldworkAbsenceEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the staff absence', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffFieldworkAbsenceEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'AbsenceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this absence event', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the staff absence', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'AbsenceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The hours the staff was absence if not the entire working day', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'HoursAbsent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'AbsenceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffFieldworkAbsenceEvent_Id ON [t_extension].[StaffFieldworkAbsenceEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffFieldworkAbsenceEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffFieldworkAbsenceEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffFieldworkAbsenceEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord] ADD CONSTRAINT [FK_StaffFieldworkAbsenceEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord] CHECK CONSTRAINT [FK_StaffFieldworkAbsenceEventSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord] ADD CONSTRAINT [FK_StaffFieldworkAbsenceEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffFieldworkAbsenceEvent])
REFERENCES [t_extension].[StaffFieldworkAbsenceEvent] ([tid_StaffFieldworkAbsenceEvent]);
ALTER TABLE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord] CHECK CONSTRAINT [FK_StaffFieldworkAbsenceEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[StaffFieldworkExperience] ******/

CREATE TABLE [t_extension].[StaffFieldworkExperience]
(
    [tid_StaffFieldworkExperience] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[FieldworkExperienceSchoolId] [INT] NOT NULL,
	[FieldworkIdentifier] [NVARCHAR](20) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NULL,
	[SequenceOfCourse] [INT] NULL,
	[LocalCourseCode] [NVARCHAR](60) NULL,
	[SchoolYear] [SMALLINT] NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[SchoolId] [INT] NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NULL,
	[ClassPeriodName] [NVARCHAR](20) NULL,
	[FieldworkTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[HoursPerWeek] [DECIMAL](5, 2) NULL,
	[EndDate] [DATE] NULL,
	[ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL,
	[FieldworkTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffFieldworkExperience] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffFieldworkExperience] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffFieldworkExperience] ADD CONSTRAINT [StaffFieldworkExperience_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffFieldworkExperience] ADD CONSTRAINT [StaffFieldworkExperience_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffFieldworkExperience] ADD CONSTRAINT [StaffFieldworkExperience_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information regarding a postsecondary instructional course in a particular field of study that typically involves a prescribed number or instruction periods or meetings for enrolled students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffFieldworkExperience';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the staff first starts fieldwork.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkExperienceSchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier for the fieldwork experience', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of hours per week for fieldwork.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'HoursPerWeek';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the staff ends fieldwork.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperience', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffFieldworkExperience_Id ON [t_extension].[StaffFieldworkExperience]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffFieldworkExperienceSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffFieldworkExperienceSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffFieldworkExperience] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffFieldworkExperienceSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffFieldworkExperience], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffFieldworkExperienceSnapshotRecord] ADD CONSTRAINT [FK_StaffFieldworkExperienceSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffFieldworkExperienceSnapshotRecord] CHECK CONSTRAINT [FK_StaffFieldworkExperienceSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffFieldworkExperienceSnapshotRecord] ADD CONSTRAINT [FK_StaffFieldworkExperienceSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffFieldworkExperience])
REFERENCES [t_extension].[StaffFieldworkExperience] ([tid_StaffFieldworkExperience]);
ALTER TABLE [t_extension].[StaffFieldworkExperienceSnapshotRecord] CHECK CONSTRAINT [FK_StaffFieldworkExperienceSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[StaffFieldworkExperienceCoteaching] ******/

CREATE TABLE [t_extension].[StaffFieldworkExperienceCoteaching]
(
	[tid_StaffFieldworkExperienceCoteaching] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffFieldworkExperience] [INT] NOT NULL,
	[CoteachingBeginDate] [DATE] NOT NULL,
	[CoteachingEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffFieldworkExperienceCoteaching] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffFieldworkExperienceCoteaching] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffFieldworkExperienceCoteaching] ADD CONSTRAINT [StaffFieldworkExperienceCoteaching_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffFieldworkExperienceCoteaching] ADD CONSTRAINT [FK_StaffFieldworkExperienceCoteaching_ParentTable] FOREIGN KEY ([tid_StaffFieldworkExperience])
REFERENCES [t_extension].[StaffFieldworkExperience] ([tid_StaffFieldworkExperience]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffFieldworkExperienceCoteaching] CHECK CONSTRAINT [FK_StaffFieldworkExperienceCoteaching_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The act of two teachers (teacher candidate and cooperating teacher) working together with groups of students; sharing the planning, organization, delivery, and assessment of instruction, as well as the physical space.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffFieldworkExperienceCoteaching';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate first starts co-teaching.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperienceCoteaching', @level2type=N'COLUMN', @level2name=N'CoteachingBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate stopped co-teaching.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffFieldworkExperienceCoteaching', @level2type=N'COLUMN', @level2name=N'CoteachingEndDate';
GO
/****** TABLE: [t_extension].[StaffProfessionalDevelopmentEventAttendance] ******/

CREATE TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendance]
(
    [tid_StaffProfessionalDevelopmentEventAttendance] [INT] IDENTITY(1,1) NOT NULL,
	[AttendanceDate] [DATE] NOT NULL,
	[ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AttendanceEventReason] [NVARCHAR](40) NULL,
	[AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffProfessionalDevelopmentEventAttendance] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffProfessionalDevelopmentEventAttendance] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [StaffProfessionalDevelopmentEventAttendance_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [StaffProfessionalDevelopmentEventAttendance_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [StaffProfessionalDevelopmentEventAttendance_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a staff is in attendance for professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffProfessionalDevelopmentEventAttendance';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name for a professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a teacher candidate''s absence.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffProfessionalDevelopmentEventAttendance_Id ON [t_extension].[StaffProfessionalDevelopmentEventAttendance]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffProfessionalDevelopmentEventAttendance] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffProfessionalDevelopmentEventAttendanceSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffProfessionalDevelopmentEventAttendance], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord] ADD CONSTRAINT [FK_StaffProfessionalDevelopmentEventAttendanceSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord] CHECK CONSTRAINT [FK_StaffProfessionalDevelopmentEventAttendanceSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord] ADD CONSTRAINT [FK_StaffProfessionalDevelopmentEventAttendanceSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffProfessionalDevelopmentEventAttendance])
REFERENCES [t_extension].[StaffProfessionalDevelopmentEventAttendance] ([tid_StaffProfessionalDevelopmentEventAttendance]);
ALTER TABLE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord] CHECK CONSTRAINT [FK_StaffProfessionalDevelopmentEventAttendanceSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[StaffStudentGrowthMeasure] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasure]
(
    [tid_StaffStudentGrowthMeasure] [INT] IDENTITY(1,1) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[StudentGrowthMeasureDate] [DATE] NULL,
	[ResultDatatypeType] [NVARCHAR](450) NULL,
	[StudentGrowthTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[StudentGrowthTargetScore] [INT] NULL,
	[StudentGrowthActualScore] [INT] NOT NULL,
	[StudentGrowthMet] [BIT] NOT NULL,
	[StudentGrowthNCount] [INT] NULL,
	[StudentGrowthTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasure] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffStudentGrowthMeasure] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasure] ADD CONSTRAINT [StaffStudentGrowthMeasure_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasure] ADD CONSTRAINT [StaffStudentGrowthMeasure_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasure] ADD CONSTRAINT [StaffStudentGrowthMeasure_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of students and their student growth as it pertains to the Teacher Candidate', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffStudentGrowthMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the student growth is measured', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthMeasureDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The target score that has been set for the group of students as it pertains to their student growth.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthTargetScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The actual score a group of students receives on their student growth assessment', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthActualScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies if the student has met the student growth target score', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthMet';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students included in the average score result.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffStudentGrowthMeasure_Id ON [t_extension].[StaffStudentGrowthMeasure]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffStudentGrowthMeasureSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffStudentGrowthMeasure] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasureSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffStudentGrowthMeasure], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffStudentGrowthMeasure])
REFERENCES [t_extension].[StaffStudentGrowthMeasure] ([tid_StaffStudentGrowthMeasure]);
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[StaffStudentGrowthMeasureCourseAssociation] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociation]
(
    [tid_StaffStudentGrowthMeasureCourseAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasureCourseAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffStudentGrowthMeasureCourseAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureCourseAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureCourseAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureCourseAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Any courses associated with the staff''s student growth data, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffStudentGrowthMeasureCourseAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffStudentGrowthMeasureCourseAssociation_Id ON [t_extension].[StaffStudentGrowthMeasureCourseAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffStudentGrowthMeasureCourseAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasureCourseAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffStudentGrowthMeasureCourseAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureCourseAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureCourseAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureCourseAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffStudentGrowthMeasureCourseAssociation])
REFERENCES [t_extension].[StaffStudentGrowthMeasureCourseAssociation] ([tid_StaffStudentGrowthMeasureCourseAssociation]);
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureCourseAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation]
(
    [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasureEducationOrganizationAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureEducationOrganizationAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureEducationOrganizationAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureEducationOrganizationAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Any education organizations associated with the staff''s student growth data, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffStudentGrowthMeasureEducationOrganizationAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffStudentGrowthMeasureEducationOrganizationAssociation_Id ON [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffStudentGrowthMeasureEducationOrganizationAssociation])
REFERENCES [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] ([tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]);
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[StaffStudentGrowthMeasureSectionAssociation] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociation]
(
    [tid_StaffStudentGrowthMeasureSectionAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasureSectionAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffStudentGrowthMeasureSectionAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureSectionAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureSectionAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociation] ADD CONSTRAINT [StaffStudentGrowthMeasureSectionAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Any sections associated with the staff''s student growth data, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffStudentGrowthMeasureSectionAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffStudentGrowthMeasureSectionAssociation_Id ON [t_extension].[StaffStudentGrowthMeasureSectionAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffStudentGrowthMeasureSectionAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffStudentGrowthMeasureSectionAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffStudentGrowthMeasureSectionAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureSectionAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureSectionAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffStudentGrowthMeasureSectionAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffStudentGrowthMeasureSectionAssociation])
REFERENCES [t_extension].[StaffStudentGrowthMeasureSectionAssociation] ([tid_StaffStudentGrowthMeasureSectionAssociation]);
ALTER TABLE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffStudentGrowthMeasureSectionAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[StaffTeacherPreparationProviderAssociation] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProviderAssociation]
(
    [tid_StaffTeacherPreparationProviderAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[TeacherPreparationProviderId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProviderAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffTeacherPreparationProviderAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociation] ADD CONSTRAINT [StaffTeacherPreparationProviderAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociation] ADD CONSTRAINT [StaffTeacherPreparationProviderAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociation] ADD CONSTRAINT [StaffTeacherPreparationProviderAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the association between the Staff and the TeacherPreparationProvider', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffTeacherPreparationProviderAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identification code for the Teacher Preparation Provider', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProviderId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier for a school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffTeacherPreparationProviderAssociation_Id ON [t_extension].[StaffTeacherPreparationProviderAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffTeacherPreparationProviderAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProviderAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffTeacherPreparationProviderAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffTeacherPreparationProviderAssociation])
REFERENCES [t_extension].[StaffTeacherPreparationProviderAssociation] ([tid_StaffTeacherPreparationProviderAssociation]);
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel]
(
	[tid_StaffTeacherPreparationProviderAssociationGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffTeacherPreparationProviderAssociation] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProviderAssociationGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffTeacherPreparationProviderAssociationGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel] ADD CONSTRAINT [StaffTeacherPreparationProviderAssociationGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel] ADD CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationGradeLevel_ParentTable] FOREIGN KEY ([tid_StaffTeacherPreparationProviderAssociation])
REFERENCES [t_extension].[StaffTeacherPreparationProviderAssociation] ([tid_StaffTeacherPreparationProviderAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel] CHECK CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels for the association.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffTeacherPreparationProviderAssociationGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject]
(
	[tid_StaffTeacherPreparationProviderAssociationAcademicSubject] [INT] IDENTITY(1,1) NOT NULL,
    [tid_StaffTeacherPreparationProviderAssociation] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProviderAssociationAcademicSubject] PRIMARY KEY NONCLUSTERED
(
	[tid_StaffTeacherPreparationProviderAssociationAcademicSubject] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject] ADD CONSTRAINT [StaffTeacherPreparationProviderAssociationAcademicSubject_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject] ADD CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationAcademicSubject_ParentTable] FOREIGN KEY ([tid_StaffTeacherPreparationProviderAssociation])
REFERENCES [t_extension].[StaffTeacherPreparationProviderAssociation] ([tid_StaffTeacherPreparationProviderAssociation]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject] CHECK CONSTRAINT [FK_StaffTeacherPreparationProviderAssociationAcademicSubject_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of a degree.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffTeacherPreparationProviderAssociationAcademicSubject';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO
/****** TABLE: [t_extension].[StaffTeacherPreparationProviderProgramAssociation] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociation]
(
    [tid_StaffTeacherPreparationProviderProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EndDate] [DATE] NULL,
	[StudentRecordAccess] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProviderProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_StaffTeacherPreparationProviderProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociation] ADD CONSTRAINT [StaffTeacherPreparationProviderProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociation] ADD CONSTRAINT [StaffTeacherPreparationProviderProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociation] ADD CONSTRAINT [StaffTeacherPreparationProviderProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the Staff associated with a teacher preparation provider program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StaffTeacherPreparationProviderProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start date for the association of staff to this program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End date for the association of staff to this program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StaffTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentRecordAccess';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStaffTeacherPreparationProviderProgramAssociation_Id ON [t_extension].[StaffTeacherPreparationProviderProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StaffTeacherPreparationProviderProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StaffTeacherPreparationProviderProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StaffTeacherPreparationProviderProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffTeacherPreparationProviderProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffTeacherPreparationProviderProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_StaffTeacherPreparationProviderProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StaffTeacherPreparationProviderProgramAssociation])
REFERENCES [t_extension].[StaffTeacherPreparationProviderProgramAssociation] ([tid_StaffTeacherPreparationProviderProgramAssociation]);
ALTER TABLE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_StaffTeacherPreparationProviderProgramAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[StudentGrowthTypeDescriptor] ******/

CREATE TABLE [t_extension].[StudentGrowthTypeDescriptor]
(
    [tid_StudentGrowthTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[StudentGrowthType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentGrowthTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_StudentGrowthTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StudentGrowthTypeDescriptor] ADD CONSTRAINT [StudentGrowthTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StudentGrowthTypeDescriptor] ADD CONSTRAINT [StudentGrowthTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StudentGrowthTypeDescriptor] ADD CONSTRAINT [StudentGrowthTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identification of the type of score that was used to determine student growth', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StudentGrowthTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthTypeDescriptor', @level2type=N'COLUMN', @level2name=N'StudentGrowthType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TStudentGrowthTypeDescriptor_Id ON [t_extension].[StudentGrowthTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_StudentGrowthTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_StudentGrowthTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_StudentGrowthTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StudentGrowthTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StudentGrowthTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_StudentGrowthTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_StudentGrowthTypeDescriptor])
REFERENCES [t_extension].[StudentGrowthTypeDescriptor] ([tid_StudentGrowthTypeDescriptor]);
ALTER TABLE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_StudentGrowthTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[StudentGrowthType] ******/

CREATE TABLE [t_extension].[StudentGrowthType]
(
	[tid_StudentGrowthType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_StudentGrowthType] PRIMARY KEY NONCLUSTERED
(
	[tid_StudentGrowthType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[StudentGrowthType] ADD CONSTRAINT [StudentGrowthType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[StudentGrowthType] ADD CONSTRAINT [StudentGrowthType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[StudentGrowthType] ADD CONSTRAINT [StudentGrowthType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identification of the type of score that was used to determine student growth', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'StudentGrowthType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StudentGrowth type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StudentGrowth type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'StudentGrowthType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[Survey] ******/

CREATE TABLE [t_extension].[Survey]
(
    [tid_Survey] [INT] IDENTITY(1,1) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[EducationOrganizationId] [INT] NULL,
	[SurveyTitle] [NVARCHAR](50) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[SurveyCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ProgramName] [NVARCHAR](60) NULL,
	[ProgramType] [NVARCHAR](450) NULL,
	[CourseCode] [NVARCHAR](60) NULL,
	[UniqueSectionCode] [NVARCHAR](255) NULL,
	[SequenceOfCourse] [INT] NULL,
	[LocalCourseCode] [NVARCHAR](60) NULL,
	[SchoolId] [INT] NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NULL,
	[ClassPeriodName] [NVARCHAR](20) NULL,
	[SurveyCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_Survey] PRIMARY KEY NONCLUSTERED
(
    [tid_Survey] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[Survey] ADD CONSTRAINT [Survey_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[Survey] ADD CONSTRAINT [Survey_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[Survey] ADD CONSTRAINT [Survey_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A survey to identified or anonymous respondants.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'Survey';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'SurveyTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year associated with the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'SurveyCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'SurveyCategoryDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'Survey', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSurvey_Id ON [t_extension].[Survey]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SurveySnapshotRecord] ******/

CREATE TABLE [t_extension].[SurveySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_Survey] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_Survey], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveySnapshotRecord] ADD CONSTRAINT [FK_SurveySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveySnapshotRecord] CHECK CONSTRAINT [FK_SurveySnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SurveySnapshotRecord] ADD CONSTRAINT [FK_SurveySnapshotRecord_ParentTable] FOREIGN KEY ([tid_Survey])
REFERENCES [t_extension].[Survey] ([tid_Survey]);
ALTER TABLE [t_extension].[SurveySnapshotRecord] CHECK CONSTRAINT [FK_SurveySnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[SurveyCategoryDescriptor] ******/

CREATE TABLE [t_extension].[SurveyCategoryDescriptor]
(
    [tid_SurveyCategoryDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[SurveyCategoryType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyCategoryDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_SurveyCategoryDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyCategoryDescriptor] ADD CONSTRAINT [SurveyCategoryDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyCategoryDescriptor] ADD CONSTRAINT [SurveyCategoryDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SurveyCategoryDescriptor] ADD CONSTRAINT [SurveyCategoryDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the category or type of survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyCategoryDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'SurveyCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSurveyCategoryDescriptor_Id ON [t_extension].[SurveyCategoryDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SurveyCategoryDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SurveyCategoryDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyCategoryDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SurveyCategoryDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SurveyCategoryDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SurveyCategoryDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SurveyCategoryDescriptorSnapshotRecord] ADD CONSTRAINT [FK_SurveyCategoryDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SurveyCategoryDescriptor])
REFERENCES [t_extension].[SurveyCategoryDescriptor] ([tid_SurveyCategoryDescriptor]);
ALTER TABLE [t_extension].[SurveyCategoryDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_SurveyCategoryDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SurveyCategoryType] ******/

CREATE TABLE [t_extension].[SurveyCategoryType]
(
	[tid_SurveyCategoryType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_SurveyCategoryType] PRIMARY KEY NONCLUSTERED
(
	[tid_SurveyCategoryType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyCategoryType] ADD CONSTRAINT [SurveyCategoryType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyCategoryType] ADD CONSTRAINT [SurveyCategoryType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SurveyCategoryType] ADD CONSTRAINT [SurveyCategoryType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the category or type of survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SurveyCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SurveyCategory type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[SurveyQuestion] ******/

CREATE TABLE [t_extension].[SurveyQuestion]
(
    [tid_SurveyQuestion] [INT] IDENTITY(1,1) NOT NULL,
	[QuestionCode] [NVARCHAR](20) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[QuestionFormType] [NVARCHAR](450) NOT NULL,
	[QuestionText] [NVARCHAR](255) NOT NULL,
	[SurveySectionTitle] [NVARCHAR](50) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestion] PRIMARY KEY NONCLUSTERED
(
    [tid_SurveyQuestion] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestion] ADD CONSTRAINT [SurveyQuestion_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyQuestion] ADD CONSTRAINT [SurveyQuestion_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SurveyQuestion] ADD CONSTRAINT [SurveyQuestion_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The questions for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyQuestion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestion', @level2type=N'COLUMN', @level2name=N'QuestionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestion', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestion', @level2type=N'COLUMN', @level2name=N'QuestionFormType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text of the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestion', @level2type=N'COLUMN', @level2name=N'QuestionText';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or label for the survey section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestion', @level2type=N'COLUMN', @level2name=N'SurveySectionTitle';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSurveyQuestion_Id ON [t_extension].[SurveyQuestion]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SurveyQuestionSnapshotRecord] ******/

CREATE TABLE [t_extension].[SurveyQuestionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SurveyQuestion] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SurveyQuestion], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestionSnapshotRecord] ADD CONSTRAINT [FK_SurveyQuestionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyQuestionSnapshotRecord] CHECK CONSTRAINT [FK_SurveyQuestionSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SurveyQuestionSnapshotRecord] ADD CONSTRAINT [FK_SurveyQuestionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SurveyQuestion])
REFERENCES [t_extension].[SurveyQuestion] ([tid_SurveyQuestion]);
ALTER TABLE [t_extension].[SurveyQuestionSnapshotRecord] CHECK CONSTRAINT [FK_SurveyQuestionSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SurveyQuestionNumericChoice] ******/

CREATE TABLE [t_extension].[SurveyQuestionNumericChoice]
(
	[tid_SurveyQuestionNumericChoice] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SurveyQuestion] [INT] NOT NULL,
	[NumericChoice] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestionNumericChoice] PRIMARY KEY NONCLUSTERED
(
	[tid_SurveyQuestionNumericChoice] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestionNumericChoice] ADD CONSTRAINT [SurveyQuestionNumericChoice_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyQuestionNumericChoice] ADD CONSTRAINT [FK_SurveyQuestionNumericChoice_ParentTable] FOREIGN KEY ([tid_SurveyQuestion])
REFERENCES [t_extension].[SurveyQuestion] ([tid_SurveyQuestion]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyQuestionNumericChoice] CHECK CONSTRAINT [FK_SurveyQuestionNumericChoice_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For matrix of rating scale and for ranking, the numeric choices.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyQuestionNumericChoice';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For matrix of rating scale and for ranking, the numeric choices.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionNumericChoice', @level2type=N'COLUMN', @level2name=N'NumericChoice';
GO

/****** TABLE: [t_extension].[SurveyQuestionTextChoice] ******/

CREATE TABLE [t_extension].[SurveyQuestionTextChoice]
(
	[tid_SurveyQuestionTextChoice] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SurveyQuestion] [INT] NOT NULL,
	[TextChoice] [NVARCHAR](50) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestionTextChoice] PRIMARY KEY NONCLUSTERED
(
	[tid_SurveyQuestionTextChoice] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestionTextChoice] ADD CONSTRAINT [SurveyQuestionTextChoice_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyQuestionTextChoice] ADD CONSTRAINT [FK_SurveyQuestionTextChoice_ParentTable] FOREIGN KEY ([tid_SurveyQuestion])
REFERENCES [t_extension].[SurveyQuestion] ([tid_SurveyQuestion]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyQuestionTextChoice] CHECK CONSTRAINT [FK_SurveyQuestionTextChoice_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For radio buttons, checkboxes, dropdowns, matrix of drop downs - the list of choices.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyQuestionTextChoice';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For radio buttons, checkboxes, dropdowns, matrix of drop downs - the list of choices.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionTextChoice', @level2type=N'COLUMN', @level2name=N'TextChoice';
GO

/****** TABLE: [t_extension].[SurveyQuestionMatrix] ******/

CREATE TABLE [t_extension].[SurveyQuestionMatrix]
(
	[tid_SurveyQuestionMatrix] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SurveyQuestion] [INT] NOT NULL,
	[MatrixElement] [NVARCHAR](50) NOT NULL,
	[MinRawScore] [INT] NULL,
	[MaxRawScore] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestionMatrix] PRIMARY KEY NONCLUSTERED
(
	[tid_SurveyQuestionMatrix] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestionMatrix] ADD CONSTRAINT [SurveyQuestionMatrix_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyQuestionMatrix] ADD CONSTRAINT [FK_SurveyQuestionMatrix_ParentTable] FOREIGN KEY ([tid_SurveyQuestion])
REFERENCES [t_extension].[SurveyQuestion] ([tid_SurveyQuestion]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyQuestionMatrix] CHECK CONSTRAINT [FK_SurveyQuestionMatrix_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the matrix element in the survey', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyQuestionMatrix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For matrix questions, the text identifying each row of the matrix.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionMatrix', @level2type=N'COLUMN', @level2name=N'MatrixElement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score possible on a survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionMatrix', @level2type=N'COLUMN', @level2name=N'MinRawScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score possible on a survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionMatrix', @level2type=N'COLUMN', @level2name=N'MaxRawScore';
GO
/****** TABLE: [t_extension].[SurveyQuestionResponse] ******/

CREATE TABLE [t_extension].[SurveyQuestionResponse]
(
    [tid_SurveyQuestionResponse] [INT] IDENTITY(1,1) NOT NULL,
	[QuestionCode] [NVARCHAR](20) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL,
	[NoResponse] [BIT] NULL,
	[NumericResponse] [INT] NULL,
	[TextResponse] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestionResponse] PRIMARY KEY NONCLUSTERED
(
    [tid_SurveyQuestionResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestionResponse] ADD CONSTRAINT [SurveyQuestionResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyQuestionResponse] ADD CONSTRAINT [SurveyQuestionResponse_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SurveyQuestionResponse] ADD CONSTRAINT [SurveyQuestionResponse_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The response to a survey question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyQuestionResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifying code for the question, unique for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponse', @level2type=N'COLUMN', @level2name=N'QuestionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponse', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier of the survey typically from the survey application.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponse', @level2type=N'COLUMN', @level2name=N'SurveyResponseIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates there was no response to the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponse', @level2type=N'COLUMN', @level2name=N'NoResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numeric response to the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponse', @level2type=N'COLUMN', @level2name=N'NumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text response(s) for the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponse', @level2type=N'COLUMN', @level2name=N'TextResponse';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSurveyQuestionResponse_Id ON [t_extension].[SurveyQuestionResponse]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SurveyQuestionResponseSnapshotRecord] ******/

CREATE TABLE [t_extension].[SurveyQuestionResponseSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SurveyQuestionResponse] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestionResponseSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SurveyQuestionResponse], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestionResponseSnapshotRecord] ADD CONSTRAINT [FK_SurveyQuestionResponseSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyQuestionResponseSnapshotRecord] CHECK CONSTRAINT [FK_SurveyQuestionResponseSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SurveyQuestionResponseSnapshotRecord] ADD CONSTRAINT [FK_SurveyQuestionResponseSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SurveyQuestionResponse])
REFERENCES [t_extension].[SurveyQuestionResponse] ([tid_SurveyQuestionResponse]);
ALTER TABLE [t_extension].[SurveyQuestionResponseSnapshotRecord] CHECK CONSTRAINT [FK_SurveyQuestionResponseSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] ******/

CREATE TABLE [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse]
(
	[tid_SurveyQuestionResponseSurveyQuestionMatrixElementResponse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_SurveyQuestionResponse] [INT] NOT NULL,
	[MatrixElement] [NVARCHAR](50) NOT NULL,
	[NumericResponse] [INT] NULL,
	[TextResponse] [NVARCHAR](255) NULL,
	[NoResponse] [BIT] NULL,
	[MinNumericResponse] [INT] NULL,
	[MaxNumericResponse] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse] PRIMARY KEY NONCLUSTERED
(
	[tid_SurveyQuestionResponseSurveyQuestionMatrixElementResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [SurveyQuestionResponseSurveyQuestionMatrixElementResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] ADD CONSTRAINT [FK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_ParentTable] FOREIGN KEY ([tid_SurveyQuestionResponse])
REFERENCES [t_extension].[SurveyQuestionResponse] ([tid_SurveyQuestionResponse]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] CHECK CONSTRAINT [FK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For matrix questions, the response for each row of the matrix.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyQuestionResponseSurveyQuestionMatrixElementResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For matrix questions, the text identifying each row of the matrix.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponseSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'MatrixElement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numeric response to the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponseSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text response(s) for the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponseSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'TextResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates there was no response to the question.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponseSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'NoResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score possible on a survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponseSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'MinNumericResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score possible on a survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyQuestionResponseSurveyQuestionMatrixElementResponse', @level2type=N'COLUMN', @level2name=N'MaxNumericResponse';
GO
/****** TABLE: [t_extension].[SurveyResponse] ******/

CREATE TABLE [t_extension].[SurveyResponse]
(
    [tid_SurveyResponse] [INT] IDENTITY(1,1) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL,
	[ResponseDate] [DATE] NOT NULL,
	[ElectronicMailAddress] [NVARCHAR](128) NULL,
	[FullName] [NVARCHAR](80) NULL,
	[Location] [NVARCHAR](75) NULL,
	[StudentUniqueId] [NVARCHAR](32) NULL,
	[ParentUniqueId] [NVARCHAR](32) NULL,
	[StaffUniqueId] [NVARCHAR](32) NULL,
	[ApplicantIdentifier] [NVARCHAR](32) NULL,
	[EducationOrganizationId] [INT] NULL,
	[ProspectIdentifier] [NVARCHAR](32) NULL,
	[ProspectEducationOrganizationId] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyResponse] PRIMARY KEY NONCLUSTERED
(
    [tid_SurveyResponse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyResponse] ADD CONSTRAINT [SurveyResponse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveyResponse] ADD CONSTRAINT [SurveyResponse_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SurveyResponse] ADD CONSTRAINT [SurveyResponse_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Responses to a Survey for named or anonymous persons.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveyResponse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier of the survey typically from the survey application.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'SurveyResponseIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of the survey response.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'ResponseDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email address of the respondent.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Full name of the respondent.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'FullName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Location of the respondent, oten a citr, district, or school.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'Location';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'ParentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned to a person making formal application for an open staff position.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'ApplicantIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the prospect.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'ProspectIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveyResponse', @level2type=N'COLUMN', @level2name=N'ProspectEducationOrganizationId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSurveyResponse_Id ON [t_extension].[SurveyResponse]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SurveyResponseSnapshotRecord] ******/

CREATE TABLE [t_extension].[SurveyResponseSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SurveyResponse] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveyResponseSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SurveyResponse], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveyResponseSnapshotRecord] ADD CONSTRAINT [FK_SurveyResponseSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveyResponseSnapshotRecord] CHECK CONSTRAINT [FK_SurveyResponseSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SurveyResponseSnapshotRecord] ADD CONSTRAINT [FK_SurveyResponseSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SurveyResponse])
REFERENCES [t_extension].[SurveyResponse] ([tid_SurveyResponse]);
ALTER TABLE [t_extension].[SurveyResponseSnapshotRecord] CHECK CONSTRAINT [FK_SurveyResponseSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[SurveySection] ******/

CREATE TABLE [t_extension].[SurveySection]
(
    [tid_SurveySection] [INT] IDENTITY(1,1) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveySectionTitle] [NVARCHAR](50) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveySection] PRIMARY KEY NONCLUSTERED
(
    [tid_SurveySection] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveySection] ADD CONSTRAINT [SurveySection_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveySection] ADD CONSTRAINT [SurveySection_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SurveySection] ADD CONSTRAINT [SurveySection_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The section(s) of questions for the survey.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveySection';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveySection', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or label for the survey section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveySection', @level2type=N'COLUMN', @level2name=N'SurveySectionTitle';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSurveySection_Id ON [t_extension].[SurveySection]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SurveySectionSnapshotRecord] ******/

CREATE TABLE [t_extension].[SurveySectionSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SurveySection] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveySectionSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SurveySection], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveySectionSnapshotRecord] ADD CONSTRAINT [FK_SurveySectionSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveySectionSnapshotRecord] CHECK CONSTRAINT [FK_SurveySectionSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SurveySectionSnapshotRecord] ADD CONSTRAINT [FK_SurveySectionSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SurveySection])
REFERENCES [t_extension].[SurveySection] ([tid_SurveySection]);
ALTER TABLE [t_extension].[SurveySectionSnapshotRecord] CHECK CONSTRAINT [FK_SurveySectionSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[SurveySectionResponseRating] ******/

CREATE TABLE [t_extension].[SurveySectionResponseRating]
(
    [tid_SurveySectionResponseRating] [INT] IDENTITY(1,1) NOT NULL,
	[SurveyIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL,
	[SurveySectionTitle] [NVARCHAR](50) NOT NULL,
	[SectionRating] [DECIMAL](9, 3) NOT NULL,
	[StudentSurveyNCount] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveySectionResponseRating] PRIMARY KEY NONCLUSTERED
(
    [tid_SurveySectionResponseRating] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveySectionResponseRating] ADD CONSTRAINT [SurveySectionResponseRating_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[SurveySectionResponseRating] ADD CONSTRAINT [SurveySectionResponseRating_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[SurveySectionResponseRating] ADD CONSTRAINT [SurveySectionResponseRating_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional numeric rating computed from the survey responses for the section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'SurveySectionResponseRating';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique survey identifier from the survey tool.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveySectionResponseRating', @level2type=N'COLUMN', @level2name=N'SurveyIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier of the survey typically from the survey application.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveySectionResponseRating', @level2type=N'COLUMN', @level2name=N'SurveyResponseIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or label for the survey section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveySectionResponseRating', @level2type=N'COLUMN', @level2name=N'SurveySectionTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Numeric rating computed from the survey responses for the section.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveySectionResponseRating', @level2type=N'COLUMN', @level2name=N'SectionRating';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicated how many students took the survey', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'SurveySectionResponseRating', @level2type=N'COLUMN', @level2name=N'StudentSurveyNCount';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TSurveySectionResponseRating_Id ON [t_extension].[SurveySectionResponseRating]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[SurveySectionResponseRatingSnapshotRecord] ******/

CREATE TABLE [t_extension].[SurveySectionResponseRatingSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_SurveySectionResponseRating] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_SurveySectionResponseRatingSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_SurveySectionResponseRating], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[SurveySectionResponseRatingSnapshotRecord] ADD CONSTRAINT [FK_SurveySectionResponseRatingSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[SurveySectionResponseRatingSnapshotRecord] CHECK CONSTRAINT [FK_SurveySectionResponseRatingSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[SurveySectionResponseRatingSnapshotRecord] ADD CONSTRAINT [FK_SurveySectionResponseRatingSnapshotRecord_ParentTable] FOREIGN KEY ([tid_SurveySectionResponseRating])
REFERENCES [t_extension].[SurveySectionResponseRating] ([tid_SurveySectionResponseRating]);
ALTER TABLE [t_extension].[SurveySectionResponseRatingSnapshotRecord] CHECK CONSTRAINT [FK_SurveySectionResponseRatingSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidate] ******/

CREATE TABLE [t_extension].[TeacherCandidate]
(
    [tid_TeacherCandidate] [INT] IDENTITY(1,1) NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[MaidenName] [NVARCHAR](75) NULL,
	[SexType] [NVARCHAR](450) NOT NULL,
	[BirthDate] [DATE] NOT NULL,
	[BirthCity] [NVARCHAR](30) NULL,
	[BirthStateAbbreviationType] [NVARCHAR](450) NULL,
	[BirthInternationalProvince] [NVARCHAR](150) NULL,
	[BirthCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[DateEnteredUS] [DATE] NULL,
	[MultipleBirthStatus] [BIT] NULL,
	[ProfileThumbnail] [NVARCHAR](59) NULL,
	[HispanicLatinoEthnicity] [BIT] NOT NULL,
	[OldEthnicityType] [NVARCHAR](450) NULL,
	[CitizenshipStatusType] [NVARCHAR](450) NULL,
	[EconomicDisadvantaged] [BIT] NULL,
	[SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NULL,
	[LimitedEnglishProficiencyDescriptorCodeValue] [NVARCHAR](50) NULL,
	[DisplacementStatus] [NVARCHAR](30) NULL,
	[LoginId] [NVARCHAR](60) NULL,
	[GenderType] [NVARCHAR](450) NULL,
	[TuitionCost] [MONEY] NULL,
	[EnglishLanguageExamDescriptorCodeValue] [NVARCHAR](50) NULL,
	[PreviousCareerDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ProgramComplete] [BIT] NULL,
	[StudentUniqueId] [NVARCHAR](32) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NULL,
	[PreviousCareerDescriptorNamespace] [NVARCHAR](255) NULL,
	[EnglishLanguageExamDescriptorNamespace] [NVARCHAR](255) NULL,
	[LimitedEnglishProficiencyDescriptorNamespace] [NVARCHAR](255) NULL,
	[SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NULL,
	[BirthCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidate] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidate] ADD CONSTRAINT [TeacherCandidate_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidate] ADD CONSTRAINT [TeacherCandidate_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidate] ADD CONSTRAINT [TeacherCandidate_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an individual for whom instruction and/or services in a Teacher Preparation Program are provided under the jurisdiction of a Teacher Preparation Provider.  A teacher candidate is a person who has been enrolled in a teacher preparation program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'MaidenName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'SexType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was born.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'BirthDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The city the student was born in.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'BirthCity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'BirthStateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For students born outside of the U.S., the Province or jurisdiction in which an individual is born.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'BirthInternationalProvince';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'BirthCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For students born outside of the U.S., the date the student entered the U.S.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'DateEnteredUS';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'MultipleBirthStatus';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Locator for the student photo.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'ProfileThumbnail';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'OldEthnicityType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'CitizenshipStatusType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of inadequate financial condition of an individual''s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'EconomicDisadvantaged';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'DisplacementStatus';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'LoginId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'GenderType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The tuition for a person''s participation in a program, service. or course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'TuitionCost';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'EnglishLanguageExamDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'PreviousCareerDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a teacher candidate has completed the teacher preparation program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'ProgramComplete';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'StudentUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'PreviousCareerDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'EnglishLanguageExamDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidate', @level2type=N'COLUMN', @level2name=N'BirthCountryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidate_Id ON [t_extension].[TeacherCandidate]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidate], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]);
ALTER TABLE [t_extension].[TeacherCandidateSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TeacherCandidateIdentificationCode] ******/

CREATE TABLE [t_extension].[TeacherCandidateIdentificationCode]
(
	[tid_TeacherCandidateIdentificationCode] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[AssigningOrganizationIdentificationCode] [NVARCHAR](60) NOT NULL,
	[StudentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[IdentificationCode] [NVARCHAR](60) NOT NULL,
	[StudentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateIdentificationCode] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateIdentificationCode] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateIdentificationCode] ADD CONSTRAINT [TeacherCandidateIdentificationCode_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateIdentificationCode] ADD CONSTRAINT [FK_TeacherCandidateIdentificationCode_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateIdentificationCode] CHECK CONSTRAINT [FK_TeacherCandidateIdentificationCode_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the StudentIdentificationCode.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationCode', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationCode', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateOtherName] ******/

CREATE TABLE [t_extension].[TeacherCandidateOtherName]
(
	[tid_TeacherCandidateOtherName] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[OtherNameType] [NVARCHAR](450) NOT NULL,
	[PersonalTitlePrefix] [NVARCHAR](30) NULL,
	[FirstName] [NVARCHAR](75) NOT NULL,
	[MiddleName] [NVARCHAR](75) NULL,
	[LastSurname] [NVARCHAR](75) NOT NULL,
	[GenerationCodeSuffix] [NVARCHAR](10) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateOtherName] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateOtherName] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateOtherName] ADD CONSTRAINT [TeacherCandidateOtherName_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateOtherName] ADD CONSTRAINT [FK_TeacherCandidateOtherName_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateOtherName] CHECK CONSTRAINT [FK_TeacherCandidateOtherName_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other names (e.g., alias, nickname, previous legal name) associated with a person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateOtherName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateOtherName', @level2type=N'COLUMN', @level2name=N'OtherNameType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateOtherName', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateOtherName', @level2type=N'COLUMN', @level2name=N'FirstName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateOtherName', @level2type=N'COLUMN', @level2name=N'MiddleName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateOtherName', @level2type=N'COLUMN', @level2name=N'LastSurname';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateOtherName', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix';
GO

/****** TABLE: [t_extension].[TeacherCandidateAddress] ******/

CREATE TABLE [t_extension].[TeacherCandidateAddress]
(
	[tid_TeacherCandidateAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[StreetNumberName] [NVARCHAR](150) NOT NULL,
	[ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
	[BuildingSiteNumber] [NVARCHAR](20) NULL,
	[City] [NVARCHAR](30) NOT NULL,
	[StateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[PostalCode] [NVARCHAR](17) NOT NULL,
	[NameOfCounty] [NVARCHAR](30) NULL,
	[CountyFIPSCode] [NVARCHAR](5) NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAddress] ADD CONSTRAINT [TeacherCandidateAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateAddress] ADD CONSTRAINT [FK_TeacherCandidateAddress_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateAddress] CHECK CONSTRAINT [FK_TeacherCandidateAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an address, including the street address, city, state, and ZIP code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'City';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'PostalCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

/****** TABLE: [t_extension].[TeacherCandidateInternationalAddress] ******/

CREATE TABLE [t_extension].[TeacherCandidateInternationalAddress]
(
	[tid_TeacherCandidateInternationalAddress] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[AddressType] [NVARCHAR](450) NOT NULL,
	[AddressLine1] [NVARCHAR](150) NOT NULL,
	[AddressLine2] [NVARCHAR](150) NULL,
	[AddressLine3] [NVARCHAR](150) NULL,
	[AddressLine4] [NVARCHAR](150) NULL,
	[CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[Latitude] [NVARCHAR](20) NULL,
	[Longitude] [NVARCHAR](20) NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateInternationalAddress] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateInternationalAddress] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateInternationalAddress] ADD CONSTRAINT [TeacherCandidateInternationalAddress_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateInternationalAddress] ADD CONSTRAINT [FK_TeacherCandidateInternationalAddress_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateInternationalAddress] CHECK CONSTRAINT [FK_TeacherCandidateInternationalAddress_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateInternationalAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateTelephone] ******/

CREATE TABLE [t_extension].[TeacherCandidateTelephone]
(
	[tid_TeacherCandidateTelephone] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[TelephoneNumberType] [NVARCHAR](450) NOT NULL,
	[TelephoneNumber] [NVARCHAR](24) NOT NULL,
	[OrderOfPriority] [INT] NULL,
	[TextMessageCapabilityIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateTelephone] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateTelephone] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateTelephone] ADD CONSTRAINT [TeacherCandidateTelephone_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateTelephone] ADD CONSTRAINT [FK_TeacherCandidateTelephone_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateTelephone] CHECK CONSTRAINT [FK_TeacherCandidateTelephone_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateTelephone';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator';
GO

/****** TABLE: [t_extension].[TeacherCandidateElectronicMail] ******/

CREATE TABLE [t_extension].[TeacherCandidateElectronicMail]
(
	[tid_TeacherCandidateElectronicMail] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[ElectronicMailType] [NVARCHAR](450) NOT NULL,
	[ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
	[PrimaryEmailAddressIndicator] [BIT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateElectronicMail] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateElectronicMail] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateElectronicMail] ADD CONSTRAINT [TeacherCandidateElectronicMail_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateElectronicMail] ADD CONSTRAINT [FK_TeacherCandidateElectronicMail_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateElectronicMail] CHECK CONSTRAINT [FK_TeacherCandidateElectronicMail_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateElectronicMail';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator';
GO

/****** TABLE: [t_extension].[TeacherCandidateRace] ******/

CREATE TABLE [t_extension].[TeacherCandidateRace]
(
	[tid_TeacherCandidateRace] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[RaceType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateRace] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateRace] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateRace] ADD CONSTRAINT [TeacherCandidateRace_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateRace] ADD CONSTRAINT [FK_TeacherCandidateRace_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateRace] CHECK CONSTRAINT [FK_TeacherCandidateRace_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateRace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateRace', @level2type=N'COLUMN', @level2name=N'RaceType';
GO

/****** TABLE: [t_extension].[TeacherCandidateVisa] ******/

CREATE TABLE [t_extension].[TeacherCandidateVisa]
(
	[tid_TeacherCandidateVisa] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[VisaType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateVisa] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateVisa] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateVisa] ADD CONSTRAINT [TeacherCandidateVisa_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateVisa] ADD CONSTRAINT [FK_TeacherCandidateVisa_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateVisa] CHECK CONSTRAINT [FK_TeacherCandidateVisa_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateVisa';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateVisa', @level2type=N'COLUMN', @level2name=N'VisaType';
GO

/****** TABLE: [t_extension].[TeacherCandidateCharacteristic] ******/

CREATE TABLE [t_extension].[TeacherCandidateCharacteristic]
(
	[tid_TeacherCandidateCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[StudentCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[DesignatedBy] [NVARCHAR](60) NULL,
	[StudentCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCharacteristic] ADD CONSTRAINT [TeacherCandidateCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateCharacteristic] ADD CONSTRAINT [FK_TeacherCandidateCharacteristic_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateCharacteristic] CHECK CONSTRAINT [FK_TeacherCandidateCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the teacher candidate''s home situation:
      Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristic', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the characteristic was designated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristic', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the characteristic was removed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristic', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the characteristic.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristic', @level2type=N'COLUMN', @level2name=N'DesignatedBy';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristic', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateLanguage] ******/

CREATE TABLE [t_extension].[TeacherCandidateLanguage]
(
	[tid_TeacherCandidateLanguage] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateLanguage] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateLanguage] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateLanguage] ADD CONSTRAINT [TeacherCandidateLanguage_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateLanguage] ADD CONSTRAINT [FK_TeacherCandidateLanguage_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateLanguage] CHECK CONSTRAINT [FK_TeacherCandidateLanguage_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language(s) the individual uses to communicate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateLanguage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateLanguageUse] ******/

CREATE TABLE [t_extension].[TeacherCandidateLanguageUse]
(
	[tid_TeacherCandidateLanguageUse] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateLanguage] [INT] NOT NULL,
	[LanguageUseType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateLanguageUse] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateLanguageUse] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateLanguageUse] ADD CONSTRAINT [TeacherCandidateLanguageUse_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateLanguageUse] ADD CONSTRAINT [FK_TeacherCandidateLanguageUse_ParentTable] FOREIGN KEY ([tid_TeacherCandidateLanguage])
REFERENCES [t_extension].[TeacherCandidateLanguage] ([tid_TeacherCandidateLanguage]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateLanguageUse] CHECK CONSTRAINT [FK_TeacherCandidateLanguageUse_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateLanguageUse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageUseType';
GO

/****** TABLE: [t_extension].[TeacherCandidateDisability] ******/

CREATE TABLE [t_extension].[TeacherCandidateDisability]
(
	[tid_TeacherCandidateDisability] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[DisabilityDiagnosis] [NVARCHAR](80) NULL,
	[OrderOfDisability] [INT] NULL,
	[DisabilityDeterminationSourceType] [NVARCHAR](450) NULL,
	[DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateDisability] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateDisability] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateDisability] ADD CONSTRAINT [TeacherCandidateDisability_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateDisability] ADD CONSTRAINT [FK_TeacherCandidateDisability_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateDisability] CHECK CONSTRAINT [FK_TeacherCandidateDisability_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The disability condition(s) that best describes an individual''s impairment.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the disability diagnosis.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDiagnosis';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order by severity of student''s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateDisability', @level2type=N'COLUMN', @level2name=N'OrderOfDisability';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDeterminationSourceType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateProgramParticipation] ******/

CREATE TABLE [t_extension].[TeacherCandidateProgramParticipation]
(
	[tid_TeacherCandidateProgramParticipation] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[DesignatedBy] [NVARCHAR](60) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateProgramParticipation] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateProgramParticipation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateProgramParticipation] ADD CONSTRAINT [TeacherCandidateProgramParticipation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateProgramParticipation] ADD CONSTRAINT [FK_TeacherCandidateProgramParticipation_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateProgramParticipation] CHECK CONSTRAINT [FK_TeacherCandidateProgramParticipation_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key programs the student is participating in or receives services from.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateProgramParticipation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProgramParticipation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the Student was associated with the Program or service.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProgramParticipation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the Program participation ended.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProgramParticipation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the program association.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProgramParticipation', @level2type=N'COLUMN', @level2name=N'DesignatedBy';
GO

/****** TABLE: [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic] ******/

CREATE TABLE [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic]
(
	[tid_TeacherCandidateProgramParticipationProgramCharacteristic] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateProgramParticipation] [INT] NOT NULL,
	[ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateProgramParticipationProgramCharacteristic] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateProgramParticipationProgramCharacteristic] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic] ADD CONSTRAINT [TeacherCandidateProgramParticipationProgramCharacteristic_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic] ADD CONSTRAINT [FK_TeacherCandidateProgramParticipationProgramCharacteristic_ParentTable] FOREIGN KEY ([tid_TeacherCandidateProgramParticipation])
REFERENCES [t_extension].[TeacherCandidateProgramParticipation] ([tid_TeacherCandidateProgramParticipation]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic] CHECK CONSTRAINT [FK_TeacherCandidateProgramParticipationProgramCharacteristic_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateProgramParticipationProgramCharacteristic';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProgramParticipationProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProgramParticipationProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateLearningStyle] ******/

CREATE TABLE [t_extension].[TeacherCandidateLearningStyle]
(
	[tid_TeacherCandidateLearningStyle] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[VisualLearning] [DECIMAL](5, 4) NOT NULL,
	[AuditoryLearning] [DECIMAL](5, 4) NOT NULL,
	[TactileLearning] [DECIMAL](5, 4) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateLearningStyle] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateLearningStyle] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateLearningStyle] ADD CONSTRAINT [TeacherCandidateLearningStyle_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateLearningStyle] ADD CONSTRAINT [FK_TeacherCandidateLearningStyle_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateLearningStyle] CHECK CONSTRAINT [FK_TeacherCandidateLearningStyle_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference to visual, auditory, and tactile learning expressed as percentages.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateLearningStyle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to visual learning.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateLearningStyle', @level2type=N'COLUMN', @level2name=N'VisualLearning';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to auditory learning.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateLearningStyle', @level2type=N'COLUMN', @level2name=N'AuditoryLearning';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to kinesthetic or tactile learning.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateLearningStyle', @level2type=N'COLUMN', @level2name=N'TactileLearning';
GO

/****** TABLE: [t_extension].[TeacherCandidateCohortYear] ******/

CREATE TABLE [t_extension].[TeacherCandidateCohortYear]
(
	[tid_TeacherCandidateCohortYear] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[CohortYearType] [NVARCHAR](450) NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCohortYear] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateCohortYear] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCohortYear] ADD CONSTRAINT [TeacherCandidateCohortYear_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateCohortYear] ADD CONSTRAINT [FK_TeacherCandidateCohortYear_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateCohortYear] CHECK CONSTRAINT [FK_TeacherCandidateCohortYear_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateCohortYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCohortYear', @level2type=N'COLUMN', @level2name=N'CohortYearType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the  school year for the Cohort.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCohortYear', @level2type=N'COLUMN', @level2name=N'SchoolYear';
GO

/****** TABLE: [t_extension].[TeacherCandidateIndicator] ******/

CREATE TABLE [t_extension].[TeacherCandidateIndicator]
(
	[tid_TeacherCandidateIndicator] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[IndicatorName] [NVARCHAR](60) NOT NULL,
	[IndicatorGroup] [NVARCHAR](60) NULL,
	[Indicator] [NVARCHAR](35) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[DesignatedBy] [NVARCHAR](60) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateIndicator] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateIndicator] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateIndicator] ADD CONSTRAINT [TeacherCandidateIndicator_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateIndicator] ADD CONSTRAINT [FK_TeacherCandidateIndicator_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateIndicator] CHECK CONSTRAINT [FK_TeacherCandidateIndicator_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateIndicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the indicator or metric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIndicator', @level2type=N'COLUMN', @level2name=N'IndicatorName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name for a group of indicators.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIndicator', @level2type=N'COLUMN', @level2name=N'IndicatorGroup';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the indicator or metric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIndicator', @level2type=N'COLUMN', @level2name=N'Indicator';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date when the indicator was assigned or computed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIndicator', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the indicator or metric was sunset or removed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIndicator', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the program association.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIndicator', @level2type=N'COLUMN', @level2name=N'DesignatedBy';
GO

/****** TABLE: [t_extension].[TeacherCandidateCredential] ******/

CREATE TABLE [t_extension].[TeacherCandidateCredential]
(
	[tid_TeacherCandidateCredential] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[CredentialIdentifier] [NVARCHAR](60) NOT NULL,
	[StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCredential] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateCredential] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCredential] ADD CONSTRAINT [TeacherCandidateCredential_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateCredential] ADD CONSTRAINT [FK_TeacherCandidateCredential_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateCredential] CHECK CONSTRAINT [FK_TeacherCandidateCredential_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The legal document or authorization giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateCredential';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier or serial number assigned to the credential.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCredential', @level2type=N'COLUMN', @level2name=N'CredentialIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCredential', @level2type=N'COLUMN', @level2name=N'StateOfIssueStateAbbreviationType';
GO

/****** TABLE: [t_extension].[TeacherCandidateAid] ******/

CREATE TABLE [t_extension].[TeacherCandidateAid]
(
	[tid_TeacherCandidateAid] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[AidTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EndDate] [DATE] NULL,
	[AidConditionDescription] [NVARCHAR](1024) NULL,
	[AidAmount] [MONEY] NULL,
	[PellGrantRecipient] [BIT] NULL,
	[AidTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAid] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateAid] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAid] ADD CONSTRAINT [TeacherCandidateAid_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateAid] ADD CONSTRAINT [FK_TeacherCandidateAid_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateAid] CHECK CONSTRAINT [FK_TeacherCandidateAid_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the financial aid a person is awarded.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateAid';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAid', @level2type=N'COLUMN', @level2name=N'AidTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the award was designated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAid', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the award was removed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAid', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the condition (e.g., placement in a high need school) under which the aid was given.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAid', @level2type=N'COLUMN', @level2name=N'AidConditionDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of financial aid awarded to a person for the term/year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAid', @level2type=N'COLUMN', @level2name=N'AidAmount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates a person who receives Pell Grant aid.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAid', @level2type=N'COLUMN', @level2name=N'PellGrantRecipient';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAid', @level2type=N'COLUMN', @level2name=N'AidTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateBackgroundCheck] ******/

CREATE TABLE [t_extension].[TeacherCandidateBackgroundCheck]
(
	[tid_TeacherCandidateBackgroundCheck] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[BackgroundCheckRequestedDate] [DATE] NOT NULL,
	[BackgroundCheckStatusDescriptorCodeValue] [NVARCHAR](50) NULL,
	[BackgroundCheckCompletedDate] [DATE] NULL,
	[Fingerprint] [BIT] NULL,
	[BackgroundCheckStatusDescriptorNamespace] [NVARCHAR](255) NULL,
	[BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateBackgroundCheck] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateBackgroundCheck] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateBackgroundCheck] ADD CONSTRAINT [TeacherCandidateBackgroundCheck_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateBackgroundCheck] ADD CONSTRAINT [FK_TeacherCandidateBackgroundCheck_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateBackgroundCheck] CHECK CONSTRAINT [FK_TeacherCandidateBackgroundCheck_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Applicant background check history and disposition.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateBackgroundCheck';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the background check was requested.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckRequestedDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckStatusDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the background check was completed.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckCompletedDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that a person has or has not completed a fingerprint.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateBackgroundCheck', @level2type=N'COLUMN', @level2name=N'Fingerprint';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckStatusDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateBackgroundCheck', @level2type=N'COLUMN', @level2name=N'BackgroundCheckTypeDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateIdentificationDocument] ******/

CREATE TABLE [t_extension].[TeacherCandidateIdentificationDocument]
(
	[tid_TeacherCandidateIdentificationDocument] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidate] [INT] NOT NULL,
	[IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL,
	[PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL,
	[DocumentTitle] [NVARCHAR](60) NULL,
	[DocumentExpirationDate] [DATE] NULL,
	[IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateIdentificationDocument] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateIdentificationDocument] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateIdentificationDocument] ADD CONSTRAINT [TeacherCandidateIdentificationDocument_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateIdentificationDocument] ADD CONSTRAINT [FK_TeacherCandidateIdentificationDocument_ParentTable] FOREIGN KEY ([tid_TeacherCandidate])
REFERENCES [t_extension].[TeacherCandidate] ([tid_TeacherCandidate]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateIdentificationDocument] CHECK CONSTRAINT [FK_TeacherCandidateIdentificationDocument_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateIdentificationDocument';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorNamespace';
GO
/****** TABLE: [t_extension].[TeacherCandidateAcademicRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateAcademicRecord]
(
    [tid_TeacherCandidateAcademicRecord] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[CumulativeEarnedCredits] [DECIMAL](9, 2) NULL,
	[CumulativeEarnedCreditType] [NVARCHAR](450) NULL,
	[CumulativeEarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[CumulativeAttemptedCredits] [DECIMAL](9, 2) NULL,
	[CumulativeAttemptedCreditType] [NVARCHAR](450) NULL,
	[CumulativeAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[CumulativeGradePointsEarned] [DECIMAL](18, 4) NULL,
	[CumulativeGradePointAverage] [DECIMAL](18, 4) NULL,
	[GradeValueQualifier] [NVARCHAR](80) NULL,
	[ProjectedGraduationDate] [DATE] NULL,
	[SessionEarnedCredits] [DECIMAL](9, 2) NULL,
	[SessionEarnedCreditType] [NVARCHAR](450) NULL,
	[SessionEarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[SessionAttemptedCredits] [DECIMAL](9, 2) NULL,
	[SessionAttemptedCreditType] [NVARCHAR](450) NULL,
	[SessionAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[SessionGradePointsEarned] [DECIMAL](18, 4) NULL,
	[SessionGradePointAverage] [DECIMAL](18, 4) NULL,
	[ContentGradePointAverage] [DECIMAL](18, 4) NULL,
	[ContentGradePointEarned] [DECIMAL](18, 4) NULL,
	[ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TPPDegreeTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TPPDegreeTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAcademicRecord] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateAcademicRecord] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAcademicRecord] ADD CONSTRAINT [TeacherCandidateAcademicRecord_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecord] ADD CONSTRAINT [TeacherCandidateAcademicRecord_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecord] ADD CONSTRAINT [TeacherCandidateAcademicRecord_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the cumulative record of academic achievement for a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateAcademicRecord';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointsEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student''s Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'GradeValueQualifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month and year the student is projected to graduate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'ProjectedGraduationDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of grade points an individual earned for this session.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointsEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of average performance in all courses taken by an individual within a given content area during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'ContentGradePointAverage';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The cumulative number of grade points an individual earns within a given content area by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'ContentGradePointEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'TPPDegreeTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'TPPDegreeTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecord', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateAcademicRecord_Id ON [t_extension].[TeacherCandidateAcademicRecord]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateAcademicRecord] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAcademicRecordSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateAcademicRecord], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateAcademicRecordSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateAcademicRecordSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateAcademicRecordSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateAcademicRecord])
REFERENCES [t_extension].[TeacherCandidateAcademicRecord] ([tid_TeacherCandidateAcademicRecord]);
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateAcademicRecordSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TeacherCandidateAcademicRecordClassRanking] ******/

CREATE TABLE [t_extension].[TeacherCandidateAcademicRecordClassRanking]
(
	[tid_TeacherCandidateAcademicRecordClassRanking] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateAcademicRecord] [INT] NOT NULL,
	[ClassRank] [INT] NOT NULL,
	[TotalNumberInClass] [INT] NOT NULL,
	[PercentageRanking] [INT] NULL,
	[ClassRankingDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAcademicRecordClassRanking] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateAcademicRecordClassRanking] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordClassRanking] ADD CONSTRAINT [TeacherCandidateAcademicRecordClassRanking_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordClassRanking] ADD CONSTRAINT [FK_TeacherCandidateAcademicRecordClassRanking_ParentTable] FOREIGN KEY ([tid_TeacherCandidateAcademicRecord])
REFERENCES [t_extension].[TeacherCandidateAcademicRecord] ([tid_TeacherCandidateAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordClassRanking] CHECK CONSTRAINT [FK_TeacherCandidateAcademicRecordClassRanking_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank information of a student in relation to his or her graduating class.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateAcademicRecordClassRanking';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRank';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students in the student''s graduating class.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'TotalNumberInClass';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'PercentageRanking';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date class ranking was determined.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRankingDate';
GO

/****** TABLE: [t_extension].[TeacherCandidateAcademicRecordAcademicHonor] ******/

CREATE TABLE [t_extension].[TeacherCandidateAcademicRecordAcademicHonor]
(
	[tid_TeacherCandidateAcademicRecordAcademicHonor] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateAcademicRecord] [INT] NOT NULL,
	[AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[HonorDescription] [NVARCHAR](80) NULL,
	[HonorAwardDate] [DATE] NULL,
	[HonorAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAcademicRecordAcademicHonor] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateAcademicRecordAcademicHonor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordAcademicHonor] ADD CONSTRAINT [TeacherCandidateAcademicRecordAcademicHonor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordAcademicHonor] ADD CONSTRAINT [FK_TeacherCandidateAcademicRecordAcademicHonor_ParentTable] FOREIGN KEY ([tid_TeacherCandidateAcademicRecord])
REFERENCES [t_extension].[TeacherCandidateAcademicRecord] ([tid_TeacherCandidateAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordAcademicHonor] CHECK CONSTRAINT [FK_TeacherCandidateAcademicRecordAcademicHonor_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Academic distinctions earned by or awarded to the student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateAcademicRecordAcademicHonor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AcademicHonorCategoryType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the honor was awarded or earned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateAcademicRecordRecognition] ******/

CREATE TABLE [t_extension].[TeacherCandidateAcademicRecordRecognition]
(
	[tid_TeacherCandidateAcademicRecordRecognition] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateAcademicRecord] [INT] NOT NULL,
	[RecognitionType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[RecognitionDescription] [NVARCHAR](80) NULL,
	[RecognitionAwardDate] [DATE] NULL,
	[RecognitionAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAcademicRecordRecognition] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateAcademicRecordRecognition] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordRecognition] ADD CONSTRAINT [TeacherCandidateAcademicRecordRecognition_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordRecognition] ADD CONSTRAINT [FK_TeacherCandidateAcademicRecordRecognition_ParentTable] FOREIGN KEY ([tid_TeacherCandidateAcademicRecord])
REFERENCES [t_extension].[TeacherCandidateAcademicRecord] ([tid_TeacherCandidateAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordRecognition] CHECK CONSTRAINT [FK_TeacherCandidateAcademicRecordRecognition_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateAcademicRecordRecognition';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the recognition was awarded or earned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherCandidateAcademicRecordDiploma] ******/

CREATE TABLE [t_extension].[TeacherCandidateAcademicRecordDiploma]
(
	[tid_TeacherCandidateAcademicRecordDiploma] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateAcademicRecord] [INT] NOT NULL,
	[DiplomaAwardDate] [DATE] NOT NULL,
	[DiplomaType] [NVARCHAR](450) NOT NULL,
	[AchievementTitle] [NVARCHAR](60) NULL,
	[AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL,
	[AchievementCategorySystem] [NVARCHAR](60) NULL,
	[IssuerName] [NVARCHAR](150) NULL,
	[IssuerOriginURL] [NVARCHAR](255) NULL,
	[Criteria] [NVARCHAR](150) NULL,
	[CriteriaURL] [NVARCHAR](255) NULL,
	[EvidenceStatement] [NVARCHAR](150) NULL,
	[ImageURL] [NVARCHAR](255) NULL,
	[DiplomaLevelType] [NVARCHAR](450) NULL,
	[CTECompleter] [BIT] NULL,
	[DiplomaDescription] [NVARCHAR](80) NULL,
	[DiplomaAwardExpiresDate] [DATE] NULL,
	[AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateAcademicRecordDiploma] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateAcademicRecordDiploma] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordDiploma] ADD CONSTRAINT [TeacherCandidateAcademicRecordDiploma_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordDiploma] ADD CONSTRAINT [FK_TeacherCandidateAcademicRecordDiploma_ParentTable] FOREIGN KEY ([tid_TeacherCandidateAcademicRecord])
REFERENCES [t_extension].[TeacherCandidateAcademicRecord] ([tid_TeacherCandidateAcademicRecord]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateAcademicRecordDiploma] CHECK CONSTRAINT [FK_TeacherCandidateAcademicRecordDiploma_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Diploma(s) earned by the student.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateAcademicRecordDiploma';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the student met  graduation requirements and was awarded a diploma.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'Criteria';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CriteriaURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'EvidenceStatement';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'ImageURL';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaLevelType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CTECompleter';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of diploma given to the student for accomplishments.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardExpiresDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorNamespace';
GO
/****** TABLE: [t_extension].[TeacherCandidateCharacteristicDescriptor] ******/

CREATE TABLE [t_extension].[TeacherCandidateCharacteristicDescriptor]
(
    [tid_TeacherCandidateCharacteristicDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[TeacherCandidateCharacteristicType] [NVARCHAR](450) NOT NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCharacteristicDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateCharacteristicDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCharacteristicDescriptor] ADD CONSTRAINT [TeacherCandidateCharacteristicDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateCharacteristicDescriptor] ADD CONSTRAINT [TeacherCandidateCharacteristicDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateCharacteristicDescriptor] ADD CONSTRAINT [TeacherCandidateCharacteristicDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The characteristic designated for the TeacherCandidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateCharacteristicDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'TeacherCandidateCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateCharacteristicDescriptor_Id ON [t_extension].[TeacherCandidateCharacteristicDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateCharacteristicDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCharacteristicDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateCharacteristicDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateCharacteristicDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateCharacteristicDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateCharacteristicDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateCharacteristicDescriptor])
REFERENCES [t_extension].[TeacherCandidateCharacteristicDescriptor] ([tid_TeacherCandidateCharacteristicDescriptor]);
ALTER TABLE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateCharacteristicDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TeacherCandidateCharacteristicType] ******/

CREATE TABLE [t_extension].[TeacherCandidateCharacteristicType]
(
	[tid_TeacherCandidateCharacteristicType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_TeacherCandidateCharacteristicType] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateCharacteristicType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCharacteristicType] ADD CONSTRAINT [TeacherCandidateCharacteristicType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateCharacteristicType] ADD CONSTRAINT [TeacherCandidateCharacteristicType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateCharacteristicType] ADD CONSTRAINT [TeacherCandidateCharacteristicType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The characteristic designated for the TeacherCandidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateCharacteristicType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TeacherCandidateCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TeacherCandidateCharacteristic type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[TeacherCandidateCourseTranscript] ******/

CREATE TABLE [t_extension].[TeacherCandidateCourseTranscript]
(
    [tid_TeacherCandidateCourseTranscript] [INT] IDENTITY(1,1) NOT NULL,
	[CourseAttemptResultType] [NVARCHAR](450) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[CourseEducationOrganizationId] [INT] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AttemptedCredits] [DECIMAL](9, 2) NULL,
	[AttemptedCreditType] [NVARCHAR](450) NULL,
	[AttemptedCreditConversion] [DECIMAL](9, 2) NULL,
	[EarnedCredits] [DECIMAL](9, 2) NOT NULL,
	[EarnedCreditType] [NVARCHAR](450) NULL,
	[EarnedCreditConversion] [DECIMAL](9, 2) NULL,
	[WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL,
	[MethodCreditEarnedType] [NVARCHAR](450) NULL,
	[FinalLetterGradeEarned] [NVARCHAR](20) NULL,
	[FinalNumericGradeEarned] [DECIMAL](9, 2) NULL,
	[CourseRepeatCodeType] [NVARCHAR](450) NULL,
	[SchoolId] [INT] NULL,
	[CourseTitle] [NVARCHAR](60) NULL,
	[AlternativeCourseTitle] [NVARCHAR](60) NULL,
	[AlternativeCourseCode] [NVARCHAR](60) NULL,
	[WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCourseTranscript] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateCourseTranscript] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCourseTranscript] ADD CONSTRAINT [TeacherCandidateCourseTranscript_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateCourseTranscript] ADD CONSTRAINT [TeacherCandidateCourseTranscript_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateCourseTranscript] ADD CONSTRAINT [TeacherCandidateCourseTranscript_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is the final record of a student''s performance in their courses at the end of a semester or school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateCourseTranscript';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseAttemptResultType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseEducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditConversion';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'MethodCreditEarnedType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalLetterGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalNumericGradeEarned';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseRepeatCodeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscript', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateCourseTranscript_Id ON [t_extension].[TeacherCandidateCourseTranscript]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateCourseTranscript] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCourseTranscriptSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateCourseTranscript], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateCourseTranscriptSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateCourseTranscriptSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateCourseTranscriptSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateCourseTranscript])
REFERENCES [t_extension].[TeacherCandidateCourseTranscript] ([tid_TeacherCandidateCourseTranscript]);
ALTER TABLE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateCourseTranscriptSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits] ******/

CREATE TABLE [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits]
(
	[tid_TeacherCandidateCourseTranscriptEarnedAdditionalCredits] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateCourseTranscript] [INT] NOT NULL,
	[AdditionalCreditType] [NVARCHAR](450) NOT NULL,
	[Credits] [DECIMAL](9, 2) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateCourseTranscriptEarnedAdditionalCredits] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateCourseTranscriptEarnedAdditionalCredits] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [TeacherCandidateCourseTranscriptEarnedAdditionalCredits_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [FK_TeacherCandidateCourseTranscriptEarnedAdditionalCredits_ParentTable] FOREIGN KEY ([tid_TeacherCandidateCourseTranscript])
REFERENCES [t_extension].[TeacherCandidateCourseTranscript] ([tid_TeacherCandidateCourseTranscript]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits] CHECK CONSTRAINT [FK_TeacherCandidateCourseTranscriptEarnedAdditionalCredits_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateCourseTranscriptEarnedAdditionalCredits';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'AdditionalCreditType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateCourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'Credits';
GO
/****** TABLE: [t_extension].[TeacherCandidateFieldworkAbsenceEvent] ******/

CREATE TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEvent]
(
    [tid_TeacherCandidateFieldworkAbsenceEvent] [INT] IDENTITY(1,1) NOT NULL,
	[AbsenceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[EventDate] [DATE] NOT NULL,
	[AbsenceEventReason] [NVARCHAR](40) NULL,
	[HoursAbsent] [DECIMAL](3, 2) NULL,
	[AbsenceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateFieldworkAbsenceEvent] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateFieldworkAbsenceEvent] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEvent] ADD CONSTRAINT [TeacherCandidateFieldworkAbsenceEvent_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEvent] ADD CONSTRAINT [TeacherCandidateFieldworkAbsenceEvent_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEvent] ADD CONSTRAINT [TeacherCandidateFieldworkAbsenceEvent_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the staff absence', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateFieldworkAbsenceEvent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'AbsenceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this absence event', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'EventDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the teacher candidate absence', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'AbsenceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The hours the staff was absent if not the entire working day.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'HoursAbsent';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkAbsenceEvent', @level2type=N'COLUMN', @level2name=N'AbsenceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateFieldworkAbsenceEvent_Id ON [t_extension].[TeacherCandidateFieldworkAbsenceEvent]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateFieldworkAbsenceEvent] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateFieldworkAbsenceEventSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateFieldworkAbsenceEvent], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateFieldworkAbsenceEventSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateFieldworkAbsenceEventSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateFieldworkAbsenceEventSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateFieldworkAbsenceEvent])
REFERENCES [t_extension].[TeacherCandidateFieldworkAbsenceEvent] ([tid_TeacherCandidateFieldworkAbsenceEvent]);
ALTER TABLE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateFieldworkAbsenceEventSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateFieldworkExperience] ******/

CREATE TABLE [t_extension].[TeacherCandidateFieldworkExperience]
(
    [tid_TeacherCandidateFieldworkExperience] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[FieldworkExperienceSchoolId] [INT] NOT NULL,
	[FieldworkIdentifier] [NVARCHAR](20) NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NULL,
	[SequenceOfCourse] [INT] NULL,
	[LocalCourseCode] [NVARCHAR](60) NULL,
	[SchoolYear] [SMALLINT] NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NULL,
	[SchoolId] [INT] NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NULL,
	[ClassPeriodName] [NVARCHAR](20) NULL,
	[FieldworkTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[HoursPerWeek] [DECIMAL](5, 2) NULL,
	[EndDate] [DATE] NULL,
	[ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL,
	[FieldworkTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateFieldworkExperience] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateFieldworkExperience] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperience] ADD CONSTRAINT [TeacherCandidateFieldworkExperience_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperience] ADD CONSTRAINT [TeacherCandidateFieldworkExperience_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperience] ADD CONSTRAINT [TeacherCandidateFieldworkExperience_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The information regarding a postsecondary instructional course in a particular field of study that typically involves a prescribed number or instruction periods or meetings for enrolled students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateFieldworkExperience';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate first starts fieldwork.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkExperienceSchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier for the fieldwork experience', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of hours per week for fieldwork.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'HoursPerWeek';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate ends fieldwork.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'ProgramGatewayDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'FieldworkTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperience', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateFieldworkExperience_Id ON [t_extension].[TeacherCandidateFieldworkExperience]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateFieldworkExperience] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateFieldworkExperienceSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateFieldworkExperience], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateFieldworkExperienceSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateFieldworkExperienceSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateFieldworkExperienceSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateFieldworkExperience])
REFERENCES [t_extension].[TeacherCandidateFieldworkExperience] ([tid_TeacherCandidateFieldworkExperience]);
ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateFieldworkExperienceSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TeacherCandidateFieldworkExperienceCoteaching] ******/

CREATE TABLE [t_extension].[TeacherCandidateFieldworkExperienceCoteaching]
(
	[tid_TeacherCandidateFieldworkExperienceCoteaching] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherCandidateFieldworkExperience] [INT] NOT NULL,
	[CoteachingBeginDate] [DATE] NOT NULL,
	[CoteachingEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateFieldworkExperienceCoteaching] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherCandidateFieldworkExperienceCoteaching] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperienceCoteaching] ADD CONSTRAINT [TeacherCandidateFieldworkExperienceCoteaching_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperienceCoteaching] ADD CONSTRAINT [FK_TeacherCandidateFieldworkExperienceCoteaching_ParentTable] FOREIGN KEY ([tid_TeacherCandidateFieldworkExperience])
REFERENCES [t_extension].[TeacherCandidateFieldworkExperience] ([tid_TeacherCandidateFieldworkExperience]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateFieldworkExperienceCoteaching] CHECK CONSTRAINT [FK_TeacherCandidateFieldworkExperienceCoteaching_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The act of two teachers (teacher candidate and cooperating teacher) working together with groups of students; sharing the planning, organization, delivery, and assessment of instruction, as well as the physical space.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateFieldworkExperienceCoteaching';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate first starts co-teaching.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperienceCoteaching', @level2type=N'COLUMN', @level2name=N'CoteachingBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate stopped co-teaching.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateFieldworkExperienceCoteaching', @level2type=N'COLUMN', @level2name=N'CoteachingEndDate';
GO
/****** TABLE: [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] ******/

CREATE TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance]
(
    [tid_TeacherCandidateProfessionalDevelopmentEventAttendance] [INT] IDENTITY(1,1) NOT NULL,
	[AttendanceDate] [DATE] NOT NULL,
	[ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[AttendanceEventReason] [NVARCHAR](40) NULL,
	[AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateProfessionalDevelopmentEventAttendance] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateProfessionalDevelopmentEventAttendance] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [TeacherCandidateProfessionalDevelopmentEventAttendance_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [TeacherCandidateProfessionalDevelopmentEventAttendance_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] ADD CONSTRAINT [TeacherCandidateProfessionalDevelopmentEventAttendance_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a teacher candidate is in attendance for professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateProfessionalDevelopmentEventAttendance';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name for a professional development.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'ProfessionalDevelopmentTitle';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a teacher candidate''s absence.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateProfessionalDevelopmentEventAttendance', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateProfessionalDevelopmentEventAttendance_Id ON [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateProfessionalDevelopmentEventAttendance] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateProfessionalDevelopmentEventAttendance], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateProfessionalDevelopmentEventAttendance])
REFERENCES [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] ([tid_TeacherCandidateProfessionalDevelopmentEventAttendance]);
ALTER TABLE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateStaffAssociation] ******/

CREATE TABLE [t_extension].[TeacherCandidateStaffAssociation]
(
    [tid_TeacherCandidateStaffAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[StaffUniqueId] [NVARCHAR](32) NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStaffAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateStaffAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStaffAssociation] ADD CONSTRAINT [TeacherCandidateStaffAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateStaffAssociation] ADD CONSTRAINT [TeacherCandidateStaffAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateStaffAssociation] ADD CONSTRAINT [TeacherCandidateStaffAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association associates teacher candidates to a staff member.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateStaffAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStaffAssociation', @level2type=N'COLUMN', @level2name=N'StaffUniqueId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStaffAssociation', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate is associated to the staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStaffAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the teacher candidate stops association with the staff.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStaffAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateStaffAssociation_Id ON [t_extension].[TeacherCandidateStaffAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateStaffAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStaffAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateStaffAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStaffAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStaffAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStaffAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateStaffAssociation])
REFERENCES [t_extension].[TeacherCandidateStaffAssociation] ([tid_TeacherCandidateStaffAssociation]);
ALTER TABLE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStaffAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasure] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasure]
(
    [tid_TeacherCandidateStudentGrowthMeasure] [INT] IDENTITY(1,1) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[StudentGrowthMeasureDate] [DATE] NULL,
	[ResultDatatypeType] [NVARCHAR](450) NULL,
	[StudentGrowthTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[StudentGrowthTargetScore] [INT] NULL,
	[StudentGrowthActualScore] [INT] NOT NULL,
	[StudentGrowthMet] [BIT] NOT NULL,
	[StudentGrowthNCount] [INT] NULL,
	[StudentGrowthTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasure] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateStudentGrowthMeasure] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasure] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasure_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasure] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasure_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasure] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasure_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Complex type that provides data about a group of students and their student growth as it pertains to the Teacher Candidate', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateStudentGrowthMeasure';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the student growth is measured', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthMeasureDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'ResultDatatypeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The target score that has been set for the group of students as it pertains to their student growth.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthTargetScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The actual score a group of students receives on their student growth assessment', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthActualScore';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies if the student growth target score is achieved.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthMet';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of students included in the average score result.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthNCount';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasure', @level2type=N'COLUMN', @level2name=N'StudentGrowthTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateStudentGrowthMeasure_Id ON [t_extension].[TeacherCandidateStudentGrowthMeasure]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateStudentGrowthMeasure] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasureSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateStudentGrowthMeasure], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateStudentGrowthMeasure])
REFERENCES [t_extension].[TeacherCandidateStudentGrowthMeasure] ([tid_TeacherCandidateStudentGrowthMeasure]);
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation]
(
    [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[CourseCode] [NVARCHAR](60) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasureCourseAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureCourseAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureCourseAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureCourseAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Any courses associated with the teacher candidate''s student growth data, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'CourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureCourseAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateStudentGrowthMeasureCourseAssociation_Id ON [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateStudentGrowthMeasureCourseAssociation])
REFERENCES [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] ([tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]);
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
(
    [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Any education organizations associated with the teacher candidate''s student growth data, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation_Id ON [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation])
REFERENCES [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ([tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]);
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation]
(
    [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[ClassPeriodName] [NVARCHAR](20) NOT NULL,
	[ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
	[FactAsOfDate] [DATE] NOT NULL,
	[LocalCourseCode] [NVARCHAR](60) NOT NULL,
	[SchoolId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NOT NULL,
	[SequenceOfCourse] [INT] NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[UniqueSectionCode] [NVARCHAR](255) NOT NULL,
	[BeginDate] [DATE] NULL,
	[EndDate] [DATE] NULL,
	[TermDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasureSectionAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureSectionAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureSectionAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] ADD CONSTRAINT [TeacherCandidateStudentGrowthMeasureSectionAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Any sections associated with the teacher candidate''s student growth data, if applicable.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassPeriodName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date for which the data element is relevant', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'FactAsOfDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'LocalCourseCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the data is associated', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Begin date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateStudentGrowthMeasureSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateStudentGrowthMeasureSectionAssociation_Id ON [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateStudentGrowthMeasureSectionAssociation])
REFERENCES [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] ([tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]);
ALTER TABLE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] ******/

CREATE TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation]
(
    [tid_TeacherCandidateTeacherPreparationProviderAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[EntryDate] [DATE] NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[TeacherPreparationProviderId] [INT] NOT NULL,
	[SchoolYear] [SMALLINT] NULL,
	[EntryTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ExitWithdrawDate] [DATE] NULL,
	[ExitWithdrawTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ClassOfSchoolYear] [SMALLINT] NULL,
	[ExitWithdrawTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[EntryTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateTeacherPreparationProviderAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateTeacherPreparationProviderAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] ADD CONSTRAINT [TeacherCandidateTeacherPreparationProviderAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] ADD CONSTRAINT [TeacherCandidateTeacherPreparationProviderAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] ADD CONSTRAINT [TeacherCandidateTeacherPreparationProviderAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the association between the Teacher Candidate and the TeacherPreparationProviderProgram', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateTeacherPreparationProviderAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Entry date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'EntryDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identification code for the Teacher Preparation Provider', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProviderId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'School Year for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'EntryTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Exit date for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'School Year cohort for the association', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'ClassOfSchoolYear';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderAssociation', @level2type=N'COLUMN', @level2name=N'EntryTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateTeacherPreparationProviderAssociation_Id ON [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateTeacherPreparationProviderAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateTeacherPreparationProviderAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateTeacherPreparationProviderAssociation])
REFERENCES [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] ([tid_TeacherCandidateTeacherPreparationProviderAssociation]);
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] ******/

CREATE TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation]
(
    [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation] [INT] IDENTITY(1,1) NOT NULL,
	[BeginDate] [DATE] NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL,
	[EndDate] [DATE] NULL,
	[ReasonExitedDescriptorCodeValue] [NVARCHAR](50) NULL,
	[ReasonExitedDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateTeacherPreparationProviderProgramAssociation] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] ADD CONSTRAINT [TeacherCandidateTeacherPreparationProviderProgramAssociation_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] ADD CONSTRAINT [TeacherCandidateTeacherPreparationProviderProgramAssociation_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] ADD CONSTRAINT [TeacherCandidateTeacherPreparationProviderProgramAssociation_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information about the association between the Teacher Candidate and the TeacherPreparationProviderProgram', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The begin date for the association.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a teacher candidate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'TeacherCandidateIdentifier';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the association.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'EndDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'ReasonExitedDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherCandidateTeacherPreparationProviderProgramAssociation', @level2type=N'COLUMN', @level2name=N'ReasonExitedDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherCandidateTeacherPreparationProviderProgramAssociation_Id ON [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord] ADD CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherCandidateTeacherPreparationProviderProgramAssociation])
REFERENCES [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] ([tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]);
ALTER TABLE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord] CHECK CONSTRAINT [FK_TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherPreparationProgramTypeDescriptor] ******/

CREATE TABLE [t_extension].[TeacherPreparationProgramTypeDescriptor]
(
    [tid_TeacherPreparationProgramTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[TeacherPreparationProgramType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProgramTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherPreparationProgramTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProgramTypeDescriptor] ADD CONSTRAINT [TeacherPreparationProgramTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherPreparationProgramTypeDescriptor] ADD CONSTRAINT [TeacherPreparationProgramTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherPreparationProgramTypeDescriptor] ADD CONSTRAINT [TeacherPreparationProgramTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the type of teacher prep program (e.g., college, alternative, TFA, etc.).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherPreparationProgramTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramTypeDescriptor', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherPreparationProgramTypeDescriptor_Id ON [t_extension].[TeacherPreparationProgramTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherPreparationProgramTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProgramTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherPreparationProgramTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TeacherPreparationProgramTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TeacherPreparationProgramTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TeacherPreparationProgramTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherPreparationProgramTypeDescriptor])
REFERENCES [t_extension].[TeacherPreparationProgramTypeDescriptor] ([tid_TeacherPreparationProgramTypeDescriptor]);
ALTER TABLE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TeacherPreparationProgramTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TeacherPreparationProgramType] ******/

CREATE TABLE [t_extension].[TeacherPreparationProgramType]
(
	[tid_TeacherPreparationProgramType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_TeacherPreparationProgramType] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherPreparationProgramType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProgramType] ADD CONSTRAINT [TeacherPreparationProgramType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherPreparationProgramType] ADD CONSTRAINT [TeacherPreparationProgramType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherPreparationProgramType] ADD CONSTRAINT [TeacherPreparationProgramType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the type of teacher prep program (e.g., college, alternative, TFA, etc.).', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherPreparationProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TeacherPreparationProgram type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TeacherPreparationProgram type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProgramType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[TeacherPreparationProvider] ******/

CREATE TABLE [t_extension].[TeacherPreparationProvider]
(
    [tid_TeacherPreparationProvider] [INT] IDENTITY(1,1) NOT NULL,
	[TeacherPreparationProviderId] [INT] NOT NULL,
	[UniversityId] [INT] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProvider] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherPreparationProvider] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProvider] ADD CONSTRAINT [TeacherPreparationProvider_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherPreparationProvider] ADD CONSTRAINT [TeacherPreparationProvider_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherPreparationProvider] ADD CONSTRAINT [TeacherPreparationProvider_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherPreparationProvider';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identification code for the Teacher Preparation Provider', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProvider', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProviderId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identification code of the University', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProvider', @level2type=N'COLUMN', @level2name=N'UniversityId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherPreparationProvider_Id ON [t_extension].[TeacherPreparationProvider]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherPreparationProviderSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherPreparationProviderSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherPreparationProvider] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProviderSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherPreparationProvider], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProviderSnapshotRecord] ADD CONSTRAINT [FK_TeacherPreparationProviderSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherPreparationProviderSnapshotRecord] CHECK CONSTRAINT [FK_TeacherPreparationProviderSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherPreparationProviderSnapshotRecord] ADD CONSTRAINT [FK_TeacherPreparationProviderSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherPreparationProvider])
REFERENCES [t_extension].[TeacherPreparationProvider] ([tid_TeacherPreparationProvider]);
ALTER TABLE [t_extension].[TeacherPreparationProviderSnapshotRecord] CHECK CONSTRAINT [FK_TeacherPreparationProviderSnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[TeacherPreparationProviderProgram] ******/

CREATE TABLE [t_extension].[TeacherPreparationProviderProgram]
(
    [tid_TeacherPreparationProviderProgram] [INT] IDENTITY(1,1) NOT NULL,
	[EducationOrganizationId] [INT] NOT NULL,
	[ProgramName] [NVARCHAR](60) NOT NULL,
	[ProgramType] [NVARCHAR](450) NOT NULL,
	[ProgramId] [NVARCHAR](20) NULL,
	[MajorSpecialization] [NVARCHAR](75) NULL,
	[MinorSpecialization] [NVARCHAR](75) NULL,
	[TeacherPreparationProgramTypeDescriptorCodeValue] [NVARCHAR](50) NULL,
	[TPPProgramPathwayDescriptorCodeValue] [NVARCHAR](50) NULL,
	[TPPProgramPathwayDescriptorNamespace] [NVARCHAR](255) NULL,
	[TeacherPreparationProgramTypeDescriptorNamespace] [NVARCHAR](255) NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProviderProgram] PRIMARY KEY NONCLUSTERED
(
    [tid_TeacherPreparationProviderProgram] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProviderProgram] ADD CONSTRAINT [TeacherPreparationProviderProgram_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherPreparationProviderProgram] ADD CONSTRAINT [TeacherPreparationProviderProgram_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TeacherPreparationProviderProgram] ADD CONSTRAINT [TeacherPreparationProviderProgram_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents information regarding a teacher preparation provider program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherPreparationProviderProgram';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'ProgramName';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'ProgramType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'ProgramId';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The major area for a degree or area of specialization for a certificate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'MajorSpecialization';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minor area for a degree or area of specialization for a certificate.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'MinorSpecialization';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'TPPProgramPathwayDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'TPPProgramPathwayDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgram', @level2type=N'COLUMN', @level2name=N'TeacherPreparationProgramTypeDescriptorNamespace';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTeacherPreparationProviderProgram_Id ON [t_extension].[TeacherPreparationProviderProgram]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TeacherPreparationProviderProgramSnapshotRecord] ******/

CREATE TABLE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TeacherPreparationProviderProgram] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProviderProgramSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TeacherPreparationProviderProgram], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord] ADD CONSTRAINT [FK_TeacherPreparationProviderProgramSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord] CHECK CONSTRAINT [FK_TeacherPreparationProviderProgramSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord] ADD CONSTRAINT [FK_TeacherPreparationProviderProgramSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TeacherPreparationProviderProgram])
REFERENCES [t_extension].[TeacherPreparationProviderProgram] ([tid_TeacherPreparationProviderProgram]);
ALTER TABLE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord] CHECK CONSTRAINT [FK_TeacherPreparationProviderProgramSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TeacherPreparationProviderProgramGradeLevel] ******/

CREATE TABLE [t_extension].[TeacherPreparationProviderProgramGradeLevel]
(
	[tid_TeacherPreparationProviderProgramGradeLevel] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherPreparationProviderProgram] [INT] NOT NULL,
	[GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProviderProgramGradeLevel] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherPreparationProviderProgramGradeLevel] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProviderProgramGradeLevel] ADD CONSTRAINT [TeacherPreparationProviderProgramGradeLevel_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherPreparationProviderProgramGradeLevel] ADD CONSTRAINT [FK_TeacherPreparationProviderProgramGradeLevel_ParentTable] FOREIGN KEY ([tid_TeacherPreparationProviderProgram])
REFERENCES [t_extension].[TeacherPreparationProviderProgram] ([tid_TeacherPreparationProviderProgram]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherPreparationProviderProgramGradeLevel] CHECK CONSTRAINT [FK_TeacherPreparationProviderProgramGradeLevel_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels served at the TPP Program.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherPreparationProviderProgramGradeLevel';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgramGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgramGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorNamespace';
GO

/****** TABLE: [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree] ******/

CREATE TABLE [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree]
(
	[tid_TeacherPreparationProviderProgramTPPProgramDegree] [INT] IDENTITY(1,1) NOT NULL,
    [tid_TeacherPreparationProviderProgram] [INT] NOT NULL,
	[AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TPPDegreeTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL,
	[TPPDegreeTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TeacherPreparationProviderProgramTPPProgramDegree] PRIMARY KEY NONCLUSTERED
(
	[tid_TeacherPreparationProviderProgramTPPProgramDegree] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree] ADD CONSTRAINT [TeacherPreparationProviderProgramTPPProgramDegree_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree] ADD CONSTRAINT [FK_TeacherPreparationProviderProgramTPPProgramDegree_ParentTable] FOREIGN KEY ([tid_TeacherPreparationProviderProgram])
REFERENCES [t_extension].[TeacherPreparationProviderProgram] ([tid_TeacherPreparationProviderProgram]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree] CHECK CONSTRAINT [FK_TeacherPreparationProviderProgramTPPProgramDegree_ParentTable];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Details of the degree.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TeacherPreparationProviderProgramTPPProgramDegree';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgramTPPProgramDegree', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgramTPPProgramDegree', @level2type=N'COLUMN', @level2name=N'TPPDegreeTypeDescriptorCodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgramTPPProgramDegree', @level2type=N'COLUMN', @level2name=N'TPPDegreeTypeDescriptorNamespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TeacherPreparationProviderProgramTPPProgramDegree', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorNamespace';
GO
/****** TABLE: [t_extension].[ThemeDescriptor] ******/

CREATE TABLE [t_extension].[ThemeDescriptor]
(
    [tid_ThemeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[ThemeType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ThemeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_ThemeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ThemeDescriptor] ADD CONSTRAINT [ThemeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ThemeDescriptor] ADD CONSTRAINT [ThemeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ThemeDescriptor] ADD CONSTRAINT [ThemeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the theme of the specified level of the rubric.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ThemeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeDescriptor', @level2type=N'COLUMN', @level2name=N'ThemeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TThemeDescriptor_Id ON [t_extension].[ThemeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[ThemeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[ThemeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_ThemeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_ThemeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_ThemeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ThemeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ThemeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[ThemeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ThemeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[ThemeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_ThemeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_ThemeDescriptor])
REFERENCES [t_extension].[ThemeDescriptor] ([tid_ThemeDescriptor]);
ALTER TABLE [t_extension].[ThemeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_ThemeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[ThemeType] ******/

CREATE TABLE [t_extension].[ThemeType]
(
	[tid_ThemeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_ThemeType] PRIMARY KEY NONCLUSTERED
(
	[tid_ThemeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ThemeType] ADD CONSTRAINT [ThemeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ThemeType] ADD CONSTRAINT [ThemeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ThemeType] ADD CONSTRAINT [ThemeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the theme types.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ThemeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Theme type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Theme type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ThemeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[TPPDegreeTypeDescriptor] ******/

CREATE TABLE [t_extension].[TPPDegreeTypeDescriptor]
(
    [tid_TPPDegreeTypeDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[TPPDegreeType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TPPDegreeTypeDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_TPPDegreeTypeDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TPPDegreeTypeDescriptor] ADD CONSTRAINT [TPPDegreeTypeDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TPPDegreeTypeDescriptor] ADD CONSTRAINT [TPPDegreeTypeDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TPPDegreeTypeDescriptor] ADD CONSTRAINT [TPPDegreeTypeDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the degree that a teacher candidate accomplishes.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TPPDegreeTypeDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeTypeDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeTypeDescriptor', @level2type=N'COLUMN', @level2name=N'TPPDegreeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeTypeDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeTypeDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeTypeDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeTypeDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTPPDegreeTypeDescriptor_Id ON [t_extension].[TPPDegreeTypeDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TPPDegreeTypeDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TPPDegreeTypeDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TPPDegreeTypeDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TPPDegreeTypeDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TPPDegreeTypeDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TPPDegreeTypeDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TPPDegreeTypeDescriptor])
REFERENCES [t_extension].[TPPDegreeTypeDescriptor] ([tid_TPPDegreeTypeDescriptor]);
ALTER TABLE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TPPDegreeTypeDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TPPDegreeType] ******/

CREATE TABLE [t_extension].[TPPDegreeType]
(
	[tid_TPPDegreeType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_TPPDegreeType] PRIMARY KEY NONCLUSTERED
(
	[tid_TPPDegreeType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TPPDegreeType] ADD CONSTRAINT [TPPDegreeType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TPPDegreeType] ADD CONSTRAINT [TPPDegreeType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TPPDegreeType] ADD CONSTRAINT [TPPDegreeType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the type of degree awarded.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TPPDegreeType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TPPDegree type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TPPDegree type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPDegreeType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[TPPProgramPathwayDescriptor] ******/

CREATE TABLE [t_extension].[TPPProgramPathwayDescriptor]
(
    [tid_TPPProgramPathwayDescriptor] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[TPPProgramPathwayType] [NVARCHAR](450) NULL,
	[Namespace] [NVARCHAR](255) NOT NULL,
	[ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TPPProgramPathwayDescriptor] PRIMARY KEY NONCLUSTERED
(
    [tid_TPPProgramPathwayDescriptor] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TPPProgramPathwayDescriptor] ADD CONSTRAINT [TPPProgramPathwayDescriptor_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TPPProgramPathwayDescriptor] ADD CONSTRAINT [TPPProgramPathwayDescriptor_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TPPProgramPathwayDescriptor] ADD CONSTRAINT [TPPProgramPathwayDescriptor_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptor holds the program pathways available at TPP''s.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TPPProgramPathwayDescriptor';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayDescriptor', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A descripton that is used to refer to the type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayDescriptor', @level2type=N'COLUMN', @level2name=N'TPPProgramPathwayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The namespace of the descriptor.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayDescriptor', @level2type=N'COLUMN', @level2name=N'Namespace';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayDescriptor', @level2type=N'COLUMN',@level2name=N'ShortDescription';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayDescriptor', @level2type=N'COLUMN',@level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveBeginDate';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.' , @level0type=N'SCHEMA',@level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayDescriptor', @level2type=N'COLUMN',@level2name=N'EffectiveEndDate';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TTPPProgramPathwayDescriptor_Id ON [t_extension].[TPPProgramPathwayDescriptor]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord] ******/

CREATE TABLE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_TPPProgramPathwayDescriptor] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_TPPProgramPathwayDescriptorSnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_TPPProgramPathwayDescriptor], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TPPProgramPathwayDescriptorSnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TPPProgramPathwayDescriptorSnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord] ADD CONSTRAINT [FK_TPPProgramPathwayDescriptorSnapshotRecord_ParentTable] FOREIGN KEY ([tid_TPPProgramPathwayDescriptor])
REFERENCES [t_extension].[TPPProgramPathwayDescriptor] ([tid_TPPProgramPathwayDescriptor]);
ALTER TABLE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord] CHECK CONSTRAINT [FK_TPPProgramPathwayDescriptorSnapshotRecord_ParentTable];
GO

/****** TABLE: [t_extension].[TPPProgramPathwayType] ******/

CREATE TABLE [t_extension].[TPPProgramPathwayType]
(
	[tid_TPPProgramPathwayType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
CONSTRAINT [PK_TPPProgramPathwayType] PRIMARY KEY NONCLUSTERED
(
	[tid_TPPProgramPathwayType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[TPPProgramPathwayType] ADD CONSTRAINT [TPPProgramPathwayType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[TPPProgramPathwayType] ADD CONSTRAINT [TPPProgramPathwayType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[TPPProgramPathwayType] ADD CONSTRAINT [TPPProgramPathwayType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Map for the program pathways.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'TPPProgramPathwayType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TPPProgramPathway type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TPPProgramPathway type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'TPPProgramPathwayType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO
/****** TABLE: [t_extension].[University] ******/

CREATE TABLE [t_extension].[University]
(
    [tid_University] [INT] IDENTITY(1,1) NOT NULL,
	[UniversityId] [INT] NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_University] PRIMARY KEY NONCLUSTERED
(
    [tid_University] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[University] ADD CONSTRAINT [University_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[University] ADD CONSTRAINT [University_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[University] ADD CONSTRAINT [University_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'University';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identification code of the University', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'University', @level2type=N'COLUMN', @level2name=N'UniversityId';
GO

CREATE UNIQUE NONCLUSTERED INDEX UX_TUniversity_Id ON [t_extension].[University]
    (t_PartitionYearId, Id, LastModifiedDate);
GO

/****** TABLE: [t_extension].[UniversitySnapshotRecord] ******/

CREATE TABLE [t_extension].[UniversitySnapshotRecord]
(
    [SnapshotId] [INT] NOT NULL,
    [tid_University] [INT] NOT NULL,
    [EffectiveBeginDate] [DATE] NOT NULL,
    [EffectiveEndDate] [DATE] NULL,
	[Id] [UNIQUEIDENTIFIER] NOT NULL,
	[t_PartitionYearId] [SMALLINT] NULL
CONSTRAINT [PK_UniversitySnapshotRecord] PRIMARY KEY NONCLUSTERED
(
    [SnapshotId], [tid_University], [EffectiveBeginDate] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[UniversitySnapshotRecord] ADD CONSTRAINT [FK_UniversitySnapshotRecord_Snapshot] FOREIGN KEY ([SnapshotId])
REFERENCES [tods].[Snapshot] ([SnapshotId]) ON DELETE CASCADE;
ALTER TABLE [t_extension].[UniversitySnapshotRecord] CHECK CONSTRAINT [FK_UniversitySnapshotRecord_Snapshot];
ALTER TABLE [t_extension].[UniversitySnapshotRecord] ADD CONSTRAINT [FK_UniversitySnapshotRecord_ParentTable] FOREIGN KEY ([tid_University])
REFERENCES [t_extension].[University] ([tid_University]);
ALTER TABLE [t_extension].[UniversitySnapshotRecord] CHECK CONSTRAINT [FK_UniversitySnapshotRecord_ParentTable];
GO
/****** TABLE: [t_extension].[ValueType] ******/

CREATE TABLE [t_extension].[ValueType]
(
    [tid_ValueType] [INT] IDENTITY(1,1) NOT NULL,
	[CodeValue] [NVARCHAR](50) NOT NULL,
	[Description] [NVARCHAR](1024) NOT NULL,
	[ShortDescription] [NVARCHAR](450) NOT NULL,
	[CreateDate] [DATETIME] NOT NULL,
	[LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL
CONSTRAINT [PK_ValueType] PRIMARY KEY NONCLUSTERED
(
    [tid_ValueType] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

ALTER TABLE [t_extension].[ValueType] ADD CONSTRAINT [ValueType_DF_CreateDate] DEFAULT (GETDATE()) FOR [CreateDate];
ALTER TABLE [t_extension].[ValueType] ADD CONSTRAINT [ValueType_DF_Id] DEFAULT (NEWID()) FOR [Id];
ALTER TABLE [t_extension].[ValueType] ADD CONSTRAINT [ValueType_DF_LastModifiedDate]  DEFAULT (GETDATE()) FOR [LastModifiedDate];
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type (i.e. actual or projected) of value.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE', @level1name=N'ValueType';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ValueType', @level2type=N'COLUMN', @level2name=N'CodeValue';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Value type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ValueType', @level2type=N'COLUMN', @level2name=N'Description';
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Value type.', @level0type=N'SCHEMA', @level0name=N't_extension', @level1type=N'TABLE',@level1name=N'ValueType', @level2type=N'COLUMN', @level2name=N'ShortDescription';
GO


/****** PROCEDURE: [tods].[usp_CreateInitialPartitionScheme] ******/

IF OBJECT_ID('[tods].[usp_CreateInitialPartitionScheme]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_CreateInitialPartitionScheme];
GO

CREATE PROCEDURE [tods].[usp_CreateInitialPartitionScheme]
AS
BEGIN
    SET NOCOUNT ON;

    /*
    ASSUMPTIONS:
    1. dbo.PartitionYearConfig table has been loaded to reflect the SchoolYears (current, plus previous 11)
       with related BeginDate and EndDate
    */

    /*
    Step 0: Prep
        a. declare all variables used
        b. set up temp table of filegroup and files
    */
    DECLARE @DatabaseName NVARCHAR(128)
            , @FGDatabaseName NVARCHAR(128)
            , @SqlDirectory NVARCHAR(128)
            , @Id INT
            , @MaxId INT
            , @Sql NVARCHAR(4000)
            , @FileGroupName NVARCHAR(128)
            , @FileGroupFileName NVARCHAR(260)
            , @MinSchoolYear INT
            , @CheckSchoolYear INT
            , @Count INT = 1
            , @MaxCount INT = 11
            , @ErrMsg NVARCHAR(50)
            , @List NVARCHAR(4000);

    BEGIN TRY
        IF OBJECT_ID('tempdb..#TempFileGroup') IS NOT NULL
            DROP TABLE #TempFileGroup;

        CREATE TABLE #TempFileGroup
        (
            Id INT IDENTITY NOT NULL
            , FileGroupName NVARCHAR(128) NOT NULL
            , FileGroupFileName NVARCHAR(260) NOT NULL
        );

        SET @DatabaseName = DB_NAME();
        SET @FGDatabaseName = (SELECT SUBSTRING(DB_NAME(), 1, 120));
        SET @SqlDirectory = (SELECT SUBSTRING(physical_name, 1, CHARINDEX(N'master.mdf', LOWER(physical_name)) - 1) AS DataFileLocation
                            FROM master.sys.master_files AS M
                            WHERE M.database_id = 1
                            AND FILE_ID = 1);

        -- Process cannot continue without read permissions to master
        IF @SqlDirectory IS NULL
        RETURN 'Could not determine data directory, make sure that you have select permission on master'

        SET @Id = 1;
        SET @MaxId = 12;

        WHILE @Id <= @MaxId
            BEGIN
                -- Generating the FileGroupNames and FileGroupFileNames:
                SET NOCOUNT ON;
                INSERT INTO #TempFileGroup
                (FileGroupName, FileGroupFileName)
                SELECT
                    CASE
                        WHEN @Id < 10 THEN @FGDatabaseName + N'DP0' + CAST(@Id AS NVARCHAR(10))
                        ELSE @FGDatabaseName + N'DP' + CAST(@id AS NVARCHAR(10))
                    END AS FileGroupName
                  , CASE
                        WHEN @Id < 10 THEN @SqlDirectory + @FGDatabaseName + N'DP0' + CAST(@Id AS NVARCHAR(10)) + N'.ndf'
                        ELSE @SqlDirectory + @FGDatabaseName + N'DP' + CAST(@Id AS NVARCHAR(10)) + N'.ndf'
                    END AS FileGroupFileName;

                SET @Id = @Id + 1;
            END

        /*
        Step 1: create the filegroups required to create the partition scheme
                and add the database files to each filegroup:

                NOTE: creating file group files with properties:
                      SIZE = 750MB
                      MAXSIZE = 50000MB -> 50GB
                      FILEGROWTH = 500MB

            ASSUMPTION: the filegroup data base files will be housed in default SQL Server Data directory.

        */
        SET @Id = 1;
        SET @MaxId = 12;
        WHILE @Id <= @MaxId
            BEGIN
                SET @FileGroupName = (SELECT T.FileGroupName FROM #TempFileGroup T WHERE T.Id = @Id);

                SET @FileGroupFileName = (SELECT T.FileGroupFileName FROM #TempFileGroup T WHERE T.Id = @Id);

                SET @Id = @Id + 1;

                -- FIRST: add the filegroup:
                SET @Sql = N'ALTER DATABASE ' + @DatabaseName + CHAR(10)
                           + N'ADD FILEGROUP ' + @FileGroupName + N';' + CHAR(10);

                EXECUTE sp_executesql @sql;

                -- SECOND: add a database file to the filegroup just added:
                SET @Sql = N'ALTER DATABASE ' + @DatabaseName + CHAR(10)
                           + N'ADD FILE' + CHAR(10)
                           + N'(NAME = N' + '''' + @FileGroupName + '''' + CHAR(10)
                           + N'    , FILENAME = N' + '''' + @FileGroupFileName + '''' + CHAR(10)
                           + N'    , SIZE = 750MB' + CHAR(10)
                           + N'    , MAXSIZE = 10000MB' + CHAR(10)
                           + N'    , FILEGROWTH = 500MB )' + CHAR(10)
                           + N'TO FILEGROUP ' + @FileGroupName + N';' + CHAR(10);

                EXECUTE sp_executesql @Sql;
            END



        /*
        Step 2: setup tables that have the key column needed to partition on:
                for TODS it's the t_PartitionYearId column
                (see 01-CreateTables.sql script)

                By default, SQL Server allocates a single partition when the table is created -
                to view run the following code:
        --SELECT O.name AS ObjectName
        --    , I.name AS IndexName
        --    , P.partition_id
        --    , P.partition_number
        --    , P.[rows]
        --FROM sys.partitions AS P
        --INNER JOIN sys.objects O ON O.object_id = P.object_id
        --INNER JOIN sys.indexes I ON I.object_id = P.object_id
        --                        AND P.index_id = I.index_id
        --WHERE O.name = N'table name goes here';
        */


        /*
        Step 3: Create the partition range function: this defines the range of values that are to be
                stored in different partitions - basically defining the partitions that should
                have data - to create the partition function:

                # of partitions: 12 total
                    11 previous school-years (1 for catchall - 10 previous)
                     1 current

                LEFT results in:
                partition 1 <= min-school-year - this is the catch all default
                partition 2 = min-school-year + 1
                partition 3 = min-school-year + 2
                partition 4 = min-school-year + 3
                partition 5 = min-school-year + 4
                partition 6 = min-school-year + 5
                partition 7 = min-school-year + 6
                partition 8 = min-school-year + 7
                parititon 9 = min-school-year + 8
                partition 10 = min-school-year + 9
                partition 11 = min-school-year + 10
                partition 12 = max-school-year which is min-school-year + 11

            ASSUMPTION:
            Admin previously entered the required PartitionYearConfig table values before the "set up partitioning" script is executed.
        */

        -- NEXT STEP: need to generate a list of PartitionYear for the dynamic sql:
        SET @List = NULL;
        SELECT @List = COALESCE(@List + ', ', '') + CAST(P.PartitionYearConfigId AS NVARCHAR(10))
        FROM [tods].[PartitionYearConfig] AS P
        WHERE P.PartitionYearConfigId <> (SELECT MIN(P.PartitionYearConfigId) FROM [tods].[PartitionYearConfig] AS P)
        ORDER BY P.PartitionYearConfigId;

        SELECT @Sql = N'CREATE PARTITION FUNCTION [udf_PartitionYearRange] (SMALLINT) ' + CHAR(10)
                       + N'AS RANGE LEFT FOR VALUES (' + @List + N');' + CHAR(10);

        EXECUTE sp_executesql @sql;

        /*
        Step 4: Create the partition scheme for the partition range function created in Step 3:
        */
        ---- need to generate a list of FileGroups for the dynamic sql:
        SET @List = NULL;
        SELECT @List = COALESCE(@List + ', ', '') + T.FileGroupName
        FROM #TempFileGroup AS T
        ORDER BY FileGroupName;

        SET @Sql = N'CREATE PARTITION SCHEME PartitionYearScheme ' + CHAR(10)
                   + N'AS PARTITION [udf_PartitionYearRange] TO ' + CHAR(10)
                   + N'(' + @List + N');';

        EXECUTE sp_executesql @Sql;

        /*
        Step 5: to see the function boundary values - run the following:
        */
        --SELECT PF.name AS [Partition Function Name]
        --    , PRF.boundary_id
        --    , PRF.value
        --FROM sys.partition_functions AS PF
        --INNER JOIN sys.partition_range_values AS PRF ON PRF.function_id = PF.function_id;
        --GO

        /*
        Step 6:
        Note: Since the TODS tables have been created with PK NONCLUSTERED INDEX, no need to drop and recreate the PK INDEXes.
                Just need to create the CLUSTERED INDEX on the t_PartitionYearId column of the TODS tables (Snapshot, SnapshotCode
                all SnapshotRecord tables, all data tables);

        Step 6:
        Note: Since the TODS tables have been created with PK NONCLUSTERED INDEX, no need to drop and recreate the PK INDEXes.
                Just need to create the CLUSTERED INDEX on the t_PartitionYearId column of the TODS tables (Snapshot, SnapshotCode
                all SnapshotRecord tables, all data tables);
        */
        -- For [tods].[Snapshot]:
        CREATE CLUSTERED Index IX_Snapshot_PartitionYearId ON [tods].[Snapshot](t_PartitionYearId)
        WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
        ON PartitionYearScheme(t_PartitionYearId)

        -- For [tods].[SnapshotCode]:
        CREATE CLUSTERED Index IX_SnapshotCode_PartitionYearId ON [tods].[SnapshotCode](t_PartitionYearId)
        WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
        ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AbsenceEventCategoryDescriptor_PartitionYearId ON [t_extension].[AbsenceEventCategoryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AbsenceEventCategoryDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AidTypeDescriptor_PartitionYearId ON [t_extension].[AidTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AidTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[AidTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AnonymizedStudent_PartitionYearId ON [t_extension].[AnonymizedStudent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentSnapshotRecord_PartitionYearId ON [t_extension].[AnonymizedStudentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AnonymizedStudentRace_PartitionYearId ON [t_extension].[AnonymizedStudentRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentLanguage_PartitionYearId ON [t_extension].[AnonymizedStudentLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentLanguageUse_PartitionYearId ON [t_extension].[AnonymizedStudentLanguageUse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentDisability_PartitionYearId ON [t_extension].[AnonymizedStudentDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentAcademicRecord_PartitionYearId ON [t_extension].[AnonymizedStudentAcademicRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentAcademicRecordSnapshotRecord_PartitionYearId ON [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AnonymizedStudentAssessment_PartitionYearId ON [t_extension].[AnonymizedStudentAssessment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentAssessmentSnapshotRecord_PartitionYearId ON [t_extension].[AnonymizedStudentAssessmentSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AnonymizedStudentAssessmentScoreResult_PartitionYearId ON [t_extension].[AnonymizedStudentAssessmentScoreResult](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentAssessmentPerformanceLevel_PartitionYearId ON [t_extension].[AnonymizedStudentAssessmentPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentCourseAssociation_PartitionYearId ON [t_extension].[AnonymizedStudentCourseAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentCourseAssociationSnapshotRecord_PartitionYearId ON [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AnonymizedStudentCourseTranscript_PartitionYearId ON [t_extension].[AnonymizedStudentCourseTranscript](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentCourseTranscriptSnapshotRecord_PartitionYearId ON [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AnonymizedStudentEducationOrganizationAssociation_PartitionYearId ON [t_extension].[AnonymizedStudentEducationOrganizationAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentEducationOrganizationAssociationSnapshotRecord_PartitionYearId ON [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_AnonymizedStudentSectionAssociation_PartitionYearId ON [t_extension].[AnonymizedStudentSectionAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_AnonymizedStudentSectionAssociationSnapshotRecord_PartitionYearId ON [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Applicant_PartitionYearId ON [t_extension].[Applicant](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantSnapshotRecord_PartitionYearId ON [t_extension].[ApplicantSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ApplicantStaffIdentificationCode_PartitionYearId ON [t_extension].[ApplicantStaffIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantAddress_PartitionYearId ON [t_extension].[ApplicantAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantInternationalAddress_PartitionYearId ON [t_extension].[ApplicantInternationalAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantTelephone_PartitionYearId ON [t_extension].[ApplicantTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantElectronicMail_PartitionYearId ON [t_extension].[ApplicantElectronicMail](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantRace_PartitionYearId ON [t_extension].[ApplicantRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantVisa_PartitionYearId ON [t_extension].[ApplicantVisa](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantLanguage_PartitionYearId ON [t_extension].[ApplicantLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantLanguageUse_PartitionYearId ON [t_extension].[ApplicantLanguageUse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantCredential_PartitionYearId ON [t_extension].[ApplicantCredential](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantBackgroundCheck_PartitionYearId ON [t_extension].[ApplicantBackgroundCheck](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantTeacherPreparationProgram_PartitionYearId ON [t_extension].[ApplicantTeacherPreparationProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantTeacherPreparationProgramAddress_PartitionYearId ON [t_extension].[ApplicantTeacherPreparationProgramAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantDisability_PartitionYearId ON [t_extension].[ApplicantDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantAid_PartitionYearId ON [t_extension].[ApplicantAid](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantScoreResult_PartitionYearId ON [t_extension].[ApplicantScoreResult](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ApplicantIdentificationDocument_PartitionYearId ON [t_extension].[ApplicantIdentificationDocument](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_BackgroundCheckStatusDescriptor_PartitionYearId ON [t_extension].[BackgroundCheckStatusDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_BackgroundCheckStatusDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_BackgroundCheckTypeDescriptor_PartitionYearId ON [t_extension].[BackgroundCheckTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_BackgroundCheckTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_BoardCertificationTypeDescriptor_PartitionYearId ON [t_extension].[BoardCertificationTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_BoardCertificationTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CertificationExamTypeDescriptor_PartitionYearId ON [t_extension].[CertificationExamTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CertificationExamTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[CertificationExamTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseCourseTranscriptFacts_PartitionYearId ON [t_extension].[CourseCourseTranscriptFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseCourseTranscriptFactsSnapshotRecord_PartitionYearId ON [t_extension].[CourseCourseTranscriptFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseCourseTranscriptFactsStudentsEnrolled_PartitionYearId ON [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned_PartitionYearId ON [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseCourseTranscriptFactsAggregatedNumericGradeEarned_PartitionYearId ON [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAcademicRecordFacts_PartitionYearId ON [t_extension].[CourseStudentAcademicRecordFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAcademicRecordFactsSnapshotRecord_PartitionYearId ON [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseStudentAcademicRecordFactsStudentsEnrolled_PartitionYearId ON [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_PartitionYearId ON [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage_PartitionYearId ON [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAssessmentFacts_PartitionYearId ON [t_extension].[CourseStudentAssessmentFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAssessmentFactsSnapshotRecord_PartitionYearId ON [t_extension].[CourseStudentAssessmentFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseStudentAssessmentFactsStudentsEnrolled_PartitionYearId ON [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAssessmentFactsAggregatedScoreResult_PartitionYearId ON [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentAssessmentFactsAggregatedPerformanceLevel_PartitionYearId ON [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFacts_PartitionYearId ON [t_extension].[CourseStudentFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsSnapshotRecord_PartitionYearId ON [t_extension].[CourseStudentFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseStudentFactsStudentsEnrolled_PartitionYearId ON [t_extension].[CourseStudentFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedSex_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedSex](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedGender_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedGender](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedHispanicLatinoEthnicity_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedRace_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedSchoolFoodServicesEligibility_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedLanguage_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedByDisability_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedByDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedELLEnrollment_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedELLEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedESLEnrollment_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedESLEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedSection504Enrollment_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedSection504Enrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedSPED_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedSPED](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseStudentFactsAggregatedTitleIEnrollment_PartitionYearId ON [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseSurveyQuestionResponseFacts_PartitionYearId ON [t_extension].[CourseSurveyQuestionResponseFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseSurveyQuestionResponseFactsSnapshotRecord_PartitionYearId ON [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseSurveyQuestionResponseFactsAggregatedNumericResponse_PartitionYearId ON [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_PartitionYearId ON [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseSurveyResponseFacts_PartitionYearId ON [t_extension].[CourseSurveyResponseFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseSurveyResponseFactsSnapshotRecord_PartitionYearId ON [t_extension].[CourseSurveyResponseFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseSurveySectionResponseRatingFacts_PartitionYearId ON [t_extension].[CourseSurveySectionResponseRatingFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_CourseSurveySectionResponseRatingFactsSnapshotRecord_PartitionYearId ON [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse_PartitionYearId ON [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationCourseTranscriptFacts_PartitionYearId ON [t_extension].[EducationOrganizationCourseTranscriptFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationCourseTranscriptFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationCourseTranscriptFactsStudentsEnrolled_PartitionYearId ON [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned_PartitionYearId ON [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned_PartitionYearId ON [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationFacts_PartitionYearId ON [t_extension].[EducationOrganizationFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationFactsVacancies_PartitionYearId ON [t_extension].[EducationOrganizationFactsVacancies](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationFactsAggregatedSalary_PartitionYearId ON [t_extension].[EducationOrganizationFactsAggregatedSalary](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAcademicRecordFacts_PartitionYearId ON [t_extension].[EducationOrganizationStudentAcademicRecordFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAcademicRecordFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled_PartitionYearId ON [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_PartitionYearId ON [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage_PartitionYearId ON [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAssessmentFacts_PartitionYearId ON [t_extension].[EducationOrganizationStudentAssessmentFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAssessmentFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAssessmentFactsStudentsEnrolled_PartitionYearId ON [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult_PartitionYearId ON [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel_PartitionYearId ON [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFacts_PartitionYearId ON [t_extension].[EducationOrganizationStudentFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsStudentsEnrolled_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedSex_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedSex](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedGender_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedGender](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedRace_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedLanguage_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedByDisability_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedELLEnrollment_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedESLEnrollment_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedSection504Enrollment_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedSPED_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedSPED](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationStudentFactsAggregatedTitleIEnrollment_PartitionYearId ON [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveyQuestionResponseFacts_PartitionYearId ON [t_extension].[EducationOrganizationSurveyQuestionResponseFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse_PartitionYearId ON [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_PartitionYearId ON [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveyResponseFacts_PartitionYearId ON [t_extension].[EducationOrganizationSurveyResponseFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveyResponseFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveySectionResponseRatingFacts_PartitionYearId ON [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord_PartitionYearId ON [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse_PartitionYearId ON [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EnglishLanguageExamDescriptor_PartitionYearId ON [t_extension].[EnglishLanguageExamDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_EnglishLanguageExamDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ExternalCourseTranscript_PartitionYearId ON [t_extension].[ExternalCourseTranscript](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalCourseTranscriptSnapshotRecord_PartitionYearId ON [t_extension].[ExternalCourseTranscriptSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ExternalCourseTranscriptEarnedAdditionalCredits_PartitionYearId ON [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalCourseTranscriptCourseIdentificationCode_PartitionYearId ON [t_extension].[ExternalCourseTranscriptCourseIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalCourseTranscriptCourseLevelCharacteristic_PartitionYearId ON [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalEducationOrganization_PartitionYearId ON [t_extension].[ExternalEducationOrganization](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalEducationOrganizationSnapshotRecord_PartitionYearId ON [t_extension].[ExternalEducationOrganizationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ExternalEducationOrganizationIdentificationCode_PartitionYearId ON [t_extension].[ExternalEducationOrganizationIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalEducationOrganizationCategory_PartitionYearId ON [t_extension].[ExternalEducationOrganizationCategory](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalEducationOrganizationAddress_PartitionYearId ON [t_extension].[ExternalEducationOrganizationAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalEducationOrganizationInternationalAddress_PartitionYearId ON [t_extension].[ExternalEducationOrganizationInternationalAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalEducationOrganizationInstitutionTelephone_PartitionYearId ON [t_extension].[ExternalEducationOrganizationInstitutionTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalStudentAcademicRecord_PartitionYearId ON [t_extension].[ExternalStudentAcademicRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalStudentAcademicRecordSnapshotRecord_PartitionYearId ON [t_extension].[ExternalStudentAcademicRecordSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ExternalStudentAcademicRecordClassRanking_PartitionYearId ON [t_extension].[ExternalStudentAcademicRecordClassRanking](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalStudentAcademicRecordAcademicHonor_PartitionYearId ON [t_extension].[ExternalStudentAcademicRecordAcademicHonor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalStudentAcademicRecordRecognition_PartitionYearId ON [t_extension].[ExternalStudentAcademicRecordRecognition](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ExternalStudentAcademicRecordDiploma_PartitionYearId ON [t_extension].[ExternalStudentAcademicRecordDiploma](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_FieldworkTypeDescriptor_PartitionYearId ON [t_extension].[FieldworkTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_FieldworkTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[FieldworkTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LevelOfDegreeAwardedDescriptor_PartitionYearId ON [t_extension].[LevelOfDegreeAwardedDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LevelOfDegreeAwardedDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_LevelTypeDescriptor_PartitionYearId ON [t_extension].[LevelTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_LevelTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[LevelTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PerformanceMeasure_PartitionYearId ON [t_extension].[PerformanceMeasure](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureSnapshotRecord_PartitionYearId ON [t_extension].[PerformanceMeasureSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PerformanceMeasureProgramGateway_PartitionYearId ON [t_extension].[PerformanceMeasureProgramGateway](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureGradeLevel_PartitionYearId ON [t_extension].[PerformanceMeasureGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasurePersonBeingReviewed_PartitionYearId ON [t_extension].[PerformanceMeasurePersonBeingReviewed](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureReviewer_PartitionYearId ON [t_extension].[PerformanceMeasureReviewer](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureReviewerReceivedTraining_PartitionYearId ON [t_extension].[PerformanceMeasureReviewerReceivedTraining](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureFacts_PartitionYearId ON [t_extension].[PerformanceMeasureFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureFactsSnapshotRecord_PartitionYearId ON [t_extension].[PerformanceMeasureFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PerformanceMeasureFactsGradeLevel_PartitionYearId ON [t_extension].[PerformanceMeasureFactsGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureTypeDescriptor_PartitionYearId ON [t_extension].[PerformanceMeasureTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PerformanceMeasureTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PopulationCategoryDescriptor_PartitionYearId ON [t_extension].[PopulationCategoryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PopulationCategoryDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[PopulationCategoryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PopulationSubCategoryDescriptor_PartitionYearId ON [t_extension].[PopulationSubCategoryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PopulationSubCategoryDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_PreviousCareerDescriptor_PartitionYearId ON [t_extension].[PreviousCareerDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_PreviousCareerDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[PreviousCareerDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ProfessionalDevelopmentEvent_PartitionYearId ON [t_extension].[ProfessionalDevelopmentEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProfessionalDevelopmentEventSnapshotRecord_PartitionYearId ON [t_extension].[ProfessionalDevelopmentEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ProfessionalDevelopmentOfferedByDescriptor_PartitionYearId ON [t_extension].[ProfessionalDevelopmentOfferedByDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ProgramGatewayDescriptor_PartitionYearId ON [t_extension].[ProgramGatewayDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProgramGatewayDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[ProgramGatewayDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Prospect_PartitionYearId ON [t_extension].[Prospect](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectSnapshotRecord_PartitionYearId ON [t_extension].[ProspectSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_ProspectCurrentPosition_PartitionYearId ON [t_extension].[ProspectCurrentPosition](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectCurrentPositionGradeLevel_PartitionYearId ON [t_extension].[ProspectCurrentPositionGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectRace_PartitionYearId ON [t_extension].[ProspectRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectRecruitmentEvent_PartitionYearId ON [t_extension].[ProspectRecruitmentEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectTelephone_PartitionYearId ON [t_extension].[ProspectTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectTouchpoint_PartitionYearId ON [t_extension].[ProspectTouchpoint](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectCredential_PartitionYearId ON [t_extension].[ProspectCredential](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectDisability_PartitionYearId ON [t_extension].[ProspectDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectQualifications_PartitionYearId ON [t_extension].[ProspectQualifications](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectIdentificationDocument_PartitionYearId ON [t_extension].[ProspectIdentificationDocument](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectProfessionalDevelopmentEventAttendance_PartitionYearId ON [t_extension].[ProspectProfessionalDevelopmentEventAttendance](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord_PartitionYearId ON [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_RecruitmentEvent_PartitionYearId ON [t_extension].[RecruitmentEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RecruitmentEventSnapshotRecord_PartitionYearId ON [t_extension].[RecruitmentEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Rubric_PartitionYearId ON [t_extension].[Rubric](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricSnapshotRecord_PartitionYearId ON [t_extension].[RubricSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_RubricLevel_PartitionYearId ON [t_extension].[RubricLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricLevelSnapshotRecord_PartitionYearId ON [t_extension].[RubricLevelSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_RubricLevelInformation_PartitionYearId ON [t_extension].[RubricLevelInformation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricLevelTheme_PartitionYearId ON [t_extension].[RubricLevelTheme](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricLevelResponse_PartitionYearId ON [t_extension].[RubricLevelResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricLevelResponseSnapshotRecord_PartitionYearId ON [t_extension].[RubricLevelResponseSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_RubricLevelResponseFacts_PartitionYearId ON [t_extension].[RubricLevelResponseFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricLevelResponseFactsSnapshotRecord_PartitionYearId ON [t_extension].[RubricLevelResponseFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_RubricLevelResponseFactsAggregatedNumericResponse_PartitionYearId ON [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricTypeDescriptor_PartitionYearId ON [t_extension].[RubricTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_RubricTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[RubricTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SalaryTypeDescriptor_PartitionYearId ON [t_extension].[SalaryTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SalaryTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[SalaryTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SchoolStatusDescriptor_PartitionYearId ON [t_extension].[SchoolStatusDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolStatusDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[SchoolStatusDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SchoolStudentGrowthMeasure_PartitionYearId ON [t_extension].[SchoolStudentGrowthMeasure](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SchoolStudentGrowthMeasureSnapshotRecord_PartitionYearId ON [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionCourseTranscriptFacts_PartitionYearId ON [t_extension].[SectionCourseTranscriptFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionCourseTranscriptFactsSnapshotRecord_PartitionYearId ON [t_extension].[SectionCourseTranscriptFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionCourseTranscriptFactsStudentsEnrolled_PartitionYearId ON [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned_PartitionYearId ON [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionCourseTranscriptFactsAggregatedNumericGradeEarned_PartitionYearId ON [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAcademicRecordFacts_PartitionYearId ON [t_extension].[SectionStudentAcademicRecordFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAcademicRecordFactsSnapshotRecord_PartitionYearId ON [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionStudentAcademicRecordFactsStudentsEnrolled_PartitionYearId ON [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage_PartitionYearId ON [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage_PartitionYearId ON [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAssessmentFacts_PartitionYearId ON [t_extension].[SectionStudentAssessmentFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAssessmentFactsSnapshotRecord_PartitionYearId ON [t_extension].[SectionStudentAssessmentFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionStudentAssessmentFactsStudentsEnrolled_PartitionYearId ON [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAssessmentFactsAggregatedScoreResult_PartitionYearId ON [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentAssessmentFactsAggregatedPerformanceLevel_PartitionYearId ON [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFacts_PartitionYearId ON [t_extension].[SectionStudentFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsSnapshotRecord_PartitionYearId ON [t_extension].[SectionStudentFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionStudentFactsStudentsEnrolled_PartitionYearId ON [t_extension].[SectionStudentFactsStudentsEnrolled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedSex_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedSex](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedGender_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedGender](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedHispanicLatinoEthnicity_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedRace_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedSchoolFoodServicesEligibility_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedLanguage_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedByDisability_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedByDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedELLEnrollment_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedELLEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedESLEnrollment_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedESLEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedSection504Enrollment_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedSection504Enrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedSPED_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedSPED](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionStudentFactsAggregatedTitleIEnrollment_PartitionYearId ON [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionSurveyQuestionResponseFacts_PartitionYearId ON [t_extension].[SectionSurveyQuestionResponseFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionSurveyQuestionResponseFactsSnapshotRecord_PartitionYearId ON [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionSurveyQuestionResponseFactsAggregatedNumericResponse_PartitionYearId ON [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse_PartitionYearId ON [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionSurveyResponseFacts_PartitionYearId ON [t_extension].[SectionSurveyResponseFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionSurveyResponseFactsSnapshotRecord_PartitionYearId ON [t_extension].[SectionSurveyResponseFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionSurveySectionResponseRatingFacts_PartitionYearId ON [t_extension].[SectionSurveySectionResponseRatingFacts](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SectionSurveySectionResponseRatingFactsSnapshotRecord_PartitionYearId ON [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse_PartitionYearId ON [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffFieldworkAbsenceEvent_PartitionYearId ON [t_extension].[StaffFieldworkAbsenceEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffFieldworkAbsenceEventSnapshotRecord_PartitionYearId ON [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffFieldworkExperience_PartitionYearId ON [t_extension].[StaffFieldworkExperience](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffFieldworkExperienceSnapshotRecord_PartitionYearId ON [t_extension].[StaffFieldworkExperienceSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffFieldworkExperienceCoteaching_PartitionYearId ON [t_extension].[StaffFieldworkExperienceCoteaching](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffProfessionalDevelopmentEventAttendance_PartitionYearId ON [t_extension].[StaffProfessionalDevelopmentEventAttendance](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffProfessionalDevelopmentEventAttendanceSnapshotRecord_PartitionYearId ON [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasure_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasure](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasureSnapshotRecord_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasureSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasureCourseAssociation_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasureCourseAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasureCourseAssociationSnapshotRecord_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasureEducationOrganizationAssociation_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasureSectionAssociation_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasureSectionAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffStudentGrowthMeasureSectionAssociationSnapshotRecord_PartitionYearId ON [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProviderAssociation_PartitionYearId ON [t_extension].[StaffTeacherPreparationProviderAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProviderAssociationSnapshotRecord_PartitionYearId ON [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProviderAssociationGradeLevel_PartitionYearId ON [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProviderAssociationAcademicSubject_PartitionYearId ON [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProviderProgramAssociation_PartitionYearId ON [t_extension].[StaffTeacherPreparationProviderProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StaffTeacherPreparationProviderProgramAssociationSnapshotRecord_PartitionYearId ON [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_StudentGrowthTypeDescriptor_PartitionYearId ON [t_extension].[StudentGrowthTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_StudentGrowthTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_Survey_PartitionYearId ON [t_extension].[Survey](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveySnapshotRecord_PartitionYearId ON [t_extension].[SurveySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SurveyCategoryDescriptor_PartitionYearId ON [t_extension].[SurveyCategoryDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyCategoryDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[SurveyCategoryDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SurveyQuestion_PartitionYearId ON [t_extension].[SurveyQuestion](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyQuestionSnapshotRecord_PartitionYearId ON [t_extension].[SurveyQuestionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SurveyQuestionNumericChoice_PartitionYearId ON [t_extension].[SurveyQuestionNumericChoice](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyQuestionTextChoice_PartitionYearId ON [t_extension].[SurveyQuestionTextChoice](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyQuestionMatrix_PartitionYearId ON [t_extension].[SurveyQuestionMatrix](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyQuestionResponse_PartitionYearId ON [t_extension].[SurveyQuestionResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyQuestionResponseSnapshotRecord_PartitionYearId ON [t_extension].[SurveyQuestionResponseSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_PartitionYearId ON [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyResponse_PartitionYearId ON [t_extension].[SurveyResponse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveyResponseSnapshotRecord_PartitionYearId ON [t_extension].[SurveyResponseSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SurveySection_PartitionYearId ON [t_extension].[SurveySection](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveySectionSnapshotRecord_PartitionYearId ON [t_extension].[SurveySectionSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_SurveySectionResponseRating_PartitionYearId ON [t_extension].[SurveySectionResponseRating](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_SurveySectionResponseRatingSnapshotRecord_PartitionYearId ON [t_extension].[SurveySectionResponseRatingSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidate_PartitionYearId ON [t_extension].[TeacherCandidate](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateIdentificationCode_PartitionYearId ON [t_extension].[TeacherCandidateIdentificationCode](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateOtherName_PartitionYearId ON [t_extension].[TeacherCandidateOtherName](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateAddress_PartitionYearId ON [t_extension].[TeacherCandidateAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateInternationalAddress_PartitionYearId ON [t_extension].[TeacherCandidateInternationalAddress](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateTelephone_PartitionYearId ON [t_extension].[TeacherCandidateTelephone](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateElectronicMail_PartitionYearId ON [t_extension].[TeacherCandidateElectronicMail](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateRace_PartitionYearId ON [t_extension].[TeacherCandidateRace](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateVisa_PartitionYearId ON [t_extension].[TeacherCandidateVisa](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateCharacteristic_PartitionYearId ON [t_extension].[TeacherCandidateCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateLanguage_PartitionYearId ON [t_extension].[TeacherCandidateLanguage](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateLanguageUse_PartitionYearId ON [t_extension].[TeacherCandidateLanguageUse](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateDisability_PartitionYearId ON [t_extension].[TeacherCandidateDisability](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateProgramParticipation_PartitionYearId ON [t_extension].[TeacherCandidateProgramParticipation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateProgramParticipationProgramCharacteristic_PartitionYearId ON [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateLearningStyle_PartitionYearId ON [t_extension].[TeacherCandidateLearningStyle](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateCohortYear_PartitionYearId ON [t_extension].[TeacherCandidateCohortYear](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateIndicator_PartitionYearId ON [t_extension].[TeacherCandidateIndicator](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateCredential_PartitionYearId ON [t_extension].[TeacherCandidateCredential](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateAid_PartitionYearId ON [t_extension].[TeacherCandidateAid](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateBackgroundCheck_PartitionYearId ON [t_extension].[TeacherCandidateBackgroundCheck](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateIdentificationDocument_PartitionYearId ON [t_extension].[TeacherCandidateIdentificationDocument](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateAcademicRecord_PartitionYearId ON [t_extension].[TeacherCandidateAcademicRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateAcademicRecordSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateAcademicRecordClassRanking_PartitionYearId ON [t_extension].[TeacherCandidateAcademicRecordClassRanking](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateAcademicRecordAcademicHonor_PartitionYearId ON [t_extension].[TeacherCandidateAcademicRecordAcademicHonor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateAcademicRecordRecognition_PartitionYearId ON [t_extension].[TeacherCandidateAcademicRecordRecognition](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateAcademicRecordDiploma_PartitionYearId ON [t_extension].[TeacherCandidateAcademicRecordDiploma](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateCharacteristicDescriptor_PartitionYearId ON [t_extension].[TeacherCandidateCharacteristicDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateCharacteristicDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateCourseTranscript_PartitionYearId ON [t_extension].[TeacherCandidateCourseTranscript](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateCourseTranscriptSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateCourseTranscriptEarnedAdditionalCredits_PartitionYearId ON [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateFieldworkAbsenceEvent_PartitionYearId ON [t_extension].[TeacherCandidateFieldworkAbsenceEvent](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateFieldworkAbsenceEventSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateFieldworkExperience_PartitionYearId ON [t_extension].[TeacherCandidateFieldworkExperience](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateFieldworkExperienceSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateFieldworkExperienceCoteaching_PartitionYearId ON [t_extension].[TeacherCandidateFieldworkExperienceCoteaching](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateProfessionalDevelopmentEventAttendance_PartitionYearId ON [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateStaffAssociation_PartitionYearId ON [t_extension].[TeacherCandidateStaffAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateStaffAssociationSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasure_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasure](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasureSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasureCourseAssociation_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasureSectionAssociation_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateTeacherPreparationProviderAssociation_PartitionYearId ON [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherCandidateTeacherPreparationProviderProgramAssociation_PartitionYearId ON [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord_PartitionYearId ON [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherPreparationProgramTypeDescriptor_PartitionYearId ON [t_extension].[TeacherPreparationProgramTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherPreparationProgramTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherPreparationProvider_PartitionYearId ON [t_extension].[TeacherPreparationProvider](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherPreparationProviderSnapshotRecord_PartitionYearId ON [t_extension].[TeacherPreparationProviderSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherPreparationProviderProgram_PartitionYearId ON [t_extension].[TeacherPreparationProviderProgram](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherPreparationProviderProgramSnapshotRecord_PartitionYearId ON [t_extension].[TeacherPreparationProviderProgramSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TeacherPreparationProviderProgramGradeLevel_PartitionYearId ON [t_extension].[TeacherPreparationProviderProgramGradeLevel](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TeacherPreparationProviderProgramTPPProgramDegree_PartitionYearId ON [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ThemeDescriptor_PartitionYearId ON [t_extension].[ThemeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_ThemeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[ThemeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TPPDegreeTypeDescriptor_PartitionYearId ON [t_extension].[TPPDegreeTypeDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TPPDegreeTypeDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_TPPProgramPathwayDescriptor_PartitionYearId ON [t_extension].[TPPProgramPathwayDescriptor](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_TPPProgramPathwayDescriptorSnapshotRecord_PartitionYearId ON [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    
        CREATE CLUSTERED Index IX_University_PartitionYearId ON [t_extension].[University](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)

    
        CREATE CLUSTERED Index IX_UniversitySnapshotRecord_PartitionYearId ON [t_extension].[UniversitySnapshotRecord](t_PartitionYearId)
          WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
          ON PartitionYearScheme(t_PartitionYearId)
    

        /*
        Step 7: view database files info to confirm partitioning file group files were added:
        --SELECT DB_NAME() AS Database_Name
        --    , DF.name as Logical_File_Name
        --    , DF.physical_name
        --    , ROUND(CAST((DF.size) AS FLOAT)/128,2) AS SizeMB
        --    , ROUND(CAST((FILEPROPERTY(DF.name,'SpaceUsed')) AS FLOAT)/128,2) AS SpaceUsedMB
        --    , ROUND((CAST((DF.size) AS FLOAT)/128)-(CAST((FILEPROPERTY(DF.name,'SpaceUsed'))AS FLOAT)/128),2) AS SpaceFreeMB
        --    , ROUND((((CAST((DF.size) AS FLOAT)/128)-(CAST((FILEPROPERTY(DF.name,'SpaceUsed'))AS FLOAT)/128)) / (CAST((DF.size) AS FLOAT)/128) * 100),4) AS PercentSpaceFree
        --FROM sys.database_files AS DF
        */

        /*
        Step 8: additional view into the partitioning
        --SELECT o.name objectname,i.name indexname, partition_id, partition_number, [rows]
        --FROM sys.partitions p
        --INNER JOIN sys.objects o ON o.object_id=p.object_id
        --INNER JOIN sys.indexes i ON i.object_id=p.object_id and p.index_id=i.index_id
        --WHERE o.name LIKE '%***tablename***%';

        --SELECT ps.name,pf.name,boundary_id,value
        --FROM sys.partition_schemes ps
        --INNER JOIN sys.partition_functions pf ON pf.function_id=ps.function_id
        --INNER JOIN sys.partition_range_values prf ON pf.function_id=prf.function_id
        */

    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

            BEGIN TRANSACTION
                INSERT INTO [tods].[AuditLog]
                (
                    ErrorNumber
                    , ErrorMessage
                    , ErrorSeverity
                    , ErrorState
                    , ErrorLine
                    , ErrorSproc
                )
                SELECT
                    (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                    , ERROR_MESSAGE()
                    , CAST(ERROR_SEVERITY() AS VARCHAR(10))
                    , CAST(ERROR_STATE() AS VARCHAR(10))
                    , CAST(ERROR_LINE() AS VARCHAR(10))
                    , COALESCE(ERROR_PROCEDURE(), 'error not within a sproc')
            COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO

/****** TYPE: [t_extension].[udt_AbsenceEventCategoryDescriptor] ******/

CREATE TYPE [t_extension].[udt_AbsenceEventCategoryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AbsenceEventCategoryType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AbsenceEventCategoryDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_AbsenceEventCategoryDescriptorKey] AS TABLE
(
    [tid_AbsenceEventCategoryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAbsenceEventCategoryDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbAbsenceEventCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AbsenceEventCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AbsenceEventCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AbsenceEventCategoryType].[ShortDescription] AS AbsenceEventCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[AbsenceEventCategoryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AbsenceEventCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[AbsenceEventCategoryType] AS AbsenceEventCategoryType
                    ON [AbsenceEventCategoryType].[AbsenceEventCategoryTypeId] = T.[AbsenceEventCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AbsenceEventCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AbsenceEventCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AbsenceEventCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AbsenceEventCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AbsenceEventCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AbsenceEventCategoryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[AbsenceEventCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[AbsenceEventCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AidTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_AidTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [AidType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AidTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_AidTypeDescriptorKey] AS TABLE
(
    [tid_AidTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAidTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbAidTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AidTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AidTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [AidType].[ShortDescription] AS AidType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[AidTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[AidTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AidType] AS AidType
                    ON [AidType].[AidTypeId] = T.[AidTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [AidType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[AidType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AidTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AidTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AidTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AidTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AidTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[AidTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[AidTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudent] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudent] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [EducationOrganizationId] [INT] NULL
    , [CourseCode] [NVARCHAR](60) NULL
    , [UniqueSectionCode] [NVARCHAR](255) NULL
    , [SequenceOfCourse] [INT] NULL
    , [LocalCourseCode] [NVARCHAR](60) NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [SchoolId] [INT] NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NULL
    , [ClassPeriodName] [NVARCHAR](20) NULL
    , [SexType] [NVARCHAR](450) NULL
    , [GenderType] [NVARCHAR](450) NULL
    , [HispanicLatinoEthnicity] [BIT] NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NULL
    , [Section504Enrollment] [BIT] NULL
    , [ELLEnrollment] [BIT] NULL
    , [ESLEnrollment] [BIT] NULL
    , [SPEDEnrollment] [BIT] NULL
    , [TitleIEnrollment] [BIT] NULL
    , [AtriskIndicator] [BIT] NULL
    , [Mobility] [INT] NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentKey] AS TABLE
(
    [tid_AnonymizedStudent] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudent] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudent] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , [ValueType].[ShortDescription] AS ValueType
                , T.[EducationOrganizationId]
                , T.[CourseCode]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , [SexType].[ShortDescription] AS SexType
                , [GenderType].[ShortDescription] AS GenderType
                , T.[HispanicLatinoEthnicity]
                , SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue
                , T.[Section504Enrollment]
                , T.[ELLEnrollment]
                , T.[ESLEnrollment]
                , T.[SPEDEnrollment]
                , T.[TitleIEnrollment]
                , T.[AtriskIndicator]
                , T.[Mobility]
                , SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudent] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON [ValueType].[ValueTypeId] = T.[ValueTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON [SchoolFoodServicesEligibilityDescriptor].[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [ValueType]
                    , [EducationOrganizationId]
                    , [CourseCode]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [TermDescriptorCodeValue]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [SexType]
                    , [GenderType]
                    , [HispanicLatinoEthnicity]
                    , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , [Section504Enrollment]
                    , [ELLEnrollment]
                    , [ESLEnrollment]
                    , [SPEDEnrollment]
                    , [TitleIEnrollment]
                    , [AtriskIndicator]
                    , [Mobility]
                    , [SchoolFoodServicesEligibilityDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[ValueType]
                    , S.[EducationOrganizationId]
                    , S.[CourseCode]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[TermDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[SexType]
                    , S.[GenderType]
                    , S.[HispanicLatinoEthnicity]
                    , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , S.[Section504Enrollment]
                    , S.[ELLEnrollment]
                    , S.[ESLEnrollment]
                    , S.[SPEDEnrollment]
                    , S.[TitleIEnrollment]
                    , S.[AtriskIndicator]
                    , S.[Mobility]
                    , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudent]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudent] AS T
            JOIN [Ods_Snapshot].[extension].[AnonymizedStudent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbAnonymizedStudentRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentRace] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentRace] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentRaceKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentRaceKey] AS TABLE
(
    [tid_AnonymizedStudentRace] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentRace] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentRace]
            (
                [tid_AnonymizedStudent]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudent]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], T.[FactsAsOfDate], RaceType.[ShortDescription] AS RaceType, T.[SchoolYear]
                , T.[CreateDate]
                , AnonymizedStudent.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudent.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [Ods_Snapshot].[extension].[AnonymizedStudent] AS AnonymizedStudent
                    ON AnonymizedStudent.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudent.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudent.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentLanguage] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentLanguage] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentLanguageKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentLanguageKey] AS TABLE
(
    [tid_AnonymizedStudentLanguage] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentLanguage] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentLanguage]
            (
                [tid_AnonymizedStudent]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_AnonymizedStudentLanguage]
            INTO @Tids
            SELECT T.[tid_AnonymizedStudent]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], T.[FactsAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[SchoolYear], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , AnonymizedStudent.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudent.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[extension].[AnonymizedStudent] AS AnonymizedStudent
                    ON AnonymizedStudent.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudent.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudent.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_AnonymizedStudentLanguage]
                , T.[AnonymizedStudentIdentifier]
                , T.[FactsAsOfDate]
                , S.[LanguageDescriptorCodeValue]
                , T.[SchoolYear]
                , S.[LanguageDescriptorNamespace]
            FROM [t_extension].[AnonymizedStudentLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_AnonymizedStudent] = T.[tid_AnonymizedStudent]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_AnonymizedStudentLanguage] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbAnonymizedStudentLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentLanguageUse] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentLanguageUse] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentLanguageUseKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentLanguageUseKey] AS TABLE
(
    [tid_AnonymizedStudentLanguageUse] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentLanguageUse] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentLanguageUse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentLanguageUse]
            (
                [tid_AnonymizedStudentLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudentLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], T.[FactsAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, T.[SchoolYear], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentLanguageUse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[AnonymizedStudentIdentifier] = S.[AnonymizedStudentIdentifier]
                AND T.[FactsAsOfDate] = S.[FactsAsOfDate]
                AND T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[SchoolYear] = S.[SchoolYear]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentDisability] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentDisability] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [DisabilityDiagnosis] [NVARCHAR](80) NULL
    , [OrderOfDisability] [INT] NULL
    , [DisabilityDeterminationSourceType] [NVARCHAR](450) NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentDisabilityKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentDisabilityKey] AS TABLE
(
    [tid_AnonymizedStudentDisability] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentDisability] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentDisability]
            (
                [tid_AnonymizedStudent]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudent]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AnonymizedStudentIdentifier], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[FactsAsOfDate], T.[SchoolYear], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , AnonymizedStudent.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudent.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [Ods_Snapshot].[extension].[AnonymizedStudent] AS AnonymizedStudent
                    ON AnonymizedStudent.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudent.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudent.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentAcademicRecord] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAcademicRecord] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SessionGradePointAverage] [DECIMAL](18, 4) NULL
    , [CumulativeGradePointAverage] [DECIMAL](18, 4) NULL
    , [GPAMax] [DECIMAL](18, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentAcademicRecordKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAcademicRecordKey] AS TABLE
(
    [tid_AnonymizedStudentAcademicRecord] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAcademicRecord] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentAcademicRecord] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SessionGradePointAverage]
                , T.[CumulativeGradePointAverage]
                , T.[GPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentAcademicRecord] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SessionGradePointAverage]
                    , [CumulativeGradePointAverage]
                    , [GPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SessionGradePointAverage]
                    , S.[CumulativeGradePointAverage]
                    , S.[GPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentAcademicRecord]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentAcademicRecord] AS T
            JOIN [Ods_Snapshot].[extension].[AnonymizedStudentAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentAssessment] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAssessment] AS TABLE
(
    [AdministrationDate] [DATE] NOT NULL
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AssessmentTitle] [NVARCHAR](60) NULL
    , [AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [CourseCode] [NVARCHAR](60) NULL
    , [EducationOrganizationId] [INT] NULL
    , [UniqueSectionCode] [NVARCHAR](255) NULL
    , [SequenceOfCourse] [INT] NULL
    , [LocalCourseCode] [NVARCHAR](60) NULL
    , [SchoolId] [INT] NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NULL
    , [ClassPeriodName] [NVARCHAR](20) NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentAssessmentKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAssessmentKey] AS TABLE
(
    [tid_AnonymizedStudentAssessment] [INT] NOT NULL PRIMARY KEY
    , [AdministrationDate] [DATE] NOT NULL
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAssessment] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessment]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAssessmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentAssessment] AS T
            USING
            (
                SELECT T.[AdministrationDate]
                , T.[AnonymizedStudentIdentifier]
                , T.[AssessmentIdentifier]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[TakenSchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentAssessment] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AdministrationDate]
                    , [AnonymizedStudentIdentifier]
                    , [AssessmentIdentifier]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TakenSchoolYear]
                    , [TermDescriptorCodeValue]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AdministrationDate]
                    , S.[AnonymizedStudentIdentifier]
                    , S.[AssessmentIdentifier]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TakenSchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentAssessment]
                , INSERTED.[AdministrationDate]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[AssessmentIdentifier]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentAssessment]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentAssessment]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentAssessment] AS T
            JOIN [Ods_Snapshot].[extension].[AnonymizedStudentAssessment] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentAssessmentScoreResult] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAssessmentScoreResult] AS TABLE
(
    [AdministrationDate] [DATE] NOT NULL
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [Result] [NVARCHAR](35) NOT NULL
    , [ResultDatatypeType] [NVARCHAR](450) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentAssessmentScoreResultKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAssessmentScoreResultKey] AS TABLE
(
    [tid_AnonymizedStudentAssessmentScoreResult] [INT] NOT NULL PRIMARY KEY
    , [AdministrationDate] [DATE] NOT NULL
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessmentScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAssessmentScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentAssessmentScoreResult]
            (
                [tid_AnonymizedStudentAssessment]
                , [Result]
                , [ResultDatatypeType]
                , [AssessmentReportingMethodType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudentAssessment]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[AssessmentReportingMethodType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AdministrationDate], T.[AnonymizedStudentIdentifier], T.[AssessmentIdentifier], T.[FactsAsOfDate], T.[SchoolYear], T.[TakenSchoolYear], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType, AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType
                , T.[CreateDate]
                , AnonymizedStudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudentAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentAssessmentScoreResult] AS T 
                JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[extension].[AnonymizedStudentAssessment] AS AnonymizedStudentAssessment
                    ON AnonymizedStudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND AnonymizedStudentAssessment.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudentAssessment.[AssessmentIdentifier] = T.[AssessmentIdentifier]
                    AND AnonymizedStudentAssessment.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudentAssessment.[SchoolYear] = T.[SchoolYear]
                    AND AnonymizedStudentAssessment.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentAssessmentPerformanceLevel] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAssessmentPerformanceLevel] AS TABLE
(
    [AdministrationDate] [DATE] NOT NULL
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [PerformanceLevelMet] [BIT] NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentAssessmentPerformanceLevelKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentAssessmentPerformanceLevelKey] AS TABLE
(
    [tid_AnonymizedStudentAssessmentPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [AdministrationDate] [DATE] NOT NULL
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [AssessmentIdentifier] [NVARCHAR](60) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentAssessmentPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_AnonymizedStudentAssessmentKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentAssessmentPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[AnonymizedStudentAssessmentPerformanceLevel]
            (
                [tid_AnonymizedStudentAssessment]
                , [PerformanceLevelMet]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_AnonymizedStudentAssessment]
                , S.[PerformanceLevelMet]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AdministrationDate], T.[AnonymizedStudentIdentifier], T.[AssessmentIdentifier], T.[FactsAsOfDate], T.[SchoolYear], T.[TakenSchoolYear], T.[PerformanceLevelMet], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , AnonymizedStudentAssessment.[LastModifiedDate] AS ParentLastModifiedDate
                , AnonymizedStudentAssessment.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentAssessmentPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [Ods_Snapshot].[extension].[AnonymizedStudentAssessment] AS AnonymizedStudentAssessment
                    ON AnonymizedStudentAssessment.[AdministrationDate] = T.[AdministrationDate]
                    AND AnonymizedStudentAssessment.[AnonymizedStudentIdentifier] = T.[AnonymizedStudentIdentifier]
                    AND AnonymizedStudentAssessment.[AssessmentIdentifier] = T.[AssessmentIdentifier]
                    AND AnonymizedStudentAssessment.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND AnonymizedStudentAssessment.[SchoolYear] = T.[SchoolYear]
                    AND AnonymizedStudentAssessment.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentCourseAssociation] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentCourseAssociation] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentCourseAssociationKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentCourseAssociationKey] AS TABLE
(
    [tid_AnonymizedStudentCourseAssociation] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentCourseAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentCourseAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentCourseAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentCourseAssociation] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[BeginDate]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentCourseAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [BeginDate]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[BeginDate]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentCourseAssociation]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[BeginDate]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentCourseAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentCourseAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentCourseAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[AnonymizedStudentCourseAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentCourseTranscript] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentCourseTranscript] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [FinalLetterGradeEarned] [NVARCHAR](20) NULL
    , [FinalNumericGradeEarned] [DECIMAL](9, 2) NULL
    , [CourseRepeatCodeType] [NVARCHAR](450) NULL
    , [CourseTitle] [NVARCHAR](60) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentCourseTranscriptKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentCourseTranscriptKey] AS TABLE
(
    [tid_AnonymizedStudentCourseTranscript] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentCourseTranscript] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentCourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentCourseTranscript] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentCourseTranscript] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentCourseTranscript]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentCourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentCourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentCourseTranscript] AS T
            JOIN [Ods_Snapshot].[extension].[AnonymizedStudentCourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentEducationOrganizationAssociation] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentEducationOrganizationAssociation] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentEducationOrganizationAssociationKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentEducationOrganizationAssociationKey] AS TABLE
(
    [tid_AnonymizedStudentEducationOrganizationAssociation] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentEducationOrganizationAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [BeginDate]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentEducationOrganizationAssociation]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentEducationOrganizationAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[AnonymizedStudentEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_AnonymizedStudentSectionAssociation] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentSectionAssociation] AS TABLE
(
    [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [EndDate] [DATE] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_AnonymizedStudentSectionAssociationKey] ******/

CREATE TYPE [t_extension].[udt_AnonymizedStudentSectionAssociationKey] AS TABLE
(
    [tid_AnonymizedStudentSectionAssociation] [INT] NOT NULL PRIMARY KEY
    , [AnonymizedStudentIdentifier] [NVARCHAR](60) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbAnonymizedStudentSectionAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbAnonymizedStudentSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_AnonymizedStudentSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[AnonymizedStudentSectionAssociation] AS T
            USING
            (
                SELECT T.[AnonymizedStudentIdentifier]
                , T.[BeginDate]
                , T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[EndDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[AnonymizedStudentSectionAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AnonymizedStudentIdentifier]
                    , [BeginDate]
                    , [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [EndDate]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AnonymizedStudentIdentifier]
                    , S.[BeginDate]
                    , S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[EndDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_AnonymizedStudentSectionAssociation]
                , INSERTED.[AnonymizedStudentIdentifier]
                , INSERTED.[BeginDate]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_AnonymizedStudentSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_AnonymizedStudentSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[AnonymizedStudentSectionAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[AnonymizedStudentSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_Applicant] ******/

CREATE TYPE [t_extension].[udt_Applicant] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [MaidenName] [NVARCHAR](75) NULL
    , [SexType] [NVARCHAR](450) NULL
    , [BirthDate] [DATE] NULL
    , [HispanicLatinoEthnicity] [BIT] NULL
    , [CitizenshipStatusType] [NVARCHAR](450) NULL
    , [HighestCompletedLevelOfEducationDescriptorCodeValue] [NVARCHAR](50) NULL
    , [YearsOfPriorProfessionalExperience] [DECIMAL](5, 2) NULL
    , [YearsOfPriorTeachingExperience] [DECIMAL](5, 2) NULL
    , [LoginId] [NVARCHAR](60) NULL
    , [HighlyQualifiedTeacher] [BIT] NULL
    , [HighlyQualifiedAcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ProspectIdentifier] [NVARCHAR](32) NULL
    , [ProspectEducationOrganizationId] [INT] NULL
    , [GenderType] [NVARCHAR](450) NULL
    , [HighlyQualifiedAcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [HighestCompletedLevelOfEducationDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantKey] AS TABLE
(
    [tid_Applicant] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicant] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicant]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Applicant] AS T
            USING
            (
                SELECT T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[HispanicLatinoEthnicity]
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , HighestCompletedLevelOfEducationDescriptor.[CodeValue] AS HighestCompletedLevelOfEducationDescriptorCodeValue
                , T.[YearsOfPriorProfessionalExperience]
                , T.[YearsOfPriorTeachingExperience]
                , T.[LoginId]
                , T.[HighlyQualifiedTeacher]
                , HighlyQualifiedAcademicSubjectDescriptor.[CodeValue] AS HighlyQualifiedAcademicSubjectDescriptorCodeValue
                , T.[ProspectIdentifier]
                , T.[ProspectEducationOrganizationId]
                , [GenderType].[ShortDescription] AS GenderType
                , HighlyQualifiedAcademicSubjectDescriptor.[Namespace] AS HighlyQualifiedAcademicSubjectDescriptorNamespace
                , HighestCompletedLevelOfEducationDescriptor.[Namespace] AS HighestCompletedLevelOfEducationDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[Applicant] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS HighestCompletedLevelOfEducationDescriptor
                    ON [HighestCompletedLevelOfEducationDescriptor].[DescriptorId] = T.[HighestCompletedLevelOfEducationDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS HighlyQualifiedAcademicSubjectDescriptor
                    ON [HighlyQualifiedAcademicSubjectDescriptor].[DescriptorId] = T.[HighlyQualifiedAcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ApplicantIdentifier]
                    , [EducationOrganizationId]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [HispanicLatinoEthnicity]
                    , [CitizenshipStatusType]
                    , [HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , [YearsOfPriorProfessionalExperience]
                    , [YearsOfPriorTeachingExperience]
                    , [LoginId]
                    , [HighlyQualifiedTeacher]
                    , [HighlyQualifiedAcademicSubjectDescriptorCodeValue]
                    , [ProspectIdentifier]
                    , [ProspectEducationOrganizationId]
                    , [GenderType]
                    , [HighlyQualifiedAcademicSubjectDescriptorNamespace]
                    , [HighestCompletedLevelOfEducationDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ApplicantIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[HispanicLatinoEthnicity]
                    , S.[CitizenshipStatusType]
                    , S.[HighestCompletedLevelOfEducationDescriptorCodeValue]
                    , S.[YearsOfPriorProfessionalExperience]
                    , S.[YearsOfPriorTeachingExperience]
                    , S.[LoginId]
                    , S.[HighlyQualifiedTeacher]
                    , S.[HighlyQualifiedAcademicSubjectDescriptorCodeValue]
                    , S.[ProspectIdentifier]
                    , S.[ProspectEducationOrganizationId]
                    , S.[GenderType]
                    , S.[HighlyQualifiedAcademicSubjectDescriptorNamespace]
                    , S.[HighestCompletedLevelOfEducationDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Applicant]
                , INSERTED.[ApplicantIdentifier]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ApplicantSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Applicant]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Applicant]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Applicant] AS T
            JOIN [Ods_Snapshot].[extension].[Applicant] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbApplicantStaffIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantBackgroundCheck] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantTeacherPreparationProgram] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantAid] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbApplicantIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantStaffIdentificationCode] ******/

CREATE TYPE [t_extension].[udt_ApplicantStaffIdentificationCode] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL
    , [StaffIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantStaffIdentificationCodeKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantStaffIdentificationCodeKey] AS TABLE
(
    [tid_ApplicantStaffIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StaffIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantStaffIdentificationCode] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantStaffIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantStaffIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantStaffIdentificationCode]
            (
                [tid_Applicant]
                , [StaffIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [StaffIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[StaffIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StaffIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], StaffIdentificationSystemDescriptor.[CodeValue] AS StaffIdentificationSystemDescriptorCodeValue, T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], StaffIdentificationSystemDescriptor.[Namespace] AS StaffIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantStaffIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StaffIdentificationSystemDescriptor
                    ON StaffIdentificationSystemDescriptor.[DescriptorId] = T.[StaffIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantAddress] ******/

CREATE TYPE [t_extension].[udt_ApplicantAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantAddressKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantAddressKey] AS TABLE
(
    [tid_ApplicantAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantAddress]
            (
                [tid_Applicant]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantInternationalAddress] ******/

CREATE TYPE [t_extension].[udt_ApplicantInternationalAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [AddressLine1] [NVARCHAR](150) NOT NULL
    , [AddressLine2] [NVARCHAR](150) NULL
    , [AddressLine3] [NVARCHAR](150) NULL
    , [AddressLine4] [NVARCHAR](150) NULL
    , [CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantInternationalAddressKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantInternationalAddressKey] AS TABLE
(
    [tid_ApplicantInternationalAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantInternationalAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantInternationalAddress]
            (
                [tid_Applicant]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantInternationalAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantTelephone] ******/

CREATE TYPE [t_extension].[udt_ApplicantTelephone] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [OrderOfPriority] [INT] NULL
    , [TextMessageCapabilityIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantTelephoneKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantTelephoneKey] AS TABLE
(
    [tid_ApplicantTelephone] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantTelephone] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantTelephone]
            (
                [tid_Applicant]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantElectronicMail] ******/

CREATE TYPE [t_extension].[udt_ApplicantElectronicMail] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [ElectronicMailAddress] [NVARCHAR](128) NOT NULL
    , [PrimaryEmailAddressIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantElectronicMailKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantElectronicMailKey] AS TABLE
(
    [tid_ApplicantElectronicMail] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ElectronicMailType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantElectronicMail] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantElectronicMail]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantElectronicMail]
            (
                [tid_Applicant]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], ElectronicMailType.[ShortDescription] AS ElectronicMailType, T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantElectronicMail] AS T 
                JOIN [Ods_Snapshot].[edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantRace] ******/

CREATE TYPE [t_extension].[udt_ApplicantRace] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantRaceKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantRaceKey] AS TABLE
(
    [tid_ApplicantRace] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantRace] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantRace]
            (
                [tid_Applicant]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], RaceType.[ShortDescription] AS RaceType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantVisa] ******/

CREATE TYPE [t_extension].[udt_ApplicantVisa] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantVisaKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantVisaKey] AS TABLE
(
    [tid_ApplicantVisa] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantVisa] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantVisa]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantVisa]
            (
                [tid_Applicant]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantVisa] AS T 
                JOIN [Ods_Snapshot].[edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantLanguage] ******/

CREATE TYPE [t_extension].[udt_ApplicantLanguage] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantLanguageKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantLanguageKey] AS TABLE
(
    [tid_ApplicantLanguage] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantLanguage] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantLanguage]
            (
                [tid_Applicant]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_ApplicantLanguage]
            INTO @Tids
            SELECT T.[tid_Applicant]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_ApplicantLanguage]
                , T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
            FROM [t_extension].[ApplicantLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_Applicant] = T.[tid_Applicant]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_ApplicantLanguage] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbApplicantLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantLanguageUse] ******/

CREATE TYPE [t_extension].[udt_ApplicantLanguageUse] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantLanguageUseKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantLanguageUseKey] AS TABLE
(
    [tid_ApplicantLanguageUse] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantLanguageUse] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantLanguageUse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantLanguageUse]
            (
                [tid_ApplicantLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ApplicantLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[ApplicantLanguageUse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ApplicantIdentifier] = S.[ApplicantIdentifier]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantCredential] ******/

CREATE TYPE [t_extension].[udt_ApplicantCredential] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantCredentialKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantCredentialKey] AS TABLE
(
    [tid_ApplicantCredential] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantCredential] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantCredential]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantCredential]
            (
                [tid_Applicant]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[CredentialIdentifier], T.[EducationOrganizationId], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantCredential] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantBackgroundCheck] ******/

CREATE TYPE [t_extension].[udt_ApplicantBackgroundCheck] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [BackgroundCheckRequestedDate] [DATE] NOT NULL
    , [BackgroundCheckStatusDescriptorCodeValue] [NVARCHAR](50) NULL
    , [BackgroundCheckCompletedDate] [DATE] NULL
    , [Fingerprint] [BIT] NULL
    , [BackgroundCheckStatusDescriptorNamespace] [NVARCHAR](255) NULL
    , [BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantBackgroundCheckKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantBackgroundCheckKey] AS TABLE
(
    [tid_ApplicantBackgroundCheck] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantBackgroundCheck] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantBackgroundCheck]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantBackgroundCheckKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantBackgroundCheck]
            (
                [tid_Applicant]
                , [BackgroundCheckTypeDescriptorCodeValue]
                , [BackgroundCheckRequestedDate]
                , [BackgroundCheckStatusDescriptorCodeValue]
                , [BackgroundCheckCompletedDate]
                , [Fingerprint]
                , [BackgroundCheckStatusDescriptorNamespace]
                , [BackgroundCheckTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[BackgroundCheckTypeDescriptorCodeValue]
                , S.[BackgroundCheckRequestedDate]
                , S.[BackgroundCheckStatusDescriptorCodeValue]
                , S.[BackgroundCheckCompletedDate]
                , S.[Fingerprint]
                , S.[BackgroundCheckStatusDescriptorNamespace]
                , S.[BackgroundCheckTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], BackgroundCheckTypeDescriptor.[CodeValue] AS BackgroundCheckTypeDescriptorCodeValue, T.[EducationOrganizationId], T.[BackgroundCheckRequestedDate], BackgroundCheckStatusDescriptor.[CodeValue] AS BackgroundCheckStatusDescriptorCodeValue, T.[BackgroundCheckCompletedDate], T.[Fingerprint], BackgroundCheckStatusDescriptor.[Namespace] AS BackgroundCheckStatusDescriptorNamespace, BackgroundCheckTypeDescriptor.[Namespace] AS BackgroundCheckTypeDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantBackgroundCheck] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BackgroundCheckTypeDescriptor
                    ON BackgroundCheckTypeDescriptor.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BackgroundCheckStatusDescriptor
                    ON BackgroundCheckStatusDescriptor.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantTeacherPreparationProgram] ******/

CREATE TYPE [t_extension].[udt_ApplicantTeacherPreparationProgram] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
    , [TeacherPreparationProgramIdentifier] [NVARCHAR](75) NULL
    , [TeacherPreparationProgramTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [MajorSpecialization] [NVARCHAR](75) NOT NULL
    , [GPA] [DECIMAL](18, 4) NULL
    , [LevelOfDegreeAwardedDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelOfDegreeAwardedDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [TeacherPreparationProgramTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantTeacherPreparationProgramKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantTeacherPreparationProgramKey] AS TABLE
(
    [tid_ApplicantTeacherPreparationProgram] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantTeacherPreparationProgram] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantTeacherPreparationProgram]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantTeacherPreparationProgramKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantTeacherPreparationProgram]
            (
                [tid_Applicant]
                , [TeacherPreparationProgramName]
                , [TeacherPreparationProgramIdentifier]
                , [TeacherPreparationProgramTypeDescriptorCodeValue]
                , [NameOfInstitution]
                , [MajorSpecialization]
                , [GPA]
                , [LevelOfDegreeAwardedDescriptorCodeValue]
                , [LevelOfDegreeAwardedDescriptorNamespace]
                , [TeacherPreparationProgramTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_ApplicantTeacherPreparationProgram]
            INTO @Tids
            SELECT T.[tid_Applicant]
                , S.[TeacherPreparationProgramName]
                , S.[TeacherPreparationProgramIdentifier]
                , S.[TeacherPreparationProgramTypeDescriptorCodeValue]
                , S.[NameOfInstitution]
                , S.[MajorSpecialization]
                , S.[GPA]
                , S.[LevelOfDegreeAwardedDescriptorCodeValue]
                , S.[LevelOfDegreeAwardedDescriptorNamespace]
                , S.[TeacherPreparationProgramTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[TeacherPreparationProgramName], T.[TeacherPreparationProgramIdentifier], TeacherPreparationProgramTypeDescriptor.[CodeValue] AS TeacherPreparationProgramTypeDescriptorCodeValue, T.[NameOfInstitution], T.[MajorSpecialization], T.[GPA], LevelOfDegreeAwardedDescriptor.[CodeValue] AS LevelOfDegreeAwardedDescriptorCodeValue, LevelOfDegreeAwardedDescriptor.[Namespace] AS LevelOfDegreeAwardedDescriptorNamespace, TeacherPreparationProgramTypeDescriptor.[Namespace] AS TeacherPreparationProgramTypeDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantTeacherPreparationProgram] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TeacherPreparationProgramTypeDescriptor
                    ON TeacherPreparationProgramTypeDescriptor.[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LevelOfDegreeAwardedDescriptor
                    ON LevelOfDegreeAwardedDescriptor.[DescriptorId] = T.[LevelOfDegreeAwardedDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_ApplicantTeacherPreparationProgram]
                , T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , S.[TeacherPreparationProgramName]
            FROM [t_extension].[ApplicantTeacherPreparationProgram] AS S
            JOIN @pTids AS T
                ON S.[tid_Applicant] = T.[tid_Applicant]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_ApplicantTeacherPreparationProgram] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbApplicantTeacherPreparationProgramAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantTeacherPreparationProgramAddress] ******/

CREATE TYPE [t_extension].[udt_ApplicantTeacherPreparationProgramAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantTeacherPreparationProgramAddressKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantTeacherPreparationProgramAddressKey] AS TABLE
(
    [tid_ApplicantTeacherPreparationProgramAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [TeacherPreparationProgramName] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantTeacherPreparationProgramAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantTeacherPreparationProgramAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantTeacherPreparationProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantTeacherPreparationProgramAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantTeacherPreparationProgramAddress]
            (
                [tid_ApplicantTeacherPreparationProgram]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ApplicantTeacherPreparationProgram]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[ApplicantIdentifier], T.[EducationOrganizationId], T.[TeacherPreparationProgramName], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[ApplicantTeacherPreparationProgramAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ApplicantIdentifier] = S.[ApplicantIdentifier]
                AND T.[EducationOrganizationId] = S.[EducationOrganizationId]
                AND T.[TeacherPreparationProgramName] = S.[TeacherPreparationProgramName];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantDisability] ******/

CREATE TYPE [t_extension].[udt_ApplicantDisability] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [DisabilityDiagnosis] [NVARCHAR](80) NULL
    , [OrderOfDisability] [INT] NULL
    , [DisabilityDeterminationSourceType] [NVARCHAR](450) NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantDisabilityKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantDisabilityKey] AS TABLE
(
    [tid_ApplicantDisability] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantDisability] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantDisability]
            (
                [tid_Applicant]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[EducationOrganizationId], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantAid] ******/

CREATE TYPE [t_extension].[udt_ApplicantAid] AS TABLE
(
    [AidTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [EndDate] [DATE] NULL
    , [AidConditionDescription] [NVARCHAR](1024) NULL
    , [AidAmount] [MONEY] NULL
    , [PellGrantRecipient] [BIT] NULL
    , [AidTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantAidKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantAidKey] AS TABLE
(
    [tid_ApplicantAid] [INT] NOT NULL PRIMARY KEY
    , [AidTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [AidTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantAid] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantAid]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantAidKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantAid]
            (
                [tid_Applicant]
                , [AidTypeDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [AidConditionDescription]
                , [AidAmount]
                , [PellGrantRecipient]
                , [AidTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AidTypeDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[AidConditionDescription]
                , S.[AidAmount]
                , S.[PellGrantRecipient]
                , S.[AidTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AidTypeDescriptor.[CodeValue] AS AidTypeDescriptorCodeValue, T.[ApplicantIdentifier], T.[BeginDate], T.[EducationOrganizationId], T.[EndDate], T.[AidConditionDescription], T.[AidAmount], T.[PellGrantRecipient], AidTypeDescriptor.[Namespace] AS AidTypeDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantAid] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AidTypeDescriptor
                    ON AidTypeDescriptor.[DescriptorId] = T.[AidTypeDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantScoreResult] ******/

CREATE TYPE [t_extension].[udt_ApplicantScoreResult] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [Result] [NVARCHAR](35) NOT NULL
    , [ResultDatatypeType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantScoreResultKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantScoreResultKey] AS TABLE
(
    [tid_ApplicantScoreResult] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantScoreResult] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantScoreResult]
            (
                [tid_Applicant]
                , [AssessmentReportingMethodType]
                , [Result]
                , [ResultDatatypeType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[AssessmentReportingMethodType]
                , S.[Result]
                , S.[ResultDatatypeType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, T.[EducationOrganizationId], T.[Result], ResultDatatypeType.[ShortDescription] AS ResultDatatypeType
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantScoreResult] AS T 
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON ResultDatatypeType.[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ApplicantIdentificationDocument] ******/

CREATE TYPE [t_extension].[udt_ApplicantIdentificationDocument] AS TABLE
(
    [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [DocumentTitle] [NVARCHAR](60) NULL
    , [DocumentExpirationDate] [DATE] NULL
    , [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ApplicantIdentificationDocumentKey] ******/

CREATE TYPE [t_extension].[udt_ApplicantIdentificationDocumentKey] AS TABLE
(
    [tid_ApplicantIdentificationDocument] [INT] NOT NULL PRIMARY KEY
    , [ApplicantIdentifier] [NVARCHAR](32) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbApplicantIdentificationDocument] ******/

CREATE PROCEDURE [t_extension].[usp_dbApplicantIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ApplicantKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ApplicantIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ApplicantIdentificationDocument]
            (
                [tid_Applicant]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Applicant]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ApplicantIdentifier], T.[EducationOrganizationId], IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Applicant.[LastModifiedDate] AS ParentLastModifiedDate
                , Applicant.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ApplicantIdentificationDocument] AS T 
                JOIN [Ods_Snapshot].[edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Applicant] AS Applicant
                    ON Applicant.[ApplicantIdentifier] = T.[ApplicantIdentifier]
                    AND Applicant.[EducationOrganizationId] = T.[EducationOrganizationId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_BackgroundCheckStatusDescriptor] ******/

CREATE TYPE [t_extension].[udt_BackgroundCheckStatusDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [BackgroundCheckStatusType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_BackgroundCheckStatusDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_BackgroundCheckStatusDescriptorKey] AS TABLE
(
    [tid_BackgroundCheckStatusDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbBackgroundCheckStatusDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbBackgroundCheckStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_BackgroundCheckStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[BackgroundCheckStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BackgroundCheckStatusType].[ShortDescription] AS BackgroundCheckStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[BackgroundCheckStatusDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[BackgroundCheckStatusType] AS BackgroundCheckStatusType
                    ON [BackgroundCheckStatusType].[BackgroundCheckStatusTypeId] = T.[BackgroundCheckStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BackgroundCheckStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BackgroundCheckStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BackgroundCheckStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BackgroundCheckStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BackgroundCheckStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[BackgroundCheckStatusDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[BackgroundCheckStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[BackgroundCheckStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_BackgroundCheckTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_BackgroundCheckTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [BackgroundCheckType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_BackgroundCheckTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_BackgroundCheckTypeDescriptorKey] AS TABLE
(
    [tid_BackgroundCheckTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbBackgroundCheckTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbBackgroundCheckTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_BackgroundCheckTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[BackgroundCheckTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BackgroundCheckType].[ShortDescription] AS BackgroundCheckType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[BackgroundCheckTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[BackgroundCheckType] AS BackgroundCheckType
                    ON [BackgroundCheckType].[BackgroundCheckTypeId] = T.[BackgroundCheckTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BackgroundCheckType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BackgroundCheckType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BackgroundCheckTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BackgroundCheckTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BackgroundCheckTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[BackgroundCheckTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[BackgroundCheckTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[BackgroundCheckTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_BoardCertificationTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_BoardCertificationTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [BoardCertificationType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_BoardCertificationTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_BoardCertificationTypeDescriptorKey] AS TABLE
(
    [tid_BoardCertificationTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbBoardCertificationTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbBoardCertificationTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_BoardCertificationTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[BoardCertificationTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [BoardCertificationType].[ShortDescription] AS BoardCertificationType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[BoardCertificationTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[BoardCertificationTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[BoardCertificationType] AS BoardCertificationType
                    ON [BoardCertificationType].[BoardCertificationTypeId] = T.[BoardCertificationTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [BoardCertificationType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[BoardCertificationType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_BoardCertificationTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_BoardCertificationTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_BoardCertificationTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[BoardCertificationTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[BoardCertificationTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[BoardCertificationTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CertificationExamTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_CertificationExamTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [CertificationExamType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CertificationExamTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_CertificationExamTypeDescriptorKey] AS TABLE
(
    [tid_CertificationExamTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCertificationExamTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbCertificationExamTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CertificationExamTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CertificationExamTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [CertificationExamType].[ShortDescription] AS CertificationExamType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[CertificationExamTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[CertificationExamTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[CertificationExamType] AS CertificationExamType
                    ON [CertificationExamType].[CertificationExamTypeId] = T.[CertificationExamTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [CertificationExamType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[CertificationExamType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CertificationExamTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CertificationExamTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CertificationExamTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CertificationExamTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[CertificationExamTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[CertificationExamTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFacts] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFacts] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CourseTitle] [NVARCHAR](60) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFactsKey] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFactsKey] AS TABLE
(
    [tid_CourseCourseTranscriptFacts] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseCourseTranscriptFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[CourseCourseTranscriptFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseCourseTranscriptFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseCourseTranscriptFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseCourseTranscriptFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseCourseTranscriptFacts] AS T
            JOIN [Ods_Snapshot].[extension].[CourseCourseTranscriptFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFactsStudentsEnrolled] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFactsStudentsEnrolledKey] AS TABLE
(
    [tid_CourseCourseTranscriptFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseCourseTranscriptFactsStudentsEnrolled]
            (
                [tid_CourseCourseTranscriptFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseCourseTranscriptFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseCourseTranscriptFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseCourseTranscriptFacts] AS CourseCourseTranscriptFacts
                    ON CourseCourseTranscriptFacts.[CourseCode] = T.[CourseCode]
                    AND CourseCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [FinalLetterGrade] [NVARCHAR](20) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LetterGradeTypeNumber] [INT] NULL
    , [LetterGradeTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey] AS TABLE
(
    [tid_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [FinalLetterGrade] [NVARCHAR](20) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
            (
                [tid_CourseCourseTranscriptFacts]
                , [FinalLetterGrade]
                , [LetterGradeTypeNumber]
                , [LetterGradeTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseCourseTranscriptFacts]
                , S.[FinalLetterGrade]
                , S.[LetterGradeTypeNumber]
                , S.[LetterGradeTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[FinalLetterGrade], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[LetterGradeTypeNumber], T.[LetterGradeTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[CourseCourseTranscriptFacts] AS CourseCourseTranscriptFacts
                    ON CourseCourseTranscriptFacts.[CourseCode] = T.[CourseCode]
                    AND CourseCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFactsAggregatedNumericGradeEarned] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AverageFinalNumericGradeEarned] [DECIMAL](9, 2) NOT NULL
    , [NumericGradeNCount] [INT] NULL
    , [NumericGradeStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseCourseTranscriptFactsAggregatedNumericGradeEarnedKey] ******/

CREATE TYPE [t_extension].[udt_CourseCourseTranscriptFactsAggregatedNumericGradeEarnedKey] AS TABLE
(
    [tid_CourseCourseTranscriptFactsAggregatedNumericGradeEarned] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseCourseTranscriptFactsAggregatedNumericGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseCourseTranscriptFactsAggregatedNumericGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned]
            (
                [tid_CourseCourseTranscriptFacts]
                , [AverageFinalNumericGradeEarned]
                , [NumericGradeNCount]
                , [NumericGradeStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseCourseTranscriptFacts]
                , S.[AverageFinalNumericGradeEarned]
                , S.[NumericGradeNCount]
                , S.[NumericGradeStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AverageFinalNumericGradeEarned], T.[NumericGradeNCount], T.[NumericGradeStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseCourseTranscriptFactsAggregatedNumericGradeEarned] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[CourseCourseTranscriptFacts] AS CourseCourseTranscriptFacts
                    ON CourseCourseTranscriptFacts.[CourseCode] = T.[CourseCode]
                    AND CourseCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFacts] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFacts] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AggregatedGPAMax] [DECIMAL](18, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFactsKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFactsKey] AS TABLE
(
    [tid_CourseStudentAcademicRecordFacts] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseStudentAcademicRecordFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AggregatedGPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [AggregatedGPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[AggregatedGPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseStudentAcademicRecordFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseStudentAcademicRecordFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseStudentAcademicRecordFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseStudentAcademicRecordFacts] AS T
            JOIN [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFactsStudentsEnrolled] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFactsStudentsEnrolledKey] AS TABLE
(
    [tid_CourseStudentAcademicRecordFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsStudentsEnrolled]
            (
                [tid_CourseStudentAcademicRecordFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAcademicRecordFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFacts] AS CourseStudentAcademicRecordFacts
                    ON CourseStudentAcademicRecordFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradePointAverage] [DECIMAL](18, 4) NOT NULL
    , [GradePointNCount] [INT] NULL
    , [GradePointStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey] AS TABLE
(
    [tid_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
            (
                [tid_CourseStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFacts] AS CourseStudentAcademicRecordFacts
                    ON CourseStudentAcademicRecordFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradePointAverage] [DECIMAL](18, 4) NOT NULL
    , [GradePointNCount] [INT] NULL
    , [GradePointStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey] AS TABLE
(
    [tid_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
            (
                [tid_CourseStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentAcademicRecordFacts] AS CourseStudentAcademicRecordFacts
                    ON CourseStudentAcademicRecordFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND CourseStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFacts] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFacts] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NULL
    , [AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AdministrationDate] [DATE] NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFactsKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFactsKey] AS TABLE
(
    [tid_CourseStudentAssessmentFacts] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseStudentAssessmentFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[TakenSchoolYear]
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[AdministrationDate]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[CourseStudentAssessmentFacts] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [TakenSchoolYear]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [AdministrationDate]
                    , [TermDescriptorCodeValue]
                    , [TermDescriptorNamespace]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[TakenSchoolYear]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[TermDescriptorCodeValue]
                    , S.[TermDescriptorNamespace]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseStudentAssessmentFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseStudentAssessmentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseStudentAssessmentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseStudentAssessmentFacts] AS T
            JOIN [Ods_Snapshot].[extension].[CourseStudentAssessmentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFactsStudentsEnrolled] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFactsStudentsEnrolledKey] AS TABLE
(
    [tid_CourseStudentAssessmentFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAssessmentFactsStudentsEnrolled]
            (
                [tid_CourseStudentAssessmentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAssessmentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , CourseStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentAssessmentFactsStudentsEnrolled] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentAssessmentFacts] AS CourseStudentAssessmentFacts
                    ON CourseStudentAssessmentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFactsAggregatedScoreResult] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AverageScoreResultDatatypeType] [NVARCHAR](450) NOT NULL
    , [AverageScoreResult] [NVARCHAR](35) NOT NULL
    , [ScoreNCount] [INT] NULL
    , [ScoreStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFactsAggregatedScoreResultKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFactsAggregatedScoreResultKey] AS TABLE
(
    [tid_CourseStudentAssessmentFactsAggregatedScoreResult] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsAggregatedScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAssessmentFactsAggregatedScoreResult]
            (
                [tid_CourseStudentAssessmentFacts]
                , [AssessmentReportingMethodType]
                , [AverageScoreResultDatatypeType]
                , [AverageScoreResult]
                , [ScoreNCount]
                , [ScoreStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAssessmentFacts]
                , S.[AssessmentReportingMethodType]
                , S.[AverageScoreResultDatatypeType]
                , S.[AverageScoreResult]
                , S.[ScoreNCount]
                , S.[ScoreStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, AverageScoreResultDatatypeType.[ShortDescription] AS AverageScoreResultDatatypeType, T.[AverageScoreResult], T.[ScoreNCount], T.[ScoreStandardDeviation]
                , T.[CreateDate]
                , CourseStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentAssessmentFactsAggregatedScoreResult] AS T 
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS AverageScoreResultDatatypeType
                    ON AverageScoreResultDatatypeType.[ResultDatatypeTypeId] = T.[AverageScoreResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentAssessmentFacts] AS CourseStudentAssessmentFacts
                    ON CourseStudentAssessmentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFactsAggregatedPerformanceLevel] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [PerformanceLevelMetNumber] [INT] NULL
    , [PerformanceLevelMetPercentage] [DECIMAL](5, 4) NULL
    , [PerformanceLevelTypeNumber] [INT] NULL
    , [PerformanceLevelTypePercentage] [DECIMAL](5, 4) NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentAssessmentFactsAggregatedPerformanceLevelKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentAssessmentFactsAggregatedPerformanceLevelKey] AS TABLE
(
    [tid_CourseStudentAssessmentFactsAggregatedPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentAssessmentFactsAggregatedPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentAssessmentFactsAggregatedPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel]
            (
                [tid_CourseStudentAssessmentFacts]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMetNumber]
                , [PerformanceLevelMetPercentage]
                , [PerformanceLevelTypeNumber]
                , [PerformanceLevelTypePercentage]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentAssessmentFacts]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMetNumber]
                , S.[PerformanceLevelMetPercentage]
                , S.[PerformanceLevelTypeNumber]
                , S.[PerformanceLevelTypePercentage]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[TakenSchoolYear], T.[PerformanceLevelMetNumber], T.[PerformanceLevelMetPercentage], T.[PerformanceLevelTypeNumber], T.[PerformanceLevelTypePercentage], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentAssessmentFactsAggregatedPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentAssessmentFacts] AS CourseStudentAssessmentFacts
                    ON CourseStudentAssessmentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND CourseStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFacts] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFacts] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsKey] AS TABLE
(
    [tid_CourseStudentFacts] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseStudentFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[CourseStudentFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseStudentFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseStudentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseStudentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseStudentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseStudentFacts] AS T
            JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseStudentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedGender] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedByDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedSPED] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsStudentsEnrolled] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsStudentsEnrolledKey] AS TABLE
(
    [tid_CourseStudentFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsStudentsEnrolled]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsStudentsEnrolled] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSex] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSex] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [SexTypeNumber] [INT] NULL
    , [SexTypePercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSexKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSexKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedSex] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSex] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSex]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSex]
            (
                [tid_CourseStudentFacts]
                , [SexType]
                , [ValueType]
                , [SexTypeNumber]
                , [SexTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[SexType]
                , S.[ValueType]
                , S.[SexTypeNumber]
                , S.[SexTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], SexType.[ShortDescription] AS SexType, ValueType.[ShortDescription] AS ValueType, T.[SexTypeNumber], T.[SexTypePercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedSex] AS T 
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedGender] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedGender] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [GenderType] [NVARCHAR](450) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [GenderTypeNumber] [INT] NULL
    , [GenderTypePercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedGenderKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedGenderKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedGender] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [GenderType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedGender] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedGender]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedGenderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedGender]
            (
                [tid_CourseStudentFacts]
                , [GenderType]
                , [ValueType]
                , [GenderTypeNumber]
                , [GenderTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[GenderType]
                , S.[ValueType]
                , S.[GenderTypeNumber]
                , S.[GenderTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], GenderType.[ShortDescription] AS GenderType, ValueType.[ShortDescription] AS ValueType, T.[GenderTypeNumber], T.[GenderTypePercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedGender] AS T 
                JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedHispanicLatinoEthnicity] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [HispanicLatinoEthnicityNumber] [INT] NULL
    , [HispanicLatinoEthnicityPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedHispanicLatinoEthnicityKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedHispanicLatinoEthnicityKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedHispanicLatinoEthnicity] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedHispanicLatinoEthnicity]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedHispanicLatinoEthnicityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity]
            (
                [tid_CourseStudentFacts]
                , [HispanicLatinoEthnicity]
                , [ValueType]
                , [HispanicLatinoEthnicityNumber]
                , [HispanicLatinoEthnicityPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[HispanicLatinoEthnicity]
                , S.[ValueType]
                , S.[HispanicLatinoEthnicityNumber]
                , S.[HispanicLatinoEthnicityPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], T.[HispanicLatinoEthnicity], ValueType.[ShortDescription] AS ValueType, T.[HispanicLatinoEthnicityNumber], T.[HispanicLatinoEthnicityPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedHispanicLatinoEthnicity] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedRace] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedRace] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [RaceTypeNumber] [INT] NULL
    , [RaceTypePercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedRaceKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedRaceKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedRace] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedRace] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedRace]
            (
                [tid_CourseStudentFacts]
                , [RaceType]
                , [ValueType]
                , [RaceTypeNumber]
                , [RaceTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[RaceType]
                , S.[ValueType]
                , S.[RaceTypeNumber]
                , S.[RaceTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], RaceType.[ShortDescription] AS RaceType, ValueType.[ShortDescription] AS ValueType, T.[RaceTypeNumber], T.[RaceTypePercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSchoolFoodServicesEligibility] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TypeNumber] [INT] NULL
    , [TypePercentage] [INT] NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSchoolFoodServicesEligibilityKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSchoolFoodServicesEligibilityKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedSchoolFoodServicesEligibility] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSchoolFoodServicesEligibility]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSchoolFoodServicesEligibilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility]
            (
                [tid_CourseStudentFacts]
                , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [TypePercentage]
                , [SchoolFoodServicesEligibilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[TypePercentage]
                , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[TypePercentage], SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedSchoolFoodServicesEligibility] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON SchoolFoodServicesEligibilityDescriptor.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedLanguage] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedLanguage] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [LanguageTypeNumber] [INT] NULL
    , [LanguageTypePercentage] [DECIMAL](5, 4) NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedLanguageKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedLanguageKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedLanguage] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedLanguage] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedLanguage]
            (
                [tid_CourseStudentFacts]
                , [LanguageDescriptorCodeValue]
                , [ValueType]
                , [LanguageTypeNumber]
                , [LanguageTypePercentage]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[LanguageDescriptorCodeValue]
                , S.[ValueType]
                , S.[LanguageTypeNumber]
                , S.[LanguageTypePercentage]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[LanguageTypeNumber], T.[LanguageTypePercentage], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedByDisability] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedByDisability] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TypeNumber] [INT] NULL
    , [Percentage] [DECIMAL](5, 4) NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedByDisabilityKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedByDisabilityKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedByDisability] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedByDisability] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedByDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedByDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedByDisability]
            (
                [tid_CourseStudentFacts]
                , [DisabilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [Percentage]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[DisabilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[Percentage]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[Percentage], DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedByDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [StudentsDisabledNumber] [INT] NULL
    , [StudentsDisabledPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabledKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabledKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedDisabilityTotalStudentsDisabledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [StudentsDisabledNumber]
                , [StudentsDisabledPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[StudentsDisabledNumber]
                , S.[StudentsDisabledPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[StudentsDisabledNumber], T.[StudentsDisabledPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedELLEnrollment] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedELLEnrollment] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [ELLEnrollmentNumber] [INT] NULL
    , [ELLEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedELLEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedELLEnrollmentKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedELLEnrollment] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedELLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedELLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedELLEnrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [ELLEnrollmentNumber]
                , [ELLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[ELLEnrollmentNumber]
                , S.[ELLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ELLEnrollmentNumber], T.[ELLEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedELLEnrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedESLEnrollment] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedESLEnrollment] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [ESLEnrollmentNumber] [INT] NULL
    , [ESLEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedESLEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedESLEnrollmentKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedESLEnrollment] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedESLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedESLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedESLEnrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [ESLEnrollmentNumber]
                , [ESLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[ESLEnrollmentNumber]
                , S.[ESLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ESLEnrollmentNumber], T.[ESLEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedESLEnrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSection504Enrollment] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSection504Enrollment] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [Number504Enrolled] [INT] NULL
    , [Percentage504Enrolled] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSection504EnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSection504EnrollmentKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedSection504Enrollment] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSection504Enrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSection504EnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSection504Enrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [Number504Enrolled]
                , [Percentage504Enrolled]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[Number504Enrolled]
                , S.[Percentage504Enrolled]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[Number504Enrolled], T.[Percentage504Enrolled]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedSection504Enrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSPED] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSPED] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [SPEDEnrollmentNumber] [INT] NULL
    , [SPEDEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedSPEDKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedSPEDKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedSPED] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedSPED] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedSPED]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedSPEDKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedSPED]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [SPEDEnrollmentNumber]
                , [SPEDEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[SPEDEnrollmentNumber]
                , S.[SPEDEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[SPEDEnrollmentNumber], T.[SPEDEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedSPED] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedTitleIEnrollment] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedTitleIEnrollment] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TitleIEnrollmentNumber] [INT] NULL
    , [TitleIEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseStudentFactsAggregatedTitleIEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_CourseStudentFactsAggregatedTitleIEnrollmentKey] AS TABLE
(
    [tid_CourseStudentFactsAggregatedTitleIEnrollment] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseStudentFactsAggregatedTitleIEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseStudentFactsAggregatedTitleIEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseStudentFactsAggregatedTitleIEnrollment]
            (
                [tid_CourseStudentFacts]
                , [ValueType]
                , [TitleIEnrollmentNumber]
                , [TitleIEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseStudentFacts]
                , S.[ValueType]
                , S.[TitleIEnrollmentNumber]
                , S.[TitleIEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TitleIEnrollmentNumber], T.[TitleIEnrollmentPercentage]
                , T.[CreateDate]
                , CourseStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseStudentFactsAggregatedTitleIEnrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[CourseStudentFacts] AS CourseStudentFacts
                    ON CourseStudentFacts.[CourseCode] = T.[CourseCode]
                    AND CourseStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseSurveyQuestionResponseFacts] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyQuestionResponseFacts] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseSurveyQuestionResponseFactsKey] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyQuestionResponseFactsKey] AS TABLE
(
    [tid_CourseSurveyQuestionResponseFacts] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyQuestionResponseFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyQuestionResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseSurveyQuestionResponseFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[QuestionCode]
                , T.[SurveyIdentifier]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[CourseSurveyQuestionResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [QuestionCode]
                    , [SurveyIdentifier]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseSurveyQuestionResponseFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseSurveyQuestionResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseSurveyQuestionResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseSurveyQuestionResponseFacts] AS T
            JOIN [Ods_Snapshot].[extension].[CourseSurveyQuestionResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedNumericResponse] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedNumericResponseKey] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedNumericResponseKey] AS TABLE
(
    [tid_CourseSurveyQuestionResponseFactsAggregatedNumericResponse] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse]
            (
                [tid_CourseSurveyQuestionResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseSurveyQuestionResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CourseCode], T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , CourseSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseSurveyQuestionResponseFactsAggregatedNumericResponse] AS T 
                JOIN [Ods_Snapshot].[extension].[CourseSurveyQuestionResponseFacts] AS CourseSurveyQuestionResponseFacts
                    ON CourseSurveyQuestionResponseFacts.[CourseCode] = T.[CourseCode]
                    AND CourseSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND CourseSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS TABLE
(
    [AggregatedMatrixElement] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey] AS TABLE
(
    [tid_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] [INT] NOT NULL PRIMARY KEY
    , [AggregatedMatrixElement] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
            (
                [tid_CourseSurveyQuestionResponseFacts]
                , [AggregatedMatrixElement]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseSurveyQuestionResponseFacts]
                , S.[AggregatedMatrixElement]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AggregatedMatrixElement], T.[AverageNumericResponse], T.[CourseCode], T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , CourseSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS T 
                JOIN [Ods_Snapshot].[extension].[CourseSurveyQuestionResponseFacts] AS CourseSurveyQuestionResponseFacts
                    ON CourseSurveyQuestionResponseFacts.[CourseCode] = T.[CourseCode]
                    AND CourseSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND CourseSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND CourseSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND CourseSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseSurveyResponseFacts] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyResponseFacts] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseSurveyResponseFactsKey] ******/

CREATE TYPE [t_extension].[udt_CourseSurveyResponseFactsKey] AS TABLE
(
    [tid_CourseSurveyResponseFacts] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveyResponseFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveyResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveyResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseSurveyResponseFacts] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SurveyIdentifier]
                , T.[SchoolYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[CourseSurveyResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SurveyIdentifier]
                    , [SchoolYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SurveyIdentifier]
                    , S.[SchoolYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseSurveyResponseFacts]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseSurveyResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseSurveyResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseSurveyResponseFacts] AS T
            JOIN [Ods_Snapshot].[extension].[CourseSurveyResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseSurveySectionResponseRatingFacts] ******/

CREATE TYPE [t_extension].[udt_CourseSurveySectionResponseRatingFacts] AS TABLE
(
    [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseSurveySectionResponseRatingFactsKey] ******/

CREATE TYPE [t_extension].[udt_CourseSurveySectionResponseRatingFactsKey] AS TABLE
(
    [tid_CourseSurveySectionResponseRatingFacts] [INT] NOT NULL PRIMARY KEY
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveySectionResponseRatingFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveySectionResponseRatingFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveySectionResponseRatingFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[CourseSurveySectionResponseRatingFacts] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[CourseSurveySectionResponseRatingFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_CourseSurveySectionResponseRatingFacts]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_CourseSurveySectionResponseRatingFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_CourseSurveySectionResponseRatingFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[CourseSurveySectionResponseRatingFacts] AS T
            JOIN [Ods_Snapshot].[extension].[CourseSurveySectionResponseRatingFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE TYPE [t_extension].[udt_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] AS TABLE
(
    [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_CourseSurveySectionResponseRatingFactsAggregatedNumericResponseKey] ******/

CREATE TYPE [t_extension].[udt_CourseSurveySectionResponseRatingFactsAggregatedNumericResponseKey] AS TABLE
(
    [tid_CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] [INT] NOT NULL PRIMARY KEY
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbCourseSurveySectionResponseRatingFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_CourseSurveySectionResponseRatingFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_CourseSurveySectionResponseRatingFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse]
            (
                [tid_CourseSurveySectionResponseRatingFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_CourseSurveySectionResponseRatingFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[SurveyIdentifier], T.[SurveySectionTitle], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , CourseSurveySectionResponseRatingFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , CourseSurveySectionResponseRatingFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[CourseSurveySectionResponseRatingFactsAggregatedNumericResponse] AS T 
                JOIN [Ods_Snapshot].[extension].[CourseSurveySectionResponseRatingFacts] AS CourseSurveySectionResponseRatingFacts
                    ON CourseSurveySectionResponseRatingFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND CourseSurveySectionResponseRatingFacts.[SurveySectionTitle] = T.[SurveySectionTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CourseTitle] [NVARCHAR](60) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] AS TABLE
(
    [tid_EducationOrganizationCourseTranscriptFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationCourseTranscriptFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationCourseTranscriptFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationCourseTranscriptFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationCourseTranscriptFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationCourseTranscriptFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFactsStudentsEnrolled] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFactsStudentsEnrolledKey] AS TABLE
(
    [tid_EducationOrganizationCourseTranscriptFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationCourseTranscriptFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationCourseTranscriptFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFacts] AS EducationOrganizationCourseTranscriptFacts
                    ON EducationOrganizationCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [FinalLetterGrade] [NVARCHAR](20) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LetterGradeTypeNumber] [INT] NULL
    , [LetterGradeTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey] AS TABLE
(
    [tid_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [FinalLetterGrade] [NVARCHAR](20) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
            (
                [tid_EducationOrganizationCourseTranscriptFacts]
                , [FinalLetterGrade]
                , [LetterGradeTypeNumber]
                , [LetterGradeTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationCourseTranscriptFacts]
                , S.[FinalLetterGrade]
                , S.[LetterGradeTypeNumber]
                , S.[LetterGradeTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[FinalLetterGrade], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[LetterGradeTypeNumber], T.[LetterGradeTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFacts] AS EducationOrganizationCourseTranscriptFacts
                    ON EducationOrganizationCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AverageFinalNumericGradeEarned] [DECIMAL](9, 2) NOT NULL
    , [NumericGradeNCount] [INT] NULL
    , [NumericGradeStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedKey] AS TABLE
(
    [tid_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned]
            (
                [tid_EducationOrganizationCourseTranscriptFacts]
                , [AverageFinalNumericGradeEarned]
                , [NumericGradeNCount]
                , [NumericGradeStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationCourseTranscriptFacts]
                , S.[AverageFinalNumericGradeEarned]
                , S.[NumericGradeNCount]
                , S.[NumericGradeStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[FactsAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AverageFinalNumericGradeEarned], T.[NumericGradeNCount], T.[NumericGradeStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationCourseTranscriptFacts] AS EducationOrganizationCourseTranscriptFacts
                    ON EducationOrganizationCourseTranscriptFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [NumberAdministratorsEmployed] [INT] NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [NumberTeachersEmployed] [INT] NULL
    , [PercentStudentsFreeReducedLunch] [DECIMAL](5, 4) NULL
    , [PercentStudentsLimitedEnglishProficiency] [DECIMAL](5, 4) NULL
    , [PercentStudentsSpecialEducation] [DECIMAL](5, 4) NULL
    , [HiringRate] [DECIMAL](5, 4) NULL
    , [RetentionRate] [DECIMAL](5, 4) NULL
    , [RetirementRate] [DECIMAL](5, 4) NULL
    , [AverageYearsInDistrictEmployed] [DECIMAL](5, 2) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationFactsKey] AS TABLE
(
    [tid_EducationOrganizationFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SchoolYear]
                , T.[NumberAdministratorsEmployed]
                , T.[NumberStudentsEnrolled]
                , T.[NumberTeachersEmployed]
                , T.[PercentStudentsFreeReducedLunch]
                , T.[PercentStudentsLimitedEnglishProficiency]
                , T.[PercentStudentsSpecialEducation]
                , T.[HiringRate]
                , T.[RetentionRate]
                , T.[RetirementRate]
                , T.[AverageYearsInDistrictEmployed]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SchoolYear]
                    , [NumberAdministratorsEmployed]
                    , [NumberStudentsEnrolled]
                    , [NumberTeachersEmployed]
                    , [PercentStudentsFreeReducedLunch]
                    , [PercentStudentsLimitedEnglishProficiency]
                    , [PercentStudentsSpecialEducation]
                    , [HiringRate]
                    , [RetentionRate]
                    , [RetirementRate]
                    , [AverageYearsInDistrictEmployed]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SchoolYear]
                    , S.[NumberAdministratorsEmployed]
                    , S.[NumberStudentsEnrolled]
                    , S.[NumberTeachersEmployed]
                    , S.[PercentStudentsFreeReducedLunch]
                    , S.[PercentStudentsLimitedEnglishProficiency]
                    , S.[PercentStudentsSpecialEducation]
                    , S.[HiringRate]
                    , S.[RetentionRate]
                    , S.[RetirementRate]
                    , S.[AverageYearsInDistrictEmployed]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationFactsVacancies] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationFactsVacancies] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationFactsVacancies] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberOfVacancies] [INT] NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationFactsVacanciesKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationFactsVacanciesKey] AS TABLE
(
    [tid_EducationOrganizationFactsVacancies] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationFactsVacancies] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationFactsVacancies]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationFactsVacanciesKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationFactsVacancies]
            (
                [tid_EducationOrganizationFacts]
                , [AcademicSubjectDescriptorCodeValue]
                , [ValueType]
                , [NumberOfVacancies]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationFacts]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[ValueType]
                , S.[NumberOfVacancies]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, T.[EducationOrganizationId], T.[FactsAsOfDate], T.[SchoolYear], ValueType.[ShortDescription] AS ValueType, T.[NumberOfVacancies], AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationFactsVacancies] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationFacts] AS EducationOrganizationFacts
                    ON EducationOrganizationFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationFactsAggregatedSalary] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationFactsAggregatedSalary] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [AverageSalary] [MONEY] NOT NULL
    , [CountOfSalariesAveraged] [INT] NULL
    , [StandardDeviation] [INT] NULL
    , [SalaryMinRange] [INT] NULL
    , [SalaryMaxRange] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationFactsAggregatedSalaryKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationFactsAggregatedSalaryKey] AS TABLE
(
    [tid_EducationOrganizationFactsAggregatedSalary] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationFactsAggregatedSalary]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationFactsAggregatedSalaryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationFactsAggregatedSalary]
            (
                [tid_EducationOrganizationFacts]
                , [AverageSalary]
                , [CountOfSalariesAveraged]
                , [StandardDeviation]
                , [SalaryMinRange]
                , [SalaryMaxRange]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationFacts]
                , S.[AverageSalary]
                , S.[CountOfSalariesAveraged]
                , S.[StandardDeviation]
                , S.[SalaryMinRange]
                , S.[SalaryMaxRange]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactsAsOfDate], T.[SchoolYear], T.[AverageSalary], T.[CountOfSalariesAveraged], T.[StandardDeviation], T.[SalaryMinRange], T.[SalaryMaxRange]
                , T.[CreateDate]
                , EducationOrganizationFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationFactsAggregatedSalary] AS T 
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationFacts] AS EducationOrganizationFacts
                    ON EducationOrganizationFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AggregatedGPAMax] [DECIMAL](18, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] AS TABLE
(
    [tid_EducationOrganizationStudentAcademicRecordFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationStudentAcademicRecordFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AggregatedGPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [AggregatedGPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[AggregatedGPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationStudentAcademicRecordFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolledKey] AS TABLE
(
    [tid_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFacts] AS EducationOrganizationStudentAcademicRecordFacts
                    ON EducationOrganizationStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradePointAverage] [DECIMAL](18, 4) NOT NULL
    , [GradePointNCount] [INT] NULL
    , [GradePointStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey] AS TABLE
(
    [tid_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
            (
                [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFacts] AS EducationOrganizationStudentAcademicRecordFacts
                    ON EducationOrganizationStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [GradePointAverage] [DECIMAL](18, 4) NOT NULL
    , [GradePointNCount] [INT] NULL
    , [GradePointStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey] AS TABLE
(
    [tid_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
            (
                [tid_EducationOrganizationStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[SchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAcademicRecordFacts] AS EducationOrganizationStudentAcademicRecordFacts
                    ON EducationOrganizationStudentAcademicRecordFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND EducationOrganizationStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NULL
    , [AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AdministrationDate] [DATE] NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] AS TABLE
(
    [tid_EducationOrganizationStudentAssessmentFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationStudentAssessmentFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[TakenSchoolYear]
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[AdministrationDate]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFacts] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [TakenSchoolYear]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [AdministrationDate]
                    , [TermDescriptorCodeValue]
                    , [TermDescriptorNamespace]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[TakenSchoolYear]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[TermDescriptorCodeValue]
                    , S.[TermDescriptorNamespace]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationStudentAssessmentFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationStudentAssessmentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationStudentAssessmentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationStudentAssessmentFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFactsStudentsEnrolled] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFactsStudentsEnrolledKey] AS TABLE
(
    [tid_EducationOrganizationStudentAssessmentFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationStudentAssessmentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAssessmentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , EducationOrganizationStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFactsStudentsEnrolled] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFacts] AS EducationOrganizationStudentAssessmentFacts
                    ON EducationOrganizationStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AverageScoreResultDatatypeType] [NVARCHAR](450) NOT NULL
    , [AverageScoreResult] [NVARCHAR](35) NOT NULL
    , [ScoreNCount] [INT] NULL
    , [ScoreStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedScoreResultKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedScoreResultKey] AS TABLE
(
    [tid_EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult]
            (
                [tid_EducationOrganizationStudentAssessmentFacts]
                , [AssessmentReportingMethodType]
                , [AverageScoreResultDatatypeType]
                , [AverageScoreResult]
                , [ScoreNCount]
                , [ScoreStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAssessmentFacts]
                , S.[AssessmentReportingMethodType]
                , S.[AverageScoreResultDatatypeType]
                , S.[AverageScoreResult]
                , S.[ScoreNCount]
                , S.[ScoreStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[TakenSchoolYear], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, AverageScoreResultDatatypeType.[ShortDescription] AS AverageScoreResultDatatypeType, T.[AverageScoreResult], T.[ScoreNCount], T.[ScoreStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFactsAggregatedScoreResult] AS T 
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS AverageScoreResultDatatypeType
                    ON AverageScoreResultDatatypeType.[ResultDatatypeTypeId] = T.[AverageScoreResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFacts] AS EducationOrganizationStudentAssessmentFacts
                    ON EducationOrganizationStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [PerformanceLevelMetNumber] [INT] NULL
    , [PerformanceLevelMetPercentage] [DECIMAL](5, 4) NULL
    , [PerformanceLevelTypeNumber] [INT] NULL
    , [PerformanceLevelTypePercentage] [DECIMAL](5, 4) NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelKey] AS TABLE
(
    [tid_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel]
            (
                [tid_EducationOrganizationStudentAssessmentFacts]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMetNumber]
                , [PerformanceLevelMetPercentage]
                , [PerformanceLevelTypeNumber]
                , [PerformanceLevelTypePercentage]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentAssessmentFacts]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMetNumber]
                , S.[PerformanceLevelMetPercentage]
                , S.[PerformanceLevelTypeNumber]
                , S.[PerformanceLevelTypePercentage]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[TakenSchoolYear], T.[PerformanceLevelMetNumber], T.[PerformanceLevelMetPercentage], T.[PerformanceLevelTypeNumber], T.[PerformanceLevelTypePercentage], PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentAssessmentFacts] AS EducationOrganizationStudentAssessmentFacts
                    ON EducationOrganizationStudentAssessmentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND EducationOrganizationStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsKey] AS TABLE
(
    [tid_EducationOrganizationStudentFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationStudentFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationStudentFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationStudentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationStudentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationStudentFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsStudentsEnrolled] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsStudentsEnrolledKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsStudentsEnrolled]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsStudentsEnrolled] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSex] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSex] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [SexTypeNumber] [INT] NULL
    , [SexTypePercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSexKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSexKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedSex] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSex]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSex]
            (
                [tid_EducationOrganizationStudentFacts]
                , [SexType]
                , [ValueType]
                , [SexTypeNumber]
                , [SexTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[SexType]
                , S.[ValueType]
                , S.[SexTypeNumber]
                , S.[SexTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], SexType.[ShortDescription] AS SexType, ValueType.[ShortDescription] AS ValueType, T.[SexTypeNumber], T.[SexTypePercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedSex] AS T 
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedGender] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedGender] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [GenderType] [NVARCHAR](450) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [GenderTypeNumber] [INT] NULL
    , [GenderTypePercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedGenderKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedGenderKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedGender] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [GenderType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedGender]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedGenderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedGender]
            (
                [tid_EducationOrganizationStudentFacts]
                , [GenderType]
                , [ValueType]
                , [GenderTypeNumber]
                , [GenderTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[GenderType]
                , S.[ValueType]
                , S.[GenderTypeNumber]
                , S.[GenderTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], GenderType.[ShortDescription] AS GenderType, ValueType.[ShortDescription] AS ValueType, T.[GenderTypeNumber], T.[GenderTypePercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedGender] AS T 
                JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [HispanicLatinoEthnicityNumber] [INT] NULL
    , [HispanicLatinoEthnicityPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity]
            (
                [tid_EducationOrganizationStudentFacts]
                , [HispanicLatinoEthnicity]
                , [ValueType]
                , [HispanicLatinoEthnicityNumber]
                , [HispanicLatinoEthnicityPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[HispanicLatinoEthnicity]
                , S.[ValueType]
                , S.[HispanicLatinoEthnicityNumber]
                , S.[HispanicLatinoEthnicityPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], T.[HispanicLatinoEthnicity], ValueType.[ShortDescription] AS ValueType, T.[HispanicLatinoEthnicityNumber], T.[HispanicLatinoEthnicityPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedRace] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedRace] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [RaceTypeNumber] [INT] NULL
    , [RaceTypePercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedRaceKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedRaceKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedRace] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedRace]
            (
                [tid_EducationOrganizationStudentFacts]
                , [RaceType]
                , [ValueType]
                , [RaceTypeNumber]
                , [RaceTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[RaceType]
                , S.[ValueType]
                , S.[RaceTypeNumber]
                , S.[RaceTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], RaceType.[ShortDescription] AS RaceType, ValueType.[ShortDescription] AS ValueType, T.[RaceTypeNumber], T.[RaceTypePercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TypeNumber] [INT] NULL
    , [TypePercentage] [INT] NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibilityKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibilityKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility]
            (
                [tid_EducationOrganizationStudentFacts]
                , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [TypePercentage]
                , [SchoolFoodServicesEligibilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[TypePercentage]
                , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[TypePercentage], SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedSchoolFoodServicesEligibility] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON SchoolFoodServicesEligibilityDescriptor.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedLanguage] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedLanguage] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [LanguageTypeNumber] [INT] NULL
    , [LanguageTypePercentage] [DECIMAL](5, 4) NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedLanguageKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedLanguageKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedLanguage] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedLanguage]
            (
                [tid_EducationOrganizationStudentFacts]
                , [LanguageDescriptorCodeValue]
                , [ValueType]
                , [LanguageTypeNumber]
                , [LanguageTypePercentage]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[LanguageDescriptorCodeValue]
                , S.[ValueType]
                , S.[LanguageTypeNumber]
                , S.[LanguageTypePercentage]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, ValueType.[ShortDescription] AS ValueType, T.[LanguageTypeNumber], T.[LanguageTypePercentage], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedByDisability] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedByDisability] AS TABLE
(
    [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TypeNumber] [INT] NULL
    , [Percentage] [DECIMAL](5, 4) NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedByDisabilityKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedByDisabilityKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedByDisability] [INT] NOT NULL PRIMARY KEY
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedByDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedByDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedByDisability]
            (
                [tid_EducationOrganizationStudentFacts]
                , [DisabilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [Percentage]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[DisabilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[Percentage]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[Percentage], DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedByDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [StudentsDisabledNumber] [INT] NULL
    , [StudentsDisabledPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [StudentsDisabledNumber]
                , [StudentsDisabledPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[StudentsDisabledNumber]
                , S.[StudentsDisabledPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[StudentsDisabledNumber], T.[StudentsDisabledPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedELLEnrollment] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedELLEnrollment] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [ELLEnrollmentNumber] [INT] NULL
    , [ELLEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedELLEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedELLEnrollmentKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedELLEnrollment] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedELLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedELLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [ELLEnrollmentNumber]
                , [ELLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[ELLEnrollmentNumber]
                , S.[ELLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ELLEnrollmentNumber], T.[ELLEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedELLEnrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedESLEnrollment] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedESLEnrollment] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [ESLEnrollmentNumber] [INT] NULL
    , [ESLEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedESLEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedESLEnrollmentKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedESLEnrollment] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedESLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedESLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [ESLEnrollmentNumber]
                , [ESLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[ESLEnrollmentNumber]
                , S.[ESLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[ESLEnrollmentNumber], T.[ESLEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedESLEnrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSection504Enrollment] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSection504Enrollment] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [Number504Enrolled] [INT] NULL
    , [Percentage504Enrolled] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSection504EnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSection504EnrollmentKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedSection504Enrollment] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSection504Enrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSection504EnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [Number504Enrolled]
                , [Percentage504Enrolled]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[Number504Enrolled]
                , S.[Percentage504Enrolled]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[Number504Enrolled], T.[Percentage504Enrolled]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedSection504Enrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSPED] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSPED] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [SPEDEnrollmentNumber] [INT] NULL
    , [SPEDEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSPEDKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSPEDKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedSPED] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedSPED]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedSPEDKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedSPED]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [SPEDEnrollmentNumber]
                , [SPEDEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[SPEDEnrollmentNumber]
                , S.[SPEDEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[SPEDEnrollmentNumber], T.[SPEDEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedSPED] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedTitleIEnrollment] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedTitleIEnrollment] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TitleIEnrollmentNumber] [INT] NULL
    , [TitleIEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationStudentFactsAggregatedTitleIEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationStudentFactsAggregatedTitleIEnrollmentKey] AS TABLE
(
    [tid_EducationOrganizationStudentFactsAggregatedTitleIEnrollment] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationStudentFactsAggregatedTitleIEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationStudentFactsAggregatedTitleIEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment]
            (
                [tid_EducationOrganizationStudentFacts]
                , [ValueType]
                , [TitleIEnrollmentNumber]
                , [TitleIEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationStudentFacts]
                , S.[ValueType]
                , S.[TitleIEnrollmentNumber]
                , S.[TitleIEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactAsOfDate], ValueType.[ShortDescription] AS ValueType, T.[TitleIEnrollmentNumber], T.[TitleIEnrollmentPercentage]
                , T.[CreateDate]
                , EducationOrganizationStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationStudentFactsAggregatedTitleIEnrollment] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationStudentFacts] AS EducationOrganizationStudentFacts
                    ON EducationOrganizationStudentFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey] AS TABLE
(
    [tid_EducationOrganizationSurveyQuestionResponseFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[QuestionCode]
                , T.[SurveyIdentifier]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationSurveyQuestionResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [QuestionCode]
                    , [SurveyIdentifier]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationSurveyQuestionResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationSurveyQuestionResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponseKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponseKey] AS TABLE
(
    [tid_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse]
            (
                [tid_EducationOrganizationSurveyQuestionResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedNumericResponse] AS T 
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationSurveyQuestionResponseFacts] AS EducationOrganizationSurveyQuestionResponseFacts
                    ON EducationOrganizationSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS TABLE
(
    [AggregatedMatrixElement] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey] AS TABLE
(
    [tid_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] [INT] NOT NULL PRIMARY KEY
    , [AggregatedMatrixElement] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
            (
                [tid_EducationOrganizationSurveyQuestionResponseFacts]
                , [AggregatedMatrixElement]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationSurveyQuestionResponseFacts]
                , S.[AggregatedMatrixElement]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AggregatedMatrixElement], T.[AverageNumericResponse], T.[EducationOrganizationId], T.[FactsAsOfDate], T.[QuestionCode], T.[SurveyIdentifier], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS T 
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationSurveyQuestionResponseFacts] AS EducationOrganizationSurveyQuestionResponseFacts
                    ON EducationOrganizationSurveyQuestionResponseFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND EducationOrganizationSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyResponseFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyResponseFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationSurveyResponseFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveyResponseFactsKey] AS TABLE
(
    [tid_EducationOrganizationSurveyResponseFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveyResponseFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveyResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveyResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationSurveyResponseFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SurveyIdentifier]
                , T.[SchoolYear]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationSurveyResponseFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SurveyIdentifier]
                    , [SchoolYear]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SurveyIdentifier]
                    , S.[SchoolYear]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationSurveyResponseFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationSurveyResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationSurveyResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationSurveyResponseFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationSurveyResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFacts] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFacts] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsKey] AS TABLE
(
    [tid_EducationOrganizationSurveySectionResponseRatingFacts] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactsAsOfDate]
                , T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactsAsOfDate]
                    , [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactsAsOfDate]
                    , S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS T
            JOIN [Ods_Snapshot].[extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponseKey] ******/

CREATE TYPE [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponseKey] AS TABLE
(
    [tid_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse]
            (
                [tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_EducationOrganizationSurveySectionResponseRatingFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[FactsAsOfDate], T.[SurveyIdentifier], T.[SurveySectionTitle], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation]
                , T.[CreateDate]
                , EducationOrganizationSurveySectionResponseRatingFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , EducationOrganizationSurveySectionResponseRatingFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[EducationOrganizationSurveySectionResponseRatingFactsAggregatedNumericResponse] AS T 
                JOIN [Ods_Snapshot].[extension].[EducationOrganizationSurveySectionResponseRatingFacts] AS EducationOrganizationSurveySectionResponseRatingFacts
                    ON EducationOrganizationSurveySectionResponseRatingFacts.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND EducationOrganizationSurveySectionResponseRatingFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND EducationOrganizationSurveySectionResponseRatingFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND EducationOrganizationSurveySectionResponseRatingFacts.[SurveySectionTitle] = T.[SurveySectionTitle]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_EnglishLanguageExamDescriptor] ******/

CREATE TYPE [t_extension].[udt_EnglishLanguageExamDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [EnglishLanguageExamType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_EnglishLanguageExamDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_EnglishLanguageExamDescriptorKey] AS TABLE
(
    [tid_EnglishLanguageExamDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbEnglishLanguageExamDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbEnglishLanguageExamDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_EnglishLanguageExamDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[EnglishLanguageExamDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [EnglishLanguageExamType].[ShortDescription] AS EnglishLanguageExamType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[EnglishLanguageExamDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[EnglishLanguageExamDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[EnglishLanguageExamType] AS EnglishLanguageExamType
                    ON [EnglishLanguageExamType].[EnglishLanguageExamTypeId] = T.[EnglishLanguageExamTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [EnglishLanguageExamType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[EnglishLanguageExamType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_EnglishLanguageExamDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_EnglishLanguageExamDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_EnglishLanguageExamDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[EnglishLanguageExamDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[EnglishLanguageExamDescriptor] AS S
                ON P.[DescriptorId] = S.[EnglishLanguageExamDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalCourseTranscript] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscript] AS TABLE
(
    [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [AttemptedCredits] [DECIMAL](9, 2) NULL
    , [AttemptedCreditType] [NVARCHAR](450) NULL
    , [AttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [EarnedCredits] [DECIMAL](9, 2) NOT NULL
    , [EarnedCreditType] [NVARCHAR](450) NULL
    , [EarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [OfferedGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [MethodCreditEarnedType] [NVARCHAR](450) NULL
    , [FinalLetterGradeEarned] [NVARCHAR](20) NULL
    , [FinalNumericGradeEarned] [DECIMAL](9, 2) NULL
    , [CourseRepeatCodeType] [NVARCHAR](450) NULL
    , [CourseCode] [NVARCHAR](60) NULL
    , [CourseEducationOrganizationId] [INT] NULL
    , [ExternalCourseTitle] [NVARCHAR](60) NOT NULL
    , [AlternativeCourseTitle] [NVARCHAR](60) NULL
    , [AlternativeCourseCode] [NVARCHAR](60) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [CareerPathwayType] [NVARCHAR](450) NULL
    , [CourseDescription] [NVARCHAR](1024) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [OfferedGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalCourseTranscriptKey] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscriptKey] AS TABLE
(
    [tid_ExternalCourseTranscript] [INT] NOT NULL PRIMARY KEY
    , [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscript] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ExternalCourseTranscript] AS T
            USING
            (
                SELECT T.[ExternalCourseCode]
                , T.[ExternalTerm]
                , T.[NameOfInstitution]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , [CourseAttemptResultType].[ShortDescription] AS CourseAttemptResultType
                , T.[AttemptedCredits]
                , [AttemptedCreditType].[ShortDescription] AS AttemptedCreditType
                , T.[AttemptedCreditConversion]
                , T.[EarnedCredits]
                , [EarnedCreditType].[ShortDescription] AS EarnedCreditType
                , T.[EarnedCreditConversion]
                , WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue
                , OfferedGradeLevelDescriptor.[CodeValue] AS OfferedGradeLevelDescriptorCodeValue
                , [MethodCreditEarnedType].[ShortDescription] AS MethodCreditEarnedType
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[CourseCode]
                , T.[CourseEducationOrganizationId]
                , T.[ExternalCourseTitle]
                , T.[AlternativeCourseTitle]
                , T.[AlternativeCourseCode]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , [CareerPathwayType].[ShortDescription] AS CareerPathwayType
                , T.[CourseDescription]
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , OfferedGradeLevelDescriptor.[Namespace] AS OfferedGradeLevelDescriptorNamespace
                , WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[ExternalCourseTranscript] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON [CourseAttemptResultType].[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS AttemptedCreditType
                    ON [AttemptedCreditType].[CreditTypeId] = T.[AttemptedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS EarnedCreditType
                    ON [EarnedCreditType].[CreditTypeId] = T.[EarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON [WhenTakenGradeLevelDescriptor].[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS OfferedGradeLevelDescriptor
                    ON [OfferedGradeLevelDescriptor].[DescriptorId] = T.[OfferedGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[MethodCreditEarnedType] AS MethodCreditEarnedType
                    ON [MethodCreditEarnedType].[MethodCreditEarnedTypeId] = T.[MethodCreditEarnedTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CareerPathwayType] AS CareerPathwayType
                    ON [CareerPathwayType].[CareerPathwayTypeId] = T.[CareerPathwayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ExternalCourseCode]
                    , [ExternalTerm]
                    , [NameOfInstitution]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [CourseAttemptResultType]
                    , [AttemptedCredits]
                    , [AttemptedCreditType]
                    , [AttemptedCreditConversion]
                    , [EarnedCredits]
                    , [EarnedCreditType]
                    , [EarnedCreditConversion]
                    , [WhenTakenGradeLevelDescriptorCodeValue]
                    , [OfferedGradeLevelDescriptorCodeValue]
                    , [MethodCreditEarnedType]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [CourseCode]
                    , [CourseEducationOrganizationId]
                    , [ExternalCourseTitle]
                    , [AlternativeCourseTitle]
                    , [AlternativeCourseCode]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CareerPathwayType]
                    , [CourseDescription]
                    , [AcademicSubjectDescriptorNamespace]
                    , [OfferedGradeLevelDescriptorNamespace]
                    , [WhenTakenGradeLevelDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ExternalCourseCode]
                    , S.[ExternalTerm]
                    , S.[NameOfInstitution]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[CourseAttemptResultType]
                    , S.[AttemptedCredits]
                    , S.[AttemptedCreditType]
                    , S.[AttemptedCreditConversion]
                    , S.[EarnedCredits]
                    , S.[EarnedCreditType]
                    , S.[EarnedCreditConversion]
                    , S.[WhenTakenGradeLevelDescriptorCodeValue]
                    , S.[OfferedGradeLevelDescriptorCodeValue]
                    , S.[MethodCreditEarnedType]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[CourseCode]
                    , S.[CourseEducationOrganizationId]
                    , S.[ExternalCourseTitle]
                    , S.[AlternativeCourseTitle]
                    , S.[AlternativeCourseCode]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CareerPathwayType]
                    , S.[CourseDescription]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[OfferedGradeLevelDescriptorNamespace]
                    , S.[WhenTakenGradeLevelDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExternalCourseTranscript]
                , INSERTED.[ExternalCourseCode]
                , INSERTED.[ExternalTerm]
                , INSERTED.[NameOfInstitution]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ExternalCourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExternalCourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExternalCourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ExternalCourseTranscript] AS T
            JOIN [Ods_Snapshot].[extension].[ExternalCourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalCourseTranscriptEarnedAdditionalCredits] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscriptEarnedAdditionalCredits] AS TABLE
(
    [AdditionalCreditType] [NVARCHAR](450) NOT NULL
    , [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [Credits] [DECIMAL](9, 2) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalCourseTranscriptEarnedAdditionalCreditsKey] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscriptEarnedAdditionalCreditsKey] AS TABLE
(
    [tid_ExternalCourseTranscriptEarnedAdditionalCredits] [INT] NOT NULL PRIMARY KEY
    , [AdditionalCreditType] [NVARCHAR](450) NOT NULL
    , [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptEarnedAdditionalCredits]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptEarnedAdditionalCreditsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalCourseTranscriptEarnedAdditionalCredits]
            (
                [tid_ExternalCourseTranscript]
                , [AdditionalCreditType]
                , [Credits]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalCourseTranscript]
                , S.[AdditionalCreditType]
                , S.[Credits]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AdditionalCreditType.[ShortDescription] AS AdditionalCreditType, T.[ExternalCourseCode], T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[Credits]
                , T.[CreateDate]
                , ExternalCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalCourseTranscript.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalCourseTranscriptEarnedAdditionalCredits] AS T 
                JOIN [Ods_Snapshot].[edfi].[AdditionalCreditType] AS AdditionalCreditType
                    ON AdditionalCreditType.[AdditionalCreditTypeId] = T.[AdditionalCreditTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[extension].[ExternalCourseTranscript] AS ExternalCourseTranscript
                    ON ExternalCourseTranscript.[ExternalCourseCode] = T.[ExternalCourseCode]
                    AND ExternalCourseTranscript.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalCourseTranscript.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND ExternalCourseTranscript.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalCourseTranscriptCourseIdentificationCode] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscriptCourseIdentificationCode] AS TABLE
(
    [CourseIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL
    , [CourseIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalCourseTranscriptCourseIdentificationCodeKey] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscriptCourseIdentificationCodeKey] AS TABLE
(
    [tid_ExternalCourseTranscriptCourseIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [CourseIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CourseIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptCourseIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptCourseIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalCourseTranscriptCourseIdentificationCode]
            (
                [tid_ExternalCourseTranscript]
                , [CourseIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [AssigningOrganizationIdentificationCode]
                , [CourseIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalCourseTranscript]
                , S.[CourseIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[CourseIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CourseIdentificationSystemDescriptor.[CodeValue] AS CourseIdentificationSystemDescriptorCodeValue, T.[ExternalCourseCode], T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[IdentificationCode], T.[AssigningOrganizationIdentificationCode], CourseIdentificationSystemDescriptor.[Namespace] AS CourseIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , ExternalCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalCourseTranscript.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalCourseTranscriptCourseIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CourseIdentificationSystemDescriptor
                    ON CourseIdentificationSystemDescriptor.[DescriptorId] = T.[CourseIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[extension].[ExternalCourseTranscript] AS ExternalCourseTranscript
                    ON ExternalCourseTranscript.[ExternalCourseCode] = T.[ExternalCourseCode]
                    AND ExternalCourseTranscript.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalCourseTranscript.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND ExternalCourseTranscript.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalCourseTranscriptCourseLevelCharacteristic] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscriptCourseLevelCharacteristic] AS TABLE
(
    [CourseLevelCharacteristicType] [NVARCHAR](450) NOT NULL
    , [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalCourseTranscriptCourseLevelCharacteristicKey] ******/

CREATE TYPE [t_extension].[udt_ExternalCourseTranscriptCourseLevelCharacteristicKey] AS TABLE
(
    [tid_ExternalCourseTranscriptCourseLevelCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [CourseLevelCharacteristicType] [NVARCHAR](450) NOT NULL
    , [ExternalCourseCode] [NVARCHAR](60) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalCourseTranscriptCourseLevelCharacteristic]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalCourseTranscriptCourseLevelCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalCourseTranscriptCourseLevelCharacteristic]
            (
                [tid_ExternalCourseTranscript]
                , [CourseLevelCharacteristicType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalCourseTranscript]
                , S.[CourseLevelCharacteristicType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CourseLevelCharacteristicType.[ShortDescription] AS CourseLevelCharacteristicType, T.[ExternalCourseCode], T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId]
                , T.[CreateDate]
                , ExternalCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalCourseTranscript.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalCourseTranscriptCourseLevelCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[CourseLevelCharacteristicType] AS CourseLevelCharacteristicType
                    ON CourseLevelCharacteristicType.[CourseLevelCharacteristicTypeId] = T.[CourseLevelCharacteristicTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[extension].[ExternalCourseTranscript] AS ExternalCourseTranscript
                    ON ExternalCourseTranscript.[ExternalCourseCode] = T.[ExternalCourseCode]
                    AND ExternalCourseTranscript.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalCourseTranscript.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND ExternalCourseTranscript.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalEducationOrganization] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganization] AS TABLE
(
    [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [ShortNameOfInstitution] [NVARCHAR](75) NULL
    , [WebSite] [NVARCHAR](255) NULL
    , [OperationalStatusType] [NVARCHAR](450) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationKey] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationKey] AS TABLE
(
    [tid_ExternalEducationOrganization] [INT] NOT NULL PRIMARY KEY
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganization] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganization]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ExternalEducationOrganization] AS T
            USING
            (
                SELECT T.[NameOfInstitution]
                , T.[ShortNameOfInstitution]
                , T.[WebSite]
                , [OperationalStatusType].[ShortDescription] AS OperationalStatusType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[ExternalEducationOrganization] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[OperationalStatusType] AS OperationalStatusType
                    ON [OperationalStatusType].[OperationalStatusTypeId] = T.[OperationalStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [NameOfInstitution]
                    , [ShortNameOfInstitution]
                    , [WebSite]
                    , [OperationalStatusType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[NameOfInstitution]
                    , S.[ShortNameOfInstitution]
                    , S.[WebSite]
                    , S.[OperationalStatusType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExternalEducationOrganization]
                , INSERTED.[NameOfInstitution]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ExternalEducationOrganizationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExternalEducationOrganization]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExternalEducationOrganization]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ExternalEducationOrganization] AS T
            JOIN [Ods_Snapshot].[extension].[ExternalEducationOrganization] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbExternalEducationOrganizationIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationCategory] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationIdentificationCode] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationIdentificationCode] AS TABLE
(
    [EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationIdentificationCodeKey] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationIdentificationCodeKey] AS TABLE
(
    [tid_ExternalEducationOrganizationIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [EducationOrganizationIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationIdentificationCode] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationIdentificationCode]
            (
                [tid_ExternalEducationOrganization]
                , [EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [EducationOrganizationIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[EducationOrganizationIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[EducationOrganizationIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationIdentificationSystemDescriptor.[CodeValue] AS EducationOrganizationIdentificationSystemDescriptorCodeValue, T.[NameOfInstitution], T.[IdentificationCode], EducationOrganizationIdentificationSystemDescriptor.[Namespace] AS EducationOrganizationIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalEducationOrganizationIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EducationOrganizationIdentificationSystemDescriptor
                    ON EducationOrganizationIdentificationSystemDescriptor.[DescriptorId] = T.[EducationOrganizationIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationCategory] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationCategory] AS TABLE
(
    [EducationOrganizationCategoryType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationCategoryKey] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationCategoryKey] AS TABLE
(
    [tid_ExternalEducationOrganizationCategory] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationCategoryType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationCategory] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationCategory]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationCategoryKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationCategory]
            (
                [tid_ExternalEducationOrganization]
                , [EducationOrganizationCategoryType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[EducationOrganizationCategoryType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT EducationOrganizationCategoryType.[ShortDescription] AS EducationOrganizationCategoryType, T.[NameOfInstitution]
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalEducationOrganizationCategory] AS T 
                JOIN [Ods_Snapshot].[edfi].[EducationOrganizationCategoryType] AS EducationOrganizationCategoryType
                    ON EducationOrganizationCategoryType.[EducationOrganizationCategoryTypeId] = T.[EducationOrganizationCategoryTypeId]
                JOIN [Ods_Snapshot].[extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationAddress] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationAddressKey] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationAddressKey] AS TABLE
(
    [tid_ExternalEducationOrganizationAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationAddress]
            (
                [tid_ExternalEducationOrganization]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[NameOfInstitution], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalEducationOrganizationAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationInternationalAddress] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationInternationalAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [AddressLine1] [NVARCHAR](150) NOT NULL
    , [AddressLine2] [NVARCHAR](150) NULL
    , [AddressLine3] [NVARCHAR](150) NULL
    , [AddressLine4] [NVARCHAR](150) NULL
    , [CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationInternationalAddressKey] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationInternationalAddressKey] AS TABLE
(
    [tid_ExternalEducationOrganizationInternationalAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationInternationalAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationInternationalAddress]
            (
                [tid_ExternalEducationOrganization]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[NameOfInstitution], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalEducationOrganizationInternationalAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationInstitutionTelephone] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationInstitutionTelephone] AS TABLE
(
    [InstitutionTelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalEducationOrganizationInstitutionTelephoneKey] ******/

CREATE TYPE [t_extension].[udt_ExternalEducationOrganizationInstitutionTelephoneKey] AS TABLE
(
    [tid_ExternalEducationOrganizationInstitutionTelephone] [INT] NOT NULL PRIMARY KEY
    , [InstitutionTelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalEducationOrganizationInstitutionTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalEducationOrganizationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalEducationOrganizationInstitutionTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalEducationOrganizationInstitutionTelephone]
            (
                [tid_ExternalEducationOrganization]
                , [InstitutionTelephoneNumberType]
                , [TelephoneNumber]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalEducationOrganization]
                , S.[InstitutionTelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT InstitutionTelephoneNumberType.[ShortDescription] AS InstitutionTelephoneNumberType, T.[NameOfInstitution], T.[TelephoneNumber]
                , T.[CreateDate]
                , ExternalEducationOrganization.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalEducationOrganization.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalEducationOrganizationInstitutionTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[InstitutionTelephoneNumberType] AS InstitutionTelephoneNumberType
                    ON InstitutionTelephoneNumberType.[InstitutionTelephoneNumberTypeId] = T.[InstitutionTelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[extension].[ExternalEducationOrganization] AS ExternalEducationOrganization
                    ON ExternalEducationOrganization.[NameOfInstitution] = T.[NameOfInstitution]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecord] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecord] AS TABLE
(
    [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [CumulativeEarnedCredits] [DECIMAL](9, 2) NULL
    , [CumulativeEarnedCreditType] [NVARCHAR](450) NULL
    , [CumulativeEarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [CumulativeAttemptedCredits] [DECIMAL](9, 2) NULL
    , [CumulativeAttemptedCreditType] [NVARCHAR](450) NULL
    , [CumulativeAttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [CumulativeGradePointsEarned] [DECIMAL](18, 4) NULL
    , [CumulativeGradePointAverage] [DECIMAL](18, 4) NULL
    , [GradeValueQualifier] [NVARCHAR](80) NULL
    , [ProjectedGraduationDate] [DATE] NULL
    , [SessionEarnedCredits] [DECIMAL](9, 2) NULL
    , [SessionEarnedCreditType] [NVARCHAR](450) NULL
    , [SessionEarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [SessionAttemptedCredits] [DECIMAL](9, 2) NULL
    , [SessionAttemptedCreditType] [NVARCHAR](450) NULL
    , [SessionAttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [SessionGradePointsEarned] [DECIMAL](18, 4) NULL
    , [SessionGradePointAverage] [DECIMAL](18, 4) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordKey] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordKey] AS TABLE
(
    [tid_ExternalStudentAcademicRecord] [INT] NOT NULL PRIMARY KEY
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecord] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ExternalStudentAcademicRecord] AS T
            USING
            (
                SELECT T.[ExternalTerm]
                , T.[NameOfInstitution]
                , T.[SchoolYear]
                , [Student].[StudentUniqueId]
                , T.[CumulativeEarnedCredits]
                , [CumulativeEarnedCreditType].[ShortDescription] AS CumulativeEarnedCreditType
                , T.[CumulativeEarnedCreditConversion]
                , T.[CumulativeAttemptedCredits]
                , [CumulativeAttemptedCreditType].[ShortDescription] AS CumulativeAttemptedCreditType
                , T.[CumulativeAttemptedCreditConversion]
                , T.[CumulativeGradePointsEarned]
                , T.[CumulativeGradePointAverage]
                , T.[GradeValueQualifier]
                , T.[ProjectedGraduationDate]
                , T.[SessionEarnedCredits]
                , [SessionEarnedCreditType].[ShortDescription] AS SessionEarnedCreditType
                , T.[SessionEarnedCreditConversion]
                , T.[SessionAttemptedCredits]
                , [SessionAttemptedCreditType].[ShortDescription] AS SessionAttemptedCreditType
                , T.[SessionAttemptedCreditConversion]
                , T.[SessionGradePointsEarned]
                , T.[SessionGradePointAverage]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[ExternalStudentAcademicRecord] AS T
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CumulativeEarnedCreditType
                    ON [CumulativeEarnedCreditType].[CreditTypeId] = T.[CumulativeEarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CumulativeAttemptedCreditType
                    ON [CumulativeAttemptedCreditType].[CreditTypeId] = T.[CumulativeAttemptedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS SessionEarnedCreditType
                    ON [SessionEarnedCreditType].[CreditTypeId] = T.[SessionEarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS SessionAttemptedCreditType
                    ON [SessionAttemptedCreditType].[CreditTypeId] = T.[SessionAttemptedCreditTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ExternalTerm]
                    , [NameOfInstitution]
                    , [SchoolYear]
                    , [StudentUniqueId]
                    , [CumulativeEarnedCredits]
                    , [CumulativeEarnedCreditType]
                    , [CumulativeEarnedCreditConversion]
                    , [CumulativeAttemptedCredits]
                    , [CumulativeAttemptedCreditType]
                    , [CumulativeAttemptedCreditConversion]
                    , [CumulativeGradePointsEarned]
                    , [CumulativeGradePointAverage]
                    , [GradeValueQualifier]
                    , [ProjectedGraduationDate]
                    , [SessionEarnedCredits]
                    , [SessionEarnedCreditType]
                    , [SessionEarnedCreditConversion]
                    , [SessionAttemptedCredits]
                    , [SessionAttemptedCreditType]
                    , [SessionAttemptedCreditConversion]
                    , [SessionGradePointsEarned]
                    , [SessionGradePointAverage]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ExternalTerm]
                    , S.[NameOfInstitution]
                    , S.[SchoolYear]
                    , S.[StudentUniqueId]
                    , S.[CumulativeEarnedCredits]
                    , S.[CumulativeEarnedCreditType]
                    , S.[CumulativeEarnedCreditConversion]
                    , S.[CumulativeAttemptedCredits]
                    , S.[CumulativeAttemptedCreditType]
                    , S.[CumulativeAttemptedCreditConversion]
                    , S.[CumulativeGradePointsEarned]
                    , S.[CumulativeGradePointAverage]
                    , S.[GradeValueQualifier]
                    , S.[ProjectedGraduationDate]
                    , S.[SessionEarnedCredits]
                    , S.[SessionEarnedCreditType]
                    , S.[SessionEarnedCreditConversion]
                    , S.[SessionAttemptedCredits]
                    , S.[SessionAttemptedCreditType]
                    , S.[SessionAttemptedCreditConversion]
                    , S.[SessionGradePointsEarned]
                    , S.[SessionGradePointAverage]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ExternalStudentAcademicRecord]
                , INSERTED.[ExternalTerm]
                , INSERTED.[NameOfInstitution]
                , INSERTED.[SchoolYear]
                , INSERTED.[StudentUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ExternalStudentAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ExternalStudentAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ExternalStudentAcademicRecord] AS T
            JOIN [Ods_Snapshot].[extension].[ExternalStudentAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordClassRanking] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecordDiploma] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordClassRanking] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordClassRanking] AS TABLE
(
    [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [ClassRank] [INT] NOT NULL
    , [TotalNumberInClass] [INT] NOT NULL
    , [PercentageRanking] [INT] NULL
    , [ClassRankingDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordClassRankingKey] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordClassRankingKey] AS TABLE
(
    [tid_ExternalStudentAcademicRecordClassRanking] [INT] NOT NULL PRIMARY KEY
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordClassRanking] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordClassRanking]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordClassRankingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordClassRanking]
            (
                [tid_ExternalStudentAcademicRecord]
                , [ClassRank]
                , [TotalNumberInClass]
                , [PercentageRanking]
                , [ClassRankingDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[ClassRank]
                , S.[TotalNumberInClass]
                , S.[PercentageRanking]
                , S.[ClassRankingDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[ClassRank], T.[TotalNumberInClass], T.[PercentageRanking], T.[ClassRankingDate]
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalStudentAcademicRecordClassRanking] AS T 
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                JOIN [Ods_Snapshot].[extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordAcademicHonor] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordAcademicHonor] AS TABLE
(
    [AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [HonorDescription] [NVARCHAR](80) NULL
    , [HonorAwardDate] [DATE] NULL
    , [HonorAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordAcademicHonorKey] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordAcademicHonorKey] AS TABLE
(
    [tid_ExternalStudentAcademicRecordAcademicHonor] [INT] NOT NULL PRIMARY KEY
    , [AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordAcademicHonor]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordAcademicHonorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordAcademicHonor]
            (
                [tid_ExternalStudentAcademicRecord]
                , [AcademicHonorCategoryType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [HonorDescription]
                , [HonorAwardDate]
                , [HonorAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[AcademicHonorCategoryType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[HonorDescription]
                , S.[HonorAwardDate]
                , S.[HonorAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicHonorCategoryType.[ShortDescription] AS AcademicHonorCategoryType, T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[HonorDescription], T.[HonorAwardDate], T.[HonorAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalStudentAcademicRecordAcademicHonor] AS T 
                JOIN [Ods_Snapshot].[edfi].[AcademicHonorCategoryType] AS AcademicHonorCategoryType
                    ON AcademicHonorCategoryType.[AcademicHonorCategoryTypeId] = T.[AcademicHonorCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordRecognition] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordRecognition] AS TABLE
(
    [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [RecognitionType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [RecognitionDescription] [NVARCHAR](80) NULL
    , [RecognitionAwardDate] [DATE] NULL
    , [RecognitionAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordRecognitionKey] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordRecognitionKey] AS TABLE
(
    [tid_ExternalStudentAcademicRecordRecognition] [INT] NOT NULL PRIMARY KEY
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [RecognitionType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordRecognition] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordRecognition]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordRecognition]
            (
                [tid_ExternalStudentAcademicRecord]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ExternalTerm], T.[NameOfInstitution], RecognitionType.[ShortDescription] AS RecognitionType, T.[SchoolYear], [Student].[StudentUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalStudentAcademicRecordRecognition] AS T 
                JOIN [Ods_Snapshot].[edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordDiploma] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordDiploma] AS TABLE
(
    [DiplomaAwardDate] [DATE] NOT NULL
    , [DiplomaType] [NVARCHAR](450) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [DiplomaLevelType] [NVARCHAR](450) NULL
    , [CTECompleter] [BIT] NULL
    , [DiplomaDescription] [NVARCHAR](80) NULL
    , [DiplomaAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ExternalStudentAcademicRecordDiplomaKey] ******/

CREATE TYPE [t_extension].[udt_ExternalStudentAcademicRecordDiplomaKey] AS TABLE
(
    [tid_ExternalStudentAcademicRecordDiploma] [INT] NOT NULL PRIMARY KEY
    , [DiplomaAwardDate] [DATE] NOT NULL
    , [DiplomaType] [NVARCHAR](450) NOT NULL
    , [ExternalTerm] [NVARCHAR](75) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbExternalStudentAcademicRecordDiploma] ******/

CREATE PROCEDURE [t_extension].[usp_dbExternalStudentAcademicRecordDiploma]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ExternalStudentAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ExternalStudentAcademicRecordDiplomaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ExternalStudentAcademicRecordDiploma]
            (
                [tid_ExternalStudentAcademicRecord]
                , [DiplomaAwardDate]
                , [DiplomaType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [DiplomaLevelType]
                , [CTECompleter]
                , [DiplomaDescription]
                , [DiplomaAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ExternalStudentAcademicRecord]
                , S.[DiplomaAwardDate]
                , S.[DiplomaType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[DiplomaLevelType]
                , S.[CTECompleter]
                , S.[DiplomaDescription]
                , S.[DiplomaAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DiplomaAwardDate], DiplomaType.[ShortDescription] AS DiplomaType, T.[ExternalTerm], T.[NameOfInstitution], T.[SchoolYear], [Student].[StudentUniqueId], T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], DiplomaLevelType.[ShortDescription] AS DiplomaLevelType, T.[CTECompleter], T.[DiplomaDescription], T.[DiplomaAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace
                , T.[CreateDate]
                , ExternalStudentAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , ExternalStudentAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ExternalStudentAcademicRecordDiploma] AS T 
                JOIN [Ods_Snapshot].[edfi].[DiplomaType] AS DiplomaType
                    ON DiplomaType.[DiplomaTypeId] = T.[DiplomaTypeId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DiplomaLevelType] AS DiplomaLevelType
                    ON DiplomaLevelType.[DiplomaLevelTypeId] = T.[DiplomaLevelTypeId]
                JOIN [Ods_Snapshot].[extension].[ExternalStudentAcademicRecord] AS ExternalStudentAcademicRecord
                    ON ExternalStudentAcademicRecord.[ExternalTerm] = T.[ExternalTerm]
                    AND ExternalStudentAcademicRecord.[NameOfInstitution] = T.[NameOfInstitution]
                    AND ExternalStudentAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND ExternalStudentAcademicRecord.[StudentUSI] = T.[StudentUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_FieldworkTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_FieldworkTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [FieldworkType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_FieldworkTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_FieldworkTypeDescriptorKey] AS TABLE
(
    [tid_FieldworkTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbFieldworkTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbFieldworkTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_FieldworkTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[FieldworkTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [FieldworkType].[ShortDescription] AS FieldworkType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[FieldworkTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[FieldworkTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[FieldworkType] AS FieldworkType
                    ON [FieldworkType].[FieldworkTypeId] = T.[FieldworkTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [FieldworkType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[FieldworkType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_FieldworkTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_FieldworkTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_FieldworkTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[FieldworkTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[FieldworkTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[FieldworkTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_LevelOfDegreeAwardedDescriptor] ******/

CREATE TYPE [t_extension].[udt_LevelOfDegreeAwardedDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [LevelOfDegreeAwardedType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_LevelOfDegreeAwardedDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_LevelOfDegreeAwardedDescriptorKey] AS TABLE
(
    [tid_LevelOfDegreeAwardedDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbLevelOfDegreeAwardedDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbLevelOfDegreeAwardedDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_LevelOfDegreeAwardedDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[LevelOfDegreeAwardedDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LevelOfDegreeAwardedType].[ShortDescription] AS LevelOfDegreeAwardedType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[LevelOfDegreeAwardedDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelOfDegreeAwardedDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[LevelOfDegreeAwardedType] AS LevelOfDegreeAwardedType
                    ON [LevelOfDegreeAwardedType].[LevelOfDegreeAwardedTypeId] = T.[LevelOfDegreeAwardedTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LevelOfDegreeAwardedType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LevelOfDegreeAwardedType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelOfDegreeAwardedDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelOfDegreeAwardedDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelOfDegreeAwardedDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[LevelOfDegreeAwardedDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[LevelOfDegreeAwardedDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelOfDegreeAwardedDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_LevelTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_LevelTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [LevelType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_LevelTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_LevelTypeDescriptorKey] AS TABLE
(
    [tid_LevelTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbLevelTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbLevelTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_LevelTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[LevelTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [LevelType].[ShortDescription] AS LevelType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[LevelTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[LevelTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[LevelType] AS LevelType
                    ON [LevelType].[LevelTypeId] = T.[LevelTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [LevelType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[LevelType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_LevelTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[LevelTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_LevelTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_LevelTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[LevelTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[LevelTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[LevelTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasure] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasure] AS TABLE
(
    [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [PerformanceMeasureTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [CourseCode] [NVARCHAR](60) NULL
    , [EducationOrganizationId] [INT] NULL
    , [ScheduleDateOfPerformanceMeasure] [DATE] NULL
    , [ActualDateOfPerformanceMeasure] [DATE] NOT NULL
    , [TimeOfPerformanceMeasure] [TIME](7) NULL
    , [DurationOfPerformanceMeasure] [INT] NULL
    , [Announced] [BIT] NULL
    , [CoteachingObserved] [BIT] NULL
    , [Comments] [NVARCHAR](1024) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [PerformanceMeasureTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureKey] AS TABLE
(
    [tid_PerformanceMeasure] [INT] NOT NULL PRIMARY KEY
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasure] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PerformanceMeasure] AS T
            USING
            (
                SELECT T.[PerformanceMeasureIdentifier]
                , PerformanceMeasureTypeDescriptor.[CodeValue] AS PerformanceMeasureTypeDescriptorCodeValue
                , T.[RubricEducationOrganizationId]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[RubricTitle]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[ScheduleDateOfPerformanceMeasure]
                , T.[ActualDateOfPerformanceMeasure]
                , T.[TimeOfPerformanceMeasure]
                , T.[DurationOfPerformanceMeasure]
                , T.[Announced]
                , T.[CoteachingObserved]
                , T.[Comments]
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , PerformanceMeasureTypeDescriptor.[Namespace] AS PerformanceMeasureTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[PerformanceMeasure] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceMeasureTypeDescriptor
                    ON [PerformanceMeasureTypeDescriptor].[DescriptorId] = T.[PerformanceMeasureTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [PerformanceMeasureIdentifier]
                    , [PerformanceMeasureTypeDescriptorCodeValue]
                    , [RubricEducationOrganizationId]
                    , [RubricTypeDescriptorCodeValue]
                    , [RubricTitle]
                    , [TermDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [CourseCode]
                    , [EducationOrganizationId]
                    , [ScheduleDateOfPerformanceMeasure]
                    , [ActualDateOfPerformanceMeasure]
                    , [TimeOfPerformanceMeasure]
                    , [DurationOfPerformanceMeasure]
                    , [Announced]
                    , [CoteachingObserved]
                    , [Comments]
                    , [AcademicSubjectDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [RubricTypeDescriptorNamespace]
                    , [PerformanceMeasureTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[PerformanceMeasureIdentifier]
                    , S.[PerformanceMeasureTypeDescriptorCodeValue]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[RubricTitle]
                    , S.[TermDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[ScheduleDateOfPerformanceMeasure]
                    , S.[ActualDateOfPerformanceMeasure]
                    , S.[TimeOfPerformanceMeasure]
                    , S.[DurationOfPerformanceMeasure]
                    , S.[Announced]
                    , S.[CoteachingObserved]
                    , S.[Comments]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[PerformanceMeasureTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceMeasure]
                , INSERTED.[PerformanceMeasureIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PerformanceMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PerformanceMeasure] AS T
            JOIN [Ods_Snapshot].[extension].[PerformanceMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbPerformanceMeasureProgramGateway] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureReviewer] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasureProgramGateway] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureProgramGateway] AS TABLE
(
    [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureProgramGatewayKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureProgramGatewayKey] AS TABLE
(
    [tid_PerformanceMeasureProgramGateway] [INT] NOT NULL PRIMARY KEY
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureProgramGateway] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureProgramGateway]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureProgramGatewayKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureProgramGateway]
            (
                [tid_PerformanceMeasure]
                , [ProgramGatewayDescriptorCodeValue]
                , [ProgramGatewayDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasure]
                , S.[ProgramGatewayDescriptorCodeValue]
                , S.[ProgramGatewayDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[PerformanceMeasureIdentifier], ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue, ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[PerformanceMeasureProgramGateway] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON ProgramGatewayDescriptor.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN [Ods_Snapshot].[extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasureGradeLevel] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureGradeLevel] AS TABLE
(
    [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureGradeLevelKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureGradeLevelKey] AS TABLE
(
    [tid_PerformanceMeasureGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureGradeLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureGradeLevel]
            (
                [tid_PerformanceMeasure]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasure]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[PerformanceMeasureIdentifier], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[PerformanceMeasureGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasurePersonBeingReviewed] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasurePersonBeingReviewed] AS TABLE
(
    [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NULL
    , [ProspectEducationOrganizationId] [INT] NULL
    , [PersonBeingReviewedStaffUniqueId] [NVARCHAR](32) NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasurePersonBeingReviewedKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasurePersonBeingReviewedKey] AS TABLE
(
    [tid_PerformanceMeasurePersonBeingReviewed] [INT] NOT NULL PRIMARY KEY
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasurePersonBeingReviewed]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasurePersonBeingReviewedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasurePersonBeingReviewed]
            (
                [tid_PerformanceMeasure]
                , [FirstName]
                , [LastSurname]
                , [ProspectIdentifier]
                , [ProspectEducationOrganizationId]
                , [PersonBeingReviewedStaffUniqueId]
                , [TeacherCandidateIdentifier]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasure]
                , S.[FirstName]
                , S.[LastSurname]
                , S.[ProspectIdentifier]
                , S.[ProspectEducationOrganizationId]
                , S.[PersonBeingReviewedStaffUniqueId]
                , S.[TeacherCandidateIdentifier]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[PerformanceMeasureIdentifier], T.[FirstName], T.[LastSurname], T.[ProspectIdentifier], T.[ProspectEducationOrganizationId], [PersonBeingReviewedStaff].[PersonBeingReviewedStaffUniqueId], T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[PerformanceMeasurePersonBeingReviewed] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[PersonBeingReviewedStaff]
                    ON [PersonBeingReviewedStaff].[PersonBeingReviewedStaffUSI] = T.[PersonBeingReviewedStaffUSI]
                JOIN [Ods_Snapshot].[extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasureReviewer] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureReviewer] AS TABLE
(
    [FirstName] [NVARCHAR](75) NOT NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [ReviewerStaffUniqueId] [NVARCHAR](32) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureReviewerKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureReviewerKey] AS TABLE
(
    [tid_PerformanceMeasureReviewer] [INT] NOT NULL PRIMARY KEY
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureReviewer] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureReviewer]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureReviewerKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureReviewer]
            (
                [tid_PerformanceMeasure]
                , [FirstName]
                , [LastSurname]
                , [ReviewerStaffUniqueId]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_PerformanceMeasureReviewer]
            INTO @Tids
            SELECT T.[tid_PerformanceMeasure]
                , S.[FirstName]
                , S.[LastSurname]
                , S.[ReviewerStaffUniqueId]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FirstName], T.[LastSurname], T.[PerformanceMeasureIdentifier], [ReviewerStaff].[ReviewerStaffUniqueId]
                , T.[CreateDate]
                , PerformanceMeasure.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasure.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[PerformanceMeasureReviewer] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[ReviewerStaff]
                    ON [ReviewerStaff].[ReviewerStaffUSI] = T.[ReviewerStaffUSI]
                JOIN [Ods_Snapshot].[extension].[PerformanceMeasure] AS PerformanceMeasure
                    ON PerformanceMeasure.[PerformanceMeasureIdentifier] = T.[PerformanceMeasureIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_PerformanceMeasureReviewer]
                , S.[FirstName]
                , S.[LastSurname]
                , T.[PerformanceMeasureIdentifier]
            FROM [t_extension].[PerformanceMeasureReviewer] AS S
            JOIN @pTids AS T
                ON S.[tid_PerformanceMeasure] = T.[tid_PerformanceMeasure]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_PerformanceMeasureReviewer] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasureReviewerReceivedTraining] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureReviewerReceivedTraining] AS TABLE
(
    [FirstName] [NVARCHAR](75) NOT NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [ReceivedTrainingDate] [DATE] NULL
    , [InterRaterReliabilityScore] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureReviewerReceivedTrainingKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureReviewerReceivedTrainingKey] AS TABLE
(
    [tid_PerformanceMeasureReviewerReceivedTraining] [INT] NOT NULL PRIMARY KEY
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureReviewerReceivedTraining]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureReviewerKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureReviewerReceivedTrainingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureReviewerReceivedTraining]
            (
                [tid_PerformanceMeasureReviewer]
                , [ReceivedTrainingDate]
                , [InterRaterReliabilityScore]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasureReviewer]
                , S.[ReceivedTrainingDate]
                , S.[InterRaterReliabilityScore]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FirstName], T.[LastSurname], T.[PerformanceMeasureIdentifier], T.[ReceivedTrainingDate], T.[InterRaterReliabilityScore]
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[PerformanceMeasureReviewerReceivedTraining] AS T 
            ) AS S
            JOIN @pTids AS T
                ON T.[FirstName] = S.[FirstName]
                AND T.[LastSurname] = S.[LastSurname]
                AND T.[PerformanceMeasureIdentifier] = S.[PerformanceMeasureIdentifier];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasureFacts] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureFacts] AS TABLE
(
    [FactsAsOfDate] [DATE] NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [PerformanceMeasureTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [PerformanceMeasureTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureFactsKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureFactsKey] AS TABLE
(
    [tid_PerformanceMeasureFacts] [INT] NOT NULL PRIMARY KEY
    , [FactsAsOfDate] [DATE] NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PerformanceMeasureFacts] AS T
            USING
            (
                SELECT T.[FactsAsOfDate]
                , T.[RubricEducationOrganizationId]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[SchoolYear]
                , PerformanceMeasureTypeDescriptor.[CodeValue] AS PerformanceMeasureTypeDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , PerformanceMeasureTypeDescriptor.[Namespace] AS PerformanceMeasureTypeDescriptorNamespace
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[PerformanceMeasureFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceMeasureTypeDescriptor
                    ON [PerformanceMeasureTypeDescriptor].[DescriptorId] = T.[PerformanceMeasureTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactsAsOfDate]
                    , [RubricEducationOrganizationId]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [SchoolYear]
                    , [PerformanceMeasureTypeDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [AcademicSubjectDescriptorNamespace]
                    , [PerformanceMeasureTypeDescriptorNamespace]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactsAsOfDate]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[SchoolYear]
                    , S.[PerformanceMeasureTypeDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[PerformanceMeasureTypeDescriptorNamespace]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceMeasureFacts]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[SchoolYear]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PerformanceMeasureFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceMeasureFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceMeasureFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PerformanceMeasureFacts] AS T
            JOIN [Ods_Snapshot].[extension].[PerformanceMeasureFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbPerformanceMeasureFactsGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasureFactsGradeLevel] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureFactsGradeLevel] AS TABLE
(
    [FactsAsOfDate] [DATE] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureFactsGradeLevelKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureFactsGradeLevelKey] AS TABLE
(
    [tid_PerformanceMeasureFactsGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [FactsAsOfDate] [DATE] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureFactsGradeLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureFactsGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_PerformanceMeasureFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureFactsGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[PerformanceMeasureFactsGradeLevel]
            (
                [tid_PerformanceMeasureFacts]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_PerformanceMeasureFacts]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FactsAsOfDate], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[RubricEducationOrganizationId], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, T.[SchoolYear], RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , PerformanceMeasureFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , PerformanceMeasureFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[PerformanceMeasureFactsGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [Ods_Snapshot].[extension].[PerformanceMeasureFacts] AS PerformanceMeasureFacts
                    ON PerformanceMeasureFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND PerformanceMeasureFacts.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND PerformanceMeasureFacts.[RubricTitle] = T.[RubricTitle]
                    AND PerformanceMeasureFacts.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
                    AND PerformanceMeasureFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PerformanceMeasureTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [PerformanceMeasureType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PerformanceMeasureTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_PerformanceMeasureTypeDescriptorKey] AS TABLE
(
    [tid_PerformanceMeasureTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPerformanceMeasureTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbPerformanceMeasureTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PerformanceMeasureTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PerformanceMeasureTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PerformanceMeasureType].[ShortDescription] AS PerformanceMeasureType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[PerformanceMeasureTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PerformanceMeasureTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PerformanceMeasureType] AS PerformanceMeasureType
                    ON [PerformanceMeasureType].[PerformanceMeasureTypeId] = T.[PerformanceMeasureTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PerformanceMeasureType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PerformanceMeasureType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PerformanceMeasureTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PerformanceMeasureTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PerformanceMeasureTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PerformanceMeasureTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[PerformanceMeasureTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[PerformanceMeasureTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PopulationCategoryDescriptor] ******/

CREATE TYPE [t_extension].[udt_PopulationCategoryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [PopulationCategoryType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PopulationCategoryDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_PopulationCategoryDescriptorKey] AS TABLE
(
    [tid_PopulationCategoryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPopulationCategoryDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbPopulationCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PopulationCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PopulationCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PopulationCategoryType].[ShortDescription] AS PopulationCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[PopulationCategoryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PopulationCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[PopulationCategoryType] AS PopulationCategoryType
                    ON [PopulationCategoryType].[PopulationCategoryTypeId] = T.[PopulationCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PopulationCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PopulationCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PopulationCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PopulationCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PopulationCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PopulationCategoryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[PopulationCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[PopulationCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PopulationSubCategoryDescriptor] ******/

CREATE TYPE [t_extension].[udt_PopulationSubCategoryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [PopulationSubCategoryType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PopulationSubCategoryDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_PopulationSubCategoryDescriptorKey] AS TABLE
(
    [tid_PopulationSubCategoryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPopulationSubCategoryDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbPopulationSubCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PopulationSubCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PopulationSubCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PopulationSubCategoryType].[ShortDescription] AS PopulationSubCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[PopulationSubCategoryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PopulationSubCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[PopulationSubCategoryType] AS PopulationSubCategoryType
                    ON [PopulationSubCategoryType].[PopulationSubCategoryTypeId] = T.[PopulationSubCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PopulationSubCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PopulationSubCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PopulationSubCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PopulationSubCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PopulationSubCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PopulationSubCategoryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[PopulationSubCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[PopulationSubCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_PreviousCareerDescriptor] ******/

CREATE TYPE [t_extension].[udt_PreviousCareerDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [PreviousCareerType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_PreviousCareerDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_PreviousCareerDescriptorKey] AS TABLE
(
    [tid_PreviousCareerDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbPreviousCareerDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbPreviousCareerDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_PreviousCareerDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[PreviousCareerDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [PreviousCareerType].[ShortDescription] AS PreviousCareerType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[PreviousCareerDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[PreviousCareerDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[PreviousCareerType] AS PreviousCareerType
                    ON [PreviousCareerType].[PreviousCareerTypeId] = T.[PreviousCareerTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [PreviousCareerType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[PreviousCareerType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_PreviousCareerDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[PreviousCareerDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_PreviousCareerDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_PreviousCareerDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[PreviousCareerDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[PreviousCareerDescriptor] AS S
                ON P.[DescriptorId] = S.[PreviousCareerDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProfessionalDevelopmentEvent] ******/

CREATE TYPE [t_extension].[udt_ProfessionalDevelopmentEvent] AS TABLE
(
    [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [ProfessionalDevelopmentOfferedByDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TotalHours] [INT] NULL
    , [Required] [BIT] NULL
    , [MultipleSession] [BIT] NULL
    , [ProfessionalDevelopmentReason] [NVARCHAR](60) NULL
    , [ProfessionalDevelopmentOfferedByDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProfessionalDevelopmentEventKey] ******/

CREATE TYPE [t_extension].[udt_ProfessionalDevelopmentEventKey] AS TABLE
(
    [tid_ProfessionalDevelopmentEvent] [INT] NOT NULL PRIMARY KEY
    , [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProfessionalDevelopmentEvent] ******/

CREATE PROCEDURE [t_extension].[usp_dbProfessionalDevelopmentEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProfessionalDevelopmentEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProfessionalDevelopmentEvent] AS T
            USING
            (
                SELECT T.[ProfessionalDevelopmentTitle]
                , ProfessionalDevelopmentOfferedByDescriptor.[CodeValue] AS ProfessionalDevelopmentOfferedByDescriptorCodeValue
                , T.[TotalHours]
                , T.[Required]
                , T.[MultipleSession]
                , T.[ProfessionalDevelopmentReason]
                , ProfessionalDevelopmentOfferedByDescriptor.[Namespace] AS ProfessionalDevelopmentOfferedByDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[ProfessionalDevelopmentEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProfessionalDevelopmentOfferedByDescriptor
                    ON [ProfessionalDevelopmentOfferedByDescriptor].[DescriptorId] = T.[ProfessionalDevelopmentOfferedByDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ProfessionalDevelopmentTitle]
                    , [ProfessionalDevelopmentOfferedByDescriptorCodeValue]
                    , [TotalHours]
                    , [Required]
                    , [MultipleSession]
                    , [ProfessionalDevelopmentReason]
                    , [ProfessionalDevelopmentOfferedByDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ProfessionalDevelopmentTitle]
                    , S.[ProfessionalDevelopmentOfferedByDescriptorCodeValue]
                    , S.[TotalHours]
                    , S.[Required]
                    , S.[MultipleSession]
                    , S.[ProfessionalDevelopmentReason]
                    , S.[ProfessionalDevelopmentOfferedByDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProfessionalDevelopmentEvent]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProfessionalDevelopmentEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProfessionalDevelopmentEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProfessionalDevelopmentEvent] AS T
            JOIN [Ods_Snapshot].[extension].[ProfessionalDevelopmentEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProfessionalDevelopmentOfferedByDescriptor] ******/

CREATE TYPE [t_extension].[udt_ProfessionalDevelopmentOfferedByDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ProfessionalDevelopmentOfferedByType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProfessionalDevelopmentOfferedByDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_ProfessionalDevelopmentOfferedByDescriptorKey] AS TABLE
(
    [tid_ProfessionalDevelopmentOfferedByDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProfessionalDevelopmentOfferedByDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProfessionalDevelopmentOfferedByType].[ShortDescription] AS ProfessionalDevelopmentOfferedByType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[ProfessionalDevelopmentOfferedByDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProfessionalDevelopmentOfferedByDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProfessionalDevelopmentOfferedByType] AS ProfessionalDevelopmentOfferedByType
                    ON [ProfessionalDevelopmentOfferedByType].[ProfessionalDevelopmentOfferedByTypeId] = T.[ProfessionalDevelopmentOfferedByTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProfessionalDevelopmentOfferedByType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProfessionalDevelopmentOfferedByType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProfessionalDevelopmentOfferedByDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProfessionalDevelopmentOfferedByDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProfessionalDevelopmentOfferedByDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[ProfessionalDevelopmentOfferedByDescriptor] AS S
                ON P.[DescriptorId] = S.[ProfessionalDevelopmentOfferedByDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProgramGatewayDescriptor] ******/

CREATE TYPE [t_extension].[udt_ProgramGatewayDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramGatewayType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProgramGatewayDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_ProgramGatewayDescriptorKey] AS TABLE
(
    [tid_ProgramGatewayDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProgramGatewayDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbProgramGatewayDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProgramGatewayDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProgramGatewayDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ProgramGatewayType].[ShortDescription] AS ProgramGatewayType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[ProgramGatewayDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ProgramGatewayDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProgramGatewayType] AS ProgramGatewayType
                    ON [ProgramGatewayType].[ProgramGatewayTypeId] = T.[ProgramGatewayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ProgramGatewayType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ProgramGatewayType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProgramGatewayDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProgramGatewayDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProgramGatewayDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProgramGatewayDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[ProgramGatewayDescriptor] AS S
                ON P.[DescriptorId] = S.[ProgramGatewayDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_Prospect] ******/

CREATE TYPE [t_extension].[udt_Prospect] AS TABLE
(
    [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [MaidenName] [NVARCHAR](75) NULL
    , [ElectronicMailAddress] [NVARCHAR](128) NOT NULL
    , [Applied] [BIT] NULL
    , [HispanicLatinoEthnicity] [BIT] NULL
    , [Met] [BIT] NULL
    , [Notes] [NVARCHAR](255) NULL
    , [PreScreeningRating] [INT] NULL
    , [Referral] [BIT] NULL
    , [ReferredBy] [NVARCHAR](50) NULL
    , [SexType] [NVARCHAR](450) NULL
    , [SocialMediaUserName] [NVARCHAR](50) NULL
    , [SocialMediaNetworkName] [NVARCHAR](50) NULL
    , [GenderType] [NVARCHAR](450) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectKey] ******/

CREATE TYPE [t_extension].[udt_ProspectKey] AS TABLE
(
    [tid_Prospect] [INT] NOT NULL PRIMARY KEY
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspect] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspect]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Prospect] AS T
            USING
            (
                SELECT T.[ProspectEducationOrganizationId]
                , T.[ProspectIdentifier]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , T.[ElectronicMailAddress]
                , T.[Applied]
                , T.[HispanicLatinoEthnicity]
                , T.[Met]
                , T.[Notes]
                , T.[PreScreeningRating]
                , T.[Referral]
                , T.[ReferredBy]
                , [SexType].[ShortDescription] AS SexType
                , T.[SocialMediaUserName]
                , T.[SocialMediaNetworkName]
                , [GenderType].[ShortDescription] AS GenderType
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[Prospect] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ProspectEducationOrganizationId]
                    , [ProspectIdentifier]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [ElectronicMailAddress]
                    , [Applied]
                    , [HispanicLatinoEthnicity]
                    , [Met]
                    , [Notes]
                    , [PreScreeningRating]
                    , [Referral]
                    , [ReferredBy]
                    , [SexType]
                    , [SocialMediaUserName]
                    , [SocialMediaNetworkName]
                    , [GenderType]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ProspectEducationOrganizationId]
                    , S.[ProspectIdentifier]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[ElectronicMailAddress]
                    , S.[Applied]
                    , S.[HispanicLatinoEthnicity]
                    , S.[Met]
                    , S.[Notes]
                    , S.[PreScreeningRating]
                    , S.[Referral]
                    , S.[ReferredBy]
                    , S.[SexType]
                    , S.[SocialMediaUserName]
                    , S.[SocialMediaNetworkName]
                    , S.[GenderType]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Prospect]
                , INSERTED.[ProspectEducationOrganizationId]
                , INSERTED.[ProspectIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProspectSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Prospect]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Prospect]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Prospect] AS T
            JOIN [Ods_Snapshot].[extension].[Prospect] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbProspectCurrentPosition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectRecruitmentEvent] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectTouchpoint] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectQualifications] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbProspectIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectCurrentPosition] ******/

CREATE TYPE [t_extension].[udt_ProspectCurrentPosition] AS TABLE
(
    [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [NameOfInstitution] [NVARCHAR](75) NOT NULL
    , [Location] [NVARCHAR](75) NOT NULL
    , [PositionTitle] [NVARCHAR](100) NOT NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectCurrentPositionKey] ******/

CREATE TYPE [t_extension].[udt_ProspectCurrentPositionKey] AS TABLE
(
    [tid_ProspectCurrentPosition] [INT] NOT NULL PRIMARY KEY
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectCurrentPosition] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectCurrentPosition]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectCurrentPositionKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectCurrentPosition]
            (
                [tid_Prospect]
                , [NameOfInstitution]
                , [Location]
                , [PositionTitle]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_ProspectCurrentPosition]
            INTO @Tids
            SELECT T.[tid_Prospect]
                , S.[NameOfInstitution]
                , S.[Location]
                , S.[PositionTitle]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[NameOfInstitution], T.[Location], T.[PositionTitle], AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectCurrentPosition] AS T 
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_ProspectCurrentPosition]
                , T.[ProspectEducationOrganizationId]
                , T.[ProspectIdentifier]
            FROM [t_extension].[ProspectCurrentPosition] AS S
            JOIN @pTids AS T
                ON S.[tid_Prospect] = T.[tid_Prospect]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_ProspectCurrentPosition] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbProspectCurrentPositionGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectCurrentPositionGradeLevel] ******/

CREATE TYPE [t_extension].[udt_ProspectCurrentPositionGradeLevel] AS TABLE
(
    [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectCurrentPositionGradeLevelKey] ******/

CREATE TYPE [t_extension].[udt_ProspectCurrentPositionGradeLevelKey] AS TABLE
(
    [tid_ProspectCurrentPositionGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectCurrentPositionGradeLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectCurrentPositionGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectCurrentPositionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectCurrentPositionGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectCurrentPositionGradeLevel]
            (
                [tid_ProspectCurrentPosition]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_ProspectCurrentPosition]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[ProspectCurrentPositionGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ProspectEducationOrganizationId] = S.[ProspectEducationOrganizationId]
                AND T.[ProspectIdentifier] = S.[ProspectIdentifier];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectRace] ******/

CREATE TYPE [t_extension].[udt_ProspectRace] AS TABLE
(
    [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectRaceKey] ******/

CREATE TYPE [t_extension].[udt_ProspectRaceKey] AS TABLE
(
    [tid_ProspectRace] [INT] NOT NULL PRIMARY KEY
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectRace] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectRace]
            (
                [tid_Prospect]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], RaceType.[ShortDescription] AS RaceType
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectRecruitmentEvent] ******/

CREATE TYPE [t_extension].[udt_ProspectRecruitmentEvent] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [EventTitle] [NVARCHAR](50) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectRecruitmentEventKey] ******/

CREATE TYPE [t_extension].[udt_ProspectRecruitmentEventKey] AS TABLE
(
    [tid_ProspectRecruitmentEvent] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [EventTitle] [NVARCHAR](50) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectRecruitmentEvent] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectRecruitmentEvent]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectRecruitmentEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectRecruitmentEvent]
            (
                [tid_Prospect]
                , [EventDate]
                , [EventTitle]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[EventDate]
                , S.[EventTitle]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EventDate], T.[EventTitle], T.[ProspectEducationOrganizationId], T.[ProspectIdentifier]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectRecruitmentEvent] AS T 
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectTelephone] ******/

CREATE TYPE [t_extension].[udt_ProspectTelephone] AS TABLE
(
    [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [OrderOfPriority] [INT] NULL
    , [TextMessageCapabilityIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectTelephoneKey] ******/

CREATE TYPE [t_extension].[udt_ProspectTelephoneKey] AS TABLE
(
    [tid_ProspectTelephone] [INT] NOT NULL PRIMARY KEY
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectTelephone] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectTelephone]
            (
                [tid_Prospect]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectTouchpoint] ******/

CREATE TYPE [t_extension].[udt_ProspectTouchpoint] AS TABLE
(
    [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [TouchpointContent] [NVARCHAR](255) NOT NULL
    , [TouchpointDate] [DATE] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectTouchpointKey] ******/

CREATE TYPE [t_extension].[udt_ProspectTouchpointKey] AS TABLE
(
    [tid_ProspectTouchpoint] [INT] NOT NULL PRIMARY KEY
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [TouchpointContent] [NVARCHAR](255) NOT NULL
    , [TouchpointDate] [DATE] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectTouchpoint] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectTouchpoint]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectTouchpointKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectTouchpoint]
            (
                [tid_Prospect]
                , [TouchpointContent]
                , [TouchpointDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[TouchpointContent]
                , S.[TouchpointDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[TouchpointContent], T.[TouchpointDate]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectTouchpoint] AS T 
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectCredential] ******/

CREATE TYPE [t_extension].[udt_ProspectCredential] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectCredentialKey] ******/

CREATE TYPE [t_extension].[udt_ProspectCredentialKey] AS TABLE
(
    [tid_ProspectCredential] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectCredential] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectCredential]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectCredential]
            (
                [tid_Prospect]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectCredential] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectDisability] ******/

CREATE TYPE [t_extension].[udt_ProspectDisability] AS TABLE
(
    [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [DisabilityDiagnosis] [NVARCHAR](80) NULL
    , [OrderOfDisability] [INT] NULL
    , [DisabilityDeterminationSourceType] [NVARCHAR](450) NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectDisabilityKey] ******/

CREATE TYPE [t_extension].[udt_ProspectDisabilityKey] AS TABLE
(
    [tid_ProspectDisability] [INT] NOT NULL PRIMARY KEY
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectDisability] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectDisability]
            (
                [tid_Prospect]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectQualifications] ******/

CREATE TYPE [t_extension].[udt_ProspectQualifications] AS TABLE
(
    [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [Eligible] [BIT] NOT NULL
    , [CapacityToServe] [BIT] NULL
    , [YearsOfServiceCurrentPlacement] [DECIMAL](5, 2) NULL
    , [YearsOfServiceTotal] [DECIMAL](5, 2) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectQualificationsKey] ******/

CREATE TYPE [t_extension].[udt_ProspectQualificationsKey] AS TABLE
(
    [tid_ProspectQualifications] [INT] NOT NULL PRIMARY KEY
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectQualifications] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectQualifications]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectQualificationsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectQualifications]
            (
                [tid_Prospect]
                , [Eligible]
                , [CapacityToServe]
                , [YearsOfServiceCurrentPlacement]
                , [YearsOfServiceTotal]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[Eligible]
                , S.[CapacityToServe]
                , S.[YearsOfServiceCurrentPlacement]
                , S.[YearsOfServiceTotal]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[Eligible], T.[CapacityToServe], T.[YearsOfServiceCurrentPlacement], T.[YearsOfServiceTotal]
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectQualifications] AS T 
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectIdentificationDocument] ******/

CREATE TYPE [t_extension].[udt_ProspectIdentificationDocument] AS TABLE
(
    [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [DocumentTitle] [NVARCHAR](60) NULL
    , [DocumentExpirationDate] [DATE] NULL
    , [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectIdentificationDocumentKey] ******/

CREATE TYPE [t_extension].[udt_ProspectIdentificationDocumentKey] AS TABLE
(
    [tid_ProspectIdentificationDocument] [INT] NOT NULL PRIMARY KEY
    , [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectIdentificationDocument] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_ProspectKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[ProspectIdentificationDocument]
            (
                [tid_Prospect]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_Prospect]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[ProspectEducationOrganizationId], T.[ProspectIdentifier], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , Prospect.[LastModifiedDate] AS ParentLastModifiedDate
                , Prospect.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[ProspectIdentificationDocument] AS T 
                JOIN [Ods_Snapshot].[edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[Prospect] AS Prospect
                    ON Prospect.[ProspectEducationOrganizationId] = T.[ProspectEducationOrganizationId]
                    AND Prospect.[ProspectIdentifier] = T.[ProspectIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ProspectProfessionalDevelopmentEventAttendance] ******/

CREATE TYPE [t_extension].[udt_ProspectProfessionalDevelopmentEventAttendance] AS TABLE
(
    [AttendanceDate] [DATE] NOT NULL
    , [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AttendanceEventReason] [NVARCHAR](40) NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ProspectProfessionalDevelopmentEventAttendanceKey] ******/

CREATE TYPE [t_extension].[udt_ProspectProfessionalDevelopmentEventAttendanceKey] AS TABLE
(
    [tid_ProspectProfessionalDevelopmentEventAttendance] [INT] NOT NULL PRIMARY KEY
    , [AttendanceDate] [DATE] NOT NULL
    , [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [ProspectEducationOrganizationId] [INT] NOT NULL
    , [ProspectIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance] ******/

CREATE PROCEDURE [t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ProspectProfessionalDevelopmentEventAttendanceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ProspectProfessionalDevelopmentEventAttendance] AS T
            USING
            (
                SELECT T.[AttendanceDate]
                , T.[ProfessionalDevelopmentTitle]
                , T.[ProspectEducationOrganizationId]
                , T.[ProspectIdentifier]
                , AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[AttendanceEventReason]
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[ProspectProfessionalDevelopmentEventAttendance] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceDate]
                    , [ProfessionalDevelopmentTitle]
                    , [ProspectEducationOrganizationId]
                    , [ProspectIdentifier]
                    , [AttendanceEventCategoryDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceDate]
                    , S.[ProfessionalDevelopmentTitle]
                    , S.[ProspectEducationOrganizationId]
                    , S.[ProspectIdentifier]
                    , S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ProspectProfessionalDevelopmentEventAttendance]
                , INSERTED.[AttendanceDate]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[ProspectEducationOrganizationId]
                , INSERTED.[ProspectIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ProspectProfessionalDevelopmentEventAttendance]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ProspectProfessionalDevelopmentEventAttendance]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ProspectProfessionalDevelopmentEventAttendance] AS T
            JOIN [Ods_Snapshot].[extension].[ProspectProfessionalDevelopmentEventAttendance] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RecruitmentEvent] ******/

CREATE TYPE [t_extension].[udt_RecruitmentEvent] AS TABLE
(
    [EventDate] [DATE] NOT NULL
    , [EventTitle] [NVARCHAR](50) NOT NULL
    , [EventDescription] [NVARCHAR](255) NULL
    , [EventLocation] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RecruitmentEventKey] ******/

CREATE TYPE [t_extension].[udt_RecruitmentEventKey] AS TABLE
(
    [tid_RecruitmentEvent] [INT] NOT NULL PRIMARY KEY
    , [EventDate] [DATE] NOT NULL
    , [EventTitle] [NVARCHAR](50) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRecruitmentEvent] ******/

CREATE PROCEDURE [t_extension].[usp_dbRecruitmentEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RecruitmentEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RecruitmentEvent] AS T
            USING
            (
                SELECT T.[EventDate]
                , T.[EventTitle]
                , T.[EventDescription]
                , T.[EventLocation]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[RecruitmentEvent] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EventDate]
                    , [EventTitle]
                    , [EventDescription]
                    , [EventLocation]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EventDate]
                    , S.[EventTitle]
                    , S.[EventDescription]
                    , S.[EventLocation]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RecruitmentEvent]
                , INSERTED.[EventDate]
                , INSERTED.[EventTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RecruitmentEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RecruitmentEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RecruitmentEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RecruitmentEvent] AS T
            JOIN [Ods_Snapshot].[extension].[RecruitmentEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_Rubric] ******/

CREATE TYPE [t_extension].[udt_Rubric] AS TABLE
(
    [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricDescription] [NVARCHAR](255) NULL
    , [InterRaterReliabilityScore] [INT] NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricKey] ******/

CREATE TYPE [t_extension].[udt_RubricKey] AS TABLE
(
    [tid_Rubric] [INT] NOT NULL PRIMARY KEY
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubric] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubric]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Rubric] AS T
            USING
            (
                SELECT T.[RubricEducationOrganizationId]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[RubricDescription]
                , T.[InterRaterReliabilityScore]
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[Rubric] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [RubricEducationOrganizationId]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [RubricDescription]
                    , [InterRaterReliabilityScore]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[RubricEducationOrganizationId]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[RubricDescription]
                    , S.[InterRaterReliabilityScore]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Rubric]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricSnapshotRecord]
            (
                [SnapshotId]
                , [tid_Rubric]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Rubric]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Rubric] AS T
            JOIN [Ods_Snapshot].[extension].[Rubric] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RubricLevel] ******/

CREATE TYPE [t_extension].[udt_RubricLevel] AS TABLE
(
    [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricLevelKey] ******/

CREATE TYPE [t_extension].[udt_RubricLevelKey] AS TABLE
(
    [tid_RubricLevel] [INT] NOT NULL PRIMARY KEY
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubricLevel]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricLevel] AS T
            USING
            (
                SELECT T.[RubricEducationOrganizationId]
                , T.[RubricLevelCode]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[RubricLevel] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [RubricEducationOrganizationId]
                    , [RubricLevelCode]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[RubricEducationOrganizationId]
                    , S.[RubricLevelCode]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricLevel]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricLevelCode]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricLevelSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricLevel]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricLevel]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricLevel] AS T
            JOIN [Ods_Snapshot].[extension].[RubricLevel] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbRubricLevelInformation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevelTheme] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RubricLevelInformation] ******/

CREATE TYPE [t_extension].[udt_RubricLevelInformation] AS TABLE
(
    [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LevelTitle] [NVARCHAR](60) NOT NULL
    , [LevelDescription] [NVARCHAR](255) NULL
    , [MinimumScore] [NVARCHAR](35) NULL
    , [MaximumScore] [NVARCHAR](35) NULL
    , [LevelTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricLevelInformationKey] ******/

CREATE TYPE [t_extension].[udt_RubricLevelInformationKey] AS TABLE
(
    [tid_RubricLevelInformation] [INT] NOT NULL PRIMARY KEY
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelInformation] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelInformation]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_RubricLevelKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelInformationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[RubricLevelInformation]
            (
                [tid_RubricLevel]
                , [LevelTypeDescriptorCodeValue]
                , [LevelTitle]
                , [LevelDescription]
                , [MinimumScore]
                , [MaximumScore]
                , [LevelTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RubricLevel]
                , S.[LevelTypeDescriptorCodeValue]
                , S.[LevelTitle]
                , S.[LevelDescription]
                , S.[MinimumScore]
                , S.[MaximumScore]
                , S.[LevelTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[RubricEducationOrganizationId], T.[RubricLevelCode], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, LevelTypeDescriptor.[CodeValue] AS LevelTypeDescriptorCodeValue, T.[LevelTitle], T.[LevelDescription], T.[MinimumScore], T.[MaximumScore], LevelTypeDescriptor.[Namespace] AS LevelTypeDescriptorNamespace, RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , RubricLevel.[LastModifiedDate] AS ParentLastModifiedDate
                , RubricLevel.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[RubricLevelInformation] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LevelTypeDescriptor
                    ON LevelTypeDescriptor.[DescriptorId] = T.[LevelTypeDescriptorId]
                JOIN [Ods_Snapshot].[extension].[RubricLevel] AS RubricLevel
                    ON RubricLevel.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND RubricLevel.[RubricLevelCode] = T.[RubricLevelCode]
                    AND RubricLevel.[RubricTitle] = T.[RubricTitle]
                    AND RubricLevel.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RubricLevelTheme] ******/

CREATE TYPE [t_extension].[udt_RubricLevelTheme] AS TABLE
(
    [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ThemeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ThemeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricLevelThemeKey] ******/

CREATE TYPE [t_extension].[udt_RubricLevelThemeKey] AS TABLE
(
    [tid_RubricLevelTheme] [INT] NOT NULL PRIMARY KEY
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ThemeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ThemeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelTheme] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelTheme]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_RubricLevelKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelThemeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[RubricLevelTheme]
            (
                [tid_RubricLevel]
                , [ThemeDescriptorCodeValue]
                , [ThemeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RubricLevel]
                , S.[ThemeDescriptorCodeValue]
                , S.[ThemeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[RubricEducationOrganizationId], T.[RubricLevelCode], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, ThemeDescriptor.[CodeValue] AS ThemeDescriptorCodeValue, ThemeDescriptor.[Namespace] AS ThemeDescriptorNamespace, RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , RubricLevel.[LastModifiedDate] AS ParentLastModifiedDate
                , RubricLevel.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[RubricLevelTheme] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ThemeDescriptor
                    ON ThemeDescriptor.[DescriptorId] = T.[ThemeDescriptorId]
                JOIN [Ods_Snapshot].[extension].[RubricLevel] AS RubricLevel
                    ON RubricLevel.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND RubricLevel.[RubricLevelCode] = T.[RubricLevelCode]
                    AND RubricLevel.[RubricTitle] = T.[RubricTitle]
                    AND RubricLevel.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RubricLevelResponse] ******/

CREATE TYPE [t_extension].[udt_RubricLevelResponse] AS TABLE
(
    [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [NumericResponse] [INT] NOT NULL
    , [TextResponse] [NVARCHAR](255) NULL
    , [AreaOfRefinement] [BIT] NULL
    , [AreaOfReinforcement] [BIT] NULL
    , [HalfIndicatorsScored] [BIT] NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricLevelResponseKey] ******/

CREATE TYPE [t_extension].[udt_RubricLevelResponseKey] AS TABLE
(
    [tid_RubricLevelResponse] [INT] NOT NULL PRIMARY KEY
    , [PerformanceMeasureIdentifier] [NVARCHAR](64) NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelResponse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricLevelResponse] AS T
            USING
            (
                SELECT T.[PerformanceMeasureIdentifier]
                , T.[RubricEducationOrganizationId]
                , T.[RubricLevelCode]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[NumericResponse]
                , T.[TextResponse]
                , T.[AreaOfRefinement]
                , T.[AreaOfReinforcement]
                , T.[HalfIndicatorsScored]
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[RubricLevelResponse] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [PerformanceMeasureIdentifier]
                    , [RubricEducationOrganizationId]
                    , [RubricLevelCode]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [NumericResponse]
                    , [TextResponse]
                    , [AreaOfRefinement]
                    , [AreaOfReinforcement]
                    , [HalfIndicatorsScored]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[PerformanceMeasureIdentifier]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricLevelCode]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[NumericResponse]
                    , S.[TextResponse]
                    , S.[AreaOfRefinement]
                    , S.[AreaOfReinforcement]
                    , S.[HalfIndicatorsScored]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricLevelResponse]
                , INSERTED.[PerformanceMeasureIdentifier]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricLevelCode]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricLevelResponseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricLevelResponse]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricLevelResponse]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricLevelResponse] AS T
            JOIN [Ods_Snapshot].[extension].[RubricLevelResponse] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RubricLevelResponseFacts] ******/

CREATE TYPE [t_extension].[udt_RubricLevelResponseFacts] AS TABLE
(
    [FactsAsOfDate] [DATE] NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricLevelResponseFactsKey] ******/

CREATE TYPE [t_extension].[udt_RubricLevelResponseFactsKey] AS TABLE
(
    [tid_RubricLevelResponseFacts] [INT] NOT NULL PRIMARY KEY
    , [FactsAsOfDate] [DATE] NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelResponseFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricLevelResponseFacts] AS T
            USING
            (
                SELECT T.[FactsAsOfDate]
                , T.[RubricEducationOrganizationId]
                , T.[RubricLevelCode]
                , T.[RubricTitle]
                , RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue
                , T.[SchoolYear]
                , RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[RubricLevelResponseFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON [RubricTypeDescriptor].[DescriptorId] = T.[RubricTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactsAsOfDate]
                    , [RubricEducationOrganizationId]
                    , [RubricLevelCode]
                    , [RubricTitle]
                    , [RubricTypeDescriptorCodeValue]
                    , [SchoolYear]
                    , [RubricTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactsAsOfDate]
                    , S.[RubricEducationOrganizationId]
                    , S.[RubricLevelCode]
                    , S.[RubricTitle]
                    , S.[RubricTypeDescriptorCodeValue]
                    , S.[SchoolYear]
                    , S.[RubricTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricLevelResponseFacts]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[RubricEducationOrganizationId]
                , INSERTED.[RubricLevelCode]
                , INSERTED.[RubricTitle]
                , INSERTED.[RubricTypeDescriptorCodeValue]
                , INSERTED.[SchoolYear]
                , INSERTED.[RubricTypeDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricLevelResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricLevelResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricLevelResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricLevelResponseFacts] AS T
            JOIN [Ods_Snapshot].[extension].[RubricLevelResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RubricLevelResponseFactsAggregatedNumericResponse] ******/

CREATE TYPE [t_extension].[udt_RubricLevelResponseFactsAggregatedNumericResponse] AS TABLE
(
    [FactsAsOfDate] [DATE] NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricLevelResponseFactsAggregatedNumericResponseKey] ******/

CREATE TYPE [t_extension].[udt_RubricLevelResponseFactsAggregatedNumericResponseKey] AS TABLE
(
    [tid_RubricLevelResponseFactsAggregatedNumericResponse] [INT] NOT NULL PRIMARY KEY
    , [FactsAsOfDate] [DATE] NOT NULL
    , [RubricEducationOrganizationId] [INT] NOT NULL
    , [RubricLevelCode] [NVARCHAR](20) NOT NULL
    , [RubricTitle] [NVARCHAR](60) NOT NULL
    , [RubricTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [RubricTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubricLevelResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_RubricLevelResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricLevelResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[RubricLevelResponseFactsAggregatedNumericResponse]
            (
                [tid_RubricLevelResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_RubricLevelResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[FactsAsOfDate], T.[RubricEducationOrganizationId], T.[RubricLevelCode], T.[RubricTitle], RubricTypeDescriptor.[CodeValue] AS RubricTypeDescriptorCodeValue, T.[SchoolYear], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], RubricTypeDescriptor.[Namespace] AS RubricTypeDescriptorNamespace
                , T.[CreateDate]
                , RubricLevelResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , RubricLevelResponseFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[RubricLevelResponseFactsAggregatedNumericResponse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS RubricTypeDescriptor
                    ON RubricTypeDescriptor.[DescriptorId] = T.[RubricTypeDescriptorId]
                JOIN [Ods_Snapshot].[extension].[RubricLevelResponseFacts] AS RubricLevelResponseFacts
                    ON RubricLevelResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND RubricLevelResponseFacts.[RubricEducationOrganizationId] = T.[RubricEducationOrganizationId]
                    AND RubricLevelResponseFacts.[RubricLevelCode] = T.[RubricLevelCode]
                    AND RubricLevelResponseFacts.[RubricTitle] = T.[RubricTitle]
                    AND RubricLevelResponseFacts.[RubricTypeDescriptorId] = T.[RubricTypeDescriptorId]
                    AND RubricLevelResponseFacts.[SchoolYear] = T.[SchoolYear]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_RubricTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_RubricTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [RubricType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_RubricTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_RubricTypeDescriptorKey] AS TABLE
(
    [tid_RubricTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbRubricTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbRubricTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_RubricTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[RubricTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [RubricType].[ShortDescription] AS RubricType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[RubricTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[RubricTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[RubricType] AS RubricType
                    ON [RubricType].[RubricTypeId] = T.[RubricTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [RubricType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[RubricType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_RubricTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[RubricTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_RubricTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_RubricTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[RubricTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[RubricTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[RubricTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SalaryTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_SalaryTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [SalaryType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SalaryTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_SalaryTypeDescriptorKey] AS TABLE
(
    [tid_SalaryTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSalaryTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbSalaryTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SalaryTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SalaryTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SalaryType].[ShortDescription] AS SalaryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[SalaryTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SalaryTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SalaryType] AS SalaryType
                    ON [SalaryType].[SalaryTypeId] = T.[SalaryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SalaryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SalaryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SalaryTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SalaryTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SalaryTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SalaryTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SalaryTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[SalaryTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[SalaryTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SchoolStatusDescriptor] ******/

CREATE TYPE [t_extension].[udt_SchoolStatusDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolStatusType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SchoolStatusDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_SchoolStatusDescriptorKey] AS TABLE
(
    [tid_SchoolStatusDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSchoolStatusDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbSchoolStatusDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SchoolStatusDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SchoolStatusDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SchoolStatusType].[ShortDescription] AS SchoolStatusType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[SchoolStatusDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SchoolStatusDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SchoolStatusType] AS SchoolStatusType
                    ON [SchoolStatusType].[SchoolStatusTypeId] = T.[SchoolStatusTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SchoolStatusType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SchoolStatusType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolStatusDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SchoolStatusDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolStatusDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolStatusDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SchoolStatusDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[SchoolStatusDescriptor] AS S
                ON P.[DescriptorId] = S.[SchoolStatusDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SchoolStudentGrowthMeasure] ******/

CREATE TYPE [t_extension].[udt_SchoolStudentGrowthMeasure] AS TABLE
(
    [FactAsOfDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StudentGrowthActualScore] [INT] NOT NULL
    , [StudentGrowthMet] [BIT] NOT NULL
    , [StudentGrowthNCount] [INT] NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [PopulationCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [PopulationSubCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SupLowN] [BIT] NOT NULL
    , [SupressionFlag] [BIT] NOT NULL
    , [PopulationSubCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [PopulationCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SchoolStudentGrowthMeasureKey] ******/

CREATE TYPE [t_extension].[udt_SchoolStudentGrowthMeasureKey] AS TABLE
(
    [tid_SchoolStudentGrowthMeasure] [INT] NOT NULL PRIMARY KEY
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSchoolStudentGrowthMeasure] ******/

CREATE PROCEDURE [t_extension].[usp_dbSchoolStudentGrowthMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SchoolStudentGrowthMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SchoolStudentGrowthMeasure] AS T
            USING
            (
                SELECT T.[FactAsOfDate]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[StudentGrowthActualScore]
                , T.[StudentGrowthMet]
                , T.[StudentGrowthNCount]
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , PopulationCategoryDescriptor.[CodeValue] AS PopulationCategoryDescriptorCodeValue
                , PopulationSubCategoryDescriptor.[CodeValue] AS PopulationSubCategoryDescriptorCodeValue
                , T.[SupLowN]
                , T.[SupressionFlag]
                , PopulationSubCategoryDescriptor.[Namespace] AS PopulationSubCategoryDescriptorNamespace
                , PopulationCategoryDescriptor.[Namespace] AS PopulationCategoryDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SchoolStudentGrowthMeasure] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PopulationCategoryDescriptor
                    ON [PopulationCategoryDescriptor].[DescriptorId] = T.[PopulationCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PopulationSubCategoryDescriptor
                    ON [PopulationSubCategoryDescriptor].[DescriptorId] = T.[PopulationSubCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactAsOfDate]
                    , [SchoolId]
                    , [SchoolYear]
                    , [StudentGrowthActualScore]
                    , [StudentGrowthMet]
                    , [StudentGrowthNCount]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [PopulationCategoryDescriptorCodeValue]
                    , [PopulationSubCategoryDescriptorCodeValue]
                    , [SupLowN]
                    , [SupressionFlag]
                    , [PopulationSubCategoryDescriptorNamespace]
                    , [PopulationCategoryDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactAsOfDate]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[StudentGrowthActualScore]
                    , S.[StudentGrowthMet]
                    , S.[StudentGrowthNCount]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[PopulationCategoryDescriptorCodeValue]
                    , S.[PopulationSubCategoryDescriptorCodeValue]
                    , S.[SupLowN]
                    , S.[SupressionFlag]
                    , S.[PopulationSubCategoryDescriptorNamespace]
                    , S.[PopulationCategoryDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SchoolStudentGrowthMeasure]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SchoolStudentGrowthMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SchoolStudentGrowthMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SchoolStudentGrowthMeasure] AS T
            JOIN [Ods_Snapshot].[extension].[SchoolStudentGrowthMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFacts] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFacts] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [CourseTitle] [NVARCHAR](60) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFactsKey] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFactsKey] AS TABLE
(
    [tid_SectionCourseTranscriptFacts] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionCourseTranscriptFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[CourseTitle]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SectionCourseTranscriptFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [CourseTitle]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[CourseTitle]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionCourseTranscriptFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionCourseTranscriptFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionCourseTranscriptFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionCourseTranscriptFacts] AS T
            JOIN [Ods_Snapshot].[extension].[SectionCourseTranscriptFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFactsStudentsEnrolled] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFactsStudentsEnrolledKey] AS TABLE
(
    [tid_SectionCourseTranscriptFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionCourseTranscriptFactsStudentsEnrolled]
            (
                [tid_SectionCourseTranscriptFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionCourseTranscriptFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[FactsAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionCourseTranscriptFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionCourseTranscriptFacts] AS SectionCourseTranscriptFacts
                    ON SectionCourseTranscriptFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionCourseTranscriptFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionCourseTranscriptFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionCourseTranscriptFacts.[SchoolId] = T.[SchoolId]
                    AND SectionCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionCourseTranscriptFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionCourseTranscriptFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [FinalLetterGrade] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [LetterGradeTypeNumber] [INT] NULL
    , [LetterGradeTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey] AS TABLE
(
    [tid_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [FinalLetterGrade] [NVARCHAR](20) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned]
            (
                [tid_SectionCourseTranscriptFacts]
                , [FinalLetterGrade]
                , [LetterGradeTypeNumber]
                , [LetterGradeTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionCourseTranscriptFacts]
                , S.[FinalLetterGrade]
                , S.[LetterGradeTypeNumber]
                , S.[LetterGradeTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[FactsAsOfDate], T.[FinalLetterGrade], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[LetterGradeTypeNumber], T.[LetterGradeTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionCourseTranscriptFacts] AS SectionCourseTranscriptFacts
                    ON SectionCourseTranscriptFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionCourseTranscriptFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionCourseTranscriptFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionCourseTranscriptFacts.[SchoolId] = T.[SchoolId]
                    AND SectionCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionCourseTranscriptFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionCourseTranscriptFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFactsAggregatedNumericGradeEarned] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [AverageFinalNumericGradeEarned] [DECIMAL](9, 2) NOT NULL
    , [NumericGradeNCount] [INT] NULL
    , [NumericGradeStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionCourseTranscriptFactsAggregatedNumericGradeEarnedKey] ******/

CREATE TYPE [t_extension].[udt_SectionCourseTranscriptFactsAggregatedNumericGradeEarnedKey] AS TABLE
(
    [tid_SectionCourseTranscriptFactsAggregatedNumericGradeEarned] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionCourseTranscriptFactsAggregatedNumericGradeEarned]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionCourseTranscriptFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionCourseTranscriptFactsAggregatedNumericGradeEarnedKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned]
            (
                [tid_SectionCourseTranscriptFacts]
                , [AverageFinalNumericGradeEarned]
                , [NumericGradeNCount]
                , [NumericGradeStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionCourseTranscriptFacts]
                , S.[AverageFinalNumericGradeEarned]
                , S.[NumericGradeNCount]
                , S.[NumericGradeStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[FactsAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[AverageFinalNumericGradeEarned], T.[NumericGradeNCount], T.[NumericGradeStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionCourseTranscriptFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionCourseTranscriptFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionCourseTranscriptFactsAggregatedNumericGradeEarned] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionCourseTranscriptFacts] AS SectionCourseTranscriptFacts
                    ON SectionCourseTranscriptFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionCourseTranscriptFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionCourseTranscriptFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionCourseTranscriptFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionCourseTranscriptFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionCourseTranscriptFacts.[SchoolId] = T.[SchoolId]
                    AND SectionCourseTranscriptFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionCourseTranscriptFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionCourseTranscriptFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionCourseTranscriptFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFacts] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFacts] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [AggregatedGPAMax] [DECIMAL](18, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFactsKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFactsKey] AS TABLE
(
    [tid_SectionStudentAcademicRecordFacts] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionStudentAcademicRecordFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[AggregatedGPAMax]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [AggregatedGPAMax]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[AggregatedGPAMax]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionStudentAcademicRecordFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionStudentAcademicRecordFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionStudentAcademicRecordFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionStudentAcademicRecordFacts] AS T
            JOIN [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFactsStudentsEnrolled] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFactsStudentsEnrolledKey] AS TABLE
(
    [tid_SectionStudentAcademicRecordFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsStudentsEnrolled]
            (
                [tid_SectionStudentAcademicRecordFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAcademicRecordFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFacts] AS SectionStudentAcademicRecordFacts
                    ON SectionStudentAcademicRecordFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAcademicRecordFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAcademicRecordFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAcademicRecordFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAcademicRecordFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAcademicRecordFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [GradePointAverage] [DECIMAL](18, 4) NOT NULL
    , [GradePointNCount] [INT] NULL
    , [GradePointStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey] AS TABLE
(
    [tid_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage]
            (
                [tid_SectionStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFacts] AS SectionStudentAcademicRecordFacts
                    ON SectionStudentAcademicRecordFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAcademicRecordFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAcademicRecordFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAcademicRecordFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAcademicRecordFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAcademicRecordFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [GradePointAverage] [DECIMAL](18, 4) NOT NULL
    , [GradePointNCount] [INT] NULL
    , [GradePointStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey] AS TABLE
(
    [tid_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAcademicRecordFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage]
            (
                [tid_SectionStudentAcademicRecordFacts]
                , [GradePointAverage]
                , [GradePointNCount]
                , [GradePointStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAcademicRecordFacts]
                , S.[GradePointAverage]
                , S.[GradePointNCount]
                , S.[GradePointStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[GradePointAverage], T.[GradePointNCount], T.[GradePointStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAcademicRecordFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAcademicRecordFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentAcademicRecordFacts] AS SectionStudentAcademicRecordFacts
                    ON SectionStudentAcademicRecordFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAcademicRecordFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAcademicRecordFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAcademicRecordFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAcademicRecordFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAcademicRecordFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAcademicRecordFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAcademicRecordFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAcademicRecordFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFacts] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFacts] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [AssessmentTitle] [NVARCHAR](60) NULL
    , [AssessmentCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AdministrationDate] [DATE] NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NULL
    , [AssessmentCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFactsKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFactsKey] AS TABLE
(
    [tid_SectionStudentAssessmentFacts] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionStudentAssessmentFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[TakenSchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[AssessmentTitle]
                , AssessmentCategoryDescriptor.[CodeValue] AS AssessmentCategoryDescriptorCodeValue
                , AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue
                , GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue
                , T.[AdministrationDate]
                , GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , AssessmentCategoryDescriptor.[Namespace] AS AssessmentCategoryDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SectionStudentAssessmentFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AssessmentCategoryDescriptor
                    ON [AssessmentCategoryDescriptor].[DescriptorId] = T.[AssessmentCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON [AcademicSubjectDescriptor].[DescriptorId] = T.[AcademicSubjectDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON [GradeLevelDescriptor].[DescriptorId] = T.[GradeLevelDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TakenSchoolYear]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [AssessmentTitle]
                    , [AssessmentCategoryDescriptorCodeValue]
                    , [AcademicSubjectDescriptorCodeValue]
                    , [GradeLevelDescriptorCodeValue]
                    , [AdministrationDate]
                    , [GradeLevelDescriptorNamespace]
                    , [AcademicSubjectDescriptorNamespace]
                    , [AssessmentCategoryDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TakenSchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[AssessmentTitle]
                    , S.[AssessmentCategoryDescriptorCodeValue]
                    , S.[AcademicSubjectDescriptorCodeValue]
                    , S.[GradeLevelDescriptorCodeValue]
                    , S.[AdministrationDate]
                    , S.[GradeLevelDescriptorNamespace]
                    , S.[AcademicSubjectDescriptorNamespace]
                    , S.[AssessmentCategoryDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionStudentAssessmentFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TakenSchoolYear]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionStudentAssessmentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionStudentAssessmentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionStudentAssessmentFacts] AS T
            JOIN [Ods_Snapshot].[extension].[SectionStudentAssessmentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFactsStudentsEnrolled] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFactsStudentsEnrolledKey] AS TABLE
(
    [tid_SectionStudentAssessmentFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAssessmentFactsStudentsEnrolled]
            (
                [tid_SectionStudentAssessmentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAssessmentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[TakenSchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentAssessmentFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentAssessmentFacts] AS SectionStudentAssessmentFacts
                    ON SectionStudentAssessmentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAssessmentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAssessmentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAssessmentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAssessmentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAssessmentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
                    AND SectionStudentAssessmentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAssessmentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFactsAggregatedScoreResult] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [AssessmentReportingMethodType] [NVARCHAR](450) NOT NULL
    , [AverageScoreResultDatatypeType] [NVARCHAR](450) NOT NULL
    , [AverageScoreResult] [NVARCHAR](35) NOT NULL
    , [ScoreNCount] [INT] NULL
    , [ScoreStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFactsAggregatedScoreResultKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFactsAggregatedScoreResultKey] AS TABLE
(
    [tid_SectionStudentAssessmentFactsAggregatedScoreResult] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedScoreResult]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsAggregatedScoreResultKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAssessmentFactsAggregatedScoreResult]
            (
                [tid_SectionStudentAssessmentFacts]
                , [AssessmentReportingMethodType]
                , [AverageScoreResultDatatypeType]
                , [AverageScoreResult]
                , [ScoreNCount]
                , [ScoreStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAssessmentFacts]
                , S.[AssessmentReportingMethodType]
                , S.[AverageScoreResultDatatypeType]
                , S.[AverageScoreResult]
                , S.[ScoreNCount]
                , S.[ScoreStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[TakenSchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], AssessmentReportingMethodType.[ShortDescription] AS AssessmentReportingMethodType, AverageScoreResultDatatypeType.[ShortDescription] AS AverageScoreResultDatatypeType, T.[AverageScoreResult], T.[ScoreNCount], T.[ScoreStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentAssessmentFactsAggregatedScoreResult] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[AssessmentReportingMethodType] AS AssessmentReportingMethodType
                    ON AssessmentReportingMethodType.[AssessmentReportingMethodTypeId] = T.[AssessmentReportingMethodTypeId]
                JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS AverageScoreResultDatatypeType
                    ON AverageScoreResultDatatypeType.[ResultDatatypeTypeId] = T.[AverageScoreResultDatatypeTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentAssessmentFacts] AS SectionStudentAssessmentFacts
                    ON SectionStudentAssessmentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAssessmentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAssessmentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAssessmentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAssessmentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAssessmentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
                    AND SectionStudentAssessmentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAssessmentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFactsAggregatedPerformanceLevel] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [PerformanceLevelMetNumber] [INT] NULL
    , [PerformanceLevelMetPercentage] [DECIMAL](5, 4) NULL
    , [PerformanceLevelTypeNumber] [INT] NULL
    , [PerformanceLevelTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentAssessmentFactsAggregatedPerformanceLevelKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentAssessmentFactsAggregatedPerformanceLevelKey] AS TABLE
(
    [tid_SectionStudentAssessmentFactsAggregatedPerformanceLevel] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [PerformanceLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TakenSchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [PerformanceLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentAssessmentFactsAggregatedPerformanceLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentAssessmentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentAssessmentFactsAggregatedPerformanceLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel]
            (
                [tid_SectionStudentAssessmentFacts]
                , [PerformanceLevelDescriptorCodeValue]
                , [PerformanceLevelMetNumber]
                , [PerformanceLevelMetPercentage]
                , [PerformanceLevelTypeNumber]
                , [PerformanceLevelTypePercentage]
                , [PerformanceLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentAssessmentFacts]
                , S.[PerformanceLevelDescriptorCodeValue]
                , S.[PerformanceLevelMetNumber]
                , S.[PerformanceLevelMetPercentage]
                , S.[PerformanceLevelTypeNumber]
                , S.[PerformanceLevelTypePercentage]
                , S.[PerformanceLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], PerformanceLevelDescriptor.[CodeValue] AS PerformanceLevelDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[TakenSchoolYear], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[PerformanceLevelMetNumber], T.[PerformanceLevelMetPercentage], T.[PerformanceLevelTypeNumber], T.[PerformanceLevelTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, PerformanceLevelDescriptor.[Namespace] AS PerformanceLevelDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentAssessmentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentAssessmentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentAssessmentFactsAggregatedPerformanceLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PerformanceLevelDescriptor
                    ON PerformanceLevelDescriptor.[DescriptorId] = T.[PerformanceLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentAssessmentFacts] AS SectionStudentAssessmentFacts
                    ON SectionStudentAssessmentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentAssessmentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentAssessmentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentAssessmentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentAssessmentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentAssessmentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentAssessmentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentAssessmentFacts.[TakenSchoolYear] = T.[TakenSchoolYear]
                    AND SectionStudentAssessmentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentAssessmentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFacts] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFacts] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsKey] AS TABLE
(
    [tid_SectionStudentFacts] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionStudentFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SectionStudentFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionStudentFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionStudentFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionStudentFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionStudentFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionStudentFacts] AS T
            JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionStudentFactsStudentsEnrolled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSex] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedGender] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedByDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedSPED] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsStudentsEnrolled] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsStudentsEnrolled] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [NumberStudentsEnrolled] [INT] NULL
    , [PercentAtRisk] [DECIMAL](5, 4) NULL
    , [PercentMobility] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsStudentsEnrolledKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsStudentsEnrolledKey] AS TABLE
(
    [tid_SectionStudentFactsStudentsEnrolled] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsStudentsEnrolled] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsStudentsEnrolled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsStudentsEnrolledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsStudentsEnrolled]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [NumberStudentsEnrolled]
                , [PercentAtRisk]
                , [PercentMobility]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[NumberStudentsEnrolled]
                , S.[PercentAtRisk]
                , S.[PercentMobility]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[NumberStudentsEnrolled], T.[PercentAtRisk], T.[PercentMobility], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsStudentsEnrolled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSex] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSex] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [SexTypeNumber] [INT] NULL
    , [SexTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSexKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSexKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedSex] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSex] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSex]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSexKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSex]
            (
                [tid_SectionStudentFacts]
                , [SexType]
                , [ValueType]
                , [SexTypeNumber]
                , [SexTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[SexType]
                , S.[ValueType]
                , S.[SexTypeNumber]
                , S.[SexTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], SexType.[ShortDescription] AS SexType, TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[SexTypeNumber], T.[SexTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedSex] AS T 
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON SexType.[SexTypeId] = T.[SexTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedGender] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedGender] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [GenderType] [NVARCHAR](450) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [GenderTypeNumber] [INT] NULL
    , [GenderTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedGenderKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedGenderKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedGender] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [GenderType] [NVARCHAR](450) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedGender] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedGender]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedGenderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedGender]
            (
                [tid_SectionStudentFacts]
                , [GenderType]
                , [ValueType]
                , [GenderTypeNumber]
                , [GenderTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[GenderType]
                , S.[ValueType]
                , S.[GenderTypeNumber]
                , S.[GenderTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], GenderType.[ShortDescription] AS GenderType, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[GenderTypeNumber], T.[GenderTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedGender] AS T 
                JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON GenderType.[GenderTypeId] = T.[GenderTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedHispanicLatinoEthnicity] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [HispanicLatinoEthnicityNumber] [INT] NULL
    , [HispanicLatinoEthnicityPercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedHispanicLatinoEthnicityKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedHispanicLatinoEthnicityKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedHispanicLatinoEthnicity] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedHispanicLatinoEthnicity]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedHispanicLatinoEthnicityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity]
            (
                [tid_SectionStudentFacts]
                , [HispanicLatinoEthnicity]
                , [ValueType]
                , [HispanicLatinoEthnicityNumber]
                , [HispanicLatinoEthnicityPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[HispanicLatinoEthnicity]
                , S.[ValueType]
                , S.[HispanicLatinoEthnicityNumber]
                , S.[HispanicLatinoEthnicityPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[HispanicLatinoEthnicity], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[HispanicLatinoEthnicityNumber], T.[HispanicLatinoEthnicityPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedHispanicLatinoEthnicity] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedRace] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedRace] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [RaceTypeNumber] [INT] NULL
    , [RaceTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedRaceKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedRaceKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedRace] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedRace] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedRace]
            (
                [tid_SectionStudentFacts]
                , [RaceType]
                , [ValueType]
                , [RaceTypeNumber]
                , [RaceTypePercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[RaceType]
                , S.[ValueType]
                , S.[RaceTypeNumber]
                , S.[RaceTypePercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], RaceType.[ShortDescription] AS RaceType, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[RaceTypeNumber], T.[RaceTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSchoolFoodServicesEligibility] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TypeNumber] [INT] NULL
    , [TypePercentage] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSchoolFoodServicesEligibilityKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSchoolFoodServicesEligibilityKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedSchoolFoodServicesEligibility] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSchoolFoodServicesEligibility]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSchoolFoodServicesEligibilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility]
            (
                [tid_SectionStudentFacts]
                , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [TypePercentage]
                , [SchoolFoodServicesEligibilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[TypePercentage]
                , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue, T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[TypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedSchoolFoodServicesEligibility] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON SchoolFoodServicesEligibilityDescriptor.[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedLanguage] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedLanguage] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [LanguageTypeNumber] [INT] NULL
    , [LanguageTypePercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedLanguageKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedLanguageKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedLanguage] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedLanguage] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedLanguageKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedLanguage]
            (
                [tid_SectionStudentFacts]
                , [LanguageDescriptorCodeValue]
                , [ValueType]
                , [LanguageTypeNumber]
                , [LanguageTypePercentage]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[LanguageDescriptorCodeValue]
                , S.[ValueType]
                , S.[LanguageTypeNumber]
                , S.[LanguageTypePercentage]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[LanguageTypeNumber], T.[LanguageTypePercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedByDisability] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedByDisability] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TypeNumber] [INT] NULL
    , [Percentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedByDisabilityKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedByDisabilityKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedByDisability] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedByDisability] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedByDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedByDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedByDisability]
            (
                [tid_SectionStudentFacts]
                , [DisabilityDescriptorCodeValue]
                , [ValueType]
                , [TypeNumber]
                , [Percentage]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[DisabilityDescriptorCodeValue]
                , S.[ValueType]
                , S.[TypeNumber]
                , S.[Percentage]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[TypeNumber], T.[Percentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedByDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [StudentsDisabledNumber] [INT] NULL
    , [StudentsDisabledPercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabledKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabledKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedDisabilityTotalStudentsDisabledKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [StudentsDisabledNumber]
                , [StudentsDisabledPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[StudentsDisabledNumber]
                , S.[StudentsDisabledPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[StudentsDisabledNumber], T.[StudentsDisabledPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedELLEnrollment] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedELLEnrollment] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [ELLEnrollmentNumber] [INT] NULL
    , [ELLEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedELLEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedELLEnrollmentKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedELLEnrollment] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedELLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedELLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedELLEnrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [ELLEnrollmentNumber]
                , [ELLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[ELLEnrollmentNumber]
                , S.[ELLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[ELLEnrollmentNumber], T.[ELLEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedELLEnrollment] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedESLEnrollment] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedESLEnrollment] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [ESLEnrollmentNumber] [INT] NULL
    , [ESLEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedESLEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedESLEnrollmentKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedESLEnrollment] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedESLEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedESLEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedESLEnrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [ESLEnrollmentNumber]
                , [ESLEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[ESLEnrollmentNumber]
                , S.[ESLEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[ESLEnrollmentNumber], T.[ESLEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedESLEnrollment] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSection504Enrollment] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSection504Enrollment] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [Number504Enrolled] [INT] NULL
    , [Percentage504Enrolled] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSection504EnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSection504EnrollmentKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedSection504Enrollment] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSection504Enrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSection504EnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSection504Enrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [Number504Enrolled]
                , [Percentage504Enrolled]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[Number504Enrolled]
                , S.[Percentage504Enrolled]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[Number504Enrolled], T.[Percentage504Enrolled], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedSection504Enrollment] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSPED] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSPED] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [SPEDEnrollmentNumber] [INT] NULL
    , [SPEDEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedSPEDKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedSPEDKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedSPED] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedSPED] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedSPED]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedSPEDKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedSPED]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [SPEDEnrollmentNumber]
                , [SPEDEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[SPEDEnrollmentNumber]
                , S.[SPEDEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[SPEDEnrollmentNumber], T.[SPEDEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedSPED] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedTitleIEnrollment] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedTitleIEnrollment] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [ValueType] [NVARCHAR](450) NULL
    , [TitleIEnrollmentNumber] [INT] NULL
    , [TitleIEnrollmentPercentage] [DECIMAL](5, 4) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionStudentFactsAggregatedTitleIEnrollmentKey] ******/

CREATE TYPE [t_extension].[udt_SectionStudentFactsAggregatedTitleIEnrollmentKey] AS TABLE
(
    [tid_SectionStudentFactsAggregatedTitleIEnrollment] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionStudentFactsAggregatedTitleIEnrollment]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionStudentFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionStudentFactsAggregatedTitleIEnrollmentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionStudentFactsAggregatedTitleIEnrollment]
            (
                [tid_SectionStudentFacts]
                , [ValueType]
                , [TitleIEnrollmentNumber]
                , [TitleIEnrollmentPercentage]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionStudentFacts]
                , S.[ValueType]
                , S.[TitleIEnrollmentNumber]
                , S.[TitleIEnrollmentPercentage]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], ValueType.[ShortDescription] AS ValueType, T.[TitleIEnrollmentNumber], T.[TitleIEnrollmentPercentage], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionStudentFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionStudentFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionStudentFactsAggregatedTitleIEnrollment] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ValueType] AS ValueType
                    ON ValueType.[ValueTypeId] = T.[ValueTypeId]
                JOIN [Ods_Snapshot].[extension].[SectionStudentFacts] AS SectionStudentFacts
                    ON SectionStudentFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionStudentFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionStudentFacts.[FactAsOfDate] = T.[FactAsOfDate]
                    AND SectionStudentFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionStudentFacts.[SchoolId] = T.[SchoolId]
                    AND SectionStudentFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionStudentFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionStudentFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionStudentFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionSurveyQuestionResponseFacts] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyQuestionResponseFacts] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionSurveyQuestionResponseFactsKey] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyQuestionResponseFactsKey] AS TABLE
(
    [tid_SectionSurveyQuestionResponseFacts] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyQuestionResponseFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyQuestionResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionSurveyQuestionResponseFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[QuestionCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[SurveyIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SectionSurveyQuestionResponseFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [QuestionCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [SurveyIdentifier]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[QuestionCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[SurveyIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionSurveyQuestionResponseFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[QuestionCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionSurveyQuestionResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionSurveyQuestionResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionSurveyQuestionResponseFacts] AS T
            JOIN [Ods_Snapshot].[extension].[SectionSurveyQuestionResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedNumericResponse] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedNumericResponseKey] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedNumericResponseKey] AS TABLE
(
    [tid_SectionSurveyQuestionResponseFactsAggregatedNumericResponse] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse]
            (
                [tid_SectionSurveyQuestionResponseFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionSurveyQuestionResponseFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactsAsOfDate], T.[LocalCourseCode], T.[QuestionCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[SurveyIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionSurveyQuestionResponseFactsAggregatedNumericResponse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionSurveyQuestionResponseFacts] AS SectionSurveyQuestionResponseFacts
                    ON SectionSurveyQuestionResponseFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionSurveyQuestionResponseFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionSurveyQuestionResponseFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND SectionSurveyQuestionResponseFacts.[SchoolId] = T.[SchoolId]
                    AND SectionSurveyQuestionResponseFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionSurveyQuestionResponseFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SectionSurveyQuestionResponseFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionSurveyQuestionResponseFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS TABLE
(
    [AggregatedMatrixElement] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey] AS TABLE
(
    [tid_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] [INT] NOT NULL PRIMARY KEY
    , [AggregatedMatrixElement] [NVARCHAR](50) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionSurveyQuestionResponseFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse]
            (
                [tid_SectionSurveyQuestionResponseFacts]
                , [AggregatedMatrixElement]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionSurveyQuestionResponseFacts]
                , S.[AggregatedMatrixElement]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AggregatedMatrixElement], T.[AverageNumericResponse], T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactsAsOfDate], T.[LocalCourseCode], T.[QuestionCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[SurveyIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionSurveyQuestionResponseFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionSurveyQuestionResponseFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionSurveyQuestionResponseFactsAggregatedSurveyQuestionMatrixElementResponse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionSurveyQuestionResponseFacts] AS SectionSurveyQuestionResponseFacts
                    ON SectionSurveyQuestionResponseFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionSurveyQuestionResponseFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionSurveyQuestionResponseFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionSurveyQuestionResponseFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionSurveyQuestionResponseFacts.[QuestionCode] = T.[QuestionCode]
                    AND SectionSurveyQuestionResponseFacts.[SchoolId] = T.[SchoolId]
                    AND SectionSurveyQuestionResponseFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionSurveyQuestionResponseFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionSurveyQuestionResponseFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SectionSurveyQuestionResponseFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionSurveyQuestionResponseFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionSurveyResponseFacts] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyResponseFacts] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionSurveyResponseFactsKey] ******/

CREATE TYPE [t_extension].[udt_SectionSurveyResponseFactsKey] AS TABLE
(
    [tid_SectionSurveyResponseFacts] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveyResponseFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveyResponseFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveyResponseFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionSurveyResponseFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[SurveyIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SectionSurveyResponseFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [SurveyIdentifier]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[SurveyIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionSurveyResponseFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionSurveyResponseFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionSurveyResponseFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionSurveyResponseFacts] AS T
            JOIN [Ods_Snapshot].[extension].[SectionSurveyResponseFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionSurveySectionResponseRatingFacts] ******/

CREATE TYPE [t_extension].[udt_SectionSurveySectionResponseRatingFacts] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionSurveySectionResponseRatingFactsKey] ******/

CREATE TYPE [t_extension].[udt_SectionSurveySectionResponseRatingFactsKey] AS TABLE
(
    [tid_SectionSurveySectionResponseRatingFacts] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveySectionResponseRatingFacts] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveySectionResponseRatingFacts]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveySectionResponseRatingFactsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SectionSurveySectionResponseRatingFacts] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactsAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SectionSurveySectionResponseRatingFacts] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactsAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactsAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SectionSurveySectionResponseRatingFacts]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactsAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SectionSurveySectionResponseRatingFacts]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SectionSurveySectionResponseRatingFacts]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SectionSurveySectionResponseRatingFacts] AS T
            JOIN [Ods_Snapshot].[extension].[SectionSurveySectionResponseRatingFacts] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE TYPE [t_extension].[udt_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [AverageNumericResponse] [DECIMAL](18, 4) NOT NULL
    , [NumericResponseNCount] [INT] NULL
    , [NumericResponseStandardDeviation] [INT] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SectionSurveySectionResponseRatingFactsAggregatedNumericResponseKey] ******/

CREATE TYPE [t_extension].[udt_SectionSurveySectionResponseRatingFactsAggregatedNumericResponseKey] AS TABLE
(
    [tid_SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactsAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbSectionSurveySectionResponseRatingFactsAggregatedNumericResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SectionSurveySectionResponseRatingFactsKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SectionSurveySectionResponseRatingFactsAggregatedNumericResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse]
            (
                [tid_SectionSurveySectionResponseRatingFacts]
                , [AverageNumericResponse]
                , [NumericResponseNCount]
                , [NumericResponseStandardDeviation]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SectionSurveySectionResponseRatingFacts]
                , S.[AverageNumericResponse]
                , S.[NumericResponseNCount]
                , S.[NumericResponseStandardDeviation]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[ClassPeriodName], T.[ClassroomIdentificationCode], T.[FactsAsOfDate], T.[LocalCourseCode], T.[SchoolId], T.[SchoolYear], T.[SequenceOfCourse], T.[SurveyIdentifier], T.[SurveySectionTitle], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[UniqueSectionCode], T.[AverageNumericResponse], T.[NumericResponseNCount], T.[NumericResponseStandardDeviation], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , SectionSurveySectionResponseRatingFacts.[LastModifiedDate] AS ParentLastModifiedDate
                , SectionSurveySectionResponseRatingFacts.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SectionSurveySectionResponseRatingFactsAggregatedNumericResponse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[SectionSurveySectionResponseRatingFacts] AS SectionSurveySectionResponseRatingFacts
                    ON SectionSurveySectionResponseRatingFacts.[ClassPeriodName] = T.[ClassPeriodName]
                    AND SectionSurveySectionResponseRatingFacts.[ClassroomIdentificationCode] = T.[ClassroomIdentificationCode]
                    AND SectionSurveySectionResponseRatingFacts.[FactsAsOfDate] = T.[FactsAsOfDate]
                    AND SectionSurveySectionResponseRatingFacts.[LocalCourseCode] = T.[LocalCourseCode]
                    AND SectionSurveySectionResponseRatingFacts.[SchoolId] = T.[SchoolId]
                    AND SectionSurveySectionResponseRatingFacts.[SchoolYear] = T.[SchoolYear]
                    AND SectionSurveySectionResponseRatingFacts.[SequenceOfCourse] = T.[SequenceOfCourse]
                    AND SectionSurveySectionResponseRatingFacts.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SectionSurveySectionResponseRatingFacts.[SurveySectionTitle] = T.[SurveySectionTitle]
                    AND SectionSurveySectionResponseRatingFacts.[TermDescriptorId] = T.[TermDescriptorId]
                    AND SectionSurveySectionResponseRatingFacts.[UniqueSectionCode] = T.[UniqueSectionCode]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffFieldworkAbsenceEvent] ******/

CREATE TYPE [t_extension].[udt_StaffFieldworkAbsenceEvent] AS TABLE
(
    [AbsenceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AbsenceEventReason] [NVARCHAR](40) NULL
    , [HoursAbsent] [DECIMAL](3, 2) NULL
    , [AbsenceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffFieldworkAbsenceEventKey] ******/

CREATE TYPE [t_extension].[udt_StaffFieldworkAbsenceEventKey] AS TABLE
(
    [tid_StaffFieldworkAbsenceEvent] [INT] NOT NULL PRIMARY KEY
    , [AbsenceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AbsenceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffFieldworkAbsenceEvent] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffFieldworkAbsenceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffFieldworkAbsenceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffFieldworkAbsenceEvent] AS T
            USING
            (
                SELECT AbsenceEventCategoryDescriptor.[CodeValue] AS AbsenceEventCategoryDescriptorCodeValue
                , T.[EventDate]
                , [Staff].[StaffUniqueId]
                , T.[AbsenceEventReason]
                , T.[HoursAbsent]
                , AbsenceEventCategoryDescriptor.[Namespace] AS AbsenceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffFieldworkAbsenceEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AbsenceEventCategoryDescriptor
                    ON [AbsenceEventCategoryDescriptor].[DescriptorId] = T.[AbsenceEventCategoryDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AbsenceEventCategoryDescriptorCodeValue]
                    , [EventDate]
                    , [StaffUniqueId]
                    , [AbsenceEventReason]
                    , [HoursAbsent]
                    , [AbsenceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AbsenceEventCategoryDescriptorCodeValue]
                    , S.[EventDate]
                    , S.[StaffUniqueId]
                    , S.[AbsenceEventReason]
                    , S.[HoursAbsent]
                    , S.[AbsenceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffFieldworkAbsenceEvent]
                , INSERTED.[AbsenceEventCategoryDescriptorCodeValue]
                , INSERTED.[EventDate]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[AbsenceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffFieldworkAbsenceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffFieldworkAbsenceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffFieldworkAbsenceEvent] AS T
            JOIN [Ods_Snapshot].[extension].[StaffFieldworkAbsenceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffFieldworkExperience] ******/

CREATE TYPE [t_extension].[udt_StaffFieldworkExperience] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NULL
    , [SequenceOfCourse] [INT] NULL
    , [LocalCourseCode] [NVARCHAR](60) NULL
    , [SchoolYear] [SMALLINT] NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [SchoolId] [INT] NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NULL
    , [ClassPeriodName] [NVARCHAR](20) NULL
    , [FieldworkTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [HoursPerWeek] [DECIMAL](5, 2) NULL
    , [EndDate] [DATE] NULL
    , [ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL
    , [FieldworkTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffFieldworkExperienceKey] ******/

CREATE TYPE [t_extension].[udt_StaffFieldworkExperienceKey] AS TABLE
(
    [tid_StaffFieldworkExperience] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffFieldworkExperience] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffFieldworkExperience]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffFieldworkExperienceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffFieldworkExperience] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[FieldworkExperienceSchoolId]
                , T.[FieldworkIdentifier]
                , [Staff].[StaffUniqueId]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , FieldworkTypeDescriptor.[CodeValue] AS FieldworkTypeDescriptorCodeValue
                , T.[HoursPerWeek]
                , T.[EndDate]
                , ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue
                , ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , FieldworkTypeDescriptor.[Namespace] AS FieldworkTypeDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffFieldworkExperience] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS FieldworkTypeDescriptor
                    ON [FieldworkTypeDescriptor].[DescriptorId] = T.[FieldworkTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON [ProgramGatewayDescriptor].[DescriptorId] = T.[ProgramGatewayDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [FieldworkExperienceSchoolId]
                    , [FieldworkIdentifier]
                    , [StaffUniqueId]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [FieldworkTypeDescriptorCodeValue]
                    , [HoursPerWeek]
                    , [EndDate]
                    , [ProgramGatewayDescriptorCodeValue]
                    , [ProgramGatewayDescriptorNamespace]
                    , [FieldworkTypeDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[FieldworkExperienceSchoolId]
                    , S.[FieldworkIdentifier]
                    , S.[StaffUniqueId]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[FieldworkTypeDescriptorCodeValue]
                    , S.[HoursPerWeek]
                    , S.[EndDate]
                    , S.[ProgramGatewayDescriptorCodeValue]
                    , S.[ProgramGatewayDescriptorNamespace]
                    , S.[FieldworkTypeDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffFieldworkExperience]
                , INSERTED.[BeginDate]
                , INSERTED.[FieldworkExperienceSchoolId]
                , INSERTED.[FieldworkIdentifier]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffFieldworkExperienceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffFieldworkExperience]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffFieldworkExperience]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffFieldworkExperience] AS T
            JOIN [Ods_Snapshot].[extension].[StaffFieldworkExperience] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffFieldworkExperienceCoteaching] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffFieldworkExperienceCoteaching] ******/

CREATE TYPE [t_extension].[udt_StaffFieldworkExperienceCoteaching] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [CoteachingBeginDate] [DATE] NOT NULL
    , [CoteachingEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffFieldworkExperienceCoteachingKey] ******/

CREATE TYPE [t_extension].[udt_StaffFieldworkExperienceCoteachingKey] AS TABLE
(
    [tid_StaffFieldworkExperienceCoteaching] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffFieldworkExperienceCoteaching] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffFieldworkExperienceCoteaching]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffFieldworkExperienceKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffFieldworkExperienceCoteachingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffFieldworkExperienceCoteaching]
            (
                [tid_StaffFieldworkExperience]
                , [CoteachingBeginDate]
                , [CoteachingEndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffFieldworkExperience]
                , S.[CoteachingBeginDate]
                , S.[CoteachingEndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[FieldworkExperienceSchoolId], T.[FieldworkIdentifier], [Staff].[StaffUniqueId], T.[CoteachingBeginDate], T.[CoteachingEndDate]
                , T.[CreateDate]
                , StaffFieldworkExperience.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffFieldworkExperience.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffFieldworkExperienceCoteaching] AS T 
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[extension].[StaffFieldworkExperience] AS StaffFieldworkExperience
                    ON StaffFieldworkExperience.[BeginDate] = T.[BeginDate]
                    AND StaffFieldworkExperience.[FieldworkExperienceSchoolId] = T.[FieldworkExperienceSchoolId]
                    AND StaffFieldworkExperience.[FieldworkIdentifier] = T.[FieldworkIdentifier]
                    AND StaffFieldworkExperience.[StaffUSI] = T.[StaffUSI]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffProfessionalDevelopmentEventAttendance] ******/

CREATE TYPE [t_extension].[udt_StaffProfessionalDevelopmentEventAttendance] AS TABLE
(
    [AttendanceDate] [DATE] NOT NULL
    , [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AttendanceEventReason] [NVARCHAR](40) NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffProfessionalDevelopmentEventAttendanceKey] ******/

CREATE TYPE [t_extension].[udt_StaffProfessionalDevelopmentEventAttendanceKey] AS TABLE
(
    [tid_StaffProfessionalDevelopmentEventAttendance] [INT] NOT NULL PRIMARY KEY
    , [AttendanceDate] [DATE] NOT NULL
    , [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffProfessionalDevelopmentEventAttendanceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffProfessionalDevelopmentEventAttendance] AS T
            USING
            (
                SELECT T.[AttendanceDate]
                , T.[ProfessionalDevelopmentTitle]
                , [Staff].[StaffUniqueId]
                , AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[AttendanceEventReason]
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffProfessionalDevelopmentEventAttendance] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceDate]
                    , [ProfessionalDevelopmentTitle]
                    , [StaffUniqueId]
                    , [AttendanceEventCategoryDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceDate]
                    , S.[ProfessionalDevelopmentTitle]
                    , S.[StaffUniqueId]
                    , S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffProfessionalDevelopmentEventAttendance]
                , INSERTED.[AttendanceDate]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffProfessionalDevelopmentEventAttendance]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffProfessionalDevelopmentEventAttendance]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffProfessionalDevelopmentEventAttendance] AS T
            JOIN [Ods_Snapshot].[extension].[StaffProfessionalDevelopmentEventAttendance] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasure] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasure] AS TABLE
(
    [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [StudentGrowthMeasureDate] [DATE] NULL
    , [ResultDatatypeType] [NVARCHAR](450) NULL
    , [StudentGrowthTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [StudentGrowthTargetScore] [INT] NULL
    , [StudentGrowthActualScore] [INT] NOT NULL
    , [StudentGrowthMet] [BIT] NOT NULL
    , [StudentGrowthNCount] [INT] NULL
    , [StudentGrowthTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasureKey] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasureKey] AS TABLE
(
    [tid_StaffStudentGrowthMeasure] [INT] NOT NULL PRIMARY KEY
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasure] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasure] AS T
            USING
            (
                SELECT T.[FactAsOfDate]
                , T.[SchoolYear]
                , [Staff].[StaffUniqueId]
                , T.[StudentGrowthMeasureDate]
                , [ResultDatatypeType].[ShortDescription] AS ResultDatatypeType
                , StudentGrowthTypeDescriptor.[CodeValue] AS StudentGrowthTypeDescriptorCodeValue
                , T.[StudentGrowthTargetScore]
                , T.[StudentGrowthActualScore]
                , T.[StudentGrowthMet]
                , T.[StudentGrowthNCount]
                , StudentGrowthTypeDescriptor.[Namespace] AS StudentGrowthTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffStudentGrowthMeasure] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON [ResultDatatypeType].[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StudentGrowthTypeDescriptor
                    ON [StudentGrowthTypeDescriptor].[DescriptorId] = T.[StudentGrowthTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactAsOfDate]
                    , [SchoolYear]
                    , [StaffUniqueId]
                    , [StudentGrowthMeasureDate]
                    , [ResultDatatypeType]
                    , [StudentGrowthTypeDescriptorCodeValue]
                    , [StudentGrowthTargetScore]
                    , [StudentGrowthActualScore]
                    , [StudentGrowthMet]
                    , [StudentGrowthNCount]
                    , [StudentGrowthTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[StaffUniqueId]
                    , S.[StudentGrowthMeasureDate]
                    , S.[ResultDatatypeType]
                    , S.[StudentGrowthTypeDescriptorCodeValue]
                    , S.[StudentGrowthTargetScore]
                    , S.[StudentGrowthActualScore]
                    , S.[StudentGrowthMet]
                    , S.[StudentGrowthNCount]
                    , S.[StudentGrowthTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasure]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasure] AS T
            JOIN [Ods_Snapshot].[extension].[StaffStudentGrowthMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasureCourseAssociation] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasureCourseAssociation] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasureCourseAssociationKey] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasureCourseAssociationKey] AS TABLE
(
    [tid_StaffStudentGrowthMeasureCourseAssociation] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureCourseAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasureCourseAssociation] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , [Staff].[StaffUniqueId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffStudentGrowthMeasureCourseAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [StaffUniqueId]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[StaffUniqueId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasureCourseAssociation]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasureCourseAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasureCourseAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasureCourseAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[StaffStudentGrowthMeasureCourseAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasureEducationOrganizationAssociation] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasureEducationOrganizationAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasureEducationOrganizationAssociationKey] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasureEducationOrganizationAssociationKey] AS TABLE
(
    [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , [Staff].[StaffUniqueId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [StaffUniqueId]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[StaffUniqueId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasureSectionAssociation] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasureSectionAssociation] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffStudentGrowthMeasureSectionAssociationKey] ******/

CREATE TYPE [t_extension].[udt_StaffStudentGrowthMeasureSectionAssociationKey] AS TABLE
(
    [tid_StaffStudentGrowthMeasureSectionAssociation] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffStudentGrowthMeasureSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffStudentGrowthMeasureSectionAssociation] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , [Staff].[StaffUniqueId]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[BeginDate]
                , T.[EndDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffStudentGrowthMeasureSectionAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [StaffUniqueId]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [BeginDate]
                    , [EndDate]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[StaffUniqueId]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffStudentGrowthMeasureSectionAssociation]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffStudentGrowthMeasureSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffStudentGrowthMeasureSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffStudentGrowthMeasureSectionAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[StaffStudentGrowthMeasureSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderAssociation] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderAssociation] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [ProgramAssignmentDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramAssignmentDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey] AS TABLE
(
    [tid_StaffTeacherPreparationProviderAssociation] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffTeacherPreparationProviderAssociation] AS T
            USING
            (
                SELECT [Staff].[StaffUniqueId]
                , T.[TeacherPreparationProviderId]
                , T.[SchoolYear]
                , ProgramAssignmentDescriptor.[CodeValue] AS ProgramAssignmentDescriptorCodeValue
                , ProgramAssignmentDescriptor.[Namespace] AS ProgramAssignmentDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramAssignmentDescriptor
                    ON [ProgramAssignmentDescriptor].[DescriptorId] = T.[ProgramAssignmentDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StaffUniqueId]
                    , [TeacherPreparationProviderId]
                    , [SchoolYear]
                    , [ProgramAssignmentDescriptorCodeValue]
                    , [ProgramAssignmentDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StaffUniqueId]
                    , S.[TeacherPreparationProviderId]
                    , S.[SchoolYear]
                    , S.[ProgramAssignmentDescriptorCodeValue]
                    , S.[ProgramAssignmentDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffTeacherPreparationProviderAssociation]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TeacherPreparationProviderId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffTeacherPreparationProviderAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffTeacherPreparationProviderAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffTeacherPreparationProviderAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderAssociationGradeLevel] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderAssociationGradeLevel] AS TABLE
(
    [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderAssociationGradeLevelKey] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderAssociationGradeLevelKey] AS TABLE
(
    [tid_StaffTeacherPreparationProviderAssociationGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderAssociationGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProviderAssociationGradeLevel]
            (
                [tid_StaffTeacherPreparationProviderAssociation]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffTeacherPreparationProviderAssociation]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, [Staff].[StaffUniqueId], T.[TeacherPreparationProviderId], GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , StaffTeacherPreparationProviderAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffTeacherPreparationProviderAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderAssociationGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderAssociation] AS StaffTeacherPreparationProviderAssociation
                    ON StaffTeacherPreparationProviderAssociation.[StaffUSI] = T.[StaffUSI]
                    AND StaffTeacherPreparationProviderAssociation.[TeacherPreparationProviderId] = T.[TeacherPreparationProviderId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderAssociationAcademicSubject] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderAssociationAcademicSubject] AS TABLE
(
    [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderAssociationAcademicSubjectKey] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderAssociationAcademicSubjectKey] AS TABLE
(
    [tid_StaffTeacherPreparationProviderAssociationAcademicSubject] [INT] NOT NULL PRIMARY KEY
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderAssociationAcademicSubject]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_StaffTeacherPreparationProviderAssociationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderAssociationAcademicSubjectKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[StaffTeacherPreparationProviderAssociationAcademicSubject]
            (
                [tid_StaffTeacherPreparationProviderAssociation]
                , [AcademicSubjectDescriptorCodeValue]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_StaffTeacherPreparationProviderAssociation]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, [Staff].[StaffUniqueId], T.[TeacherPreparationProviderId], AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , StaffTeacherPreparationProviderAssociation.[LastModifiedDate] AS ParentLastModifiedDate
                , StaffTeacherPreparationProviderAssociation.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderAssociationAcademicSubject] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
                JOIN [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderAssociation] AS StaffTeacherPreparationProviderAssociation
                    ON StaffTeacherPreparationProviderAssociation.[StaffUSI] = T.[StaffUSI]
                    AND StaffTeacherPreparationProviderAssociation.[TeacherPreparationProviderId] = T.[TeacherPreparationProviderId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderProgramAssociation] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderProgramAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EndDate] [DATE] NULL
    , [StudentRecordAccess] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StaffTeacherPreparationProviderProgramAssociationKey] ******/

CREATE TYPE [t_extension].[udt_StaffTeacherPreparationProviderProgramAssociationKey] AS TABLE
(
    [tid_StaffTeacherPreparationProviderProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StaffTeacherPreparationProviderProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StaffTeacherPreparationProviderProgramAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , [Staff].[StaffUniqueId]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[StudentRecordAccess]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [StaffUniqueId]
                    , [BeginDate]
                    , [EndDate]
                    , [StudentRecordAccess]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[StaffUniqueId]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[StudentRecordAccess]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StaffTeacherPreparationProviderProgramAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StaffTeacherPreparationProviderProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StaffTeacherPreparationProviderProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StaffTeacherPreparationProviderProgramAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[StaffTeacherPreparationProviderProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_StudentGrowthTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_StudentGrowthTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [StudentGrowthType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_StudentGrowthTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_StudentGrowthTypeDescriptorKey] AS TABLE
(
    [tid_StudentGrowthTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbStudentGrowthTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbStudentGrowthTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_StudentGrowthTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[StudentGrowthTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [StudentGrowthType].[ShortDescription] AS StudentGrowthType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[StudentGrowthTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[StudentGrowthTypeDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[StudentGrowthType] AS StudentGrowthType
                    ON [StudentGrowthType].[StudentGrowthTypeId] = T.[StudentGrowthTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [StudentGrowthType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[StudentGrowthType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_StudentGrowthTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_StudentGrowthTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_StudentGrowthTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[StudentGrowthTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[StudentGrowthTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[StudentGrowthTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_Survey] ******/

CREATE TYPE [t_extension].[udt_Survey] AS TABLE
(
    [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [EducationOrganizationId] [INT] NULL
    , [SurveyTitle] [NVARCHAR](50) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [SurveyCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ProgramName] [NVARCHAR](60) NULL
    , [ProgramType] [NVARCHAR](450) NULL
    , [CourseCode] [NVARCHAR](60) NULL
    , [UniqueSectionCode] [NVARCHAR](255) NULL
    , [SequenceOfCourse] [INT] NULL
    , [LocalCourseCode] [NVARCHAR](60) NULL
    , [SchoolId] [INT] NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NULL
    , [ClassPeriodName] [NVARCHAR](20) NULL
    , [SurveyCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyKey] ******/

CREATE TYPE [t_extension].[udt_SurveyKey] AS TABLE
(
    [tid_Survey] [INT] NOT NULL PRIMARY KEY
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurvey] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurvey]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[Survey] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[EducationOrganizationId]
                , T.[SurveyTitle]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , SurveyCategoryDescriptor.[CodeValue] AS SurveyCategoryDescriptorCodeValue
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[CourseCode]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , SurveyCategoryDescriptor.[Namespace] AS SurveyCategoryDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[Survey] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SurveyCategoryDescriptor
                    ON [SurveyCategoryDescriptor].[DescriptorId] = T.[SurveyCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [EducationOrganizationId]
                    , [SurveyTitle]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SurveyCategoryDescriptorCodeValue]
                    , [ProgramName]
                    , [ProgramType]
                    , [CourseCode]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [SurveyCategoryDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[SurveyTitle]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SurveyCategoryDescriptorCodeValue]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[CourseCode]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[SurveyCategoryDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_Survey]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveySnapshotRecord]
            (
                [SnapshotId]
                , [tid_Survey]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_Survey]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[Survey] AS T
            JOIN [Ods_Snapshot].[extension].[Survey] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyCategoryDescriptor] ******/

CREATE TYPE [t_extension].[udt_SurveyCategoryDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [SurveyCategoryType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyCategoryDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_SurveyCategoryDescriptorKey] AS TABLE
(
    [tid_SurveyCategoryDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyCategoryDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyCategoryDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyCategoryDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyCategoryDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [SurveyCategoryType].[ShortDescription] AS SurveyCategoryType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[SurveyCategoryDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[SurveyCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[SurveyCategoryType] AS SurveyCategoryType
                    ON [SurveyCategoryType].[SurveyCategoryTypeId] = T.[SurveyCategoryTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [SurveyCategoryType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[SurveyCategoryType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyCategoryDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyCategoryDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyCategoryDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyCategoryDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[SurveyCategoryDescriptor] AS S
                ON P.[DescriptorId] = S.[SurveyCategoryDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyQuestion] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestion] AS TABLE
(
    [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [QuestionFormType] [NVARCHAR](450) NOT NULL
    , [QuestionText] [NVARCHAR](255) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyQuestionKey] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionKey] AS TABLE
(
    [tid_SurveyQuestion] [INT] NOT NULL PRIMARY KEY
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestion] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestion]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyQuestion] AS T
            USING
            (
                SELECT T.[QuestionCode]
                , T.[SurveyIdentifier]
                , [QuestionFormType].[ShortDescription] AS QuestionFormType
                , T.[QuestionText]
                , T.[SurveySectionTitle]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SurveyQuestion] AS T
                JOIN [Ods_Snapshot].[edfi].[QuestionFormType] AS QuestionFormType
                    ON [QuestionFormType].[QuestionFormTypeId] = T.[QuestionFormTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [QuestionCode]
                    , [SurveyIdentifier]
                    , [QuestionFormType]
                    , [QuestionText]
                    , [SurveySectionTitle]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[QuestionFormType]
                    , S.[QuestionText]
                    , S.[SurveySectionTitle]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyQuestion]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyQuestionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyQuestion]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyQuestion]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyQuestion] AS T
            JOIN [Ods_Snapshot].[extension].[SurveyQuestion] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSurveyQuestionNumericChoice] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestionTextChoice] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestionMatrix] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyQuestionNumericChoice] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionNumericChoice] AS TABLE
(
    [NumericChoice] [INT] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyQuestionNumericChoiceKey] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionNumericChoiceKey] AS TABLE
(
    [tid_SurveyQuestionNumericChoice] [INT] NOT NULL PRIMARY KEY
    , [NumericChoice] [INT] NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionNumericChoice] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionNumericChoice]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionNumericChoiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionNumericChoice]
            (
                [tid_SurveyQuestion]
                , [NumericChoice]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestion]
                , S.[NumericChoice]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[NumericChoice], T.[QuestionCode], T.[SurveyIdentifier]
                , T.[CreateDate]
                , SurveyQuestion.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestion.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SurveyQuestionNumericChoice] AS T 
                JOIN [Ods_Snapshot].[extension].[SurveyQuestion] AS SurveyQuestion
                    ON SurveyQuestion.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestion.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyQuestionTextChoice] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionTextChoice] AS TABLE
(
    [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TextChoice] [NVARCHAR](50) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyQuestionTextChoiceKey] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionTextChoiceKey] AS TABLE
(
    [tid_SurveyQuestionTextChoice] [INT] NOT NULL PRIMARY KEY
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [TextChoice] [NVARCHAR](50) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionTextChoice] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionTextChoice]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionTextChoiceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionTextChoice]
            (
                [tid_SurveyQuestion]
                , [TextChoice]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestion]
                , S.[TextChoice]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[QuestionCode], T.[SurveyIdentifier], T.[TextChoice]
                , T.[CreateDate]
                , SurveyQuestion.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestion.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SurveyQuestionTextChoice] AS T 
                JOIN [Ods_Snapshot].[extension].[SurveyQuestion] AS SurveyQuestion
                    ON SurveyQuestion.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestion.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyQuestionMatrix] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionMatrix] AS TABLE
(
    [MatrixElement] [NVARCHAR](50) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [MinRawScore] [INT] NULL
    , [MaxRawScore] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyQuestionMatrixKey] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionMatrixKey] AS TABLE
(
    [tid_SurveyQuestionMatrix] [INT] NOT NULL PRIMARY KEY
    , [MatrixElement] [NVARCHAR](50) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionMatrix] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionMatrix]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionMatrixKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionMatrix]
            (
                [tid_SurveyQuestion]
                , [MatrixElement]
                , [MinRawScore]
                , [MaxRawScore]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestion]
                , S.[MatrixElement]
                , S.[MinRawScore]
                , S.[MaxRawScore]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[MatrixElement], T.[QuestionCode], T.[SurveyIdentifier], T.[MinRawScore], T.[MaxRawScore]
                , T.[CreateDate]
                , SurveyQuestion.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestion.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SurveyQuestionMatrix] AS T 
                JOIN [Ods_Snapshot].[extension].[SurveyQuestion] AS SurveyQuestion
                    ON SurveyQuestion.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestion.[SurveyIdentifier] = T.[SurveyIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyQuestionResponse] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionResponse] AS TABLE
(
    [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
    , [NoResponse] [BIT] NULL
    , [NumericResponse] [INT] NULL
    , [TextResponse] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyQuestionResponseKey] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionResponseKey] AS TABLE
(
    [tid_SurveyQuestionResponse] [INT] NOT NULL PRIMARY KEY
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionResponse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyQuestionResponse] AS T
            USING
            (
                SELECT T.[QuestionCode]
                , T.[SurveyIdentifier]
                , T.[SurveyResponseIdentifier]
                , T.[NoResponse]
                , T.[NumericResponse]
                , T.[TextResponse]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SurveyQuestionResponse] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [QuestionCode]
                    , [SurveyIdentifier]
                    , [SurveyResponseIdentifier]
                    , [NoResponse]
                    , [NumericResponse]
                    , [TextResponse]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[QuestionCode]
                    , S.[SurveyIdentifier]
                    , S.[SurveyResponseIdentifier]
                    , S.[NoResponse]
                    , S.[NumericResponse]
                    , S.[TextResponse]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyQuestionResponse]
                , INSERTED.[QuestionCode]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveyResponseIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyQuestionResponseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyQuestionResponse]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyQuestionResponse]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyQuestionResponse] AS T
            JOIN [Ods_Snapshot].[extension].[SurveyQuestionResponse] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyQuestionResponseSurveyQuestionMatrixElementResponse] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionResponseSurveyQuestionMatrixElementResponse] AS TABLE
(
    [MatrixElement] [NVARCHAR](50) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
    , [NumericResponse] [INT] NULL
    , [TextResponse] [NVARCHAR](255) NULL
    , [NoResponse] [BIT] NULL
    , [MinNumericResponse] [INT] NULL
    , [MaxNumericResponse] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyQuestionResponseSurveyQuestionMatrixElementResponseKey] ******/

CREATE TYPE [t_extension].[udt_SurveyQuestionResponseSurveyQuestionMatrixElementResponseKey] AS TABLE
(
    [tid_SurveyQuestionResponseSurveyQuestionMatrixElementResponse] [INT] NOT NULL PRIMARY KEY
    , [MatrixElement] [NVARCHAR](50) NOT NULL
    , [QuestionCode] [NVARCHAR](20) NOT NULL
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyQuestionResponseSurveyQuestionMatrixElementResponse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_SurveyQuestionResponseKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyQuestionResponseSurveyQuestionMatrixElementResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse]
            (
                [tid_SurveyQuestionResponse]
                , [MatrixElement]
                , [NumericResponse]
                , [TextResponse]
                , [NoResponse]
                , [MinNumericResponse]
                , [MaxNumericResponse]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_SurveyQuestionResponse]
                , S.[MatrixElement]
                , S.[NumericResponse]
                , S.[TextResponse]
                , S.[NoResponse]
                , S.[MinNumericResponse]
                , S.[MaxNumericResponse]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[MatrixElement], T.[QuestionCode], T.[SurveyIdentifier], T.[SurveyResponseIdentifier], T.[NumericResponse], T.[TextResponse], T.[NoResponse], T.[MinNumericResponse], T.[MaxNumericResponse]
                , T.[CreateDate]
                , SurveyQuestionResponse.[LastModifiedDate] AS ParentLastModifiedDate
                , SurveyQuestionResponse.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] AS T 
                JOIN [Ods_Snapshot].[extension].[SurveyQuestionResponse] AS SurveyQuestionResponse
                    ON SurveyQuestionResponse.[QuestionCode] = T.[QuestionCode]
                    AND SurveyQuestionResponse.[SurveyIdentifier] = T.[SurveyIdentifier]
                    AND SurveyQuestionResponse.[SurveyResponseIdentifier] = T.[SurveyResponseIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveyResponse] ******/

CREATE TYPE [t_extension].[udt_SurveyResponse] AS TABLE
(
    [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
    , [ResponseDate] [DATE] NOT NULL
    , [ElectronicMailAddress] [NVARCHAR](128) NULL
    , [FullName] [NVARCHAR](80) NULL
    , [Location] [NVARCHAR](75) NULL
    , [StudentUniqueId] [NVARCHAR](32) NULL
    , [ParentUniqueId] [NVARCHAR](32) NULL
    , [StaffUniqueId] [NVARCHAR](32) NULL
    , [ApplicantIdentifier] [NVARCHAR](32) NULL
    , [EducationOrganizationId] [INT] NULL
    , [ProspectIdentifier] [NVARCHAR](32) NULL
    , [ProspectEducationOrganizationId] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveyResponseKey] ******/

CREATE TYPE [t_extension].[udt_SurveyResponseKey] AS TABLE
(
    [tid_SurveyResponse] [INT] NOT NULL PRIMARY KEY
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveyResponse] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveyResponse]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveyResponseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveyResponse] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveyResponseIdentifier]
                , T.[ResponseDate]
                , T.[ElectronicMailAddress]
                , T.[FullName]
                , T.[Location]
                , [Student].[StudentUniqueId]
                , [Parent].[ParentUniqueId]
                , [Staff].[StaffUniqueId]
                , T.[ApplicantIdentifier]
                , T.[EducationOrganizationId]
                , T.[ProspectIdentifier]
                , T.[ProspectEducationOrganizationId]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SurveyResponse] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Parent]
                    ON [Parent].[ParentUSI] = T.[ParentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveyResponseIdentifier]
                    , [ResponseDate]
                    , [ElectronicMailAddress]
                    , [FullName]
                    , [Location]
                    , [StudentUniqueId]
                    , [ParentUniqueId]
                    , [StaffUniqueId]
                    , [ApplicantIdentifier]
                    , [EducationOrganizationId]
                    , [ProspectIdentifier]
                    , [ProspectEducationOrganizationId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveyResponseIdentifier]
                    , S.[ResponseDate]
                    , S.[ElectronicMailAddress]
                    , S.[FullName]
                    , S.[Location]
                    , S.[StudentUniqueId]
                    , S.[ParentUniqueId]
                    , S.[StaffUniqueId]
                    , S.[ApplicantIdentifier]
                    , S.[EducationOrganizationId]
                    , S.[ProspectIdentifier]
                    , S.[ProspectEducationOrganizationId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveyResponse]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveyResponseIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveyResponseSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveyResponse]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveyResponse]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveyResponse] AS T
            JOIN [Ods_Snapshot].[extension].[SurveyResponse] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveySection] ******/

CREATE TYPE [t_extension].[udt_SurveySection] AS TABLE
(
    [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveySectionKey] ******/

CREATE TYPE [t_extension].[udt_SurveySectionKey] AS TABLE
(
    [tid_SurveySection] [INT] NOT NULL PRIMARY KEY
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveySection] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveySection]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveySectionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveySection] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveySectionTitle]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SurveySection] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveySectionTitle]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveySection]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveySectionSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveySection]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveySection]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveySection] AS T
            JOIN [Ods_Snapshot].[extension].[SurveySection] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_SurveySectionResponseRating] ******/

CREATE TYPE [t_extension].[udt_SurveySectionResponseRating] AS TABLE
(
    [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [SectionRating] [DECIMAL](9, 3) NOT NULL
    , [StudentSurveyNCount] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_SurveySectionResponseRatingKey] ******/

CREATE TYPE [t_extension].[udt_SurveySectionResponseRatingKey] AS TABLE
(
    [tid_SurveySectionResponseRating] [INT] NOT NULL PRIMARY KEY
    , [SurveyIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveyResponseIdentifier] [NVARCHAR](64) NOT NULL
    , [SurveySectionTitle] [NVARCHAR](50) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbSurveySectionResponseRating] ******/

CREATE PROCEDURE [t_extension].[usp_dbSurveySectionResponseRating]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_SurveySectionResponseRatingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[SurveySectionResponseRating] AS T
            USING
            (
                SELECT T.[SurveyIdentifier]
                , T.[SurveyResponseIdentifier]
                , T.[SurveySectionTitle]
                , T.[SectionRating]
                , T.[StudentSurveyNCount]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[SurveySectionResponseRating] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [SurveyIdentifier]
                    , [SurveyResponseIdentifier]
                    , [SurveySectionTitle]
                    , [SectionRating]
                    , [StudentSurveyNCount]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[SurveyIdentifier]
                    , S.[SurveyResponseIdentifier]
                    , S.[SurveySectionTitle]
                    , S.[SectionRating]
                    , S.[StudentSurveyNCount]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_SurveySectionResponseRating]
                , INSERTED.[SurveyIdentifier]
                , INSERTED.[SurveyResponseIdentifier]
                , INSERTED.[SurveySectionTitle]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[SurveySectionResponseRatingSnapshotRecord]
            (
                [SnapshotId]
                , [tid_SurveySectionResponseRating]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_SurveySectionResponseRating]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[SurveySectionResponseRating] AS T
            JOIN [Ods_Snapshot].[extension].[SurveySectionResponseRating] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidate] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidate] AS TABLE
(
    [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [MaidenName] [NVARCHAR](75) NULL
    , [SexType] [NVARCHAR](450) NOT NULL
    , [BirthDate] [DATE] NOT NULL
    , [BirthCity] [NVARCHAR](30) NULL
    , [BirthStateAbbreviationType] [NVARCHAR](450) NULL
    , [BirthInternationalProvince] [NVARCHAR](150) NULL
    , [BirthCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [DateEnteredUS] [DATE] NULL
    , [MultipleBirthStatus] [BIT] NULL
    , [ProfileThumbnail] [NVARCHAR](59) NULL
    , [HispanicLatinoEthnicity] [BIT] NOT NULL
    , [OldEthnicityType] [NVARCHAR](450) NULL
    , [CitizenshipStatusType] [NVARCHAR](450) NULL
    , [EconomicDisadvantaged] [BIT] NULL
    , [SchoolFoodServicesEligibilityDescriptorCodeValue] [NVARCHAR](50) NULL
    , [LimitedEnglishProficiencyDescriptorCodeValue] [NVARCHAR](50) NULL
    , [DisplacementStatus] [NVARCHAR](30) NULL
    , [LoginId] [NVARCHAR](60) NULL
    , [GenderType] [NVARCHAR](450) NULL
    , [TuitionCost] [MONEY] NULL
    , [EnglishLanguageExamDescriptorCodeValue] [NVARCHAR](50) NULL
    , [PreviousCareerDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ProgramComplete] [BIT] NULL
    , [StudentUniqueId] [NVARCHAR](32) NOT NULL
    , [StaffUniqueId] [NVARCHAR](32) NULL
    , [PreviousCareerDescriptorNamespace] [NVARCHAR](255) NULL
    , [EnglishLanguageExamDescriptorNamespace] [NVARCHAR](255) NULL
    , [LimitedEnglishProficiencyDescriptorNamespace] [NVARCHAR](255) NULL
    , [SchoolFoodServicesEligibilityDescriptorNamespace] [NVARCHAR](255) NULL
    , [BirthCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateKey] AS TABLE
(
    [tid_TeacherCandidate] [INT] NOT NULL PRIMARY KEY
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidate] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidate]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidate] AS T
            USING
            (
                SELECT T.[TeacherCandidateIdentifier]
                , T.[PersonalTitlePrefix]
                , T.[FirstName]
                , T.[MiddleName]
                , T.[LastSurname]
                , T.[GenerationCodeSuffix]
                , T.[MaidenName]
                , [SexType].[ShortDescription] AS SexType
                , T.[BirthDate]
                , T.[BirthCity]
                , [BirthStateAbbreviationType].[ShortDescription] AS BirthStateAbbreviationType
                , T.[BirthInternationalProvince]
                , BirthCountryDescriptor.[CodeValue] AS BirthCountryDescriptorCodeValue
                , T.[DateEnteredUS]
                , T.[MultipleBirthStatus]
                , T.[ProfileThumbnail]
                , T.[HispanicLatinoEthnicity]
                , [OldEthnicityType].[ShortDescription] AS OldEthnicityType
                , [CitizenshipStatusType].[ShortDescription] AS CitizenshipStatusType
                , T.[EconomicDisadvantaged]
                , SchoolFoodServicesEligibilityDescriptor.[CodeValue] AS SchoolFoodServicesEligibilityDescriptorCodeValue
                , LimitedEnglishProficiencyDescriptor.[CodeValue] AS LimitedEnglishProficiencyDescriptorCodeValue
                , T.[DisplacementStatus]
                , T.[LoginId]
                , [GenderType].[ShortDescription] AS GenderType
                , T.[TuitionCost]
                , EnglishLanguageExamDescriptor.[CodeValue] AS EnglishLanguageExamDescriptorCodeValue
                , PreviousCareerDescriptor.[CodeValue] AS PreviousCareerDescriptorCodeValue
                , T.[ProgramComplete]
                , [Student].[StudentUniqueId]
                , [Staff].[StaffUniqueId]
                , PreviousCareerDescriptor.[Namespace] AS PreviousCareerDescriptorNamespace
                , EnglishLanguageExamDescriptor.[Namespace] AS EnglishLanguageExamDescriptorNamespace
                , LimitedEnglishProficiencyDescriptor.[Namespace] AS LimitedEnglishProficiencyDescriptorNamespace
                , SchoolFoodServicesEligibilityDescriptor.[Namespace] AS SchoolFoodServicesEligibilityDescriptorNamespace
                , BirthCountryDescriptor.[Namespace] AS BirthCountryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidate] AS T
                JOIN [Ods_Snapshot].[edfi].[SexType] AS SexType
                    ON [SexType].[SexTypeId] = T.[SexTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS BirthStateAbbreviationType
                    ON [BirthStateAbbreviationType].[StateAbbreviationTypeId] = T.[BirthStateAbbreviationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BirthCountryDescriptor
                    ON [BirthCountryDescriptor].[DescriptorId] = T.[BirthCountryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[OldEthnicityType] AS OldEthnicityType
                    ON [OldEthnicityType].[OldEthnicityTypeId] = T.[OldEthnicityTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CitizenshipStatusType] AS CitizenshipStatusType
                    ON [CitizenshipStatusType].[CitizenshipStatusTypeId] = T.[CitizenshipStatusTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS SchoolFoodServicesEligibilityDescriptor
                    ON [SchoolFoodServicesEligibilityDescriptor].[DescriptorId] = T.[SchoolFoodServicesEligibilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LimitedEnglishProficiencyDescriptor
                    ON [LimitedEnglishProficiencyDescriptor].[DescriptorId] = T.[LimitedEnglishProficiencyDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[GenderType] AS GenderType
                    ON [GenderType].[GenderTypeId] = T.[GenderTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EnglishLanguageExamDescriptor
                    ON [EnglishLanguageExamDescriptor].[DescriptorId] = T.[EnglishLanguageExamDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS PreviousCareerDescriptor
                    ON [PreviousCareerDescriptor].[DescriptorId] = T.[PreviousCareerDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Student]
                    ON [Student].[StudentUSI] = T.[StudentUSI]
                LEFT JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [TeacherCandidateIdentifier]
                    , [PersonalTitlePrefix]
                    , [FirstName]
                    , [MiddleName]
                    , [LastSurname]
                    , [GenerationCodeSuffix]
                    , [MaidenName]
                    , [SexType]
                    , [BirthDate]
                    , [BirthCity]
                    , [BirthStateAbbreviationType]
                    , [BirthInternationalProvince]
                    , [BirthCountryDescriptorCodeValue]
                    , [DateEnteredUS]
                    , [MultipleBirthStatus]
                    , [ProfileThumbnail]
                    , [HispanicLatinoEthnicity]
                    , [OldEthnicityType]
                    , [CitizenshipStatusType]
                    , [EconomicDisadvantaged]
                    , [SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , [LimitedEnglishProficiencyDescriptorCodeValue]
                    , [DisplacementStatus]
                    , [LoginId]
                    , [GenderType]
                    , [TuitionCost]
                    , [EnglishLanguageExamDescriptorCodeValue]
                    , [PreviousCareerDescriptorCodeValue]
                    , [ProgramComplete]
                    , [StudentUniqueId]
                    , [StaffUniqueId]
                    , [PreviousCareerDescriptorNamespace]
                    , [EnglishLanguageExamDescriptorNamespace]
                    , [LimitedEnglishProficiencyDescriptorNamespace]
                    , [SchoolFoodServicesEligibilityDescriptorNamespace]
                    , [BirthCountryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[TeacherCandidateIdentifier]
                    , S.[PersonalTitlePrefix]
                    , S.[FirstName]
                    , S.[MiddleName]
                    , S.[LastSurname]
                    , S.[GenerationCodeSuffix]
                    , S.[MaidenName]
                    , S.[SexType]
                    , S.[BirthDate]
                    , S.[BirthCity]
                    , S.[BirthStateAbbreviationType]
                    , S.[BirthInternationalProvince]
                    , S.[BirthCountryDescriptorCodeValue]
                    , S.[DateEnteredUS]
                    , S.[MultipleBirthStatus]
                    , S.[ProfileThumbnail]
                    , S.[HispanicLatinoEthnicity]
                    , S.[OldEthnicityType]
                    , S.[CitizenshipStatusType]
                    , S.[EconomicDisadvantaged]
                    , S.[SchoolFoodServicesEligibilityDescriptorCodeValue]
                    , S.[LimitedEnglishProficiencyDescriptorCodeValue]
                    , S.[DisplacementStatus]
                    , S.[LoginId]
                    , S.[GenderType]
                    , S.[TuitionCost]
                    , S.[EnglishLanguageExamDescriptorCodeValue]
                    , S.[PreviousCareerDescriptorCodeValue]
                    , S.[ProgramComplete]
                    , S.[StudentUniqueId]
                    , S.[StaffUniqueId]
                    , S.[PreviousCareerDescriptorNamespace]
                    , S.[EnglishLanguageExamDescriptorNamespace]
                    , S.[LimitedEnglishProficiencyDescriptorNamespace]
                    , S.[SchoolFoodServicesEligibilityDescriptorNamespace]
                    , S.[BirthCountryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidate]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidate]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidate]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidate] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateIdentificationCode] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateOtherName] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateInternationalAddress] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateTelephone] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateElectronicMail] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateRace] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateVisa] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateLanguage] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateDisability] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateProgramParticipation] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateLearningStyle] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCohortYear] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateIndicator] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCredential] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAid] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateBackgroundCheck] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateIdentificationDocument] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateIdentificationCode] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateIdentificationCode] AS TABLE
(
    [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [IdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateIdentificationCodeKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateIdentificationCodeKey] AS TABLE
(
    [tid_TeacherCandidateIdentificationCode] [INT] NOT NULL PRIMARY KEY
    , [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NOT NULL
    , [StudentIdentificationSystemDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [StudentIdentificationSystemDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateIdentificationCode] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateIdentificationCode]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateIdentificationCodeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateIdentificationCode]
            (
                [tid_TeacherCandidate]
                , [AssigningOrganizationIdentificationCode]
                , [StudentIdentificationSystemDescriptorCodeValue]
                , [IdentificationCode]
                , [StudentIdentificationSystemDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AssigningOrganizationIdentificationCode]
                , S.[StudentIdentificationSystemDescriptorCodeValue]
                , S.[IdentificationCode]
                , S.[StudentIdentificationSystemDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[AssigningOrganizationIdentificationCode], StudentIdentificationSystemDescriptor.[CodeValue] AS StudentIdentificationSystemDescriptorCodeValue, T.[TeacherCandidateIdentifier], T.[IdentificationCode], StudentIdentificationSystemDescriptor.[Namespace] AS StudentIdentificationSystemDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateIdentificationCode] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StudentIdentificationSystemDescriptor
                    ON StudentIdentificationSystemDescriptor.[DescriptorId] = T.[StudentIdentificationSystemDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateOtherName] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateOtherName] AS TABLE
(
    [OtherNameType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [PersonalTitlePrefix] [NVARCHAR](30) NULL
    , [FirstName] [NVARCHAR](75) NOT NULL
    , [MiddleName] [NVARCHAR](75) NULL
    , [LastSurname] [NVARCHAR](75) NOT NULL
    , [GenerationCodeSuffix] [NVARCHAR](10) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateOtherNameKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateOtherNameKey] AS TABLE
(
    [tid_TeacherCandidateOtherName] [INT] NOT NULL PRIMARY KEY
    , [OtherNameType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateOtherName] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateOtherName]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateOtherNameKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateOtherName]
            (
                [tid_TeacherCandidate]
                , [OtherNameType]
                , [PersonalTitlePrefix]
                , [FirstName]
                , [MiddleName]
                , [LastSurname]
                , [GenerationCodeSuffix]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[OtherNameType]
                , S.[PersonalTitlePrefix]
                , S.[FirstName]
                , S.[MiddleName]
                , S.[LastSurname]
                , S.[GenerationCodeSuffix]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT OtherNameType.[ShortDescription] AS OtherNameType, T.[TeacherCandidateIdentifier], T.[PersonalTitlePrefix], T.[FirstName], T.[MiddleName], T.[LastSurname], T.[GenerationCodeSuffix]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateOtherName] AS T 
                JOIN [Ods_Snapshot].[edfi].[OtherNameType] AS OtherNameType
                    ON OtherNameType.[OtherNameTypeId] = T.[OtherNameTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateAddress] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [StreetNumberName] [NVARCHAR](150) NOT NULL
    , [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL
    , [BuildingSiteNumber] [NVARCHAR](20) NULL
    , [City] [NVARCHAR](30) NOT NULL
    , [StateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [PostalCode] [NVARCHAR](17) NOT NULL
    , [NameOfCounty] [NVARCHAR](30) NULL
    , [CountyFIPSCode] [NVARCHAR](5) NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateAddressKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAddressKey] AS TABLE
(
    [tid_TeacherCandidateAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAddress]
            (
                [tid_TeacherCandidate]
                , [AddressType]
                , [StreetNumberName]
                , [ApartmentRoomSuiteNumber]
                , [BuildingSiteNumber]
                , [City]
                , [StateAbbreviationType]
                , [PostalCode]
                , [NameOfCounty]
                , [CountyFIPSCode]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AddressType]
                , S.[StreetNumberName]
                , S.[ApartmentRoomSuiteNumber]
                , S.[BuildingSiteNumber]
                , S.[City]
                , S.[StateAbbreviationType]
                , S.[PostalCode]
                , S.[NameOfCounty]
                , S.[CountyFIPSCode]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[TeacherCandidateIdentifier], T.[StreetNumberName], T.[ApartmentRoomSuiteNumber], T.[BuildingSiteNumber], T.[City], StateAbbreviationType.[ShortDescription] AS StateAbbreviationType, T.[PostalCode], T.[NameOfCounty], T.[CountyFIPSCode], T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[StateAbbreviationType] AS StateAbbreviationType
                    ON StateAbbreviationType.[StateAbbreviationTypeId] = T.[StateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateInternationalAddress] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateInternationalAddress] AS TABLE
(
    [AddressType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [AddressLine1] [NVARCHAR](150) NOT NULL
    , [AddressLine2] [NVARCHAR](150) NULL
    , [AddressLine3] [NVARCHAR](150) NULL
    , [AddressLine4] [NVARCHAR](150) NULL
    , [CountryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Latitude] [NVARCHAR](20) NULL
    , [Longitude] [NVARCHAR](20) NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CountryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateInternationalAddressKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateInternationalAddressKey] AS TABLE
(
    [tid_TeacherCandidateInternationalAddress] [INT] NOT NULL PRIMARY KEY
    , [AddressType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateInternationalAddress] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateInternationalAddress]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateInternationalAddressKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateInternationalAddress]
            (
                [tid_TeacherCandidate]
                , [AddressType]
                , [AddressLine1]
                , [AddressLine2]
                , [AddressLine3]
                , [AddressLine4]
                , [CountryDescriptorCodeValue]
                , [Latitude]
                , [Longitude]
                , [BeginDate]
                , [EndDate]
                , [CountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AddressType]
                , S.[AddressLine1]
                , S.[AddressLine2]
                , S.[AddressLine3]
                , S.[AddressLine4]
                , S.[CountryDescriptorCodeValue]
                , S.[Latitude]
                , S.[Longitude]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[CountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AddressType.[ShortDescription] AS AddressType, T.[TeacherCandidateIdentifier], T.[AddressLine1], T.[AddressLine2], T.[AddressLine3], T.[AddressLine4], CountryDescriptor.[CodeValue] AS CountryDescriptorCodeValue, T.[Latitude], T.[Longitude], T.[BeginDate], T.[EndDate], CountryDescriptor.[Namespace] AS CountryDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateInternationalAddress] AS T 
                JOIN [Ods_Snapshot].[edfi].[AddressType] AS AddressType
                    ON AddressType.[AddressTypeId] = T.[AddressTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS CountryDescriptor
                    ON CountryDescriptor.[DescriptorId] = T.[CountryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateTelephone] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateTelephone] AS TABLE
(
    [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
    , [TelephoneNumber] [NVARCHAR](24) NOT NULL
    , [OrderOfPriority] [INT] NULL
    , [TextMessageCapabilityIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateTelephoneKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateTelephoneKey] AS TABLE
(
    [tid_TeacherCandidateTelephone] [INT] NOT NULL PRIMARY KEY
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TelephoneNumberType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateTelephone] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateTelephone]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateTelephoneKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateTelephone]
            (
                [tid_TeacherCandidate]
                , [TelephoneNumberType]
                , [TelephoneNumber]
                , [OrderOfPriority]
                , [TextMessageCapabilityIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[TelephoneNumberType]
                , S.[TelephoneNumber]
                , S.[OrderOfPriority]
                , S.[TextMessageCapabilityIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], TelephoneNumberType.[ShortDescription] AS TelephoneNumberType, T.[TelephoneNumber], T.[OrderOfPriority], T.[TextMessageCapabilityIndicator]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateTelephone] AS T 
                JOIN [Ods_Snapshot].[edfi].[TelephoneNumberType] AS TelephoneNumberType
                    ON TelephoneNumberType.[TelephoneNumberTypeId] = T.[TelephoneNumberTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateElectronicMail] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateElectronicMail] AS TABLE
(
    [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [ElectronicMailAddress] [NVARCHAR](128) NOT NULL
    , [PrimaryEmailAddressIndicator] [BIT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateElectronicMailKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateElectronicMailKey] AS TABLE
(
    [tid_TeacherCandidateElectronicMail] [INT] NOT NULL PRIMARY KEY
    , [ElectronicMailType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateElectronicMail] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateElectronicMail]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateElectronicMailKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateElectronicMail]
            (
                [tid_TeacherCandidate]
                , [ElectronicMailType]
                , [ElectronicMailAddress]
                , [PrimaryEmailAddressIndicator]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[ElectronicMailType]
                , S.[ElectronicMailAddress]
                , S.[PrimaryEmailAddressIndicator]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ElectronicMailType.[ShortDescription] AS ElectronicMailType, T.[TeacherCandidateIdentifier], T.[ElectronicMailAddress], T.[PrimaryEmailAddressIndicator]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateElectronicMail] AS T 
                JOIN [Ods_Snapshot].[edfi].[ElectronicMailType] AS ElectronicMailType
                    ON ElectronicMailType.[ElectronicMailTypeId] = T.[ElectronicMailTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateRace] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateRace] AS TABLE
(
    [RaceType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateRaceKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateRaceKey] AS TABLE
(
    [tid_TeacherCandidateRace] [INT] NOT NULL PRIMARY KEY
    , [RaceType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateRace] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateRace]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateRaceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateRace]
            (
                [tid_TeacherCandidate]
                , [RaceType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[RaceType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT RaceType.[ShortDescription] AS RaceType, T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateRace] AS T 
                JOIN [Ods_Snapshot].[edfi].[RaceType] AS RaceType
                    ON RaceType.[RaceTypeId] = T.[RaceTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateVisa] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateVisa] AS TABLE
(
    [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateVisaKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateVisaKey] AS TABLE
(
    [tid_TeacherCandidateVisa] [INT] NOT NULL PRIMARY KEY
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [VisaType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateVisa] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateVisa]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateVisaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateVisa]
            (
                [tid_TeacherCandidate]
                , [VisaType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[VisaType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], VisaType.[ShortDescription] AS VisaType
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateVisa] AS T 
                JOIN [Ods_Snapshot].[edfi].[VisaType] AS VisaType
                    ON VisaType.[VisaTypeId] = T.[VisaTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateCharacteristic] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCharacteristic] AS TABLE
(
    [StudentCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [DesignatedBy] [NVARCHAR](60) NULL
    , [StudentCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateCharacteristicKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCharacteristicKey] AS TABLE
(
    [tid_TeacherCandidateCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [StudentCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [StudentCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCharacteristic] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCharacteristic]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCharacteristic]
            (
                [tid_TeacherCandidate]
                , [StudentCharacteristicDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [StudentCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[StudentCharacteristicDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[StudentCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT StudentCharacteristicDescriptor.[CodeValue] AS StudentCharacteristicDescriptorCodeValue, T.[TeacherCandidateIdentifier], T.[BeginDate], T.[EndDate], T.[DesignatedBy], StudentCharacteristicDescriptor.[Namespace] AS StudentCharacteristicDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StudentCharacteristicDescriptor
                    ON StudentCharacteristicDescriptor.[DescriptorId] = T.[StudentCharacteristicDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateLanguage] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateLanguage] AS TABLE
(
    [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateLanguageKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateLanguageKey] AS TABLE
(
    [tid_TeacherCandidateLanguage] [INT] NOT NULL PRIMARY KEY
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateLanguage] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateLanguage]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateLanguageKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateLanguage]
            (
                [tid_TeacherCandidate]
                , [LanguageDescriptorCodeValue]
                , [LanguageDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_TeacherCandidateLanguage]
            INTO @Tids
            SELECT T.[tid_TeacherCandidate]
                , S.[LanguageDescriptorCodeValue]
                , S.[LanguageDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, T.[TeacherCandidateIdentifier], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateLanguage] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_TeacherCandidateLanguage]
                , S.[LanguageDescriptorCodeValue]
                , T.[TeacherCandidateIdentifier]
                , S.[LanguageDescriptorNamespace]
            FROM [t_extension].[TeacherCandidateLanguage] AS S
            JOIN @pTids AS T
                ON S.[tid_TeacherCandidate] = T.[tid_TeacherCandidate]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_TeacherCandidateLanguage] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateLanguageUse] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateLanguageUse] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateLanguageUse] AS TABLE
(
    [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateLanguageUseKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateLanguageUseKey] AS TABLE
(
    [tid_TeacherCandidateLanguageUse] [INT] NOT NULL PRIMARY KEY
    , [LanguageDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [LanguageUseType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LanguageDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateLanguageUse] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateLanguageUse]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateLanguageKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateLanguageUseKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateLanguageUse]
            (
                [tid_TeacherCandidateLanguage]
                , [LanguageUseType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateLanguage]
                , S.[LanguageUseType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT LanguageDescriptor.[CodeValue] AS LanguageDescriptorCodeValue, LanguageUseType.[ShortDescription] AS LanguageUseType, T.[TeacherCandidateIdentifier], LanguageDescriptor.[Namespace] AS LanguageDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateLanguageUse] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS LanguageDescriptor
                    ON LanguageDescriptor.[DescriptorId] = T.[LanguageDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[LanguageUseType] AS LanguageUseType
                    ON LanguageUseType.[LanguageUseTypeId] = T.[LanguageUseTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LanguageDescriptorCodeValue] = S.[LanguageDescriptorCodeValue]
                AND T.[TeacherCandidateIdentifier] = S.[TeacherCandidateIdentifier]
                AND T.[LanguageDescriptorNamespace] = S.[LanguageDescriptorNamespace];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateDisability] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateDisability] AS TABLE
(
    [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [DisabilityDiagnosis] [NVARCHAR](80) NULL
    , [OrderOfDisability] [INT] NULL
    , [DisabilityDeterminationSourceType] [NVARCHAR](450) NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateDisabilityKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateDisabilityKey] AS TABLE
(
    [tid_TeacherCandidateDisability] [INT] NOT NULL PRIMARY KEY
    , [DisabilityDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [DisabilityDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateDisability] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateDisability]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateDisabilityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateDisability]
            (
                [tid_TeacherCandidate]
                , [DisabilityDescriptorCodeValue]
                , [DisabilityDiagnosis]
                , [OrderOfDisability]
                , [DisabilityDeterminationSourceType]
                , [DisabilityDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[DisabilityDescriptorCodeValue]
                , S.[DisabilityDiagnosis]
                , S.[OrderOfDisability]
                , S.[DisabilityDeterminationSourceType]
                , S.[DisabilityDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT DisabilityDescriptor.[CodeValue] AS DisabilityDescriptorCodeValue, T.[TeacherCandidateIdentifier], T.[DisabilityDiagnosis], T.[OrderOfDisability], DisabilityDeterminationSourceType.[ShortDescription] AS DisabilityDeterminationSourceType, DisabilityDescriptor.[Namespace] AS DisabilityDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateDisability] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS DisabilityDescriptor
                    ON DisabilityDescriptor.[DescriptorId] = T.[DisabilityDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DisabilityDeterminationSourceType] AS DisabilityDeterminationSourceType
                    ON DisabilityDeterminationSourceType.[DisabilityDeterminationSourceTypeId] = T.[DisabilityDeterminationSourceTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateProgramParticipation] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateProgramParticipation] AS TABLE
(
    [ProgramType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [DesignatedBy] [NVARCHAR](60) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateProgramParticipationKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateProgramParticipationKey] AS TABLE
(
    [tid_TeacherCandidateProgramParticipation] [INT] NOT NULL PRIMARY KEY
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateProgramParticipation] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateProgramParticipation]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateProgramParticipationKey];
    DECLARE @Tids AS [tods].[udt_IntList];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateProgramParticipation]
            (
                [tid_TeacherCandidate]
                , [ProgramType]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            OUTPUT INSERTED.[tid_TeacherCandidateProgramParticipation]
            INTO @Tids
            SELECT T.[tid_TeacherCandidate]
                , S.[ProgramType]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramType.[ShortDescription] AS ProgramType, T.[TeacherCandidateIdentifier], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateProgramParticipation] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];

            INSERT INTO @TidsChild
            SELECT S.[tid_TeacherCandidateProgramParticipation]
                , S.[ProgramType]
                , T.[TeacherCandidateIdentifier]
            FROM [t_extension].[TeacherCandidateProgramParticipation] AS S
            JOIN @pTids AS T
                ON S.[tid_TeacherCandidate] = T.[tid_TeacherCandidate]
            JOIN (SELECT List FROM @Tids) AS I
                ON S.[tid_TeacherCandidateProgramParticipation] = I.List;

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateProgramParticipationProgramCharacteristic] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateProgramParticipationProgramCharacteristic] AS TABLE
(
    [ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateProgramParticipationProgramCharacteristicKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateProgramParticipationProgramCharacteristicKey] AS TABLE
(
    [tid_TeacherCandidateProgramParticipationProgramCharacteristic] [INT] NOT NULL PRIMARY KEY
    , [ProgramCharacteristicDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [ProgramCharacteristicDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateProgramParticipationProgramCharacteristic]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateProgramParticipationKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateProgramParticipationProgramCharacteristicKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateProgramParticipationProgramCharacteristic]
            (
                [tid_TeacherCandidateProgramParticipation]
                , [ProgramCharacteristicDescriptorCodeValue]
                , [ProgramCharacteristicDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateProgramParticipation]
                , S.[ProgramCharacteristicDescriptorCodeValue]
                , S.[ProgramCharacteristicDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT ProgramCharacteristicDescriptor.[CodeValue] AS ProgramCharacteristicDescriptorCodeValue, ProgramType.[ShortDescription] AS ProgramType, T.[TeacherCandidateIdentifier], ProgramCharacteristicDescriptor.[Namespace] AS ProgramCharacteristicDescriptorNamespace
                , T.[CreateDate]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateProgramParticipationProgramCharacteristic] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramCharacteristicDescriptor
                    ON ProgramCharacteristicDescriptor.[DescriptorId] = T.[ProgramCharacteristicDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[ProgramType] = S.[ProgramType]
                AND T.[TeacherCandidateIdentifier] = S.[TeacherCandidateIdentifier];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateLearningStyle] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateLearningStyle] AS TABLE
(
    [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [VisualLearning] [DECIMAL](5, 4) NOT NULL
    , [AuditoryLearning] [DECIMAL](5, 4) NOT NULL
    , [TactileLearning] [DECIMAL](5, 4) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateLearningStyleKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateLearningStyleKey] AS TABLE
(
    [tid_TeacherCandidateLearningStyle] [INT] NOT NULL PRIMARY KEY
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateLearningStyle] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateLearningStyle]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateLearningStyleKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateLearningStyle]
            (
                [tid_TeacherCandidate]
                , [VisualLearning]
                , [AuditoryLearning]
                , [TactileLearning]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[VisualLearning]
                , S.[AuditoryLearning]
                , S.[TactileLearning]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], T.[VisualLearning], T.[AuditoryLearning], T.[TactileLearning]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateLearningStyle] AS T 
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateCohortYear] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCohortYear] AS TABLE
(
    [CohortYearType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateCohortYearKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCohortYearKey] AS TABLE
(
    [tid_TeacherCandidateCohortYear] [INT] NOT NULL PRIMARY KEY
    , [CohortYearType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCohortYear] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCohortYear]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCohortYearKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCohortYear]
            (
                [tid_TeacherCandidate]
                , [CohortYearType]
                , [SchoolYear]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[CohortYearType]
                , S.[SchoolYear]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT CohortYearType.[ShortDescription] AS CohortYearType, T.[SchoolYear], T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateCohortYear] AS T 
                JOIN [Ods_Snapshot].[edfi].[CohortYearType] AS CohortYearType
                    ON CohortYearType.[CohortYearTypeId] = T.[CohortYearTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateIndicator] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateIndicator] AS TABLE
(
    [IndicatorName] [NVARCHAR](60) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [IndicatorGroup] [NVARCHAR](60) NULL
    , [Indicator] [NVARCHAR](35) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [DesignatedBy] [NVARCHAR](60) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateIndicatorKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateIndicatorKey] AS TABLE
(
    [tid_TeacherCandidateIndicator] [INT] NOT NULL PRIMARY KEY
    , [IndicatorName] [NVARCHAR](60) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateIndicator] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateIndicator]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateIndicatorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateIndicator]
            (
                [tid_TeacherCandidate]
                , [IndicatorName]
                , [IndicatorGroup]
                , [Indicator]
                , [BeginDate]
                , [EndDate]
                , [DesignatedBy]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[IndicatorName]
                , S.[IndicatorGroup]
                , S.[Indicator]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[DesignatedBy]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[IndicatorName], T.[TeacherCandidateIdentifier], T.[IndicatorGroup], T.[Indicator], T.[BeginDate], T.[EndDate], T.[DesignatedBy]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateIndicator] AS T 
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateCredential] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCredential] AS TABLE
(
    [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateCredentialKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCredentialKey] AS TABLE
(
    [tid_TeacherCandidateCredential] [INT] NOT NULL PRIMARY KEY
    , [CredentialIdentifier] [NVARCHAR](60) NOT NULL
    , [StateOfIssueStateAbbreviationType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCredential] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCredential]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCredentialKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCredential]
            (
                [tid_TeacherCandidate]
                , [CredentialIdentifier]
                , [StateOfIssueStateAbbreviationType]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[CredentialIdentifier]
                , S.[StateOfIssueStateAbbreviationType]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[CredentialIdentifier], StateOfIssueStateAbbreviationType.[ShortDescription] AS StateOfIssueStateAbbreviationType, T.[TeacherCandidateIdentifier]
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateCredential] AS T 
                JOIN [Ods_Snapshot].[edfi].[StateOfIssueStateAbbreviationType] AS StateOfIssueStateAbbreviationType
                    ON StateOfIssueStateAbbreviationType.[StateOfIssueStateAbbreviationTypeId] = T.[StateOfIssueStateAbbreviationTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateAid] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAid] AS TABLE
(
    [AidTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [EndDate] [DATE] NULL
    , [AidConditionDescription] [NVARCHAR](1024) NULL
    , [AidAmount] [MONEY] NULL
    , [PellGrantRecipient] [BIT] NULL
    , [AidTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateAidKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAidKey] AS TABLE
(
    [tid_TeacherCandidateAid] [INT] NOT NULL PRIMARY KEY
    , [AidTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [AidTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAid] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAid]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAidKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAid]
            (
                [tid_TeacherCandidate]
                , [AidTypeDescriptorCodeValue]
                , [BeginDate]
                , [EndDate]
                , [AidConditionDescription]
                , [AidAmount]
                , [PellGrantRecipient]
                , [AidTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[AidTypeDescriptorCodeValue]
                , S.[BeginDate]
                , S.[EndDate]
                , S.[AidConditionDescription]
                , S.[AidAmount]
                , S.[PellGrantRecipient]
                , S.[AidTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AidTypeDescriptor.[CodeValue] AS AidTypeDescriptorCodeValue, T.[BeginDate], T.[TeacherCandidateIdentifier], T.[EndDate], T.[AidConditionDescription], T.[AidAmount], T.[PellGrantRecipient], AidTypeDescriptor.[Namespace] AS AidTypeDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateAid] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AidTypeDescriptor
                    ON AidTypeDescriptor.[DescriptorId] = T.[AidTypeDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateBackgroundCheck] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateBackgroundCheck] AS TABLE
(
    [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [BackgroundCheckTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [BackgroundCheckRequestedDate] [DATE] NOT NULL
    , [BackgroundCheckStatusDescriptorCodeValue] [NVARCHAR](50) NULL
    , [BackgroundCheckCompletedDate] [DATE] NULL
    , [Fingerprint] [BIT] NULL
    , [BackgroundCheckStatusDescriptorNamespace] [NVARCHAR](255) NULL
    , [BackgroundCheckTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateBackgroundCheckKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateBackgroundCheckKey] AS TABLE
(
    [tid_TeacherCandidateBackgroundCheck] [INT] NOT NULL PRIMARY KEY
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateBackgroundCheck] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateBackgroundCheck]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateBackgroundCheckKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateBackgroundCheck]
            (
                [tid_TeacherCandidate]
                , [BackgroundCheckTypeDescriptorCodeValue]
                , [BackgroundCheckRequestedDate]
                , [BackgroundCheckStatusDescriptorCodeValue]
                , [BackgroundCheckCompletedDate]
                , [Fingerprint]
                , [BackgroundCheckStatusDescriptorNamespace]
                , [BackgroundCheckTypeDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[BackgroundCheckTypeDescriptorCodeValue]
                , S.[BackgroundCheckRequestedDate]
                , S.[BackgroundCheckStatusDescriptorCodeValue]
                , S.[BackgroundCheckCompletedDate]
                , S.[Fingerprint]
                , S.[BackgroundCheckStatusDescriptorNamespace]
                , S.[BackgroundCheckTypeDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[TeacherCandidateIdentifier], BackgroundCheckTypeDescriptor.[CodeValue] AS BackgroundCheckTypeDescriptorCodeValue, T.[BackgroundCheckRequestedDate], BackgroundCheckStatusDescriptor.[CodeValue] AS BackgroundCheckStatusDescriptorCodeValue, T.[BackgroundCheckCompletedDate], T.[Fingerprint], BackgroundCheckStatusDescriptor.[Namespace] AS BackgroundCheckStatusDescriptorNamespace, BackgroundCheckTypeDescriptor.[Namespace] AS BackgroundCheckTypeDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateBackgroundCheck] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BackgroundCheckTypeDescriptor
                    ON BackgroundCheckTypeDescriptor.[DescriptorId] = T.[BackgroundCheckTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS BackgroundCheckStatusDescriptor
                    ON BackgroundCheckStatusDescriptor.[DescriptorId] = T.[BackgroundCheckStatusDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateIdentificationDocument] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateIdentificationDocument] AS TABLE
(
    [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [DocumentTitle] [NVARCHAR](60) NULL
    , [DocumentExpirationDate] [DATE] NULL
    , [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerCountryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [IssuerCountryDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateIdentificationDocumentKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateIdentificationDocumentKey] AS TABLE
(
    [tid_TeacherCandidateIdentificationDocument] [INT] NOT NULL PRIMARY KEY
    , [IdentificationDocumentUseType] [NVARCHAR](450) NOT NULL
    , [PersonalInformationVerificationType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateIdentificationDocument] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateIdentificationDocument]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateIdentificationDocumentKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateIdentificationDocument]
            (
                [tid_TeacherCandidate]
                , [IdentificationDocumentUseType]
                , [PersonalInformationVerificationType]
                , [DocumentTitle]
                , [DocumentExpirationDate]
                , [IssuerDocumentIdentificationCode]
                , [IssuerName]
                , [IssuerCountryDescriptorCodeValue]
                , [IssuerCountryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidate]
                , S.[IdentificationDocumentUseType]
                , S.[PersonalInformationVerificationType]
                , S.[DocumentTitle]
                , S.[DocumentExpirationDate]
                , S.[IssuerDocumentIdentificationCode]
                , S.[IssuerName]
                , S.[IssuerCountryDescriptorCodeValue]
                , S.[IssuerCountryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT IdentificationDocumentUseType.[ShortDescription] AS IdentificationDocumentUseType, PersonalInformationVerificationType.[ShortDescription] AS PersonalInformationVerificationType, T.[TeacherCandidateIdentifier], T.[DocumentTitle], T.[DocumentExpirationDate], T.[IssuerDocumentIdentificationCode], T.[IssuerName], IssuerCountryDescriptor.[CodeValue] AS IssuerCountryDescriptorCodeValue, IssuerCountryDescriptor.[Namespace] AS IssuerCountryDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidate.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidate.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateIdentificationDocument] AS T 
                JOIN [Ods_Snapshot].[edfi].[IdentificationDocumentUseType] AS IdentificationDocumentUseType
                    ON IdentificationDocumentUseType.[IdentificationDocumentUseTypeId] = T.[IdentificationDocumentUseTypeId]
                JOIN [Ods_Snapshot].[edfi].[PersonalInformationVerificationType] AS PersonalInformationVerificationType
                    ON PersonalInformationVerificationType.[PersonalInformationVerificationTypeId] = T.[PersonalInformationVerificationTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS IssuerCountryDescriptor
                    ON IssuerCountryDescriptor.[DescriptorId] = T.[IssuerCountryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidate] AS TeacherCandidate
                    ON TeacherCandidate.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecord] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecord] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [CumulativeEarnedCredits] [DECIMAL](9, 2) NULL
    , [CumulativeEarnedCreditType] [NVARCHAR](450) NULL
    , [CumulativeEarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [CumulativeAttemptedCredits] [DECIMAL](9, 2) NULL
    , [CumulativeAttemptedCreditType] [NVARCHAR](450) NULL
    , [CumulativeAttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [CumulativeGradePointsEarned] [DECIMAL](18, 4) NULL
    , [CumulativeGradePointAverage] [DECIMAL](18, 4) NULL
    , [GradeValueQualifier] [NVARCHAR](80) NULL
    , [ProjectedGraduationDate] [DATE] NULL
    , [SessionEarnedCredits] [DECIMAL](9, 2) NULL
    , [SessionEarnedCreditType] [NVARCHAR](450) NULL
    , [SessionEarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [SessionAttemptedCredits] [DECIMAL](9, 2) NULL
    , [SessionAttemptedCreditType] [NVARCHAR](450) NULL
    , [SessionAttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [SessionGradePointsEarned] [DECIMAL](18, 4) NULL
    , [SessionGradePointAverage] [DECIMAL](18, 4) NULL
    , [ContentGradePointAverage] [DECIMAL](18, 4) NULL
    , [ContentGradePointEarned] [DECIMAL](18, 4) NULL
    , [ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TPPDegreeTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TPPDegreeTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordKey] AS TABLE
(
    [tid_TeacherCandidateAcademicRecord] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecord] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecord]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateAcademicRecord] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[CumulativeEarnedCredits]
                , [CumulativeEarnedCreditType].[ShortDescription] AS CumulativeEarnedCreditType
                , T.[CumulativeEarnedCreditConversion]
                , T.[CumulativeAttemptedCredits]
                , [CumulativeAttemptedCreditType].[ShortDescription] AS CumulativeAttemptedCreditType
                , T.[CumulativeAttemptedCreditConversion]
                , T.[CumulativeGradePointsEarned]
                , T.[CumulativeGradePointAverage]
                , T.[GradeValueQualifier]
                , T.[ProjectedGraduationDate]
                , T.[SessionEarnedCredits]
                , [SessionEarnedCreditType].[ShortDescription] AS SessionEarnedCreditType
                , T.[SessionEarnedCreditConversion]
                , T.[SessionAttemptedCredits]
                , [SessionAttemptedCreditType].[ShortDescription] AS SessionAttemptedCreditType
                , T.[SessionAttemptedCreditConversion]
                , T.[SessionGradePointsEarned]
                , T.[SessionGradePointAverage]
                , T.[ContentGradePointAverage]
                , T.[ContentGradePointEarned]
                , ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue
                , TPPDegreeTypeDescriptor.[CodeValue] AS TPPDegreeTypeDescriptorCodeValue
                , TPPDegreeTypeDescriptor.[Namespace] AS TPPDegreeTypeDescriptorNamespace
                , ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecord] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CumulativeEarnedCreditType
                    ON [CumulativeEarnedCreditType].[CreditTypeId] = T.[CumulativeEarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS CumulativeAttemptedCreditType
                    ON [CumulativeAttemptedCreditType].[CreditTypeId] = T.[CumulativeAttemptedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS SessionEarnedCreditType
                    ON [SessionEarnedCreditType].[CreditTypeId] = T.[SessionEarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS SessionAttemptedCreditType
                    ON [SessionAttemptedCreditType].[CreditTypeId] = T.[SessionAttemptedCreditTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON [ProgramGatewayDescriptor].[DescriptorId] = T.[ProgramGatewayDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TPPDegreeTypeDescriptor
                    ON [TPPDegreeTypeDescriptor].[DescriptorId] = T.[TPPDegreeTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [TermDescriptorCodeValue]
                    , [CumulativeEarnedCredits]
                    , [CumulativeEarnedCreditType]
                    , [CumulativeEarnedCreditConversion]
                    , [CumulativeAttemptedCredits]
                    , [CumulativeAttemptedCreditType]
                    , [CumulativeAttemptedCreditConversion]
                    , [CumulativeGradePointsEarned]
                    , [CumulativeGradePointAverage]
                    , [GradeValueQualifier]
                    , [ProjectedGraduationDate]
                    , [SessionEarnedCredits]
                    , [SessionEarnedCreditType]
                    , [SessionEarnedCreditConversion]
                    , [SessionAttemptedCredits]
                    , [SessionAttemptedCreditType]
                    , [SessionAttemptedCreditConversion]
                    , [SessionGradePointsEarned]
                    , [SessionGradePointAverage]
                    , [ContentGradePointAverage]
                    , [ContentGradePointEarned]
                    , [ProgramGatewayDescriptorCodeValue]
                    , [TPPDegreeTypeDescriptorCodeValue]
                    , [TPPDegreeTypeDescriptorNamespace]
                    , [ProgramGatewayDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[CumulativeEarnedCredits]
                    , S.[CumulativeEarnedCreditType]
                    , S.[CumulativeEarnedCreditConversion]
                    , S.[CumulativeAttemptedCredits]
                    , S.[CumulativeAttemptedCreditType]
                    , S.[CumulativeAttemptedCreditConversion]
                    , S.[CumulativeGradePointsEarned]
                    , S.[CumulativeGradePointAverage]
                    , S.[GradeValueQualifier]
                    , S.[ProjectedGraduationDate]
                    , S.[SessionEarnedCredits]
                    , S.[SessionEarnedCreditType]
                    , S.[SessionEarnedCreditConversion]
                    , S.[SessionAttemptedCredits]
                    , S.[SessionAttemptedCreditType]
                    , S.[SessionAttemptedCreditConversion]
                    , S.[SessionGradePointsEarned]
                    , S.[SessionGradePointAverage]
                    , S.[ContentGradePointAverage]
                    , S.[ContentGradePointEarned]
                    , S.[ProgramGatewayDescriptorCodeValue]
                    , S.[TPPDegreeTypeDescriptorCodeValue]
                    , S.[TPPDegreeTypeDescriptorNamespace]
                    , S.[ProgramGatewayDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateAcademicRecord]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateAcademicRecord]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateAcademicRecord]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateAcademicRecord] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecord] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordClassRanking] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordClassRanking] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ClassRank] [INT] NOT NULL
    , [TotalNumberInClass] [INT] NOT NULL
    , [PercentageRanking] [INT] NULL
    , [ClassRankingDate] [DATE] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordClassRankingKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordClassRankingKey] AS TABLE
(
    [tid_TeacherCandidateAcademicRecordClassRanking] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordClassRanking]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordClassRankingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordClassRanking]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [ClassRank]
                , [TotalNumberInClass]
                , [PercentageRanking]
                , [ClassRankingDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[ClassRank]
                , S.[TotalNumberInClass]
                , S.[PercentageRanking]
                , S.[ClassRankingDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[ClassRank], T.[TotalNumberInClass], T.[PercentageRanking], T.[ClassRankingDate], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecordClassRanking] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordAcademicHonor] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordAcademicHonor] AS TABLE
(
    [AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [HonorDescription] [NVARCHAR](80) NULL
    , [HonorAwardDate] [DATE] NULL
    , [HonorAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordAcademicHonorKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordAcademicHonorKey] AS TABLE
(
    [tid_TeacherCandidateAcademicRecordAcademicHonor] [INT] NOT NULL PRIMARY KEY
    , [AcademicHonorCategoryType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordAcademicHonor]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordAcademicHonorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordAcademicHonor]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [AcademicHonorCategoryType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [HonorDescription]
                , [HonorAwardDate]
                , [HonorAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[AcademicHonorCategoryType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[HonorDescription]
                , S.[HonorAwardDate]
                , S.[HonorAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AcademicHonorCategoryType.[ShortDescription] AS AcademicHonorCategoryType, T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[HonorDescription], T.[HonorAwardDate], T.[HonorAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecordAcademicHonor] AS T 
                JOIN [Ods_Snapshot].[edfi].[AcademicHonorCategoryType] AS AcademicHonorCategoryType
                    ON AcademicHonorCategoryType.[AcademicHonorCategoryTypeId] = T.[AcademicHonorCategoryTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordRecognition] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordRecognition] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [RecognitionType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [RecognitionDescription] [NVARCHAR](80) NULL
    , [RecognitionAwardDate] [DATE] NULL
    , [RecognitionAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordRecognitionKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordRecognitionKey] AS TABLE
(
    [tid_TeacherCandidateAcademicRecordRecognition] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [RecognitionType] [NVARCHAR](450) NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordRecognition]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordRecognitionKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordRecognition]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [RecognitionType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [RecognitionDescription]
                , [RecognitionAwardDate]
                , [RecognitionAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[RecognitionType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[RecognitionDescription]
                , S.[RecognitionAwardDate]
                , S.[RecognitionAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], RecognitionType.[ShortDescription] AS RecognitionType, T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], T.[RecognitionDescription], T.[RecognitionAwardDate], T.[RecognitionAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecordRecognition] AS T 
                JOIN [Ods_Snapshot].[edfi].[RecognitionType] AS RecognitionType
                    ON RecognitionType.[RecognitionTypeId] = T.[RecognitionTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordDiploma] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordDiploma] AS TABLE
(
    [DiplomaAwardDate] [DATE] NOT NULL
    , [DiplomaType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AchievementTitle] [NVARCHAR](60) NULL
    , [AchievementCategoryDescriptorCodeValue] [NVARCHAR](50) NULL
    , [AchievementCategorySystem] [NVARCHAR](60) NULL
    , [IssuerName] [NVARCHAR](150) NULL
    , [IssuerOriginURL] [NVARCHAR](255) NULL
    , [Criteria] [NVARCHAR](150) NULL
    , [CriteriaURL] [NVARCHAR](255) NULL
    , [EvidenceStatement] [NVARCHAR](150) NULL
    , [ImageURL] [NVARCHAR](255) NULL
    , [DiplomaLevelType] [NVARCHAR](450) NULL
    , [CTECompleter] [BIT] NULL
    , [DiplomaDescription] [NVARCHAR](80) NULL
    , [DiplomaAwardExpiresDate] [DATE] NULL
    , [AchievementCategoryDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateAcademicRecordDiplomaKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateAcademicRecordDiplomaKey] AS TABLE
(
    [tid_TeacherCandidateAcademicRecordDiploma] [INT] NOT NULL PRIMARY KEY
    , [DiplomaAwardDate] [DATE] NOT NULL
    , [DiplomaType] [NVARCHAR](450) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateAcademicRecordDiploma]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateAcademicRecordKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateAcademicRecordDiplomaKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateAcademicRecordDiploma]
            (
                [tid_TeacherCandidateAcademicRecord]
                , [DiplomaAwardDate]
                , [DiplomaType]
                , [AchievementTitle]
                , [AchievementCategoryDescriptorCodeValue]
                , [AchievementCategorySystem]
                , [IssuerName]
                , [IssuerOriginURL]
                , [Criteria]
                , [CriteriaURL]
                , [EvidenceStatement]
                , [ImageURL]
                , [DiplomaLevelType]
                , [CTECompleter]
                , [DiplomaDescription]
                , [DiplomaAwardExpiresDate]
                , [AchievementCategoryDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateAcademicRecord]
                , S.[DiplomaAwardDate]
                , S.[DiplomaType]
                , S.[AchievementTitle]
                , S.[AchievementCategoryDescriptorCodeValue]
                , S.[AchievementCategorySystem]
                , S.[IssuerName]
                , S.[IssuerOriginURL]
                , S.[Criteria]
                , S.[CriteriaURL]
                , S.[EvidenceStatement]
                , S.[ImageURL]
                , S.[DiplomaLevelType]
                , S.[CTECompleter]
                , S.[DiplomaDescription]
                , S.[DiplomaAwardExpiresDate]
                , S.[AchievementCategoryDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[DiplomaAwardDate], DiplomaType.[ShortDescription] AS DiplomaType, T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[AchievementTitle], AchievementCategoryDescriptor.[CodeValue] AS AchievementCategoryDescriptorCodeValue, T.[AchievementCategorySystem], T.[IssuerName], T.[IssuerOriginURL], T.[Criteria], T.[CriteriaURL], T.[EvidenceStatement], T.[ImageURL], DiplomaLevelType.[ShortDescription] AS DiplomaLevelType, T.[CTECompleter], T.[DiplomaDescription], T.[DiplomaAwardExpiresDate], AchievementCategoryDescriptor.[Namespace] AS AchievementCategoryDescriptorNamespace, TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateAcademicRecord.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateAcademicRecord.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecordDiploma] AS T 
                JOIN [Ods_Snapshot].[edfi].[DiplomaType] AS DiplomaType
                    ON DiplomaType.[DiplomaTypeId] = T.[DiplomaTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AchievementCategoryDescriptor
                    ON AchievementCategoryDescriptor.[DescriptorId] = T.[AchievementCategoryDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[DiplomaLevelType] AS DiplomaLevelType
                    ON DiplomaLevelType.[DiplomaLevelTypeId] = T.[DiplomaLevelTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidateAcademicRecord] AS TeacherCandidateAcademicRecord
                    ON TeacherCandidateAcademicRecord.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateAcademicRecord.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateAcademicRecord.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateAcademicRecord.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateCharacteristicDescriptor] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCharacteristicDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateCharacteristicType] [NVARCHAR](450) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateCharacteristicDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCharacteristicDescriptorKey] AS TABLE
(
    [tid_TeacherCandidateCharacteristicDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCharacteristicDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateCharacteristicDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TeacherCandidateCharacteristicType].[ShortDescription] AS TeacherCandidateCharacteristicType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateCharacteristicDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TeacherCandidateCharacteristicDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[TeacherCandidateCharacteristicType] AS TeacherCandidateCharacteristicType
                    ON [TeacherCandidateCharacteristicType].[TeacherCandidateCharacteristicTypeId] = T.[TeacherCandidateCharacteristicTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TeacherCandidateCharacteristicType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TeacherCandidateCharacteristicType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateCharacteristicDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateCharacteristicDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateCharacteristicDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateCharacteristicDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateCharacteristicDescriptor] AS S
                ON P.[DescriptorId] = S.[TeacherCandidateCharacteristicDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateCourseTranscript] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCourseTranscript] AS TABLE
(
    [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AttemptedCredits] [DECIMAL](9, 2) NULL
    , [AttemptedCreditType] [NVARCHAR](450) NULL
    , [AttemptedCreditConversion] [DECIMAL](9, 2) NULL
    , [EarnedCredits] [DECIMAL](9, 2) NOT NULL
    , [EarnedCreditType] [NVARCHAR](450) NULL
    , [EarnedCreditConversion] [DECIMAL](9, 2) NULL
    , [WhenTakenGradeLevelDescriptorCodeValue] [NVARCHAR](50) NULL
    , [MethodCreditEarnedType] [NVARCHAR](450) NULL
    , [FinalLetterGradeEarned] [NVARCHAR](20) NULL
    , [FinalNumericGradeEarned] [DECIMAL](9, 2) NULL
    , [CourseRepeatCodeType] [NVARCHAR](450) NULL
    , [SchoolId] [INT] NULL
    , [CourseTitle] [NVARCHAR](60) NULL
    , [AlternativeCourseTitle] [NVARCHAR](60) NULL
    , [AlternativeCourseCode] [NVARCHAR](60) NULL
    , [WhenTakenGradeLevelDescriptorNamespace] [NVARCHAR](255) NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateCourseTranscriptKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCourseTranscriptKey] AS TABLE
(
    [tid_TeacherCandidateCourseTranscript] [INT] NOT NULL PRIMARY KEY
    , [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCourseTranscript] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCourseTranscript]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCourseTranscriptKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateCourseTranscript] AS T
            USING
            (
                SELECT [CourseAttemptResultType].[ShortDescription] AS CourseAttemptResultType
                , T.[CourseCode]
                , T.[CourseEducationOrganizationId]
                , T.[EducationOrganizationId]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[AttemptedCredits]
                , [AttemptedCreditType].[ShortDescription] AS AttemptedCreditType
                , T.[AttemptedCreditConversion]
                , T.[EarnedCredits]
                , [EarnedCreditType].[ShortDescription] AS EarnedCreditType
                , T.[EarnedCreditConversion]
                , WhenTakenGradeLevelDescriptor.[CodeValue] AS WhenTakenGradeLevelDescriptorCodeValue
                , [MethodCreditEarnedType].[ShortDescription] AS MethodCreditEarnedType
                , T.[FinalLetterGradeEarned]
                , T.[FinalNumericGradeEarned]
                , [CourseRepeatCodeType].[ShortDescription] AS CourseRepeatCodeType
                , T.[SchoolId]
                , T.[CourseTitle]
                , T.[AlternativeCourseTitle]
                , T.[AlternativeCourseCode]
                , WhenTakenGradeLevelDescriptor.[Namespace] AS WhenTakenGradeLevelDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateCourseTranscript] AS T
                JOIN [Ods_Snapshot].[edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON [CourseAttemptResultType].[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS AttemptedCreditType
                    ON [AttemptedCreditType].[CreditTypeId] = T.[AttemptedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CreditType] AS EarnedCreditType
                    ON [EarnedCreditType].[CreditTypeId] = T.[EarnedCreditTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS WhenTakenGradeLevelDescriptor
                    ON [WhenTakenGradeLevelDescriptor].[DescriptorId] = T.[WhenTakenGradeLevelDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[MethodCreditEarnedType] AS MethodCreditEarnedType
                    ON [MethodCreditEarnedType].[MethodCreditEarnedTypeId] = T.[MethodCreditEarnedTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[CourseRepeatCodeType] AS CourseRepeatCodeType
                    ON [CourseRepeatCodeType].[CourseRepeatCodeTypeId] = T.[CourseRepeatCodeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseAttemptResultType]
                    , [CourseCode]
                    , [CourseEducationOrganizationId]
                    , [EducationOrganizationId]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [TermDescriptorCodeValue]
                    , [AttemptedCredits]
                    , [AttemptedCreditType]
                    , [AttemptedCreditConversion]
                    , [EarnedCredits]
                    , [EarnedCreditType]
                    , [EarnedCreditConversion]
                    , [WhenTakenGradeLevelDescriptorCodeValue]
                    , [MethodCreditEarnedType]
                    , [FinalLetterGradeEarned]
                    , [FinalNumericGradeEarned]
                    , [CourseRepeatCodeType]
                    , [SchoolId]
                    , [CourseTitle]
                    , [AlternativeCourseTitle]
                    , [AlternativeCourseCode]
                    , [WhenTakenGradeLevelDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseAttemptResultType]
                    , S.[CourseCode]
                    , S.[CourseEducationOrganizationId]
                    , S.[EducationOrganizationId]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[AttemptedCredits]
                    , S.[AttemptedCreditType]
                    , S.[AttemptedCreditConversion]
                    , S.[EarnedCredits]
                    , S.[EarnedCreditType]
                    , S.[EarnedCreditConversion]
                    , S.[WhenTakenGradeLevelDescriptorCodeValue]
                    , S.[MethodCreditEarnedType]
                    , S.[FinalLetterGradeEarned]
                    , S.[FinalNumericGradeEarned]
                    , S.[CourseRepeatCodeType]
                    , S.[SchoolId]
                    , S.[CourseTitle]
                    , S.[AlternativeCourseTitle]
                    , S.[AlternativeCourseCode]
                    , S.[WhenTakenGradeLevelDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateCourseTranscript]
                , INSERTED.[CourseAttemptResultType]
                , INSERTED.[CourseCode]
                , INSERTED.[CourseEducationOrganizationId]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateCourseTranscript]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateCourseTranscript]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateCourseTranscript] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateCourseTranscript] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateCourseTranscriptEarnedAdditionalCredits] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCourseTranscriptEarnedAdditionalCredits] AS TABLE
(
    [AdditionalCreditType] [NVARCHAR](450) NOT NULL
    , [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [Credits] [DECIMAL](9, 2) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateCourseTranscriptEarnedAdditionalCreditsKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateCourseTranscriptEarnedAdditionalCreditsKey] AS TABLE
(
    [tid_TeacherCandidateCourseTranscriptEarnedAdditionalCredits] [INT] NOT NULL PRIMARY KEY
    , [AdditionalCreditType] [NVARCHAR](450) NOT NULL
    , [CourseAttemptResultType] [NVARCHAR](450) NOT NULL
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [CourseEducationOrganizationId] [INT] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateCourseTranscriptEarnedAdditionalCredits]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateCourseTranscriptKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateCourseTranscriptEarnedAdditionalCreditsKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits]
            (
                [tid_TeacherCandidateCourseTranscript]
                , [AdditionalCreditType]
                , [Credits]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateCourseTranscript]
                , S.[AdditionalCreditType]
                , S.[Credits]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT AdditionalCreditType.[ShortDescription] AS AdditionalCreditType, CourseAttemptResultType.[ShortDescription] AS CourseAttemptResultType, T.[CourseCode], T.[CourseEducationOrganizationId], T.[EducationOrganizationId], T.[SchoolYear], T.[TeacherCandidateIdentifier], TermDescriptor.[CodeValue] AS TermDescriptorCodeValue, T.[Credits], TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , TeacherCandidateCourseTranscript.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateCourseTranscript.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateCourseTranscriptEarnedAdditionalCredits] AS T 
                JOIN [Ods_Snapshot].[edfi].[AdditionalCreditType] AS AdditionalCreditType
                    ON AdditionalCreditType.[AdditionalCreditTypeId] = T.[AdditionalCreditTypeId]
                JOIN [Ods_Snapshot].[edfi].[CourseAttemptResultType] AS CourseAttemptResultType
                    ON CourseAttemptResultType.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON TermDescriptor.[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherCandidateCourseTranscript] AS TeacherCandidateCourseTranscript
                    ON TeacherCandidateCourseTranscript.[CourseAttemptResultTypeId] = T.[CourseAttemptResultTypeId]
                    AND TeacherCandidateCourseTranscript.[CourseCode] = T.[CourseCode]
                    AND TeacherCandidateCourseTranscript.[CourseEducationOrganizationId] = T.[CourseEducationOrganizationId]
                    AND TeacherCandidateCourseTranscript.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherCandidateCourseTranscript.[SchoolYear] = T.[SchoolYear]
                    AND TeacherCandidateCourseTranscript.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
                    AND TeacherCandidateCourseTranscript.[TermDescriptorId] = T.[TermDescriptorId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateFieldworkAbsenceEvent] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateFieldworkAbsenceEvent] AS TABLE
(
    [AbsenceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [EventDate] [DATE] NOT NULL
    , [AbsenceEventReason] [NVARCHAR](40) NULL
    , [HoursAbsent] [DECIMAL](3, 2) NULL
    , [AbsenceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateFieldworkAbsenceEventKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateFieldworkAbsenceEventKey] AS TABLE
(
    [tid_TeacherCandidateFieldworkAbsenceEvent] [INT] NOT NULL PRIMARY KEY
    , [AbsenceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [AbsenceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateFieldworkAbsenceEventKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateFieldworkAbsenceEvent] AS T
            USING
            (
                SELECT AbsenceEventCategoryDescriptor.[CodeValue] AS AbsenceEventCategoryDescriptorCodeValue
                , T.[TeacherCandidateIdentifier]
                , T.[EventDate]
                , T.[AbsenceEventReason]
                , T.[HoursAbsent]
                , AbsenceEventCategoryDescriptor.[Namespace] AS AbsenceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateFieldworkAbsenceEvent] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AbsenceEventCategoryDescriptor
                    ON [AbsenceEventCategoryDescriptor].[DescriptorId] = T.[AbsenceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AbsenceEventCategoryDescriptorCodeValue]
                    , [TeacherCandidateIdentifier]
                    , [EventDate]
                    , [AbsenceEventReason]
                    , [HoursAbsent]
                    , [AbsenceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AbsenceEventCategoryDescriptorCodeValue]
                    , S.[TeacherCandidateIdentifier]
                    , S.[EventDate]
                    , S.[AbsenceEventReason]
                    , S.[HoursAbsent]
                    , S.[AbsenceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateFieldworkAbsenceEvent]
                , INSERTED.[AbsenceEventCategoryDescriptorCodeValue]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[AbsenceEventCategoryDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateFieldworkAbsenceEvent]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateFieldworkAbsenceEvent]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateFieldworkAbsenceEvent] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateFieldworkAbsenceEvent] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateFieldworkExperience] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateFieldworkExperience] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NULL
    , [SequenceOfCourse] [INT] NULL
    , [LocalCourseCode] [NVARCHAR](60) NULL
    , [SchoolYear] [SMALLINT] NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NULL
    , [SchoolId] [INT] NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NULL
    , [ClassPeriodName] [NVARCHAR](20) NULL
    , [FieldworkTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [HoursPerWeek] [DECIMAL](5, 2) NULL
    , [EndDate] [DATE] NULL
    , [ProgramGatewayDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ProgramGatewayDescriptorNamespace] [NVARCHAR](255) NULL
    , [FieldworkTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateFieldworkExperienceKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateFieldworkExperienceKey] AS TABLE
(
    [tid_TeacherCandidateFieldworkExperience] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateFieldworkExperience] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkExperience]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateFieldworkExperienceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateFieldworkExperience] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[FieldworkExperienceSchoolId]
                , T.[FieldworkIdentifier]
                , T.[TeacherCandidateIdentifier]
                , T.[UniqueSectionCode]
                , T.[SequenceOfCourse]
                , T.[LocalCourseCode]
                , T.[SchoolYear]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[SchoolId]
                , T.[ClassroomIdentificationCode]
                , T.[ClassPeriodName]
                , FieldworkTypeDescriptor.[CodeValue] AS FieldworkTypeDescriptorCodeValue
                , T.[HoursPerWeek]
                , T.[EndDate]
                , ProgramGatewayDescriptor.[CodeValue] AS ProgramGatewayDescriptorCodeValue
                , ProgramGatewayDescriptor.[Namespace] AS ProgramGatewayDescriptorNamespace
                , FieldworkTypeDescriptor.[Namespace] AS FieldworkTypeDescriptorNamespace
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateFieldworkExperience] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS FieldworkTypeDescriptor
                    ON [FieldworkTypeDescriptor].[DescriptorId] = T.[FieldworkTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ProgramGatewayDescriptor
                    ON [ProgramGatewayDescriptor].[DescriptorId] = T.[ProgramGatewayDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [FieldworkExperienceSchoolId]
                    , [FieldworkIdentifier]
                    , [TeacherCandidateIdentifier]
                    , [UniqueSectionCode]
                    , [SequenceOfCourse]
                    , [LocalCourseCode]
                    , [SchoolYear]
                    , [TermDescriptorCodeValue]
                    , [SchoolId]
                    , [ClassroomIdentificationCode]
                    , [ClassPeriodName]
                    , [FieldworkTypeDescriptorCodeValue]
                    , [HoursPerWeek]
                    , [EndDate]
                    , [ProgramGatewayDescriptorCodeValue]
                    , [ProgramGatewayDescriptorNamespace]
                    , [FieldworkTypeDescriptorNamespace]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[FieldworkExperienceSchoolId]
                    , S.[FieldworkIdentifier]
                    , S.[TeacherCandidateIdentifier]
                    , S.[UniqueSectionCode]
                    , S.[SequenceOfCourse]
                    , S.[LocalCourseCode]
                    , S.[SchoolYear]
                    , S.[TermDescriptorCodeValue]
                    , S.[SchoolId]
                    , S.[ClassroomIdentificationCode]
                    , S.[ClassPeriodName]
                    , S.[FieldworkTypeDescriptorCodeValue]
                    , S.[HoursPerWeek]
                    , S.[EndDate]
                    , S.[ProgramGatewayDescriptorCodeValue]
                    , S.[ProgramGatewayDescriptorNamespace]
                    , S.[FieldworkTypeDescriptorNamespace]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateFieldworkExperience]
                , INSERTED.[BeginDate]
                , INSERTED.[FieldworkExperienceSchoolId]
                , INSERTED.[FieldworkIdentifier]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateFieldworkExperience]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateFieldworkExperience]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateFieldworkExperience] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateFieldworkExperience] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateFieldworkExperienceCoteaching] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateFieldworkExperienceCoteaching] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [CoteachingBeginDate] [DATE] NOT NULL
    , [CoteachingEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateFieldworkExperienceCoteachingKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateFieldworkExperienceCoteachingKey] AS TABLE
(
    [tid_TeacherCandidateFieldworkExperienceCoteaching] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [FieldworkExperienceSchoolId] [INT] NOT NULL
    , [FieldworkIdentifier] [NVARCHAR](20) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateFieldworkExperienceCoteaching]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherCandidateFieldworkExperienceKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateFieldworkExperienceCoteachingKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherCandidateFieldworkExperienceCoteaching]
            (
                [tid_TeacherCandidateFieldworkExperience]
                , [CoteachingBeginDate]
                , [CoteachingEndDate]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherCandidateFieldworkExperience]
                , S.[CoteachingBeginDate]
                , S.[CoteachingEndDate]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[BeginDate], T.[FieldworkExperienceSchoolId], T.[FieldworkIdentifier], T.[TeacherCandidateIdentifier], T.[CoteachingBeginDate], T.[CoteachingEndDate]
                , T.[CreateDate]
                , TeacherCandidateFieldworkExperience.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherCandidateFieldworkExperience.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherCandidateFieldworkExperienceCoteaching] AS T 
                JOIN [Ods_Snapshot].[extension].[TeacherCandidateFieldworkExperience] AS TeacherCandidateFieldworkExperience
                    ON TeacherCandidateFieldworkExperience.[BeginDate] = T.[BeginDate]
                    AND TeacherCandidateFieldworkExperience.[FieldworkExperienceSchoolId] = T.[FieldworkExperienceSchoolId]
                    AND TeacherCandidateFieldworkExperience.[FieldworkIdentifier] = T.[FieldworkIdentifier]
                    AND TeacherCandidateFieldworkExperience.[TeacherCandidateIdentifier] = T.[TeacherCandidateIdentifier]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateProfessionalDevelopmentEventAttendance] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateProfessionalDevelopmentEventAttendance] AS TABLE
(
    [AttendanceDate] [DATE] NOT NULL
    , [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [AttendanceEventCategoryDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [AttendanceEventReason] [NVARCHAR](40) NULL
    , [AttendanceEventCategoryDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateProfessionalDevelopmentEventAttendanceKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateProfessionalDevelopmentEventAttendanceKey] AS TABLE
(
    [tid_TeacherCandidateProfessionalDevelopmentEventAttendance] [INT] NOT NULL PRIMARY KEY
    , [AttendanceDate] [DATE] NOT NULL
    , [ProfessionalDevelopmentTitle] [NVARCHAR](60) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateProfessionalDevelopmentEventAttendanceKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS T
            USING
            (
                SELECT T.[AttendanceDate]
                , T.[ProfessionalDevelopmentTitle]
                , T.[TeacherCandidateIdentifier]
                , AttendanceEventCategoryDescriptor.[CodeValue] AS AttendanceEventCategoryDescriptorCodeValue
                , T.[AttendanceEventReason]
                , AttendanceEventCategoryDescriptor.[Namespace] AS AttendanceEventCategoryDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AttendanceEventCategoryDescriptor
                    ON [AttendanceEventCategoryDescriptor].[DescriptorId] = T.[AttendanceEventCategoryDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [AttendanceDate]
                    , [ProfessionalDevelopmentTitle]
                    , [TeacherCandidateIdentifier]
                    , [AttendanceEventCategoryDescriptorCodeValue]
                    , [AttendanceEventReason]
                    , [AttendanceEventCategoryDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[AttendanceDate]
                    , S.[ProfessionalDevelopmentTitle]
                    , S.[TeacherCandidateIdentifier]
                    , S.[AttendanceEventCategoryDescriptorCodeValue]
                    , S.[AttendanceEventReason]
                    , S.[AttendanceEventCategoryDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
                , INSERTED.[AttendanceDate]
                , INSERTED.[ProfessionalDevelopmentTitle]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateStaffAssociation] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStaffAssociation] AS TABLE
(
    [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NOT NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateStaffAssociationKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStaffAssociationKey] AS TABLE
(
    [tid_TeacherCandidateStaffAssociation] [INT] NOT NULL PRIMARY KEY
    , [StaffUniqueId] [NVARCHAR](32) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStaffAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStaffAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStaffAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStaffAssociation] AS T
            USING
            (
                SELECT [Staff].[StaffUniqueId]
                , T.[TeacherCandidateIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateStaffAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Staff]
                    ON [Staff].[StaffUSI] = T.[StaffUSI]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [StaffUniqueId]
                    , [TeacherCandidateIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[StaffUniqueId]
                    , S.[TeacherCandidateIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStaffAssociation]
                , INSERTED.[StaffUniqueId]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStaffAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStaffAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStaffAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateStaffAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasure] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasure] AS TABLE
(
    [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [StudentGrowthMeasureDate] [DATE] NULL
    , [ResultDatatypeType] [NVARCHAR](450) NULL
    , [StudentGrowthTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [StudentGrowthTargetScore] [INT] NULL
    , [StudentGrowthActualScore] [INT] NOT NULL
    , [StudentGrowthMet] [BIT] NOT NULL
    , [StudentGrowthNCount] [INT] NULL
    , [StudentGrowthTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasureKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasureKey] AS TABLE
(
    [tid_TeacherCandidateStudentGrowthMeasure] [INT] NOT NULL PRIMARY KEY
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasure] AS T
            USING
            (
                SELECT T.[FactAsOfDate]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , T.[StudentGrowthMeasureDate]
                , [ResultDatatypeType].[ShortDescription] AS ResultDatatypeType
                , StudentGrowthTypeDescriptor.[CodeValue] AS StudentGrowthTypeDescriptorCodeValue
                , T.[StudentGrowthTargetScore]
                , T.[StudentGrowthActualScore]
                , T.[StudentGrowthMet]
                , T.[StudentGrowthNCount]
                , StudentGrowthTypeDescriptor.[Namespace] AS StudentGrowthTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasure] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[ResultDatatypeType] AS ResultDatatypeType
                    ON [ResultDatatypeType].[ResultDatatypeTypeId] = T.[ResultDatatypeTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS StudentGrowthTypeDescriptor
                    ON [StudentGrowthTypeDescriptor].[DescriptorId] = T.[StudentGrowthTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [FactAsOfDate]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [StudentGrowthMeasureDate]
                    , [ResultDatatypeType]
                    , [StudentGrowthTypeDescriptorCodeValue]
                    , [StudentGrowthTargetScore]
                    , [StudentGrowthActualScore]
                    , [StudentGrowthMet]
                    , [StudentGrowthNCount]
                    , [StudentGrowthTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[StudentGrowthMeasureDate]
                    , S.[ResultDatatypeType]
                    , S.[StudentGrowthTypeDescriptorCodeValue]
                    , S.[StudentGrowthTargetScore]
                    , S.[StudentGrowthActualScore]
                    , S.[StudentGrowthMet]
                    , S.[StudentGrowthNCount]
                    , S.[StudentGrowthTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasure]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasure]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasure]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasure] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasure] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasureCourseAssociation] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasureCourseAssociation] AS TABLE
(
    [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasureCourseAssociationKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasureCourseAssociationKey] AS TABLE
(
    [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation] [INT] NOT NULL PRIMARY KEY
    , [CourseCode] [NVARCHAR](60) NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureCourseAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS T
            USING
            (
                SELECT T.[CourseCode]
                , T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CourseCode]
                    , [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CourseCode]
                    , S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
                , INSERTED.[CourseCode]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationKey] AS TABLE
(
    [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[FactAsOfDate]
                , T.[SchoolYear]
                , T.[TeacherCandidateIdentifier]
                , T.[BeginDate]
                , T.[EndDate]
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS T
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [FactAsOfDate]
                    , [SchoolYear]
                    , [TeacherCandidateIdentifier]
                    , [BeginDate]
                    , [EndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[FactAsOfDate]
                    , S.[SchoolYear]
                    , S.[TeacherCandidateIdentifier]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[SchoolYear]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasureSectionAssociation] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasureSectionAssociation] AS TABLE
(
    [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [BeginDate] [DATE] NULL
    , [EndDate] [DATE] NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateStudentGrowthMeasureSectionAssociationKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateStudentGrowthMeasureSectionAssociationKey] AS TABLE
(
    [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation] [INT] NOT NULL PRIMARY KEY
    , [ClassPeriodName] [NVARCHAR](20) NOT NULL
    , [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL
    , [FactAsOfDate] [DATE] NOT NULL
    , [LocalCourseCode] [NVARCHAR](60) NOT NULL
    , [SchoolId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NOT NULL
    , [SequenceOfCourse] [INT] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TermDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [UniqueSectionCode] [NVARCHAR](255) NOT NULL
    , [TermDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateStudentGrowthMeasureSectionAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS T
            USING
            (
                SELECT T.[ClassPeriodName]
                , T.[ClassroomIdentificationCode]
                , T.[FactAsOfDate]
                , T.[LocalCourseCode]
                , T.[SchoolId]
                , T.[SchoolYear]
                , T.[SequenceOfCourse]
                , T.[TeacherCandidateIdentifier]
                , TermDescriptor.[CodeValue] AS TermDescriptorCodeValue
                , T.[UniqueSectionCode]
                , T.[BeginDate]
                , T.[EndDate]
                , TermDescriptor.[Namespace] AS TermDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TermDescriptor
                    ON [TermDescriptor].[DescriptorId] = T.[TermDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [ClassPeriodName]
                    , [ClassroomIdentificationCode]
                    , [FactAsOfDate]
                    , [LocalCourseCode]
                    , [SchoolId]
                    , [SchoolYear]
                    , [SequenceOfCourse]
                    , [TeacherCandidateIdentifier]
                    , [TermDescriptorCodeValue]
                    , [UniqueSectionCode]
                    , [BeginDate]
                    , [EndDate]
                    , [TermDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[ClassPeriodName]
                    , S.[ClassroomIdentificationCode]
                    , S.[FactAsOfDate]
                    , S.[LocalCourseCode]
                    , S.[SchoolId]
                    , S.[SchoolYear]
                    , S.[SequenceOfCourse]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TermDescriptorCodeValue]
                    , S.[UniqueSectionCode]
                    , S.[BeginDate]
                    , S.[EndDate]
                    , S.[TermDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
                , INSERTED.[ClassPeriodName]
                , INSERTED.[ClassroomIdentificationCode]
                , INSERTED.[FactAsOfDate]
                , INSERTED.[LocalCourseCode]
                , INSERTED.[SchoolId]
                , INSERTED.[SchoolYear]
                , INSERTED.[SequenceOfCourse]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TermDescriptorCodeValue]
                , INSERTED.[UniqueSectionCode]
                , INSERTED.[TermDescriptorNamespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateTeacherPreparationProviderAssociation] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateTeacherPreparationProviderAssociation] AS TABLE
(
    [EntryDate] [DATE] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [SchoolYear] [SMALLINT] NULL
    , [EntryTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ExitWithdrawDate] [DATE] NULL
    , [ExitWithdrawTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ClassOfSchoolYear] [SMALLINT] NULL
    , [ExitWithdrawTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [EntryTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateTeacherPreparationProviderAssociationKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateTeacherPreparationProviderAssociationKey] AS TABLE
(
    [tid_TeacherCandidateTeacherPreparationProviderAssociation] [INT] NOT NULL PRIMARY KEY
    , [EntryDate] [DATE] NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateTeacherPreparationProviderAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS T
            USING
            (
                SELECT T.[EntryDate]
                , T.[TeacherCandidateIdentifier]
                , T.[TeacherPreparationProviderId]
                , T.[SchoolYear]
                , EntryTypeDescriptor.[CodeValue] AS EntryTypeDescriptorCodeValue
                , T.[ExitWithdrawDate]
                , ExitWithdrawTypeDescriptor.[CodeValue] AS ExitWithdrawTypeDescriptorCodeValue
                , T.[ClassOfSchoolYear]
                , ExitWithdrawTypeDescriptor.[Namespace] AS ExitWithdrawTypeDescriptorNamespace
                , EntryTypeDescriptor.[Namespace] AS EntryTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS T
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS EntryTypeDescriptor
                    ON [EntryTypeDescriptor].[DescriptorId] = T.[EntryTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ExitWithdrawTypeDescriptor
                    ON [ExitWithdrawTypeDescriptor].[DescriptorId] = T.[ExitWithdrawTypeDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EntryDate]
                    , [TeacherCandidateIdentifier]
                    , [TeacherPreparationProviderId]
                    , [SchoolYear]
                    , [EntryTypeDescriptorCodeValue]
                    , [ExitWithdrawDate]
                    , [ExitWithdrawTypeDescriptorCodeValue]
                    , [ClassOfSchoolYear]
                    , [ExitWithdrawTypeDescriptorNamespace]
                    , [EntryTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EntryDate]
                    , S.[TeacherCandidateIdentifier]
                    , S.[TeacherPreparationProviderId]
                    , S.[SchoolYear]
                    , S.[EntryTypeDescriptorCodeValue]
                    , S.[ExitWithdrawDate]
                    , S.[ExitWithdrawTypeDescriptorCodeValue]
                    , S.[ClassOfSchoolYear]
                    , S.[ExitWithdrawTypeDescriptorNamespace]
                    , S.[EntryTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateTeacherPreparationProviderAssociation]
                , INSERTED.[EntryDate]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[TeacherPreparationProviderId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateTeacherPreparationProviderAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateTeacherPreparationProviderAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateTeacherPreparationProviderAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherCandidateTeacherPreparationProviderProgramAssociation] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateTeacherPreparationProviderProgramAssociation] AS TABLE
(
    [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [EndDate] [DATE] NULL
    , [ReasonExitedDescriptorCodeValue] [NVARCHAR](50) NULL
    , [ReasonExitedDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherCandidateTeacherPreparationProviderProgramAssociationKey] ******/

CREATE TYPE [t_extension].[udt_TeacherCandidateTeacherPreparationProviderProgramAssociationKey] AS TABLE
(
    [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation] [INT] NOT NULL PRIMARY KEY
    , [BeginDate] [DATE] NOT NULL
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [TeacherCandidateIdentifier] [NVARCHAR](32) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherCandidateTeacherPreparationProviderProgramAssociationKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS T
            USING
            (
                SELECT T.[BeginDate]
                , T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[TeacherCandidateIdentifier]
                , T.[EndDate]
                , ReasonExitedDescriptor.[CodeValue] AS ReasonExitedDescriptorCodeValue
                , ReasonExitedDescriptor.[Namespace] AS ReasonExitedDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS T
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS ReasonExitedDescriptor
                    ON [ReasonExitedDescriptor].[DescriptorId] = T.[ReasonExitedDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [BeginDate]
                    , [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [TeacherCandidateIdentifier]
                    , [EndDate]
                    , [ReasonExitedDescriptorCodeValue]
                    , [ReasonExitedDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[BeginDate]
                    , S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[TeacherCandidateIdentifier]
                    , S.[EndDate]
                    , S.[ReasonExitedDescriptorCodeValue]
                    , S.[ReasonExitedDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
                , INSERTED.[BeginDate]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[TeacherCandidateIdentifier]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherPreparationProgramTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProgramTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [TeacherPreparationProgramType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherPreparationProgramTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProgramTypeDescriptorKey] AS TABLE
(
    [tid_TeacherPreparationProgramTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProgramTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherPreparationProgramTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TeacherPreparationProgramType].[ShortDescription] AS TeacherPreparationProgramType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherPreparationProgramTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[TeacherPreparationProgramType] AS TeacherPreparationProgramType
                    ON [TeacherPreparationProgramType].[TeacherPreparationProgramTypeId] = T.[TeacherPreparationProgramTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TeacherPreparationProgramType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TeacherPreparationProgramType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherPreparationProgramTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherPreparationProgramTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherPreparationProgramTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherPreparationProgramTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[TeacherPreparationProgramTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[TeacherPreparationProgramTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherPreparationProvider] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProvider] AS TABLE
(
    [TeacherPreparationProviderId] [INT] NOT NULL
    , [UniversityId] [INT] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherPreparationProviderKey] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProviderKey] AS TABLE
(
    [tid_TeacherPreparationProvider] [INT] NOT NULL PRIMARY KEY
    , [TeacherPreparationProviderId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProvider] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProvider]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherPreparationProvider] AS T
            USING
            (
                SELECT T.[TeacherPreparationProviderId]
                , T.[UniversityId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherPreparationProvider] AS T
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[TeacherPreparationProviderId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [TeacherPreparationProviderId]
                    , [UniversityId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[TeacherPreparationProviderId]
                    , S.[UniversityId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherPreparationProvider]
                , INSERTED.[TeacherPreparationProviderId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherPreparationProviderSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherPreparationProvider]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherPreparationProvider]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherPreparationProvider] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[TeacherPreparationProvider] AS S
                ON P.[EducationOrganizationId] = S.[TeacherPreparationProviderId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherPreparationProviderProgram] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProviderProgram] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [ProgramId] [NVARCHAR](20) NULL
    , [MajorSpecialization] [NVARCHAR](75) NULL
    , [MinorSpecialization] [NVARCHAR](75) NULL
    , [TeacherPreparationProgramTypeDescriptorCodeValue] [NVARCHAR](50) NULL
    , [TPPProgramPathwayDescriptorCodeValue] [NVARCHAR](50) NULL
    , [TPPProgramPathwayDescriptorNamespace] [NVARCHAR](255) NULL
    , [TeacherPreparationProgramTypeDescriptorNamespace] [NVARCHAR](255) NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherPreparationProviderProgramKey] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProviderProgramKey] AS TABLE
(
    [tid_TeacherPreparationProviderProgram] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProviderProgram] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgram]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderProgramKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TeacherPreparationProviderProgram] AS T
            USING
            (
                SELECT T.[EducationOrganizationId]
                , T.[ProgramName]
                , [ProgramType].[ShortDescription] AS ProgramType
                , T.[ProgramId]
                , T.[MajorSpecialization]
                , T.[MinorSpecialization]
                , TeacherPreparationProgramTypeDescriptor.[CodeValue] AS TeacherPreparationProgramTypeDescriptorCodeValue
                , TPPProgramPathwayDescriptor.[CodeValue] AS TPPProgramPathwayDescriptorCodeValue
                , TPPProgramPathwayDescriptor.[Namespace] AS TPPProgramPathwayDescriptorNamespace
                , TeacherPreparationProgramTypeDescriptor.[Namespace] AS TeacherPreparationProgramTypeDescriptorNamespace
                , T.[CreateDate]
                , T.[LastModifiedDate]
                , T.[Id]
                FROM [Ods_Snapshot].[extension].[TeacherPreparationProviderProgram] AS T
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON [ProgramType].[ProgramTypeId] = T.[ProgramTypeId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TeacherPreparationProgramTypeDescriptor
                    ON [TeacherPreparationProgramTypeDescriptor].[DescriptorId] = T.[TeacherPreparationProgramTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TPPProgramPathwayDescriptor
                    ON [TPPProgramPathwayDescriptor].[DescriptorId] = T.[TPPProgramPathwayDescriptorId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [EducationOrganizationId]
                    , [ProgramName]
                    , [ProgramType]
                    , [ProgramId]
                    , [MajorSpecialization]
                    , [MinorSpecialization]
                    , [TeacherPreparationProgramTypeDescriptorCodeValue]
                    , [TPPProgramPathwayDescriptorCodeValue]
                    , [TPPProgramPathwayDescriptorNamespace]
                    , [TeacherPreparationProgramTypeDescriptorNamespace]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[EducationOrganizationId]
                    , S.[ProgramName]
                    , S.[ProgramType]
                    , S.[ProgramId]
                    , S.[MajorSpecialization]
                    , S.[MinorSpecialization]
                    , S.[TeacherPreparationProgramTypeDescriptorCodeValue]
                    , S.[TPPProgramPathwayDescriptorCodeValue]
                    , S.[TPPProgramPathwayDescriptorNamespace]
                    , S.[TeacherPreparationProgramTypeDescriptorNamespace]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TeacherPreparationProviderProgram]
                , INSERTED.[EducationOrganizationId]
                , INSERTED.[ProgramName]
                , INSERTED.[ProgramType]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TeacherPreparationProviderProgram]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TeacherPreparationProviderProgram]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TeacherPreparationProviderProgram] AS T
            JOIN [Ods_Snapshot].[extension].[TeacherPreparationProviderProgram] AS S
                ON T.Id = S.Id
                AND T.[LastModifiedDate] = S.[LastModifiedDate]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL

            --for each sub entity

            EXEC [t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel] @pSnapshotId, @TidsChild, @pPartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree] @pSnapshotId, @TidsChild, @pPartitionYearId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherPreparationProviderProgramGradeLevel] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProviderProgramGradeLevel] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherPreparationProviderProgramGradeLevelKey] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProviderProgramGradeLevelKey] AS TABLE
(
    [tid_TeacherPreparationProviderProgramGradeLevel] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [GradeLevelDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [GradeLevelDescriptorNamespace] [NVARCHAR](255) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgramGradeLevel]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherPreparationProviderProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderProgramGradeLevelKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherPreparationProviderProgramGradeLevel]
            (
                [tid_TeacherPreparationProviderProgram]
                , [GradeLevelDescriptorCodeValue]
                , [GradeLevelDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherPreparationProviderProgram]
                , S.[GradeLevelDescriptorCodeValue]
                , S.[GradeLevelDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], GradeLevelDescriptor.[CodeValue] AS GradeLevelDescriptorCodeValue, T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, GradeLevelDescriptor.[Namespace] AS GradeLevelDescriptorNamespace
                , T.[CreateDate]
                , TeacherPreparationProviderProgram.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherPreparationProviderProgram.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherPreparationProviderProgramGradeLevel] AS T 
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS GradeLevelDescriptor
                    ON GradeLevelDescriptor.[DescriptorId] = T.[GradeLevelDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[extension].[TeacherPreparationProviderProgram] AS TeacherPreparationProviderProgram
                    ON TeacherPreparationProviderProgram.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherPreparationProviderProgram.[ProgramName] = T.[ProgramName]
                    AND TeacherPreparationProviderProgram.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TeacherPreparationProviderProgramTPPProgramDegree] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProviderProgramTPPProgramDegree] AS TABLE
(
    [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
    , [AcademicSubjectDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TPPDegreeTypeDescriptorCodeValue] [NVARCHAR](50) NOT NULL
    , [TPPDegreeTypeDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [AcademicSubjectDescriptorNamespace] [NVARCHAR](255) NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [ParentLastModifiedDate] [DATETIME] NOT NULL
    , [ParentId] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TeacherPreparationProviderProgramTPPProgramDegreeKey] ******/

CREATE TYPE [t_extension].[udt_TeacherPreparationProviderProgramTPPProgramDegreeKey] AS TABLE
(
    [tid_TeacherPreparationProviderProgramTPPProgramDegree] [INT] NOT NULL PRIMARY KEY
    , [EducationOrganizationId] [INT] NOT NULL
    , [ProgramName] [NVARCHAR](60) NOT NULL
    , [ProgramType] [NVARCHAR](450) NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree] ******/

CREATE PROCEDURE [t_extension].[usp_dbTeacherPreparationProviderProgramTPPProgramDegree]
    @pSnapshotId INT
    , @pTids [t_extension].[udt_TeacherPreparationProviderProgramKey] READONLY
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TeacherPreparationProviderProgramTPPProgramDegreeKey];
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO [t_extension].[TeacherPreparationProviderProgramTPPProgramDegree]
            (
                [tid_TeacherPreparationProviderProgram]
                , [AcademicSubjectDescriptorCodeValue]
                , [TPPDegreeTypeDescriptorCodeValue]
                , [TPPDegreeTypeDescriptorNamespace]
                , [AcademicSubjectDescriptorNamespace]
                , [CreateDate]
                , [t_PartitionYearId]
            )
            SELECT T.[tid_TeacherPreparationProviderProgram]
                , S.[AcademicSubjectDescriptorCodeValue]
                , S.[TPPDegreeTypeDescriptorCodeValue]
                , S.[TPPDegreeTypeDescriptorNamespace]
                , S.[AcademicSubjectDescriptorNamespace]
                , S.[CreateDate]
                , @pPartitionYearId
            FROM
            (
                SELECT T.[EducationOrganizationId], T.[ProgramName], ProgramType.[ShortDescription] AS ProgramType, AcademicSubjectDescriptor.[CodeValue] AS AcademicSubjectDescriptorCodeValue, TPPDegreeTypeDescriptor.[CodeValue] AS TPPDegreeTypeDescriptorCodeValue, TPPDegreeTypeDescriptor.[Namespace] AS TPPDegreeTypeDescriptorNamespace, AcademicSubjectDescriptor.[Namespace] AS AcademicSubjectDescriptorNamespace
                , T.[CreateDate]
                , TeacherPreparationProviderProgram.[LastModifiedDate] AS ParentLastModifiedDate
                , TeacherPreparationProviderProgram.[Id] AS ParentId
                FROM [Ods_Snapshot].[extension].[TeacherPreparationProviderProgramTPPProgramDegree] AS T 
                JOIN [Ods_Snapshot].[edfi].[ProgramType] AS ProgramType
                    ON ProgramType.[ProgramTypeId] = T.[ProgramTypeId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS AcademicSubjectDescriptor
                    ON AcademicSubjectDescriptor.[DescriptorId] = T.[AcademicSubjectDescriptorId]
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS TPPDegreeTypeDescriptor
                    ON TPPDegreeTypeDescriptor.[DescriptorId] = T.[TPPDegreeTypeDescriptorId]
                JOIN [Ods_Snapshot].[extension].[TeacherPreparationProviderProgram] AS TeacherPreparationProviderProgram
                    ON TeacherPreparationProviderProgram.[EducationOrganizationId] = T.[EducationOrganizationId]
                    AND TeacherPreparationProviderProgram.[ProgramName] = T.[ProgramName]
                    AND TeacherPreparationProviderProgram.[ProgramTypeId] = T.[ProgramTypeId]
            ) AS S
            JOIN @pTids AS T
                ON T.[LastModifiedDate] = S.[ParentLastModifiedDate]
                AND T.[Id] = S.[ParentId];
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_ThemeDescriptor] ******/

CREATE TYPE [t_extension].[udt_ThemeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [ThemeType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_ThemeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_ThemeDescriptorKey] AS TABLE
(
    [tid_ThemeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbThemeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbThemeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_ThemeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[ThemeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [ThemeType].[ShortDescription] AS ThemeType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[ThemeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[ThemeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[ThemeType] AS ThemeType
                    ON [ThemeType].[ThemeTypeId] = T.[ThemeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [ThemeType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[ThemeType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_ThemeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[ThemeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_ThemeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_ThemeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[ThemeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[ThemeDescriptor] AS S
                ON P.[DescriptorId] = S.[ThemeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TPPDegreeTypeDescriptor] ******/

CREATE TYPE [t_extension].[udt_TPPDegreeTypeDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [TPPDegreeType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TPPDegreeTypeDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_TPPDegreeTypeDescriptorKey] AS TABLE
(
    [tid_TPPDegreeTypeDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTPPDegreeTypeDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbTPPDegreeTypeDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TPPDegreeTypeDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TPPDegreeTypeDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TPPDegreeType].[ShortDescription] AS TPPDegreeType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[TPPDegreeTypeDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TPPDegreeTypeDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[TPPDegreeType] AS TPPDegreeType
                    ON [TPPDegreeType].[TPPDegreeTypeId] = T.[TPPDegreeTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TPPDegreeType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TPPDegreeType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TPPDegreeTypeDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TPPDegreeTypeDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TPPDegreeTypeDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TPPDegreeTypeDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[TPPDegreeTypeDescriptor] AS S
                ON P.[DescriptorId] = S.[TPPDegreeTypeDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_TPPProgramPathwayDescriptor] ******/

CREATE TYPE [t_extension].[udt_TPPProgramPathwayDescriptor] AS TABLE
(
    [CodeValue] [NVARCHAR](50) NOT NULL
    , [TPPProgramPathwayType] [NVARCHAR](450) NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [ShortDescription] [NVARCHAR](75) NOT NULL
    , [Description] [NVARCHAR](1024) NULL
    , [EffectiveBeginDate] [DATE] NULL
    , [EffectiveEndDate] [DATE] NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_TPPProgramPathwayDescriptorKey] ******/

CREATE TYPE [t_extension].[udt_TPPProgramPathwayDescriptorKey] AS TABLE
(
    [tid_TPPProgramPathwayDescriptor] [INT] NOT NULL PRIMARY KEY
    , [CodeValue] [NVARCHAR](50) NOT NULL
    , [Namespace] [NVARCHAR](255) NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbTPPProgramPathwayDescriptor] ******/

CREATE PROCEDURE [t_extension].[usp_dbTPPProgramPathwayDescriptor]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_TPPProgramPathwayDescriptorKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[TPPProgramPathwayDescriptor] AS T
            USING
            (
                SELECT P.CodeValue
                , [TPPProgramPathwayType].[ShortDescription] AS TPPProgramPathwayType
                , P.Namespace
                , P.[ShortDescription]
                , P.[Description]
                , P.[EffectiveBeginDate]
                , P.[EffectiveEndDate]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[TPPProgramPathwayDescriptor] AS T
                JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                    ON P.[DescriptorId] = T.[TPPProgramPathwayDescriptorId]
                LEFT JOIN [Ods_Snapshot].[edfi].[TPPProgramPathwayType] AS TPPProgramPathwayType
                    ON [TPPProgramPathwayType].[TPPProgramPathwayTypeId] = T.[TPPProgramPathwayTypeId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [CodeValue]
                    , [TPPProgramPathwayType]
                    , [Namespace]
                    , [ShortDescription]
                    , [Description]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[CodeValue]
                    , S.[TPPProgramPathwayType]
                    , S.[Namespace]
                    , S.[ShortDescription]
                    , S.[Description]
                    , S.[EffectiveBeginDate]
                    , S.[EffectiveEndDate]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_TPPProgramPathwayDescriptor]
                , INSERTED.[CodeValue]
                , INSERTED.[Namespace]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
            (
                [SnapshotId]
                , [tid_TPPProgramPathwayDescriptor]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_TPPProgramPathwayDescriptor]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[TPPProgramPathwayDescriptor] AS T
            JOIN [Ods_Snapshot].[edfi].[Descriptor] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[TPPProgramPathwayDescriptor] AS S
                ON P.[DescriptorId] = S.[TPPProgramPathwayDescriptorId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
/****** TYPE: [t_extension].[udt_University] ******/

CREATE TYPE [t_extension].[udt_University] AS TABLE
(
    [UniversityId] [INT] NOT NULL
    , [CreateDate] [DATETIME] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** TYPE: [t_extension].[udt_UniversityKey] ******/

CREATE TYPE [t_extension].[udt_UniversityKey] AS TABLE
(
    [tid_University] [INT] NOT NULL PRIMARY KEY
    , [UniversityId] [INT] NOT NULL
    , [LastModifiedDate] [DATETIME] NOT NULL
    , [Id] [UNIQUEIDENTIFIER] NOT NULL
);
GO

/****** PROCEDURE: [t_extension].[usp_dbUniversity] ******/

CREATE PROCEDURE [t_extension].[usp_dbUniversity]
    @pSnapshotId INT
    , @pBeginDate DATE
    , @pEndDate DATE
    , @pPartitionYearId SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @TidsChild AS [t_extension].[udt_UniversityKey];
    BEGIN TRY
        BEGIN TRANSACTION
            MERGE [t_extension].[University] AS T
            USING
            (
                SELECT T.[UniversityId]
                , P.[CreateDate]
                , P.[LastModifiedDate]
                , P.[Id]
                FROM [Ods_Snapshot].[extension].[University] AS T
                JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                    ON P.[EducationOrganizationId] = T.[UniversityId]
            ) AS S
                ON
                (
                    T.Id = S.Id
                    AND T.[LastModifiedDate] = S.[LastModifiedDate]
                    AND (T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL)
                )
            WHEN NOT MATCHED BY TARGET
                THEN INSERT
                (
                    [UniversityId]
                    , [CreateDate]
                    , [LastModifiedDate]
                    , [Id]
                    , [t_PartitionYearId]
                )
                VALUES
                (
                    S.[UniversityId]
                    , S.[CreateDate]
                    , S.[LastModifiedDate]
                    , S.[Id]
                    , @pPartitionYearId
                )
                OUTPUT INSERTED.[tid_University]
                , INSERTED.[UniversityId]
                , INSERTED.[LastModifiedDate]
                , INSERTED.[Id]
                INTO @TidsChild;

            INSERT INTO [t_extension].[UniversitySnapshotRecord]
            (
                [SnapshotId]
                , [tid_University]
                , [EffectiveBeginDate]
                , [EffectiveEndDate]
                , [Id]
                , [t_PartitionYearId]
            )
            SELECT @pSnapshotId
                , T.[tid_University]
                , @pBeginDate
                , @pEndDate
                , T.[Id]
                , @pPartitionYearId
            FROM [t_extension].[University] AS T
            JOIN [Ods_Snapshot].[edfi].[EducationOrganization] AS P
                ON T.Id = P.Id
                AND T.[LastModifiedDate] = P.[LastModifiedDate]
            JOIN [Ods_Snapshot].[extension].[University] AS S
                ON P.[EducationOrganizationId] = S.[UniversityId]
            WHERE T.[t_PartitionYearId] = @pPartitionYearId OR @pPartitionYearId IS NULL
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @pSnapshotId, @SprocName;

        THROW;
    END CATCH;
END;
GO
IF OBJECT_ID('[tods].[usp_CopySnapshot]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_CopySnapshot];
GO

/****** PROCEDURE: [tods].[usp_CopySnapshot] ******/

CREATE PROCEDURE [tods].[usp_CopySnapshot]
    @pExistingSnapshotCode NVARCHAR(50)
    , @pNewSnapshotCode NVARCHAR(50)
    , @pSnapshotName NVARCHAR(1024)
    , @pDescription NVARCHAR(1024) = NULL
    , @pSnapshotDate DATE = NULL
    , @pBeginDate DATE = NULL
    , @pEndDate DATE = NULL
    , @Id UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SnapshotId INT;
    DECLARE @ExistingSnapshotId INT;
    DECLARE @ExistingLoadStartTime DATETIME;
    DECLARE @ExistingLoadEndTime DATETIME;
    DECLARE @Message NVARCHAR(2048);

    SELECT @pSnapshotDate = COALESCE(@pSnapshotDate, @pBeginDate, GETDATE());
    SELECT @pBeginDate = COALESCE(@pBeginDate, @pSnapshotDate);

    BEGIN TRANSACTION
        -- ERROR CONDITIONS

        -- existing snapshot code does not exist
        IF NOT EXISTS
        (
            SELECT [Code]
            FROM [tods].[SnapshotCode]
            WHERE [Code] = @pExistingSnapshotCode
            GROUP BY [Code]
        )
            THROW 50001, N'existing snapshot code does not exist', 1;

        -- new snapshot code includes invalid characters
        IF (@pNewSnapshotCode LIKE '%[^-A-Za-z0-9_()]%') BEGIN
            SET @Message = FORMATMESSAGE(50002, @pNewSnapshotCode);
            THROW 50002, @Message, 1;
        END

        -- new snapshot code matches existing one in tods.snapshotcode table
        IF @pNewSnapshotCode =
        (
            SELECT [Code]
            FROM [tods].[SnapshotCode]
            WHERE [Code] = @pNewSnapshotCode
            GROUP BY [Code]
        ) BEGIN
            SET @Message = FORMATMESSAGE(50003, @pNewSnapshotCode);
            THROW 50003, @Message, 1;
        END

        -- snapshot name matches existing one in tods.snapshot table
        IF EXISTS
        (
            SELECT [SnapshotName]
            FROM [tods].[Snapshot]
            WHERE [SnapshotName] = @pSnapshotName
            GROUP BY [SnapshotName]
        ) BEGIN
            SET @Message = FORMATMESSAGE(50003, @pSnapshotName);
            THROW 50004, @Message, 1;
        END

        -- snapshot date is before begin date
        IF @pSnapshotDate < @pBeginDate BEGIN
            SET @Message = FORMATMESSAGE(50005, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50005, @Message, 1;
        END;

        -- snapshot date is on or after end date
        IF @pSnapshotDate >= @pEndDate BEGIN
            SET @Message = FORMATMESSAGE(50006, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
            THROW 50006, @Message, 1;
        END;

        -- begin date is in the future
        IF @pBeginDate > GETDATE() BEGIN
            SET @Message = FORMATMESSAGE(50007, CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50007, @Message, 1;
        END;

         -- begin date overlaps another snapshot
        IF EXISTS
        (
            SELECT [SnapshotId]
            FROM [tods].[Snapshot]
            WHERE [EffectiveBeginDate] <= @pBeginDate
                AND @pBeginDate < COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
        ) BEGIN
            SET @Message = FORMATMESSAGE(50008, CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50008, @Message, 1;
        END;

        -- end date is before begin date
        IF @pBeginDate >= @pEndDate BEGIN
            SET @Message = FORMATMESSAGE(50009, CAST(@pEndDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
            THROW 50009, @Message, 1;
        END;

        -- end date overlaps other snapshot
        IF EXISTS
        (
            SELECT [SnapshotId]
            FROM [tods].[Snapshot]
            WHERE @pEndDate > [EffectiveBeginDate]
                AND (
                       @pEndDate <= COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                       OR
                       (@pBegindate < [EffectiveBeginDate]
                        AND [EffectiveEndDate] IS NULL AND @pEndDate IS NULL)
                    )
        ) BEGIN
            SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
            THROW 50010, @Message, 1;
        END;

        IF @pEndDate IS NULL AND EXISTS
        (
            SELECT [SnapshotId]
            FROM [tods].[Snapshot]
            WHERE [EffectiveBeginDate] > @pBeginDate
        )
        SET @pEndDate =
        (
            SELECT MIN([EffectiveBeginDate])
            FROM [tods].[Snapshot]
            WHERE [EffectiveBeginDate] > @pBeginDate
        );

        UPDATE [tods].[Snapshot]
        SET [EffectiveEndDate] = @pBeginDate
        WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        SET @ExistingSnapshotId =
        (
             SELECT [SnapshotId]
             FROM [tods].[SnapshotCode]
             WHERE [Code] = @pExistingSnapshotCode
        );

        SET @ExistingLoadStartTime =
        (
            SELECT [LoadStartTime]
            FROM [tods].[Snapshot]
            WHERE SnapshotId = @ExistingSnapshotId
        );

        SET @ExistingLoadEndTime =
        (
             SELECT [LoadEndTime]
             FROM [tods].[Snapshot]
             WHERE SnapshotId = @ExistingSnapshotId
        );

        INSERT INTO [tods].[Snapshot]
        (
            [SnapshotDate]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [SnapshotName]
            , [Description]
            , [IsLockedForProcessing]
            , [IsLocked]
            , [Status]
            , [LoadStartTime]
            , [LoadEndTime]
        )
        VALUES
        (
            @pSnapshotDate
            , @pBeginDate
            , @pEndDate
            , @pSnapshotName
            , @pDescription
            , 0
            , 0
            , 'ACTIVE'
            , @ExistingLoadStartTime
            , @ExistingLoadEndTime
        );

        SET @SnapshotId = SCOPE_IDENTITY();

        SET @Id =
        (
             SELECT [Id]
             FROM [tods].[Snapshot]
             WHERE [SnapshotId] = @SnapshotId
        );

        INSERT INTO [tods].[SnapshotCode]
        (
            [SnapshotId]
            , [Code]
        )
        VALUES
        (
            @SnapshotId
            , @pNewSnapshotCode
        );

        UPDATE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AbsenceEventCategoryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AbsenceEventCategoryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
        WHERE [tid_AbsenceEventCategoryDescriptor] IN
        (
            SELECT [tid_AbsenceEventCategoryDescriptor]
            FROM [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AidTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AidTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AidTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AidTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AidTypeDescriptorSnapshotRecord]
        WHERE [tid_AidTypeDescriptor] IN
        (
            SELECT [tid_AidTypeDescriptor]
            FROM [t_extension].[AidTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AnonymizedStudentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AnonymizedStudentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AnonymizedStudent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AnonymizedStudent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AnonymizedStudentSnapshotRecord]
        WHERE [tid_AnonymizedStudent] IN
        (
            SELECT [tid_AnonymizedStudent]
            FROM [t_extension].[AnonymizedStudentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AnonymizedStudentAcademicRecord]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AnonymizedStudentAcademicRecord]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
        WHERE [tid_AnonymizedStudentAcademicRecord] IN
        (
            SELECT [tid_AnonymizedStudentAcademicRecord]
            FROM [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AnonymizedStudentAssessment]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AnonymizedStudentAssessment]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
        WHERE [tid_AnonymizedStudentAssessment] IN
        (
            SELECT [tid_AnonymizedStudentAssessment]
            FROM [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AnonymizedStudentCourseAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AnonymizedStudentCourseAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
        WHERE [tid_AnonymizedStudentCourseAssociation] IN
        (
            SELECT [tid_AnonymizedStudentCourseAssociation]
            FROM [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AnonymizedStudentCourseTranscript]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AnonymizedStudentCourseTranscript]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
        WHERE [tid_AnonymizedStudentCourseTranscript] IN
        (
            SELECT [tid_AnonymizedStudentCourseTranscript]
            FROM [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AnonymizedStudentEducationOrganizationAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AnonymizedStudentEducationOrganizationAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
        WHERE [tid_AnonymizedStudentEducationOrganizationAssociation] IN
        (
            SELECT [tid_AnonymizedStudentEducationOrganizationAssociation]
            FROM [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_AnonymizedStudentSectionAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_AnonymizedStudentSectionAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
        WHERE [tid_AnonymizedStudentSectionAssociation] IN
        (
            SELECT [tid_AnonymizedStudentSectionAssociation]
            FROM [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ApplicantSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ApplicantSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Applicant]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Applicant]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ApplicantSnapshotRecord]
        WHERE [tid_Applicant] IN
        (
            SELECT [tid_Applicant]
            FROM [t_extension].[ApplicantSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_BackgroundCheckStatusDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_BackgroundCheckStatusDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
        WHERE [tid_BackgroundCheckStatusDescriptor] IN
        (
            SELECT [tid_BackgroundCheckStatusDescriptor]
            FROM [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_BackgroundCheckTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_BackgroundCheckTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
        WHERE [tid_BackgroundCheckTypeDescriptor] IN
        (
            SELECT [tid_BackgroundCheckTypeDescriptor]
            FROM [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_BoardCertificationTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_BoardCertificationTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
        WHERE [tid_BoardCertificationTypeDescriptor] IN
        (
            SELECT [tid_BoardCertificationTypeDescriptor]
            FROM [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CertificationExamTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CertificationExamTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
        WHERE [tid_CertificationExamTypeDescriptor] IN
        (
            SELECT [tid_CertificationExamTypeDescriptor]
            FROM [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseCourseTranscriptFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseCourseTranscriptFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
        WHERE [tid_CourseCourseTranscriptFacts] IN
        (
            SELECT [tid_CourseCourseTranscriptFacts]
            FROM [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseStudentAcademicRecordFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseStudentAcademicRecordFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
        WHERE [tid_CourseStudentAcademicRecordFacts] IN
        (
            SELECT [tid_CourseStudentAcademicRecordFacts]
            FROM [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseStudentAssessmentFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseStudentAssessmentFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
        WHERE [tid_CourseStudentAssessmentFacts] IN
        (
            SELECT [tid_CourseStudentAssessmentFacts]
            FROM [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CourseStudentFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CourseStudentFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseStudentFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseStudentFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CourseStudentFactsSnapshotRecord]
        WHERE [tid_CourseStudentFacts] IN
        (
            SELECT [tid_CourseStudentFacts]
            FROM [t_extension].[CourseStudentFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseSurveyQuestionResponseFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseSurveyQuestionResponseFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
        WHERE [tid_CourseSurveyQuestionResponseFacts] IN
        (
            SELECT [tid_CourseSurveyQuestionResponseFacts]
            FROM [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseSurveyResponseFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseSurveyResponseFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
        WHERE [tid_CourseSurveyResponseFacts] IN
        (
            SELECT [tid_CourseSurveyResponseFacts]
            FROM [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_CourseSurveySectionResponseRatingFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_CourseSurveySectionResponseRatingFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
        WHERE [tid_CourseSurveySectionResponseRatingFacts] IN
        (
            SELECT [tid_CourseSurveySectionResponseRatingFacts]
            FROM [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationCourseTranscriptFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationCourseTranscriptFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationCourseTranscriptFacts] IN
        (
            SELECT [tid_EducationOrganizationCourseTranscriptFacts]
            FROM [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationFacts] IN
        (
            SELECT [tid_EducationOrganizationFacts]
            FROM [t_extension].[EducationOrganizationFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationStudentAcademicRecordFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationStudentAcademicRecordFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationStudentAcademicRecordFacts] IN
        (
            SELECT [tid_EducationOrganizationStudentAcademicRecordFacts]
            FROM [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationStudentAssessmentFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationStudentAssessmentFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationStudentAssessmentFacts] IN
        (
            SELECT [tid_EducationOrganizationStudentAssessmentFacts]
            FROM [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationStudentFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationStudentFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationStudentFacts] IN
        (
            SELECT [tid_EducationOrganizationStudentFacts]
            FROM [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationSurveyQuestionResponseFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationSurveyQuestionResponseFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationSurveyQuestionResponseFacts] IN
        (
            SELECT [tid_EducationOrganizationSurveyQuestionResponseFacts]
            FROM [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationSurveyResponseFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationSurveyResponseFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationSurveyResponseFacts] IN
        (
            SELECT [tid_EducationOrganizationSurveyResponseFacts]
            FROM [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EducationOrganizationSurveySectionResponseRatingFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EducationOrganizationSurveySectionResponseRatingFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
        WHERE [tid_EducationOrganizationSurveySectionResponseRatingFacts] IN
        (
            SELECT [tid_EducationOrganizationSurveySectionResponseRatingFacts]
            FROM [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_EnglishLanguageExamDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_EnglishLanguageExamDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
        WHERE [tid_EnglishLanguageExamDescriptor] IN
        (
            SELECT [tid_EnglishLanguageExamDescriptor]
            FROM [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ExternalCourseTranscriptSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ExternalCourseTranscriptSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ExternalCourseTranscript]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ExternalCourseTranscript]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ExternalCourseTranscriptSnapshotRecord]
        WHERE [tid_ExternalCourseTranscript] IN
        (
            SELECT [tid_ExternalCourseTranscript]
            FROM [t_extension].[ExternalCourseTranscriptSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ExternalEducationOrganizationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ExternalEducationOrganizationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ExternalEducationOrganization]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ExternalEducationOrganization]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ExternalEducationOrganizationSnapshotRecord]
        WHERE [tid_ExternalEducationOrganization] IN
        (
            SELECT [tid_ExternalEducationOrganization]
            FROM [t_extension].[ExternalEducationOrganizationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ExternalStudentAcademicRecord]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ExternalStudentAcademicRecord]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
        WHERE [tid_ExternalStudentAcademicRecord] IN
        (
            SELECT [tid_ExternalStudentAcademicRecord]
            FROM [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_FieldworkTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_FieldworkTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
        WHERE [tid_FieldworkTypeDescriptor] IN
        (
            SELECT [tid_FieldworkTypeDescriptor]
            FROM [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LevelOfDegreeAwardedDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LevelOfDegreeAwardedDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
        WHERE [tid_LevelOfDegreeAwardedDescriptor] IN
        (
            SELECT [tid_LevelOfDegreeAwardedDescriptor]
            FROM [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[LevelTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[LevelTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_LevelTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_LevelTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[LevelTypeDescriptorSnapshotRecord]
        WHERE [tid_LevelTypeDescriptor] IN
        (
            SELECT [tid_LevelTypeDescriptor]
            FROM [t_extension].[LevelTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[PerformanceMeasureSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[PerformanceMeasureSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PerformanceMeasure]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PerformanceMeasure]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[PerformanceMeasureSnapshotRecord]
        WHERE [tid_PerformanceMeasure] IN
        (
            SELECT [tid_PerformanceMeasure]
            FROM [t_extension].[PerformanceMeasureSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[PerformanceMeasureFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[PerformanceMeasureFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PerformanceMeasureFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PerformanceMeasureFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[PerformanceMeasureFactsSnapshotRecord]
        WHERE [tid_PerformanceMeasureFacts] IN
        (
            SELECT [tid_PerformanceMeasureFacts]
            FROM [t_extension].[PerformanceMeasureFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PerformanceMeasureTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PerformanceMeasureTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
        WHERE [tid_PerformanceMeasureTypeDescriptor] IN
        (
            SELECT [tid_PerformanceMeasureTypeDescriptor]
            FROM [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PopulationCategoryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PopulationCategoryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
        WHERE [tid_PopulationCategoryDescriptor] IN
        (
            SELECT [tid_PopulationCategoryDescriptor]
            FROM [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PopulationSubCategoryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PopulationSubCategoryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
        WHERE [tid_PopulationSubCategoryDescriptor] IN
        (
            SELECT [tid_PopulationSubCategoryDescriptor]
            FROM [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[PreviousCareerDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[PreviousCareerDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_PreviousCareerDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_PreviousCareerDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[PreviousCareerDescriptorSnapshotRecord]
        WHERE [tid_PreviousCareerDescriptor] IN
        (
            SELECT [tid_PreviousCareerDescriptor]
            FROM [t_extension].[PreviousCareerDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ProfessionalDevelopmentEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ProfessionalDevelopmentEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
        WHERE [tid_ProfessionalDevelopmentEvent] IN
        (
            SELECT [tid_ProfessionalDevelopmentEvent]
            FROM [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ProfessionalDevelopmentOfferedByDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ProfessionalDevelopmentOfferedByDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
        WHERE [tid_ProfessionalDevelopmentOfferedByDescriptor] IN
        (
            SELECT [tid_ProfessionalDevelopmentOfferedByDescriptor]
            FROM [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ProgramGatewayDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ProgramGatewayDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
        WHERE [tid_ProgramGatewayDescriptor] IN
        (
            SELECT [tid_ProgramGatewayDescriptor]
            FROM [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ProspectSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ProspectSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Prospect]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Prospect]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ProspectSnapshotRecord]
        WHERE [tid_Prospect] IN
        (
            SELECT [tid_Prospect]
            FROM [t_extension].[ProspectSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ProspectProfessionalDevelopmentEventAttendance]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ProspectProfessionalDevelopmentEventAttendance]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
        WHERE [tid_ProspectProfessionalDevelopmentEventAttendance] IN
        (
            SELECT [tid_ProspectProfessionalDevelopmentEventAttendance]
            FROM [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[RecruitmentEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[RecruitmentEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_RecruitmentEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_RecruitmentEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[RecruitmentEventSnapshotRecord]
        WHERE [tid_RecruitmentEvent] IN
        (
            SELECT [tid_RecruitmentEvent]
            FROM [t_extension].[RecruitmentEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[RubricSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[RubricSnapshotRecord]
        (
            [SnapshotId]
            , [tid_Rubric]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Rubric]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[RubricSnapshotRecord]
        WHERE [tid_Rubric] IN
        (
            SELECT [tid_Rubric]
            FROM [t_extension].[RubricSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[RubricLevelSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[RubricLevelSnapshotRecord]
        (
            [SnapshotId]
            , [tid_RubricLevel]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_RubricLevel]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[RubricLevelSnapshotRecord]
        WHERE [tid_RubricLevel] IN
        (
            SELECT [tid_RubricLevel]
            FROM [t_extension].[RubricLevelSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[RubricLevelResponseSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[RubricLevelResponseSnapshotRecord]
        (
            [SnapshotId]
            , [tid_RubricLevelResponse]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_RubricLevelResponse]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[RubricLevelResponseSnapshotRecord]
        WHERE [tid_RubricLevelResponse] IN
        (
            SELECT [tid_RubricLevelResponse]
            FROM [t_extension].[RubricLevelResponseSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[RubricLevelResponseFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[RubricLevelResponseFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_RubricLevelResponseFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_RubricLevelResponseFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[RubricLevelResponseFactsSnapshotRecord]
        WHERE [tid_RubricLevelResponseFacts] IN
        (
            SELECT [tid_RubricLevelResponseFacts]
            FROM [t_extension].[RubricLevelResponseFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[RubricTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[RubricTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_RubricTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_RubricTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[RubricTypeDescriptorSnapshotRecord]
        WHERE [tid_RubricTypeDescriptor] IN
        (
            SELECT [tid_RubricTypeDescriptor]
            FROM [t_extension].[RubricTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SalaryTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SalaryTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SalaryTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SalaryTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SalaryTypeDescriptorSnapshotRecord]
        WHERE [tid_SalaryTypeDescriptor] IN
        (
            SELECT [tid_SalaryTypeDescriptor]
            FROM [t_extension].[SalaryTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SchoolStatusDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SchoolStatusDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SchoolStatusDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SchoolStatusDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SchoolStatusDescriptorSnapshotRecord]
        WHERE [tid_SchoolStatusDescriptor] IN
        (
            SELECT [tid_SchoolStatusDescriptor]
            FROM [t_extension].[SchoolStatusDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SchoolStudentGrowthMeasure]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SchoolStudentGrowthMeasure]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
        WHERE [tid_SchoolStudentGrowthMeasure] IN
        (
            SELECT [tid_SchoolStudentGrowthMeasure]
            FROM [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionCourseTranscriptFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionCourseTranscriptFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
        WHERE [tid_SectionCourseTranscriptFacts] IN
        (
            SELECT [tid_SectionCourseTranscriptFacts]
            FROM [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionStudentAcademicRecordFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionStudentAcademicRecordFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
        WHERE [tid_SectionStudentAcademicRecordFacts] IN
        (
            SELECT [tid_SectionStudentAcademicRecordFacts]
            FROM [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionStudentAssessmentFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionStudentAssessmentFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
        WHERE [tid_SectionStudentAssessmentFacts] IN
        (
            SELECT [tid_SectionStudentAssessmentFacts]
            FROM [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SectionStudentFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SectionStudentFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionStudentFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionStudentFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SectionStudentFactsSnapshotRecord]
        WHERE [tid_SectionStudentFacts] IN
        (
            SELECT [tid_SectionStudentFacts]
            FROM [t_extension].[SectionStudentFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionSurveyQuestionResponseFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionSurveyQuestionResponseFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
        WHERE [tid_SectionSurveyQuestionResponseFacts] IN
        (
            SELECT [tid_SectionSurveyQuestionResponseFacts]
            FROM [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionSurveyResponseFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionSurveyResponseFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
        WHERE [tid_SectionSurveyResponseFacts] IN
        (
            SELECT [tid_SectionSurveyResponseFacts]
            FROM [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SectionSurveySectionResponseRatingFacts]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SectionSurveySectionResponseRatingFacts]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
        WHERE [tid_SectionSurveySectionResponseRatingFacts] IN
        (
            SELECT [tid_SectionSurveySectionResponseRatingFacts]
            FROM [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffFieldworkAbsenceEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffFieldworkAbsenceEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
        WHERE [tid_StaffFieldworkAbsenceEvent] IN
        (
            SELECT [tid_StaffFieldworkAbsenceEvent]
            FROM [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffFieldworkExperienceSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffFieldworkExperienceSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffFieldworkExperience]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffFieldworkExperience]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffFieldworkExperienceSnapshotRecord]
        WHERE [tid_StaffFieldworkExperience] IN
        (
            SELECT [tid_StaffFieldworkExperience]
            FROM [t_extension].[StaffFieldworkExperienceSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffProfessionalDevelopmentEventAttendance]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffProfessionalDevelopmentEventAttendance]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
        WHERE [tid_StaffProfessionalDevelopmentEventAttendance] IN
        (
            SELECT [tid_StaffProfessionalDevelopmentEventAttendance]
            FROM [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffStudentGrowthMeasure]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffStudentGrowthMeasure]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
        WHERE [tid_StaffStudentGrowthMeasure] IN
        (
            SELECT [tid_StaffStudentGrowthMeasure]
            FROM [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffStudentGrowthMeasureCourseAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffStudentGrowthMeasureCourseAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
        WHERE [tid_StaffStudentGrowthMeasureCourseAssociation] IN
        (
            SELECT [tid_StaffStudentGrowthMeasureCourseAssociation]
            FROM [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
        WHERE [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation] IN
        (
            SELECT [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
            FROM [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffStudentGrowthMeasureSectionAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffStudentGrowthMeasureSectionAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
        WHERE [tid_StaffStudentGrowthMeasureSectionAssociation] IN
        (
            SELECT [tid_StaffStudentGrowthMeasureSectionAssociation]
            FROM [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffTeacherPreparationProviderAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffTeacherPreparationProviderAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
        WHERE [tid_StaffTeacherPreparationProviderAssociation] IN
        (
            SELECT [tid_StaffTeacherPreparationProviderAssociation]
            FROM [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StaffTeacherPreparationProviderProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StaffTeacherPreparationProviderProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
        WHERE [tid_StaffTeacherPreparationProviderProgramAssociation] IN
        (
            SELECT [tid_StaffTeacherPreparationProviderProgramAssociation]
            FROM [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_StudentGrowthTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_StudentGrowthTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
        WHERE [tid_StudentGrowthTypeDescriptor] IN
        (
            SELECT [tid_StudentGrowthTypeDescriptor]
            FROM [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SurveySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SurveySnapshotRecord]
        (
            [SnapshotId]
            , [tid_Survey]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_Survey]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SurveySnapshotRecord]
        WHERE [tid_Survey] IN
        (
            SELECT [tid_Survey]
            FROM [t_extension].[SurveySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SurveyCategoryDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SurveyCategoryDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
        WHERE [tid_SurveyCategoryDescriptor] IN
        (
            SELECT [tid_SurveyCategoryDescriptor]
            FROM [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SurveyQuestionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SurveyQuestionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SurveyQuestion]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SurveyQuestion]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SurveyQuestionSnapshotRecord]
        WHERE [tid_SurveyQuestion] IN
        (
            SELECT [tid_SurveyQuestion]
            FROM [t_extension].[SurveyQuestionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SurveyQuestionResponseSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SurveyQuestionResponseSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SurveyQuestionResponse]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SurveyQuestionResponse]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SurveyQuestionResponseSnapshotRecord]
        WHERE [tid_SurveyQuestionResponse] IN
        (
            SELECT [tid_SurveyQuestionResponse]
            FROM [t_extension].[SurveyQuestionResponseSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SurveyResponseSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SurveyResponseSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SurveyResponse]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SurveyResponse]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SurveyResponseSnapshotRecord]
        WHERE [tid_SurveyResponse] IN
        (
            SELECT [tid_SurveyResponse]
            FROM [t_extension].[SurveyResponseSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SurveySectionSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SurveySectionSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SurveySection]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SurveySection]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SurveySectionSnapshotRecord]
        WHERE [tid_SurveySection] IN
        (
            SELECT [tid_SurveySection]
            FROM [t_extension].[SurveySectionSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[SurveySectionResponseRatingSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[SurveySectionResponseRatingSnapshotRecord]
        (
            [SnapshotId]
            , [tid_SurveySectionResponseRating]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_SurveySectionResponseRating]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[SurveySectionResponseRatingSnapshotRecord]
        WHERE [tid_SurveySectionResponseRating] IN
        (
            SELECT [tid_SurveySectionResponseRating]
            FROM [t_extension].[SurveySectionResponseRatingSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidate]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidate]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateSnapshotRecord]
        WHERE [tid_TeacherCandidate] IN
        (
            SELECT [tid_TeacherCandidate]
            FROM [t_extension].[TeacherCandidateSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateAcademicRecord]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateAcademicRecord]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
        WHERE [tid_TeacherCandidateAcademicRecord] IN
        (
            SELECT [tid_TeacherCandidateAcademicRecord]
            FROM [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateCharacteristicDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateCharacteristicDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
        WHERE [tid_TeacherCandidateCharacteristicDescriptor] IN
        (
            SELECT [tid_TeacherCandidateCharacteristicDescriptor]
            FROM [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateCourseTranscript]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateCourseTranscript]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
        WHERE [tid_TeacherCandidateCourseTranscript] IN
        (
            SELECT [tid_TeacherCandidateCourseTranscript]
            FROM [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateFieldworkAbsenceEvent]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateFieldworkAbsenceEvent]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
        WHERE [tid_TeacherCandidateFieldworkAbsenceEvent] IN
        (
            SELECT [tid_TeacherCandidateFieldworkAbsenceEvent]
            FROM [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateFieldworkExperience]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateFieldworkExperience]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
        WHERE [tid_TeacherCandidateFieldworkExperience] IN
        (
            SELECT [tid_TeacherCandidateFieldworkExperience]
            FROM [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
        WHERE [tid_TeacherCandidateProfessionalDevelopmentEventAttendance] IN
        (
            SELECT [tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
            FROM [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateStaffAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateStaffAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
        WHERE [tid_TeacherCandidateStaffAssociation] IN
        (
            SELECT [tid_TeacherCandidateStaffAssociation]
            FROM [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateStudentGrowthMeasure]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateStudentGrowthMeasure]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
        WHERE [tid_TeacherCandidateStudentGrowthMeasure] IN
        (
            SELECT [tid_TeacherCandidateStudentGrowthMeasure]
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
        WHERE [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation] IN
        (
            SELECT [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
        WHERE [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] IN
        (
            SELECT [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
        WHERE [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation] IN
        (
            SELECT [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
            FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateTeacherPreparationProviderAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateTeacherPreparationProviderAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
        WHERE [tid_TeacherCandidateTeacherPreparationProviderAssociation] IN
        (
            SELECT [tid_TeacherCandidateTeacherPreparationProviderAssociation]
            FROM [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
        WHERE [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation] IN
        (
            SELECT [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
            FROM [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherPreparationProgramTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherPreparationProgramTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
        WHERE [tid_TeacherPreparationProgramTypeDescriptor] IN
        (
            SELECT [tid_TeacherPreparationProgramTypeDescriptor]
            FROM [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherPreparationProviderSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherPreparationProviderSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherPreparationProvider]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherPreparationProvider]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherPreparationProviderSnapshotRecord]
        WHERE [tid_TeacherPreparationProvider] IN
        (
            SELECT [tid_TeacherPreparationProvider]
            FROM [t_extension].[TeacherPreparationProviderSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TeacherPreparationProviderProgram]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TeacherPreparationProviderProgram]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
        WHERE [tid_TeacherPreparationProviderProgram] IN
        (
            SELECT [tid_TeacherPreparationProviderProgram]
            FROM [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[ThemeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[ThemeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_ThemeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_ThemeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[ThemeDescriptorSnapshotRecord]
        WHERE [tid_ThemeDescriptor] IN
        (
            SELECT [tid_ThemeDescriptor]
            FROM [t_extension].[ThemeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TPPDegreeTypeDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TPPDegreeTypeDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
        WHERE [tid_TPPDegreeTypeDescriptor] IN
        (
            SELECT [tid_TPPDegreeTypeDescriptor]
            FROM [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
        (
            [SnapshotId]
            , [tid_TPPProgramPathwayDescriptor]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_TPPProgramPathwayDescriptor]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
        WHERE [tid_TPPProgramPathwayDescriptor] IN
        (
            SELECT [tid_TPPProgramPathwayDescriptor]
            FROM [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

        UPDATE [t_extension].[UniversitySnapshotRecord]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
            AND [EffectiveBeginDate] < @pBeginDate;

        INSERT INTO [t_extension].[UniversitySnapshotRecord]
        (
            [SnapshotId]
            , [tid_University]
            , [EffectiveBeginDate]
            , [EffectiveEndDate]
            , [Id]
        )
        SELECT @SnapshotId
            , [tid_University]
            , @pBeginDate
            , @pEndDate
            , @Id
        FROM [t_extension].[UniversitySnapshotRecord]
        WHERE [tid_University] IN
        (
            SELECT [tid_University]
            FROM [t_extension].[UniversitySnapshotRecord]
            WHERE [SnapshotId] = @ExistingSnapshotId
        )
            AND [SnapshotId] = @ExistingSnapshotId;

    COMMIT TRANSACTION
END;
GO

/****** PROCEDURE: [tods].[usp_CreateSnapshotMetadata] ******/

IF OBJECT_ID('[tods].[usp_CreateSnapshotMetadata]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_CreateSnapshotMetadata];
GO

CREATE PROCEDURE [tods].[usp_CreateSnapshotMetadata]
    @pSnapshotCode NVARCHAR(50)
    , @pSnapshotName NVARCHAR(1024)
    , @pDescription NVARCHAR(1024) = NULL
    , @pSnapshotDate DATE
    , @pBeginDate DATE
    , @pEndDate DATE = NULL
    , @pId UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @Message NVARCHAR(2048);

    SELECT @PartitionYearId =
    COALESCE
    (
        (SELECT PartitionYearConfigId FROM [tods].[PartitionYearConfig] WHERE BeginDate <= @pSnapshotDate AND @pSnapshotDate <= EndDate)
        , (SELECT MIN(PartitionYearConfigId) FROM [tods].[PartitionYearConfig])
        , (CAST(YEAR(@pSnapshotDate) AS SMALLINT))
    );

    BEGIN TRY
        BEGIN TRANSACTION
            -- ERROR CONDITIONS

            -- snapshot code includes invalid characters
            IF (@pSnapshotCode LIKE '%[^-A-Za-z0-9_()]%')
            BEGIN
                SET @Message = FORMATMESSAGE(50002, @pSnapshotCode);
                THROW 50002, @Message, 1;
            END;

            -- snapshot code matches existing one in tods.snapshotCode table
            IF EXISTS
            (
                SELECT [Code]
                FROM [tods].[SnapshotCode]
                WHERE [Code] = @pSnapshotCode
                GROUP BY [Code]
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50003, @pSnapshotCode);
                THROW 50003, @Message, 1;
            END;

            -- snapshot name matches existing one in tods.snapshot table
            IF EXISTS
            (
                SELECT [SnapshotName]
                FROM [tods].[Snapshot]
                WHERE [SnapshotName] = @pSnapshotName
                GROUP BY [SnapshotName]
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50004, @pSnapshotName);
                THROW 50004, @Message, 1;
            END;

            -- snapshot date is before begin date
            IF @pSnapshotDate < @pBeginDate
            BEGIN
                SET @Message = FORMATMESSAGE(50005, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50005, @Message, 1;
            END;

            -- snapshot date is on or after end date
            IF @pSnapshotDate >= @pEndDate
            BEGIN
                SET @Message = FORMATMESSAGE(50006, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
                THROW 50006, @Message, 1;
            END;

            -- begin date is in the future
            IF @pBeginDate > GETDATE()
            BEGIN
                SET @Message = FORMATMESSAGE(50007, CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50007, @Message, 1;
            END;

            -- begin date overlaps another snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] <= @pBeginDate
                AND @pBeginDate < COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50008, CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50008, @Message, 1;
            END;

            -- end date is before begin date
            IF @pBeginDate >= @pEndDate
            BEGIN
                SET @Message = FORMATMESSAGE(50009, CAST(@pEndDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                THROW 50009, @Message, 1;
            END;

            -- end date overlaps other snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE @pEndDate > [EffectiveBeginDate]
                AND
                (
                    @pEndDate <= COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                    OR
                    (
                        @pBegindate < [EffectiveBeginDate]
                        AND [EffectiveEndDate] IS NULL AND @pEndDate IS NULL
                    )
                )
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
                THROW 50010, @Message, 1;
            END;

            -- begin date and end date enclose another snapshot
            IF @pEndDate IS NOT NULL AND EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
                AND @pEndDate > COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50029, CAST(@pBeginDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
                THROW 50029, @Message, 1;
            END;

            IF @pEndDate IS NULL AND EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
            )
            SET @pEndDate =
            (
                SELECT MIN([EffectiveBeginDate])
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
            );

            UPDATE [tods].[Snapshot]
            SET [EffectiveEndDate] = @pBeginDate
            WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;


            UPDATE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AidTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AnonymizedStudentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ApplicantSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CourseStudentFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ExternalCourseTranscriptSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ExternalEducationOrganizationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[LevelTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[PerformanceMeasureSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[PerformanceMeasureFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[PreviousCareerDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ProspectSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[RecruitmentEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[RubricSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[RubricLevelSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[RubricLevelResponseSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[RubricLevelResponseFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[RubricTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SalaryTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SchoolStatusDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SectionStudentFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffFieldworkExperienceSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SurveySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SurveyQuestionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SurveyQuestionResponseSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SurveyResponseSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SurveySectionSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[SurveySectionResponseRatingSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherPreparationProviderSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[ThemeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;

            UPDATE [t_extension].[UniversitySnapshotRecord]
                SET [EffectiveEndDate] = @pBeginDate
                WHERE [EffectiveEndDate] IS NULL
                AND [EffectiveBeginDate] < @pBeginDate;


            INSERT INTO [tods].[Snapshot]
                (
                    [SnapshotName]
                    , [Description]
                    , [SnapshotDate]
                    , [EffectiveBeginDate]
                    , [EffectiveEndDate]
                    , [IsLockedForProcessing]
                    , [IsLocked]
                    , [t_PartitionYearId]
                )
            VALUES
                (
                    @pSnapshotName
                    , @pDescription
                    , @pSnapshotDate
                    , @pBeginDate
                    , @pEndDate
                    , 0
                    , 0
                    , @PartitionYearId
                );

            SET @SnapshotId = SCOPE_IDENTITY();

            SET @pId =
            (
                SELECT [Id]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );

            INSERT INTO [tods].[SnapshotCode]
            (
                [SnapshotId]
                , [Code]
                , [t_PartitionYearId]
            )
            VALUES
            (
                @SnapshotId
                , @pSnapshotCode
                , @PartitionYearId
            );

            -- Clear any warnings about no current snapshot if we have a current snapshot now
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE EffectiveEndDate IS NULL
            )
            DELETE FROM [tods].[AuditLog] WHERE ErrorNumber = 80001;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
        BEGIN
            ROLLBACK TRANSACTION;
        END;

        BEGIN TRANSACTION
            INSERT INTO [tods].[AuditLog]
            (
                ErrorNumber
                , ErrorMessage
                , ErrorSeverity
                , SqlErrorSeverity
                , ErrorState
                , ErrorLine
                , ErrorSproc
                , SnapshotId
                , SnapshotCode
            )
            SELECT
                (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                , ERROR_MESSAGE()
                , 'ERROR'
                , ERROR_SEVERITY()
                , CAST(ERROR_STATE() AS VARCHAR(10))
                , CAST(ERROR_LINE() AS VARCHAR(10))
                , @SprocName
                , @SnapshotId
                , @pSnapshotCode
        COMMIT TRANSACTION;
        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_LoadSnapshotData] ******/

IF OBJECT_ID('[tods].[usp_LoadSnapshotData]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_LoadSnapshotData];
GO

CREATE PROCEDURE [tods].[usp_LoadSnapshotData]
    @pId UNIQUEIDENTIFIER
    , @pDatabase NVARCHAR(128) = NULL
    , @pBypassSqlServerSnapshot BIT = 0
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @SnapshotDate DATE;
    DECLARE @BeginDate DATE;
    DECLARE @EndDate DATE;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @DatabaseName NVARCHAR(128);      -- source database name
    DECLARE @DbSSDbName NVARCHAR(128);        -- this is the one to pass down to sprocs - naming convention [database name]_dbss1800;
    DECLARE @SqlDBSSName NVARCHAR(128);       -- system name of database to snapshot
    DECLARE @DbSSFileName NVARCHAR(150);      -- naming convention: [database name]_data_1800.ss
    DECLARE @DbSSDataDirectory NVARCHAR(500); -- SQL Server Data directory
    DECLARE @DbSSFilePath NVARCHAR(500);      -- SQL Server Data directory + dBSSFileName
    DECLARE @Sql NVARCHAR(4000);
    DECLARE @NeedToResetOnError BIT = 0;      -- to indicate if need to reset IsLockedForProcessing on Error
    DECLARE @Message NVARCHAR(2048);

    SET @DatabaseName = COALESCE(@pDatabase, DB_NAME());
    SET @DbSSDbName = N'Ods_Snapshot';

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

            -- there is currently a snapshot load in progress
            IF EXISTS
            (
                SELECT * FROM sys.databases
                WHERE name = @DbSSDbName
                AND source_database_id IS NOT NULL
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50028);
                THROW 50028, @Message, 1;
            END;

            -- target snapshot metadata record does not exist
            IF @SnapshotId IS NULL
            BEGIN
                SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                THROW 50015, @Message, 1;
            END;

            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50016, CAST(@pId AS NVARCHAR(36)));
                THROW 50016, @Message, 1;
            END;

            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50017, CAST(@pId AS NVARCHAR(36)));
                THROW 50017, @Message, 1;
            END;

            -- check if Status is NULL
            IF '' <>
            (
                SELECT ISNULL([Status], '')
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
            BEGIN
                SET @Message = FORMATMESSAGE(50018, CAST(@pId AS NVARCHAR(36)));
                THROW 50018, @Message, 1;
            END;

            SET @NeedToResetOnError = 1;

            UPDATE [tods].[Snapshot]
                SET [LoadStartTime] = CURRENT_TIMESTAMP,
                    [IsLockedForProcessing] = 1
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION

        -- ************************************
        -- CREATE SQL SERVER SNAPSHOT OF SOURCE
        -- ************************************
        IF (@pBypassSqlServerSnapshot = 0)
        BEGIN
            SET @SqlDBSSName = (
                                    SELECT  F.[name] AS [LogicalFileName]
                                    FROM [sys].[sysdatabases] D
                                    INNER JOIN [sys].[sysaltfiles] F ON F.[dbid] = D.[dbid]
                                    WHERE F.[fileid] = 1
                                    AND D.[name] = @DatabaseName
                               );
            SET @DbSSFileName = N'Ods_Snapshot.sp';
            SET @DbSSDataDirectory = (
                                          SELECT SUBSTRING(M.[physical_name], 1, CHARINDEX(N'master.mdf', LOWER(M.[physical_name])) - 1) AS DataFileLocation
                                          FROM [master].[sys].[master_files] AS M
                                          WHERE M.[database_id] = 1 AND M.[file_id] = 1
                                     );
            SET @DbSSFilePath = @DbSSDataDirectory + @DbSSFileName

            SET @SQL = 'CREATE DATABASE [' + @DbSSDbName + '] ON' + CHAR(10)
            + '(NAME = ''' + @SqlDBSSName +  ''', FILENAME = ' + '''' + @DbSSFilePath + @DbSSFileName + '''' + ')' +
            + ' AS SNAPSHOT OF [' + @DatabaseName + ']'

            EXEC (@Sql);
        END
        ELSE
        BEGIN
            SET @Sql = N'
            USE [' + @DatabaseName + '];
            BACKUP DATABASE [' + @DatabaseName + '] TO DISK = N''Ods_Snapshot.bak'' WITH COPY_ONLY, FORMAT;
            DECLARE @DataFile NVARCHAR(128);
            DECLARE @LogFile NVARCHAR(128);
            DECLARE @DataPath NVARCHAR(MAX);
            DECLARE @LogPath NVARCHAR(MAX);
            SET @DataFile = FILE_NAME(1);
            SET @LogFile = FILE_NAME(2);
            SET @DataPath = CONVERT(SYSNAME, SERVERPROPERTY(''InstanceDefaultDataPath'')) + N''Ods_Snapshot.mdf'';
            SET @LogPath = CONVERT(SYSNAME, SERVERPROPERTY(''InstanceDefaultLogPath'')) + N''Ods_Snapshot.ldf'';
            RESTORE DATABASE [Ods_Snapshot] FROM DISK = N''Ods_Snapshot.bak'' WITH RECOVERY, REPLACE, MOVE @DataFile TO @DataPath, MOVE @LogFile TO @LogPath;';

            EXEC (@Sql);
        END;

        BEGIN TRANSACTION
            SELECT @BeginDate =
            (
                SELECT [EffectiveBeginDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @EndDate =
            (
                SELECT [EffectiveEndDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );
            SELECT @SnapshotDate =
            (
                SELECT [SnapshotDate]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            );

            EXEC [tods].[usp_DerivePartitionYearId] @SnapshotId, @SnapshotDate, @pPartitionYearId = @PartitionYearId OUTPUT;

            --for each top level entity

            EXEC [t_extension].[usp_dbAbsenceEventCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAidTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentAssessment] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentCourseAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbAnonymizedStudentSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbApplicant] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbBackgroundCheckStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbBackgroundCheckTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbBoardCertificationTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCertificationExamTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseCourseTranscriptFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAcademicRecordFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentAssessmentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseStudentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveyQuestionResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveyResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbCourseSurveySectionResponseRatingFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationCourseTranscriptFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAcademicRecordFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentAssessmentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationStudentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyQuestionResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveyResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEducationOrganizationSurveySectionResponseRatingFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbEnglishLanguageExamDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbExternalCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbExternalEducationOrganization] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbExternalStudentAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbFieldworkTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbLevelOfDegreeAwardedDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbLevelTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPerformanceMeasureTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPopulationCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPopulationSubCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbPreviousCareerDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProfessionalDevelopmentEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProfessionalDevelopmentOfferedByDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProgramGatewayDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProspect] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbProspectProfessionalDevelopmentEventAttendance] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRecruitmentEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubric] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevel] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevelResponse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricLevelResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbRubricTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSalaryTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSchoolStatusDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSchoolStudentGrowthMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionCourseTranscriptFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAcademicRecordFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentAssessmentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionStudentFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveyQuestionResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveyResponseFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSectionSurveySectionResponseRatingFacts] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffFieldworkAbsenceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffFieldworkExperience] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffProfessionalDevelopmentEventAttendance] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasureCourseAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasureEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffStudentGrowthMeasureSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStaffTeacherPreparationProviderProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbStudentGrowthTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurvey] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyCategoryDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestion] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyQuestionResponse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveyResponse] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveySection] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbSurveySectionResponseRating] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidate] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateAcademicRecord] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCharacteristicDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateCourseTranscript] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateFieldworkAbsenceEvent] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateFieldworkExperience] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateProfessionalDevelopmentEventAttendance] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStaffAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasure] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureCourseAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateStudentGrowthMeasureSectionAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherCandidateTeacherPreparationProviderProgramAssociation] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProgramTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProvider] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTeacherPreparationProviderProgram] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbThemeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTPPDegreeTypeDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbTPPProgramPathwayDescriptor] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            EXEC [t_extension].[usp_dbUniversity] @SnapshotId, @BeginDate, @EndDate, @PartitionYearId;

            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [Status] = 'ACTIVE',
                    [LoadEndTime] = CURRENT_TIMESTAMP,
                    [LastModifiedDate] = CURRENT_TIMESTAMP,
                    [t_PartitionYearId] = @PartitionYearId
                WHERE [SnapshotId] = @SnapshotId;
        COMMIT TRANSACTION

        -- ************************************
        -- CLEAN UP SQL Database Snapshot
        -- ************************************
        IF EXISTS
        (
            SELECT * FROM sys.databases
            WHERE name = @DbSSDbName
        )
        BEGIN
            SET @SQL = 'DROP DATABASE [' + @DbSSDbName + ']';
            EXEC (@SQL);
        END;
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        EXEC [tods].[usp_LogSnapshotError] @SnapshotId, @SprocName;

        -- CLEAN UP SQL SERVER DB SNAPSHOT IF IT EXITS
        IF EXISTS
        (
            SELECT * FROM sys.databases
            WHERE name = @DbSSDbName
        )
        BEGIN
            SET @SQL = 'DROP DATABASE [' + @DbSSDbName + ']';
            EXEC (@SQL);
        END;

        IF (@NeedToResetOnError = 1)
        BEGIN
            UPDATE [tods].[Snapshot]
                SET [IsLockedForProcessing] = 0,
                    [LastModifiedDate] = CURRENT_TIMESTAMP
                WHERE [SnapshotId] = @SnapshotId;
        END;
        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_DeleteSnapshotRecord] ******/

IF OBJECT_ID('[tods].[usp_DeleteSnapshotRecord]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_DeleteSnapshotRecord];
GO

CREATE PROCEDURE [tods].[usp_DeleteSnapshotRecord]
    @pId UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @SnapshotId INT;
    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @Message NVARCHAR(2048);

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

            -- ERROR CONDITIONS

            -- snapshot id does not exist
            IF @SnapshotId IS NULL BEGIN
                SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                THROW 50015, @Message, 1;
            END;

            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            ) BEGIN
                SET @Message = FORMATMESSAGE(50025, CAST(@pId AS NVARCHAR(36)));
                THROW 50025, @Message, 1;
            END;

            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            ) BEGIN
                SET @Message = FORMATMESSAGE(50026, CAST(@pId AS NVARCHAR(36)));
                THROW 50026, @Message, 1;
            END;


            DELETE FROM [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AidTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AnonymizedStudentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ApplicantSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CourseStudentFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ExternalCourseTranscriptSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ExternalEducationOrganizationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[LevelTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[PerformanceMeasureSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[PerformanceMeasureFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[PreviousCareerDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ProspectSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[RecruitmentEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[RubricSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[RubricLevelSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[RubricLevelResponseSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[RubricLevelResponseFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[RubricTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SalaryTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SchoolStatusDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SectionStudentFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffFieldworkExperienceSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SurveySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SurveyQuestionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SurveyQuestionResponseSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SurveyResponseSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SurveySectionSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[SurveySectionResponseRatingSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherPreparationProviderSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[ThemeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;

            DELETE FROM [t_extension].[UniversitySnapshotRecord]
                WHERE [SnapshotId] = @SnapshotId;


            UPDATE [tods].[Snapshot] SET Status = NULL WHERE SnapshotId = @SnapshotId;
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        BEGIN TRANSACTION
            INSERT INTO [tods].[AuditLog]
            (
                ErrorNumber
                , ErrorMessage
                , ErrorSeverity
                , SqlErrorSeverity
                , ErrorState
                , ErrorLine
                , ErrorSproc
                , SnapshotId
            )
            SELECT
                (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                , ERROR_MESSAGE()
                , 'ERROR'
                , ERROR_SEVERITY()
                , CAST(ERROR_STATE() AS VARCHAR(10))
                , CAST(ERROR_LINE() AS VARCHAR(10))
                , @SprocName
                , @SnapshotId
        COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_DeleteOrphanedSnapshotData] ******/

IF OBJECT_ID('[tods].[usp_DeleteOrphanedSnapshotData]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_DeleteOrphanedSnapshotData];
GO

CREATE PROCEDURE [tods].[usp_DeleteOrphanedSnapshotData]
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);

    BEGIN TRY
        BEGIN TRANSACTION


            DELETE A FROM [t_extension].[AbsenceEventCategoryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AbsenceEventCategoryDescriptor]
                FROM [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord] B
                WHERE A.[tid_AbsenceEventCategoryDescriptor] = B.[tid_AbsenceEventCategoryDescriptor]
            );


            DELETE A FROM [t_extension].[AidTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AidTypeDescriptor]
                FROM [t_extension].[AidTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_AidTypeDescriptor] = B.[tid_AidTypeDescriptor]
            );


            DELETE A FROM [t_extension].[AnonymizedStudent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AnonymizedStudent]
                FROM [t_extension].[AnonymizedStudentSnapshotRecord] B
                WHERE A.[tid_AnonymizedStudent] = B.[tid_AnonymizedStudent]
            );


            DELETE A FROM [t_extension].[AnonymizedStudentAcademicRecord] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AnonymizedStudentAcademicRecord]
                FROM [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord] B
                WHERE A.[tid_AnonymizedStudentAcademicRecord] = B.[tid_AnonymizedStudentAcademicRecord]
            );


            DELETE A FROM [t_extension].[AnonymizedStudentAssessment] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AnonymizedStudentAssessment]
                FROM [t_extension].[AnonymizedStudentAssessmentSnapshotRecord] B
                WHERE A.[tid_AnonymizedStudentAssessment] = B.[tid_AnonymizedStudentAssessment]
            );


            DELETE A FROM [t_extension].[AnonymizedStudentCourseAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AnonymizedStudentCourseAssociation]
                FROM [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord] B
                WHERE A.[tid_AnonymizedStudentCourseAssociation] = B.[tid_AnonymizedStudentCourseAssociation]
            );


            DELETE A FROM [t_extension].[AnonymizedStudentCourseTranscript] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AnonymizedStudentCourseTranscript]
                FROM [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord] B
                WHERE A.[tid_AnonymizedStudentCourseTranscript] = B.[tid_AnonymizedStudentCourseTranscript]
            );


            DELETE A FROM [t_extension].[AnonymizedStudentEducationOrganizationAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AnonymizedStudentEducationOrganizationAssociation]
                FROM [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord] B
                WHERE A.[tid_AnonymizedStudentEducationOrganizationAssociation] = B.[tid_AnonymizedStudentEducationOrganizationAssociation]
            );


            DELETE A FROM [t_extension].[AnonymizedStudentSectionAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_AnonymizedStudentSectionAssociation]
                FROM [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord] B
                WHERE A.[tid_AnonymizedStudentSectionAssociation] = B.[tid_AnonymizedStudentSectionAssociation]
            );


            DELETE A FROM [t_extension].[Applicant] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Applicant]
                FROM [t_extension].[ApplicantSnapshotRecord] B
                WHERE A.[tid_Applicant] = B.[tid_Applicant]
            );


            DELETE A FROM [t_extension].[BackgroundCheckStatusDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_BackgroundCheckStatusDescriptor]
                FROM [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord] B
                WHERE A.[tid_BackgroundCheckStatusDescriptor] = B.[tid_BackgroundCheckStatusDescriptor]
            );


            DELETE A FROM [t_extension].[BackgroundCheckTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_BackgroundCheckTypeDescriptor]
                FROM [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_BackgroundCheckTypeDescriptor] = B.[tid_BackgroundCheckTypeDescriptor]
            );


            DELETE A FROM [t_extension].[BoardCertificationTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_BoardCertificationTypeDescriptor]
                FROM [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_BoardCertificationTypeDescriptor] = B.[tid_BoardCertificationTypeDescriptor]
            );


            DELETE A FROM [t_extension].[CertificationExamTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CertificationExamTypeDescriptor]
                FROM [t_extension].[CertificationExamTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_CertificationExamTypeDescriptor] = B.[tid_CertificationExamTypeDescriptor]
            );


            DELETE A FROM [t_extension].[CourseCourseTranscriptFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseCourseTranscriptFacts]
                FROM [t_extension].[CourseCourseTranscriptFactsSnapshotRecord] B
                WHERE A.[tid_CourseCourseTranscriptFacts] = B.[tid_CourseCourseTranscriptFacts]
            );


            DELETE A FROM [t_extension].[CourseStudentAcademicRecordFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseStudentAcademicRecordFacts]
                FROM [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord] B
                WHERE A.[tid_CourseStudentAcademicRecordFacts] = B.[tid_CourseStudentAcademicRecordFacts]
            );


            DELETE A FROM [t_extension].[CourseStudentAssessmentFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseStudentAssessmentFacts]
                FROM [t_extension].[CourseStudentAssessmentFactsSnapshotRecord] B
                WHERE A.[tid_CourseStudentAssessmentFacts] = B.[tid_CourseStudentAssessmentFacts]
            );


            DELETE A FROM [t_extension].[CourseStudentFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseStudentFacts]
                FROM [t_extension].[CourseStudentFactsSnapshotRecord] B
                WHERE A.[tid_CourseStudentFacts] = B.[tid_CourseStudentFacts]
            );


            DELETE A FROM [t_extension].[CourseSurveyQuestionResponseFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseSurveyQuestionResponseFacts]
                FROM [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord] B
                WHERE A.[tid_CourseSurveyQuestionResponseFacts] = B.[tid_CourseSurveyQuestionResponseFacts]
            );


            DELETE A FROM [t_extension].[CourseSurveyResponseFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseSurveyResponseFacts]
                FROM [t_extension].[CourseSurveyResponseFactsSnapshotRecord] B
                WHERE A.[tid_CourseSurveyResponseFacts] = B.[tid_CourseSurveyResponseFacts]
            );


            DELETE A FROM [t_extension].[CourseSurveySectionResponseRatingFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_CourseSurveySectionResponseRatingFacts]
                FROM [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord] B
                WHERE A.[tid_CourseSurveySectionResponseRatingFacts] = B.[tid_CourseSurveySectionResponseRatingFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationCourseTranscriptFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationCourseTranscriptFacts]
                FROM [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationCourseTranscriptFacts] = B.[tid_EducationOrganizationCourseTranscriptFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationFacts]
                FROM [t_extension].[EducationOrganizationFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationFacts] = B.[tid_EducationOrganizationFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationStudentAcademicRecordFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationStudentAcademicRecordFacts]
                FROM [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationStudentAcademicRecordFacts] = B.[tid_EducationOrganizationStudentAcademicRecordFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationStudentAssessmentFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationStudentAssessmentFacts]
                FROM [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationStudentAssessmentFacts] = B.[tid_EducationOrganizationStudentAssessmentFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationStudentFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationStudentFacts]
                FROM [t_extension].[EducationOrganizationStudentFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationStudentFacts] = B.[tid_EducationOrganizationStudentFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationSurveyQuestionResponseFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationSurveyQuestionResponseFacts]
                FROM [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationSurveyQuestionResponseFacts] = B.[tid_EducationOrganizationSurveyQuestionResponseFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationSurveyResponseFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationSurveyResponseFacts]
                FROM [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationSurveyResponseFacts] = B.[tid_EducationOrganizationSurveyResponseFacts]
            );


            DELETE A FROM [t_extension].[EducationOrganizationSurveySectionResponseRatingFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EducationOrganizationSurveySectionResponseRatingFacts]
                FROM [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord] B
                WHERE A.[tid_EducationOrganizationSurveySectionResponseRatingFacts] = B.[tid_EducationOrganizationSurveySectionResponseRatingFacts]
            );


            DELETE A FROM [t_extension].[EnglishLanguageExamDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_EnglishLanguageExamDescriptor]
                FROM [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord] B
                WHERE A.[tid_EnglishLanguageExamDescriptor] = B.[tid_EnglishLanguageExamDescriptor]
            );


            DELETE A FROM [t_extension].[ExternalCourseTranscript] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ExternalCourseTranscript]
                FROM [t_extension].[ExternalCourseTranscriptSnapshotRecord] B
                WHERE A.[tid_ExternalCourseTranscript] = B.[tid_ExternalCourseTranscript]
            );


            DELETE A FROM [t_extension].[ExternalEducationOrganization] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ExternalEducationOrganization]
                FROM [t_extension].[ExternalEducationOrganizationSnapshotRecord] B
                WHERE A.[tid_ExternalEducationOrganization] = B.[tid_ExternalEducationOrganization]
            );


            DELETE A FROM [t_extension].[ExternalStudentAcademicRecord] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ExternalStudentAcademicRecord]
                FROM [t_extension].[ExternalStudentAcademicRecordSnapshotRecord] B
                WHERE A.[tid_ExternalStudentAcademicRecord] = B.[tid_ExternalStudentAcademicRecord]
            );


            DELETE A FROM [t_extension].[FieldworkTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_FieldworkTypeDescriptor]
                FROM [t_extension].[FieldworkTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_FieldworkTypeDescriptor] = B.[tid_FieldworkTypeDescriptor]
            );


            DELETE A FROM [t_extension].[LevelOfDegreeAwardedDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LevelOfDegreeAwardedDescriptor]
                FROM [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord] B
                WHERE A.[tid_LevelOfDegreeAwardedDescriptor] = B.[tid_LevelOfDegreeAwardedDescriptor]
            );


            DELETE A FROM [t_extension].[LevelTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_LevelTypeDescriptor]
                FROM [t_extension].[LevelTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_LevelTypeDescriptor] = B.[tid_LevelTypeDescriptor]
            );


            DELETE A FROM [t_extension].[PerformanceMeasure] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PerformanceMeasure]
                FROM [t_extension].[PerformanceMeasureSnapshotRecord] B
                WHERE A.[tid_PerformanceMeasure] = B.[tid_PerformanceMeasure]
            );


            DELETE A FROM [t_extension].[PerformanceMeasureFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PerformanceMeasureFacts]
                FROM [t_extension].[PerformanceMeasureFactsSnapshotRecord] B
                WHERE A.[tid_PerformanceMeasureFacts] = B.[tid_PerformanceMeasureFacts]
            );


            DELETE A FROM [t_extension].[PerformanceMeasureTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PerformanceMeasureTypeDescriptor]
                FROM [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_PerformanceMeasureTypeDescriptor] = B.[tid_PerformanceMeasureTypeDescriptor]
            );


            DELETE A FROM [t_extension].[PopulationCategoryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PopulationCategoryDescriptor]
                FROM [t_extension].[PopulationCategoryDescriptorSnapshotRecord] B
                WHERE A.[tid_PopulationCategoryDescriptor] = B.[tid_PopulationCategoryDescriptor]
            );


            DELETE A FROM [t_extension].[PopulationSubCategoryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PopulationSubCategoryDescriptor]
                FROM [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord] B
                WHERE A.[tid_PopulationSubCategoryDescriptor] = B.[tid_PopulationSubCategoryDescriptor]
            );


            DELETE A FROM [t_extension].[PreviousCareerDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_PreviousCareerDescriptor]
                FROM [t_extension].[PreviousCareerDescriptorSnapshotRecord] B
                WHERE A.[tid_PreviousCareerDescriptor] = B.[tid_PreviousCareerDescriptor]
            );


            DELETE A FROM [t_extension].[ProfessionalDevelopmentEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ProfessionalDevelopmentEvent]
                FROM [t_extension].[ProfessionalDevelopmentEventSnapshotRecord] B
                WHERE A.[tid_ProfessionalDevelopmentEvent] = B.[tid_ProfessionalDevelopmentEvent]
            );


            DELETE A FROM [t_extension].[ProfessionalDevelopmentOfferedByDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ProfessionalDevelopmentOfferedByDescriptor]
                FROM [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord] B
                WHERE A.[tid_ProfessionalDevelopmentOfferedByDescriptor] = B.[tid_ProfessionalDevelopmentOfferedByDescriptor]
            );


            DELETE A FROM [t_extension].[ProgramGatewayDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ProgramGatewayDescriptor]
                FROM [t_extension].[ProgramGatewayDescriptorSnapshotRecord] B
                WHERE A.[tid_ProgramGatewayDescriptor] = B.[tid_ProgramGatewayDescriptor]
            );


            DELETE A FROM [t_extension].[Prospect] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Prospect]
                FROM [t_extension].[ProspectSnapshotRecord] B
                WHERE A.[tid_Prospect] = B.[tid_Prospect]
            );


            DELETE A FROM [t_extension].[ProspectProfessionalDevelopmentEventAttendance] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ProspectProfessionalDevelopmentEventAttendance]
                FROM [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord] B
                WHERE A.[tid_ProspectProfessionalDevelopmentEventAttendance] = B.[tid_ProspectProfessionalDevelopmentEventAttendance]
            );


            DELETE A FROM [t_extension].[RecruitmentEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_RecruitmentEvent]
                FROM [t_extension].[RecruitmentEventSnapshotRecord] B
                WHERE A.[tid_RecruitmentEvent] = B.[tid_RecruitmentEvent]
            );


            DELETE A FROM [t_extension].[Rubric] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Rubric]
                FROM [t_extension].[RubricSnapshotRecord] B
                WHERE A.[tid_Rubric] = B.[tid_Rubric]
            );


            DELETE A FROM [t_extension].[RubricLevel] A
            WHERE NOT EXISTS
            (
                SELECT [tid_RubricLevel]
                FROM [t_extension].[RubricLevelSnapshotRecord] B
                WHERE A.[tid_RubricLevel] = B.[tid_RubricLevel]
            );


            DELETE A FROM [t_extension].[RubricLevelResponse] A
            WHERE NOT EXISTS
            (
                SELECT [tid_RubricLevelResponse]
                FROM [t_extension].[RubricLevelResponseSnapshotRecord] B
                WHERE A.[tid_RubricLevelResponse] = B.[tid_RubricLevelResponse]
            );


            DELETE A FROM [t_extension].[RubricLevelResponseFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_RubricLevelResponseFacts]
                FROM [t_extension].[RubricLevelResponseFactsSnapshotRecord] B
                WHERE A.[tid_RubricLevelResponseFacts] = B.[tid_RubricLevelResponseFacts]
            );


            DELETE A FROM [t_extension].[RubricTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_RubricTypeDescriptor]
                FROM [t_extension].[RubricTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_RubricTypeDescriptor] = B.[tid_RubricTypeDescriptor]
            );


            DELETE A FROM [t_extension].[SalaryTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SalaryTypeDescriptor]
                FROM [t_extension].[SalaryTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_SalaryTypeDescriptor] = B.[tid_SalaryTypeDescriptor]
            );


            DELETE A FROM [t_extension].[SchoolStatusDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SchoolStatusDescriptor]
                FROM [t_extension].[SchoolStatusDescriptorSnapshotRecord] B
                WHERE A.[tid_SchoolStatusDescriptor] = B.[tid_SchoolStatusDescriptor]
            );


            DELETE A FROM [t_extension].[SchoolStudentGrowthMeasure] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SchoolStudentGrowthMeasure]
                FROM [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord] B
                WHERE A.[tid_SchoolStudentGrowthMeasure] = B.[tid_SchoolStudentGrowthMeasure]
            );


            DELETE A FROM [t_extension].[SectionCourseTranscriptFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionCourseTranscriptFacts]
                FROM [t_extension].[SectionCourseTranscriptFactsSnapshotRecord] B
                WHERE A.[tid_SectionCourseTranscriptFacts] = B.[tid_SectionCourseTranscriptFacts]
            );


            DELETE A FROM [t_extension].[SectionStudentAcademicRecordFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionStudentAcademicRecordFacts]
                FROM [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord] B
                WHERE A.[tid_SectionStudentAcademicRecordFacts] = B.[tid_SectionStudentAcademicRecordFacts]
            );


            DELETE A FROM [t_extension].[SectionStudentAssessmentFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionStudentAssessmentFacts]
                FROM [t_extension].[SectionStudentAssessmentFactsSnapshotRecord] B
                WHERE A.[tid_SectionStudentAssessmentFacts] = B.[tid_SectionStudentAssessmentFacts]
            );


            DELETE A FROM [t_extension].[SectionStudentFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionStudentFacts]
                FROM [t_extension].[SectionStudentFactsSnapshotRecord] B
                WHERE A.[tid_SectionStudentFacts] = B.[tid_SectionStudentFacts]
            );


            DELETE A FROM [t_extension].[SectionSurveyQuestionResponseFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionSurveyQuestionResponseFacts]
                FROM [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord] B
                WHERE A.[tid_SectionSurveyQuestionResponseFacts] = B.[tid_SectionSurveyQuestionResponseFacts]
            );


            DELETE A FROM [t_extension].[SectionSurveyResponseFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionSurveyResponseFacts]
                FROM [t_extension].[SectionSurveyResponseFactsSnapshotRecord] B
                WHERE A.[tid_SectionSurveyResponseFacts] = B.[tid_SectionSurveyResponseFacts]
            );


            DELETE A FROM [t_extension].[SectionSurveySectionResponseRatingFacts] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SectionSurveySectionResponseRatingFacts]
                FROM [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord] B
                WHERE A.[tid_SectionSurveySectionResponseRatingFacts] = B.[tid_SectionSurveySectionResponseRatingFacts]
            );


            DELETE A FROM [t_extension].[StaffFieldworkAbsenceEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffFieldworkAbsenceEvent]
                FROM [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord] B
                WHERE A.[tid_StaffFieldworkAbsenceEvent] = B.[tid_StaffFieldworkAbsenceEvent]
            );


            DELETE A FROM [t_extension].[StaffFieldworkExperience] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffFieldworkExperience]
                FROM [t_extension].[StaffFieldworkExperienceSnapshotRecord] B
                WHERE A.[tid_StaffFieldworkExperience] = B.[tid_StaffFieldworkExperience]
            );


            DELETE A FROM [t_extension].[StaffProfessionalDevelopmentEventAttendance] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffProfessionalDevelopmentEventAttendance]
                FROM [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord] B
                WHERE A.[tid_StaffProfessionalDevelopmentEventAttendance] = B.[tid_StaffProfessionalDevelopmentEventAttendance]
            );


            DELETE A FROM [t_extension].[StaffStudentGrowthMeasure] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffStudentGrowthMeasure]
                FROM [t_extension].[StaffStudentGrowthMeasureSnapshotRecord] B
                WHERE A.[tid_StaffStudentGrowthMeasure] = B.[tid_StaffStudentGrowthMeasure]
            );


            DELETE A FROM [t_extension].[StaffStudentGrowthMeasureCourseAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffStudentGrowthMeasureCourseAssociation]
                FROM [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord] B
                WHERE A.[tid_StaffStudentGrowthMeasureCourseAssociation] = B.[tid_StaffStudentGrowthMeasureCourseAssociation]
            );


            DELETE A FROM [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
                FROM [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] B
                WHERE A.[tid_StaffStudentGrowthMeasureEducationOrganizationAssociation] = B.[tid_StaffStudentGrowthMeasureEducationOrganizationAssociation]
            );


            DELETE A FROM [t_extension].[StaffStudentGrowthMeasureSectionAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffStudentGrowthMeasureSectionAssociation]
                FROM [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord] B
                WHERE A.[tid_StaffStudentGrowthMeasureSectionAssociation] = B.[tid_StaffStudentGrowthMeasureSectionAssociation]
            );


            DELETE A FROM [t_extension].[StaffTeacherPreparationProviderAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffTeacherPreparationProviderAssociation]
                FROM [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord] B
                WHERE A.[tid_StaffTeacherPreparationProviderAssociation] = B.[tid_StaffTeacherPreparationProviderAssociation]
            );


            DELETE A FROM [t_extension].[StaffTeacherPreparationProviderProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StaffTeacherPreparationProviderProgramAssociation]
                FROM [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord] B
                WHERE A.[tid_StaffTeacherPreparationProviderProgramAssociation] = B.[tid_StaffTeacherPreparationProviderProgramAssociation]
            );


            DELETE A FROM [t_extension].[StudentGrowthTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_StudentGrowthTypeDescriptor]
                FROM [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_StudentGrowthTypeDescriptor] = B.[tid_StudentGrowthTypeDescriptor]
            );


            DELETE A FROM [t_extension].[Survey] A
            WHERE NOT EXISTS
            (
                SELECT [tid_Survey]
                FROM [t_extension].[SurveySnapshotRecord] B
                WHERE A.[tid_Survey] = B.[tid_Survey]
            );


            DELETE A FROM [t_extension].[SurveyCategoryDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SurveyCategoryDescriptor]
                FROM [t_extension].[SurveyCategoryDescriptorSnapshotRecord] B
                WHERE A.[tid_SurveyCategoryDescriptor] = B.[tid_SurveyCategoryDescriptor]
            );


            DELETE A FROM [t_extension].[SurveyQuestion] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SurveyQuestion]
                FROM [t_extension].[SurveyQuestionSnapshotRecord] B
                WHERE A.[tid_SurveyQuestion] = B.[tid_SurveyQuestion]
            );


            DELETE A FROM [t_extension].[SurveyQuestionResponse] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SurveyQuestionResponse]
                FROM [t_extension].[SurveyQuestionResponseSnapshotRecord] B
                WHERE A.[tid_SurveyQuestionResponse] = B.[tid_SurveyQuestionResponse]
            );


            DELETE A FROM [t_extension].[SurveyResponse] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SurveyResponse]
                FROM [t_extension].[SurveyResponseSnapshotRecord] B
                WHERE A.[tid_SurveyResponse] = B.[tid_SurveyResponse]
            );


            DELETE A FROM [t_extension].[SurveySection] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SurveySection]
                FROM [t_extension].[SurveySectionSnapshotRecord] B
                WHERE A.[tid_SurveySection] = B.[tid_SurveySection]
            );


            DELETE A FROM [t_extension].[SurveySectionResponseRating] A
            WHERE NOT EXISTS
            (
                SELECT [tid_SurveySectionResponseRating]
                FROM [t_extension].[SurveySectionResponseRatingSnapshotRecord] B
                WHERE A.[tid_SurveySectionResponseRating] = B.[tid_SurveySectionResponseRating]
            );


            DELETE A FROM [t_extension].[TeacherCandidate] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidate]
                FROM [t_extension].[TeacherCandidateSnapshotRecord] B
                WHERE A.[tid_TeacherCandidate] = B.[tid_TeacherCandidate]
            );


            DELETE A FROM [t_extension].[TeacherCandidateAcademicRecord] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateAcademicRecord]
                FROM [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateAcademicRecord] = B.[tid_TeacherCandidateAcademicRecord]
            );


            DELETE A FROM [t_extension].[TeacherCandidateCharacteristicDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateCharacteristicDescriptor]
                FROM [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateCharacteristicDescriptor] = B.[tid_TeacherCandidateCharacteristicDescriptor]
            );


            DELETE A FROM [t_extension].[TeacherCandidateCourseTranscript] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateCourseTranscript]
                FROM [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateCourseTranscript] = B.[tid_TeacherCandidateCourseTranscript]
            );


            DELETE A FROM [t_extension].[TeacherCandidateFieldworkAbsenceEvent] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateFieldworkAbsenceEvent]
                FROM [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateFieldworkAbsenceEvent] = B.[tid_TeacherCandidateFieldworkAbsenceEvent]
            );


            DELETE A FROM [t_extension].[TeacherCandidateFieldworkExperience] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateFieldworkExperience]
                FROM [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateFieldworkExperience] = B.[tid_TeacherCandidateFieldworkExperience]
            );


            DELETE A FROM [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendance] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
                FROM [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateProfessionalDevelopmentEventAttendance] = B.[tid_TeacherCandidateProfessionalDevelopmentEventAttendance]
            );


            DELETE A FROM [t_extension].[TeacherCandidateStaffAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateStaffAssociation]
                FROM [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateStaffAssociation] = B.[tid_TeacherCandidateStaffAssociation]
            );


            DELETE A FROM [t_extension].[TeacherCandidateStudentGrowthMeasure] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateStudentGrowthMeasure]
                FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateStudentGrowthMeasure] = B.[tid_TeacherCandidateStudentGrowthMeasure]
            );


            DELETE A FROM [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
                FROM [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateStudentGrowthMeasureCourseAssociation] = B.[tid_TeacherCandidateStudentGrowthMeasureCourseAssociation]
            );


            DELETE A FROM [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
                FROM [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation] = B.[tid_TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation]
            );


            DELETE A FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
                FROM [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateStudentGrowthMeasureSectionAssociation] = B.[tid_TeacherCandidateStudentGrowthMeasureSectionAssociation]
            );


            DELETE A FROM [t_extension].[TeacherCandidateTeacherPreparationProviderAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateTeacherPreparationProviderAssociation]
                FROM [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateTeacherPreparationProviderAssociation] = B.[tid_TeacherCandidateTeacherPreparationProviderAssociation]
            );


            DELETE A FROM [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociation] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
                FROM [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord] B
                WHERE A.[tid_TeacherCandidateTeacherPreparationProviderProgramAssociation] = B.[tid_TeacherCandidateTeacherPreparationProviderProgramAssociation]
            );


            DELETE A FROM [t_extension].[TeacherPreparationProgramTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherPreparationProgramTypeDescriptor]
                FROM [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_TeacherPreparationProgramTypeDescriptor] = B.[tid_TeacherPreparationProgramTypeDescriptor]
            );


            DELETE A FROM [t_extension].[TeacherPreparationProvider] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherPreparationProvider]
                FROM [t_extension].[TeacherPreparationProviderSnapshotRecord] B
                WHERE A.[tid_TeacherPreparationProvider] = B.[tid_TeacherPreparationProvider]
            );


            DELETE A FROM [t_extension].[TeacherPreparationProviderProgram] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TeacherPreparationProviderProgram]
                FROM [t_extension].[TeacherPreparationProviderProgramSnapshotRecord] B
                WHERE A.[tid_TeacherPreparationProviderProgram] = B.[tid_TeacherPreparationProviderProgram]
            );


            DELETE A FROM [t_extension].[ThemeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_ThemeDescriptor]
                FROM [t_extension].[ThemeDescriptorSnapshotRecord] B
                WHERE A.[tid_ThemeDescriptor] = B.[tid_ThemeDescriptor]
            );


            DELETE A FROM [t_extension].[TPPDegreeTypeDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TPPDegreeTypeDescriptor]
                FROM [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord] B
                WHERE A.[tid_TPPDegreeTypeDescriptor] = B.[tid_TPPDegreeTypeDescriptor]
            );


            DELETE A FROM [t_extension].[TPPProgramPathwayDescriptor] A
            WHERE NOT EXISTS
            (
                SELECT [tid_TPPProgramPathwayDescriptor]
                FROM [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord] B
                WHERE A.[tid_TPPProgramPathwayDescriptor] = B.[tid_TPPProgramPathwayDescriptor]
            );


            DELETE A FROM [t_extension].[University] A
            WHERE NOT EXISTS
            (
                SELECT [tid_University]
                FROM [t_extension].[UniversitySnapshotRecord] B
                WHERE A.[tid_University] = B.[tid_University]
            );


        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

            BEGIN TRANSACTION
                INSERT INTO [tods].[AuditLog]
                (
                    ErrorNumber
                    , ErrorMessage
                    , ErrorSeverity
                    , SqlErrorSeverity
                    , ErrorState
                    , ErrorLine
                    , ErrorSproc
                )
                SELECT
                    (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                    , ERROR_MESSAGE()
                    , 'ERROR'
                    , ERROR_SEVERITY()
                    , CAST(ERROR_STATE() AS VARCHAR(10))
                    , CAST(ERROR_LINE() AS VARCHAR(10))
                    , COALESCE(ERROR_PROCEDURE(), 'error not within a sproc')
            COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO

/****** PROCEDURE: [tods].[usp_UpdateSnapshotMetadata] ******/

IF OBJECT_ID('[tods].[usp_UpdateSnapshotMetadata]', 'P') IS NOT NULL
    DROP PROCEDURE [tods].[usp_UpdateSnapshotMetadata];
GO

CREATE PROCEDURE [tods].[usp_UpdateSnapshotMetadata]
    @pId UNIQUEIDENTIFIER
    --, @pSnapshotCode NVARCHAR(50)
    , @pSnapshotName NVARCHAR(1024)
    , @pDescription NVARCHAR(1024) = NULL
    , @pSnapshotDate DATE
    , @pBeginDate DATE
    , @pEndDate DATE = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SprocName NVARCHAR(255) = OBJECT_NAME(@@PROCID);
    DECLARE @SnapshotId INT;
    DECLARE @PartitionYearId SMALLINT;
    DECLARE @Message NVARCHAR(2048);

    SELECT @PartitionYearId =
    COALESCE
    (
        (SELECT PartitionYearConfigId FROM [tods].[PartitionYearConfig] WHERE BeginDate <= @pSnapshotDate AND @pSnapshotDate <= EndDate)
        , (SELECT MIN(PartitionYearConfigId) FROM [tods].[PartitionYearConfig])
        , (CAST(YEAR(@pSnapshotDate) AS SMALLINT))
    );

    BEGIN TRY
        BEGIN TRANSACTION
            SET @SnapshotId =
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [Id] = @pId
            );

           -- ERROR CONDITIONS

            -- id does not exist
            IF @SnapshotId IS NULL
                BEGIN
                    SET @Message = FORMATMESSAGE(50015, CAST(@pId AS NVARCHAR(36)));
                    THROW 50015, @Message, 1;
                END;


            -- check if IsLocked
            IF 1 =
            (
                SELECT [IsLocked]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50013, CAST(@pId AS NVARCHAR(36)));
                    THROW 50013, @Message, 1;
                END;


            -- check if IsLockedForProcessing
            IF 1 =
            (
                SELECT [IsLockedForProcessing]
                FROM [tods].[Snapshot]
                WHERE [SnapshotId] = @SnapshotId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50014, CAST(@pId AS NVARCHAR(36)));
                    THROW 50014, @Message, 1;
                END;


            -- snapshot name matches existing one in tods.snapshot table
            IF EXISTS
            (
                SELECT [SnapshotName]
                FROM [tods].[Snapshot]
                WHERE [SnapshotName] = @pSnapshotName
                AND [Id] <> @pId
                GROUP BY [SnapshotName]
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50004, @pSnapshotName);
                    THROW 50004, @Message, 1;
                END;


            -- snapshot date is before begin date
            IF @pSnapshotDate < @pBeginDate
                BEGIN
                    SET @Message = FORMATMESSAGE(50005, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50005, @Message, 1;
                END;


            -- snapshot date is on or after end date
            IF @pSnapshotDate >= @pEndDate
                BEGIN
                    SET @Message = FORMATMESSAGE(50006, CAST(@pSnapshotDate AS NVARCHAR(15)), CAST(@pEndDate AS NVARCHAR(15)));
                    THROW 50006, @Message, 1;
                END;


            -- begin date is in the future
            IF @pBeginDate > GETDATE()
                BEGIN
                    SET @Message = FORMATMESSAGE(50007, CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50007, @Message, 1;
                END;


             -- begin date overlaps another snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] <= @pBeginDate
                    AND @pBeginDate < COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                    AND [Id] <> @pId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50008, CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50008, @Message, 1;
                END;


            -- end date is before begin date
            IF @pBeginDate >= @pEndDate
                BEGIN
                    SET @Message = FORMATMESSAGE(50009, CAST(@pEndDate AS NVARCHAR(15)), CAST(@pBeginDate AS NVARCHAR(15)));
                    THROW 50009, @Message, 1;
                END;


            -- end date overlaps other snapshot
            IF EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE @pEndDate > [EffectiveBeginDate]
                    AND (
                           @pEndDate <= COALESCE([EffectiveEndDate], DATEADD(DAY, 1, [SnapshotDate]))
                           OR
                           (@pBegindate < [EffectiveBeginDate]
                            AND [EffectiveEndDate] IS NULL AND @pEndDate IS NULL)
                        )
                    AND [Id] <> @pId
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
                    THROW 50010, @Message, 1;
                END;


            IF @pEndDate IS NULL AND EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE [EffectiveBeginDate] > @pBeginDate
            )
                BEGIN
                    SET @Message = FORMATMESSAGE(50010, CAST(@pEndDate AS NVARCHAR(15)));
                    THROW 50010, @Message, 1;
                END;


            UPDATE [tods].[Snapshot]
                SET [SnapshotName] = @pSnapshotName
                  , [Description] = @pDescription
                  , [SnapshotDate] = @pSnapshotDate
                  , [EffectiveBeginDate] = @pBeginDate
                  , [EffectiveEndDate] = @pEndDate
                  , [t_PartitionYearId] = @PartitionYearId
            WHERE [Id] = @pId;

            UPDATE [tods].[SnapshotCode] SET [t_PartitionYearId] = @PartitionYearId WHERE [SnapshotId] = @SnapshotId;


            UPDATE [t_extension].[AbsenceEventCategoryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AidTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AnonymizedStudentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AnonymizedStudentAcademicRecordSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AnonymizedStudentAssessmentSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AnonymizedStudentCourseAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AnonymizedStudentCourseTranscriptSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AnonymizedStudentEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[AnonymizedStudentSectionAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ApplicantSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[BackgroundCheckStatusDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[BackgroundCheckTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[BoardCertificationTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CertificationExamTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CourseCourseTranscriptFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CourseStudentAcademicRecordFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CourseStudentAssessmentFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CourseStudentFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CourseSurveyQuestionResponseFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CourseSurveyResponseFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[CourseSurveySectionResponseRatingFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationCourseTranscriptFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationStudentAcademicRecordFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationStudentAssessmentFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationStudentFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationSurveyQuestionResponseFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationSurveyResponseFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EducationOrganizationSurveySectionResponseRatingFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[EnglishLanguageExamDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ExternalCourseTranscriptSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ExternalEducationOrganizationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ExternalStudentAcademicRecordSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[FieldworkTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[LevelOfDegreeAwardedDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[LevelTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[PerformanceMeasureSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[PerformanceMeasureFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[PerformanceMeasureTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[PopulationCategoryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[PopulationSubCategoryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[PreviousCareerDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ProfessionalDevelopmentEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ProfessionalDevelopmentOfferedByDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ProgramGatewayDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ProspectSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ProspectProfessionalDevelopmentEventAttendanceSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[RecruitmentEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[RubricSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[RubricLevelSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[RubricLevelResponseSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[RubricLevelResponseFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[RubricTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SalaryTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SchoolStatusDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SchoolStudentGrowthMeasureSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SectionCourseTranscriptFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SectionStudentAcademicRecordFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SectionStudentAssessmentFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SectionStudentFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SectionSurveyQuestionResponseFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SectionSurveyResponseFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SectionSurveySectionResponseRatingFactsSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffFieldworkAbsenceEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffFieldworkExperienceSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffProfessionalDevelopmentEventAttendanceSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffStudentGrowthMeasureSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffStudentGrowthMeasureCourseAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffStudentGrowthMeasureSectionAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffTeacherPreparationProviderAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StaffTeacherPreparationProviderProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[StudentGrowthTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SurveySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SurveyCategoryDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SurveyQuestionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SurveyQuestionResponseSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SurveyResponseSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SurveySectionSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[SurveySectionResponseRatingSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateAcademicRecordSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateCharacteristicDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateCourseTranscriptSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateFieldworkAbsenceEventSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateFieldworkExperienceSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateProfessionalDevelopmentEventAttendanceSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateStaffAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureCourseAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateStudentGrowthMeasureSectionAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateTeacherPreparationProviderAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherCandidateTeacherPreparationProviderProgramAssociationSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherPreparationProgramTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherPreparationProviderSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TeacherPreparationProviderProgramSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[ThemeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TPPDegreeTypeDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[TPPProgramPathwayDescriptorSnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;

            UPDATE [t_extension].[UniversitySnapshotRecord]
                SET [EffectiveBeginDate] = @pBeginDate
                   , [EffectiveEndDate] = @pEndDate
                WHERE [SnapshotId] = @SnapshotId;


            -- No current snapshot
            IF NOT EXISTS
            (
                SELECT [SnapshotId]
                FROM [tods].[Snapshot]
                WHERE EffectiveEndDate IS NULL
            )
            BEGIN
                MERGE [tods].[AuditLog] AS AL
                    USING
                    (
                        SELECT 80001 AS ErrorNumber
                            , 'The current snapshot was updated or deleted.  There is no current snapshot anymore.' AS ErrorMessage
                            , 'WARN' AS ErrorSeverity
                            , @SprocName AS ErrorSproc
                    ) AS TAL
                        ON AL.[ErrorNumber] = TAL.[ErrorNumber]
                        WHEN NOT MATCHED THEN
                            INSERT
                            (
                                [ErrorNumber]
                                , [ErrorMessage]
                                , [ErrorSeverity]
                                , [ErrorSproc]
                            )
                            VALUES
                            (
                                TAL.[ErrorNumber]
                                , TAL.[ErrorMessage]
                                , TAL.[ErrorSeverity]
                                , @SprocName
                            );
            END
            -- Clear any warnings about no current snapshot if we have a current snapshot now
            ELSE
                DELETE FROM [tods].[AuditLog] WHERE ErrorNumber = 80001;

        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF (XACT_STATE()) <> 0
            BEGIN
                ROLLBACK TRANSACTION;
            END;

        BEGIN TRANSACTION
            INSERT INTO [tods].[AuditLog]
            (
                ErrorNumber
                , ErrorMessage
                , ErrorSeverity
                , SqlErrorSeverity
                , ErrorState
                , ErrorLine
                , ErrorSproc
                , SnapshotId
            )
            SELECT
                (CAST(ERROR_NUMBER() AS VARCHAR(10)))
                , ERROR_MESSAGE()
                , 'ERROR'
                , ERROR_SEVERITY()
                , CAST(ERROR_STATE() AS VARCHAR(10))
                , CAST(ERROR_LINE() AS VARCHAR(10))
                , @SprocName
                , @SnapshotId
        COMMIT TRANSACTION;

        THROW;
    END CATCH;
END;
GO
